
MCU_LESSON_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cf0  08002cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf8  08002cf8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf8  08002cf8  00003cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cfc  08002cfc  00003cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002d00  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002d0c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002d0c  000040b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a022  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001891  00000000  00000000  0000e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0000f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000697  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa9a  00000000  00000000  0001082f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aca5  00000000  00000000  000302c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf9c9  00000000  00000000  0003af6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002208  00000000  00000000  000fa97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000fcb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002c88 	.word	0x08002c88

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002c88 	.word	0x08002c88

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <MX_GPIO_Init+0x44>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000502:	4a0e      	ldr	r2, [pc, #56]	@ (800053c <MX_GPIO_Init+0x44>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <MX_GPIO_Init+0x44>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <MX_GPIO_Init+0x44>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <MX_GPIO_Init+0x44>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_GPIO_Init+0x44>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40021000 	.word	0x40021000

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 f987 	bl	8000856 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f816 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f7ff ffd4 	bl	80004f8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000550:	f000 f8d0 	bl	80006f4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, "test", 4, HAL_MAX_DELAY);
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	2204      	movs	r2, #4
 800055a:	4905      	ldr	r1, [pc, #20]	@ (8000570 <main+0x30>)
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <main+0x34>)
 800055e:	f001 fe67 	bl	8002230 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000566:	f000 f9eb 	bl	8000940 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, "test", 4, HAL_MAX_DELAY);
 800056a:	bf00      	nop
 800056c:	e7f2      	b.n	8000554 <main+0x14>
 800056e:	bf00      	nop
 8000570:	08002ca0 	.word	0x08002ca0
 8000574:	20000028 	.word	0x20000028

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	@ 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	@ 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fb51 	bl	8002c2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059e:	f000 fc61 	bl	8000e64 <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f000 f838 	bl	800061c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005ac:	2310      	movs	r3, #16
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b8:	2360      	movs	r3, #96	@ 0x60
 80005ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	2302      	movs	r3, #2
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c8:	2328      	movs	r3, #40	@ 0x28
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005cc:	2307      	movs	r3, #7
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fc97 	bl	8000f10 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e8:	f000 f818 	bl	800061c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2303      	movs	r3, #3
 80005f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	2104      	movs	r1, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f897 	bl	8001738 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000610:	f000 f804 	bl	800061c <Error_Handler>
  }
}
 8000614:	bf00      	nop
 8000616:	3758      	adds	r7, #88	@ 0x58
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000620:	b672      	cpsid	i
}
 8000622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <Error_Handler+0x8>

08000628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800062e:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <HAL_MspInit+0x44>)
 8000630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000632:	4a0e      	ldr	r2, [pc, #56]	@ (800066c <HAL_MspInit+0x44>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6613      	str	r3, [r2, #96]	@ 0x60
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <HAL_MspInit+0x44>)
 800063c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <HAL_MspInit+0x44>)
 8000648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800064a:	4a08      	ldr	r2, [pc, #32]	@ (800066c <HAL_MspInit+0x44>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000650:	6593      	str	r3, [r2, #88]	@ 0x58
 8000652:	4b06      	ldr	r3, [pc, #24]	@ (800066c <HAL_MspInit+0x44>)
 8000654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40021000 	.word	0x40021000

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <NMI_Handler+0x4>

08000678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <HardFault_Handler+0x4>

08000680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <MemManage_Handler+0x4>

08000688 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <UsageFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr

080006c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c6:	f000 f91b 	bl	8000900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <SystemInit+0x20>)
 80006d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006da:	4a05      	ldr	r2, [pc, #20]	@ (80006f0 <SystemInit+0x20>)
 80006dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_USART1_UART_Init+0x58>)
 80006fa:	4a15      	ldr	r2, [pc, #84]	@ (8000750 <MX_USART1_UART_Init+0x5c>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART1_UART_Init+0x58>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_USART1_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_USART1_UART_Init+0x58>)
 8000738:	f001 fd2c 	bl	8002194 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000742:	f7ff ff6b 	bl	800061c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000028 	.word	0x20000028
 8000750:	40013800 	.word	0x40013800

08000754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a0      	sub	sp, #128	@ 0x80
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	225c      	movs	r2, #92	@ 0x5c
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fa5a 	bl	8002c2e <memset>
  if(uartHandle->Instance==USART1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1f      	ldr	r2, [pc, #124]	@ (80007fc <HAL_UART_MspInit+0xa8>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d137      	bne.n	80007f4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000788:	2300      	movs	r3, #0
 800078a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f9f5 	bl	8001b80 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800079c:	f7ff ff3e 	bl	800061c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a4:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_UART_MspInit+0xac>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80007d0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007e2:	2307      	movs	r3, #7
 80007e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 f9b0 	bl	8000b54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3780      	adds	r7, #128	@ 0x80
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013800 	.word	0x40013800
 8000800:	40021000 	.word	0x40021000

08000804 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000804:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800083c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000808:	f7ff ff62 	bl	80006d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	@ (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	@ (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000832:	f002 fa05 	bl	8002c40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000836:	f7ff fe83 	bl	8000540 <main>

0800083a <LoopForever>:

LoopForever:
    b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800083c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000848:	08002d00 	.word	0x08002d00
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000850:	200000b4 	.word	0x200000b4

08000854 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_IRQHandler>

08000856 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000860:	2003      	movs	r0, #3
 8000862:	f000 f943 	bl	8000aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000866:	200f      	movs	r0, #15
 8000868:	f000 f80e 	bl	8000888 <HAL_InitTick>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000872:	2301      	movs	r3, #1
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	e001      	b.n	800087c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000878:	f7ff fed6 	bl	8000628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800087c:	79fb      	ldrb	r3, [r7, #7]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000890:	2300      	movs	r3, #0
 8000892:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <HAL_InitTick+0x6c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d023      	beq.n	80008e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <HAL_InitTick+0x70>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <HAL_InitTick+0x6c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f941 	bl	8000b3a <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10f      	bne.n	80008de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d809      	bhi.n	80008d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c4:	2200      	movs	r2, #0
 80008c6:	6879      	ldr	r1, [r7, #4]
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f000 f919 	bl	8000b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_InitTick+0x74>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	e007      	b.n	80008e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e004      	b.n	80008e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	e001      	b.n	80008e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000004 	.word	0x20000004

08000900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <HAL_IncTick+0x20>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	461a      	mov	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_IncTick+0x24>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_IncTick+0x24>)
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000008 	.word	0x20000008
 8000924:	200000b0 	.word	0x200000b0

08000928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b03      	ldr	r3, [pc, #12]	@ (800093c <HAL_GetTick+0x14>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	200000b0 	.word	0x200000b0

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff ffee 	bl	8000928 <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffde 	bl	8000928 <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	6039      	str	r1, [r7, #0]
 80009f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	db0a      	blt.n	8000a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <__NVIC_SetPriority+0x4c>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	0112      	lsls	r2, r2, #4
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	440b      	add	r3, r1
 8000a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a14:	e00a      	b.n	8000a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4908      	ldr	r1, [pc, #32]	@ (8000a3c <__NVIC_SetPriority+0x50>)
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	f003 030f 	and.w	r3, r3, #15
 8000a22:	3b04      	subs	r3, #4
 8000a24:	0112      	lsls	r2, r2, #4
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	761a      	strb	r2, [r3, #24]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000e100 	.word	0xe000e100
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b089      	sub	sp, #36	@ 0x24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	f1c3 0307 	rsb	r3, r3, #7
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	bf28      	it	cs
 8000a5e:	2304      	movcs	r3, #4
 8000a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3304      	adds	r3, #4
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d902      	bls.n	8000a70 <NVIC_EncodePriority+0x30>
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3b03      	subs	r3, #3
 8000a6e:	e000      	b.n	8000a72 <NVIC_EncodePriority+0x32>
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	401a      	ands	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a88:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	43d9      	mvns	r1, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	4313      	orrs	r3, r2
         );
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab8:	d301      	bcc.n	8000abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aba:	2301      	movs	r3, #1
 8000abc:	e00f      	b.n	8000ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000abe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac6:	210f      	movs	r1, #15
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f7ff ff8e 	bl	80009ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad6:	4b04      	ldr	r3, [pc, #16]	@ (8000ae8 <SysTick_Config+0x40>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	e000e010 	.word	0xe000e010

08000aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff47 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b086      	sub	sp, #24
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	4603      	mov	r3, r0
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b14:	f7ff ff5c 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	68b9      	ldr	r1, [r7, #8]
 8000b1e:	6978      	ldr	r0, [r7, #20]
 8000b20:	f7ff ff8e 	bl	8000a40 <NVIC_EncodePriority>
 8000b24:	4602      	mov	r2, r0
 8000b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff5d 	bl	80009ec <__NVIC_SetPriority>
}
 8000b32:	bf00      	nop
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffb0 	bl	8000aa8 <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e154      	b.n	8000e0e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8146 	beq.w	8000e08 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <HAL_GPIO_Init+0x40>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d130      	bne.n	8000bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	f003 0201 	and.w	r2, r3, #1
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d017      	beq.n	8000c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d123      	bne.n	8000c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0307 	and.w	r3, r3, #7
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	6939      	ldr	r1, [r7, #16]
 8000c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0203 	and.w	r2, r3, #3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 80a0 	beq.w	8000e08 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	4b58      	ldr	r3, [pc, #352]	@ (8000e2c <HAL_GPIO_Init+0x2d8>)
 8000cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ccc:	4a57      	ldr	r2, [pc, #348]	@ (8000e2c <HAL_GPIO_Init+0x2d8>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cd4:	4b55      	ldr	r3, [pc, #340]	@ (8000e2c <HAL_GPIO_Init+0x2d8>)
 8000cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce0:	4a53      	ldr	r2, [pc, #332]	@ (8000e30 <HAL_GPIO_Init+0x2dc>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d0a:	d019      	beq.n	8000d40 <HAL_GPIO_Init+0x1ec>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <HAL_GPIO_Init+0x2e0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1e8>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a48      	ldr	r2, [pc, #288]	@ (8000e38 <HAL_GPIO_Init+0x2e4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1e4>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a47      	ldr	r2, [pc, #284]	@ (8000e3c <HAL_GPIO_Init+0x2e8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e0>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a46      	ldr	r2, [pc, #280]	@ (8000e40 <HAL_GPIO_Init+0x2ec>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1dc>
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	e008      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d30:	2307      	movs	r3, #7
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d34:	2303      	movs	r3, #3
 8000d36:	e004      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_GPIO_Init+0x1ee>
 8000d40:	2300      	movs	r3, #0
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d52:	4937      	ldr	r1, [pc, #220]	@ (8000e30 <HAL_GPIO_Init+0x2dc>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d60:	4b38      	ldr	r3, [pc, #224]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d84:	4a2f      	ldr	r2, [pc, #188]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dae:	4a25      	ldr	r2, [pc, #148]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000db4:	4b23      	ldr	r3, [pc, #140]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e02:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <HAL_GPIO_Init+0x2f0>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f47f aea3 	bne.w	8000b64 <HAL_GPIO_Init+0x10>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	48000400 	.word	0x48000400
 8000e38:	48000800 	.word	0x48000800
 8000e3c:	48000c00 	.word	0x48000c00
 8000e40:	48001000 	.word	0x48001000
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	@ (8000e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40007000 	.word	0x40007000

08000e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e72:	d130      	bne.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e74:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e80:	d038      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2232      	movs	r2, #50	@ 0x32
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9b      	lsrs	r3, r3, #18
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea8:	e002      	b.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f2      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed0:	d110      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e00f      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee2:	d007      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000eec:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f000 bc02 	b.w	8001728 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f24:	4b96      	ldr	r3, [pc, #600]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 030c 	and.w	r3, r3, #12
 8000f2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f2e:	4b94      	ldr	r3, [pc, #592]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80e4 	beq.w	800110e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d007      	beq.n	8000f5c <HAL_RCC_OscConfig+0x4c>
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	f040 808b 	bne.w	800106a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	f040 8087 	bne.w	800106a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5c:	4b88      	ldr	r3, [pc, #544]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_OscConfig+0x64>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e3d9      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4b81      	ldr	r3, [pc, #516]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0308 	and.w	r3, r3, #8
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d004      	beq.n	8000f8e <HAL_RCC_OscConfig+0x7e>
 8000f84:	4b7e      	ldr	r3, [pc, #504]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f8c:	e005      	b.n	8000f9a <HAL_RCC_OscConfig+0x8a>
 8000f8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d223      	bcs.n	8000fe6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 fd8c 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e3ba      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb2:	4b73      	ldr	r3, [pc, #460]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a72      	ldr	r2, [pc, #456]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b70      	ldr	r3, [pc, #448]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a1b      	ldr	r3, [r3, #32]
 8000fca:	496d      	ldr	r1, [pc, #436]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	4968      	ldr	r1, [pc, #416]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]
 8000fe4:	e025      	b.n	8001032 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe6:	4b66      	ldr	r3, [pc, #408]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a65      	ldr	r2, [pc, #404]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f043 0308 	orr.w	r3, r3, #8
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b63      	ldr	r3, [pc, #396]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4960      	ldr	r1, [pc, #384]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001004:	4b5e      	ldr	r3, [pc, #376]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	495b      	ldr	r1, [pc, #364]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fd4c 	bl	8001ac0 <RCC_SetFlashLatencyFromMSIRange>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e37a      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001032:	f000 fc81 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8001036:	4602      	mov	r2, r0
 8001038:	4b51      	ldr	r3, [pc, #324]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	4950      	ldr	r1, [pc, #320]	@ (8001184 <HAL_RCC_OscConfig+0x274>)
 8001044:	5ccb      	ldrb	r3, [r1, r3]
 8001046:	f003 031f 	and.w	r3, r3, #31
 800104a:	fa22 f303 	lsr.w	r3, r2, r3
 800104e:	4a4e      	ldr	r2, [pc, #312]	@ (8001188 <HAL_RCC_OscConfig+0x278>)
 8001050:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001052:	4b4e      	ldr	r3, [pc, #312]	@ (800118c <HAL_RCC_OscConfig+0x27c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fc16 	bl	8000888 <HAL_InitTick>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d052      	beq.n	800110c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	e35e      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d032      	beq.n	80010d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001072:	4b43      	ldr	r3, [pc, #268]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a42      	ldr	r2, [pc, #264]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800107e:	f7ff fc53 	bl	8000928 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001086:	f7ff fc4f 	bl	8000928 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e347      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001098:	4b39      	ldr	r3, [pc, #228]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a4:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4930      	ldr	r1, [pc, #192]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	492b      	ldr	r1, [pc, #172]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e01a      	b.n	800110e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a28      	ldr	r2, [pc, #160]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 80010de:	f023 0301 	bic.w	r3, r3, #1
 80010e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fc20 	bl	8000928 <HAL_GetTick>
 80010e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010ea:	e008      	b.n	80010fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010ec:	f7ff fc1c 	bl	8000928 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e314      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1f0      	bne.n	80010ec <HAL_RCC_OscConfig+0x1dc>
 800110a:	e000      	b.n	800110e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d073      	beq.n	8001202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b08      	cmp	r3, #8
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x21c>
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b0c      	cmp	r3, #12
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d063      	beq.n	8001200 <HAL_RCC_OscConfig+0x2f0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d15f      	bne.n	8001200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e2f1      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x24c>
 800114e:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e025      	b.n	80011a8 <HAL_RCC_OscConfig+0x298>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001164:	d114      	bne.n	8001190 <HAL_RCC_OscConfig+0x280>
 8001166:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a02      	ldr	r2, [pc, #8]	@ (8001180 <HAL_RCC_OscConfig+0x270>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e013      	b.n	80011a8 <HAL_RCC_OscConfig+0x298>
 8001180:	40021000 	.word	0x40021000
 8001184:	08002ca8 	.word	0x08002ca8
 8001188:	20000000 	.word	0x20000000
 800118c:	20000004 	.word	0x20000004
 8001190:	4ba0      	ldr	r3, [pc, #640]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a9f      	ldr	r2, [pc, #636]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b9d      	ldr	r3, [pc, #628]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a9c      	ldr	r2, [pc, #624]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbba 	bl	8000928 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fbb6 	bl	8000928 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	@ 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e2ae      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ca:	4b92      	ldr	r3, [pc, #584]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2a8>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fba6 	bl	8000928 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fba2 	bl	8000928 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	@ 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e29a      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	4b88      	ldr	r3, [pc, #544]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d0>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d060      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x310>
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d119      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d116      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	4b7c      	ldr	r3, [pc, #496]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x328>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e277      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b76      	ldr	r3, [pc, #472]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	4973      	ldr	r1, [pc, #460]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	e040      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d023      	beq.n	800129e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	4b6f      	ldr	r3, [pc, #444]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a6e      	ldr	r2, [pc, #440]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fb61 	bl	8000928 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fb5d 	bl	8000928 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e255      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127c:	4b65      	ldr	r3, [pc, #404]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b62      	ldr	r3, [pc, #392]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	495f      	ldr	r1, [pc, #380]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e018      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b5d      	ldr	r3, [pc, #372]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb3d 	bl	8000928 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fb39 	bl	8000928 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e231      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c4:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03c      	beq.n	8001356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01c      	beq.n	800131e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fb18 	bl	8000928 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fb14 	bl	8000928 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e20c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130e:	4b41      	ldr	r3, [pc, #260]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001310:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ef      	beq.n	80012fc <HAL_RCC_OscConfig+0x3ec>
 800131c:	e01b      	b.n	8001356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131e:	4b3d      	ldr	r3, [pc, #244]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001324:	4a3b      	ldr	r2, [pc, #236]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff fafb 	bl	8000928 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff faf7 	bl	8000928 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1ef      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	4b32      	ldr	r3, [pc, #200]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ef      	bne.n	8001336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a6 	beq.w	80014b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800137e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138c:	2301      	movs	r3, #1
 800138e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <HAL_RCC_OscConfig+0x508>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d118      	bne.n	80013ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <HAL_RCC_OscConfig+0x508>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <HAL_RCC_OscConfig+0x508>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fabe 	bl	8000928 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff faba 	bl	8000928 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e1b2      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_RCC_OscConfig+0x508>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4d8>
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80013e6:	e029      	b.n	800143c <HAL_RCC_OscConfig+0x52c>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d115      	bne.n	800141c <HAL_RCC_OscConfig+0x50c>
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f6:	4a07      	ldr	r2, [pc, #28]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001400:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001406:	4a03      	ldr	r2, [pc, #12]	@ (8001414 <HAL_RCC_OscConfig+0x504>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x52c>
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000
 8001418:	40007000 	.word	0x40007000
 800141c:	4b9a      	ldr	r3, [pc, #616]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001422:	4a99      	ldr	r2, [pc, #612]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001424:	f023 0301 	bic.w	r3, r3, #1
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800142c:	4b96      	ldr	r3, [pc, #600]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 800142e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001432:	4a95      	ldr	r2, [pc, #596]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001434:	f023 0304 	bic.w	r3, r3, #4
 8001438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d016      	beq.n	8001472 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fa70 	bl	8000928 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fa6c 	bl	8000928 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e162      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001462:	4b89      	ldr	r3, [pc, #548]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ed      	beq.n	800144c <HAL_RCC_OscConfig+0x53c>
 8001470:	e015      	b.n	800149e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff fa59 	bl	8000928 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fa55 	bl	8000928 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e14b      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001490:	4b7d      	ldr	r3, [pc, #500]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1ed      	bne.n	800147a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b78      	ldr	r3, [pc, #480]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	4a77      	ldr	r2, [pc, #476]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03c      	beq.n	8001536 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d01c      	beq.n	80014fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014c4:	4b70      	ldr	r3, [pc, #448]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80014c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014ca:	4a6f      	ldr	r2, [pc, #444]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fa28 	bl	8000928 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014dc:	f7ff fa24 	bl	8000928 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e11c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ee:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80014f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0ef      	beq.n	80014dc <HAL_RCC_OscConfig+0x5cc>
 80014fc:	e01b      	b.n	8001536 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80014fe:	4b62      	ldr	r3, [pc, #392]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001504:	4a60      	ldr	r2, [pc, #384]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff fa0b 	bl	8000928 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001516:	f7ff fa07 	bl	8000928 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e0ff      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001528:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 800152a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ef      	bne.n	8001516 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80f3 	beq.w	8001726 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	2b02      	cmp	r3, #2
 8001546:	f040 80c9 	bne.w	80016dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800154a:	4b4f      	ldr	r3, [pc, #316]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f003 0203 	and.w	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	429a      	cmp	r2, r3
 800155c:	d12c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	3b01      	subs	r3, #1
 800156a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156c:	429a      	cmp	r2, r3
 800156e:	d123      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800157a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157c:	429a      	cmp	r2, r3
 800157e:	d11b      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800158a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d113      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	3b01      	subs	r3, #1
 800159e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d109      	bne.n	80015b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d06b      	beq.n	8001690 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d062      	beq.n	8001684 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015be:	4b32      	ldr	r3, [pc, #200]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0ac      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80015d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015da:	f7ff f9a5 	bl	8000928 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff f9a1 	bl	8000928 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e099      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f4:	4b24      	ldr	r3, [pc, #144]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1f0      	bne.n	80015e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001600:	4b21      	ldr	r3, [pc, #132]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b21      	ldr	r3, [pc, #132]	@ (800168c <HAL_RCC_OscConfig+0x77c>)
 8001606:	4013      	ands	r3, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001610:	3a01      	subs	r2, #1
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800161a:	0212      	lsls	r2, r2, #8
 800161c:	4311      	orrs	r1, r2
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001622:	0852      	lsrs	r2, r2, #1
 8001624:	3a01      	subs	r2, #1
 8001626:	0552      	lsls	r2, r2, #21
 8001628:	4311      	orrs	r1, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800162e:	0852      	lsrs	r2, r2, #1
 8001630:	3a01      	subs	r2, #1
 8001632:	0652      	lsls	r2, r2, #25
 8001634:	4311      	orrs	r1, r2
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800163a:	06d2      	lsls	r2, r2, #27
 800163c:	430a      	orrs	r2, r1
 800163e:	4912      	ldr	r1, [pc, #72]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001640:	4313      	orrs	r3, r2
 8001642:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001644:	4b10      	ldr	r3, [pc, #64]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0f      	ldr	r2, [pc, #60]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 800164a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800164e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001650:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800165a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800165c:	f7ff f964 	bl	8000928 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f960 	bl	8000928 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e058      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <HAL_RCC_OscConfig+0x778>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001682:	e050      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e04f      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
 8001688:	40021000 	.word	0x40021000
 800168c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d144      	bne.n	8001726 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a23      	ldr	r2, [pc, #140]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4a20      	ldr	r2, [pc, #128]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b4:	f7ff f938 	bl	8000928 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f934 	bl	8000928 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e02c      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x7ac>
 80016da:	e024      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d01f      	beq.n	8001722 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 80016e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff f91b 	bl	8000928 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff f917 	bl	8000928 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e00f      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001708:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	4905      	ldr	r1, [pc, #20]	@ (8001730 <HAL_RCC_OscConfig+0x820>)
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_RCC_OscConfig+0x824>)
 800171c:	4013      	ands	r3, r2
 800171e:	60cb      	str	r3, [r1, #12]
 8001720:	e001      	b.n	8001726 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	feeefffc 	.word	0xfeeefffc

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0e7      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b75      	ldr	r3, [pc, #468]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d910      	bls.n	800177c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b72      	ldr	r3, [pc, #456]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 0207 	bic.w	r2, r3, #7
 8001762:	4970      	ldr	r1, [pc, #448]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176a:	4b6e      	ldr	r3, [pc, #440]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	429a      	cmp	r2, r3
 8001776:	d001      	beq.n	800177c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e0cf      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d010      	beq.n	80017aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001794:	429a      	cmp	r2, r3
 8001796:	d908      	bls.n	80017aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b63      	ldr	r3, [pc, #396]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4960      	ldr	r1, [pc, #384]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d04c      	beq.n	8001850 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017be:	4b5a      	ldr	r3, [pc, #360]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d121      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0a6      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	4b54      	ldr	r3, [pc, #336]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e09a      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e08e      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e086      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b46      	ldr	r3, [pc, #280]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4943      	ldr	r1, [pc, #268]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001820:	f7ff f882 	bl	8000928 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff f87e 	bl	8000928 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e06e      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001868:	429a      	cmp	r2, r3
 800186a:	d208      	bcs.n	800187e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	492b      	ldr	r1, [pc, #172]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187e:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	429a      	cmp	r2, r3
 800188a:	d210      	bcs.n	80018ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188c:	4b25      	ldr	r3, [pc, #148]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0207 	bic.w	r2, r3, #7
 8001894:	4923      	ldr	r1, [pc, #140]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189c:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_RCC_ClockConfig+0x1ec>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e036      	b.n	800191c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d008      	beq.n	80018cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4918      	ldr	r1, [pc, #96]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d009      	beq.n	80018ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4910      	ldr	r1, [pc, #64]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018ec:	f000 f824 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001928 <HAL_RCC_ClockConfig+0x1f0>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 030f 	and.w	r3, r3, #15
 80018fc:	490b      	ldr	r1, [pc, #44]	@ (800192c <HAL_RCC_ClockConfig+0x1f4>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_ClockConfig+0x1fc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe ffb9 	bl	8000888 <HAL_InitTick>
 8001916:	4603      	mov	r3, r0
 8001918:	72fb      	strb	r3, [r7, #11]

  return status;
 800191a:	7afb      	ldrb	r3, [r7, #11]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	08002ca8 	.word	0x08002ca8
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001946:	4b3e      	ldr	r3, [pc, #248]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 030c 	and.w	r3, r3, #12
 800194e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001950:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x34>
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d121      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d11e      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800196c:	4b34      	ldr	r3, [pc, #208]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001978:	4b31      	ldr	r3, [pc, #196]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e005      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001988:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	091b      	lsrs	r3, r3, #4
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001994:	4a2b      	ldr	r2, [pc, #172]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e004      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b08      	cmp	r3, #8
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019bc:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80019be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d134      	bne.n	8001a30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0xa6>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d003      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0xac>
 80019dc:	e005      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x110>)
 80019e0:	617b      	str	r3, [r7, #20]
      break;
 80019e2:	e005      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019e4:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x114>)
 80019e6:	617b      	str	r3, [r7, #20]
      break;
 80019e8:	e002      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	617b      	str	r3, [r7, #20]
      break;
 80019ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	3301      	adds	r3, #1
 80019fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019fe:	4b10      	ldr	r3, [pc, #64]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0e5b      	lsrs	r3, r3, #25
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	3301      	adds	r3, #1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a30:	69bb      	ldr	r3, [r7, #24]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	@ 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08002cc0 	.word	0x08002cc0
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b03      	ldr	r3, [pc, #12]	@ (8001a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000000 	.word	0x20000000

08001a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	0a1b      	lsrs	r3, r3, #8
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	4904      	ldr	r1, [pc, #16]	@ (8001a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a7e:	5ccb      	ldrb	r3, [r1, r3]
 8001a80:	f003 031f 	and.w	r3, r3, #31
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	08002cb8 	.word	0x08002cb8

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001a98:	f7ff ffda 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0adb      	lsrs	r3, r3, #11
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4904      	ldr	r1, [pc, #16]	@ (8001abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	08002cb8 	.word	0x08002cb8

08001ac0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ad8:	f7ff f9b6 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001adc:	6178      	str	r0, [r7, #20]
 8001ade:	e014      	b.n	8001b0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae4:	4a24      	ldr	r2, [pc, #144]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001af8:	f7ff f9a6 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001afc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	4a1d      	ldr	r2, [pc, #116]	@ (8001b78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b08:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b10:	d10b      	bne.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b80      	cmp	r3, #128	@ 0x80
 8001b16:	d919      	bls.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001b1c:	d902      	bls.n	8001b24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b1e:	2302      	movs	r3, #2
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e013      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b24:	2301      	movs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	e010      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b80      	cmp	r3, #128	@ 0x80
 8001b2e:	d902      	bls.n	8001b36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b30:	2303      	movs	r3, #3
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	e00a      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b80      	cmp	r3, #128	@ 0x80
 8001b3a:	d102      	bne.n	8001b42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	e004      	b.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b70      	cmp	r3, #112	@ 0x70
 8001b46:	d101      	bne.n	8001b4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b48:	2301      	movs	r3, #1
 8001b4a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 0207 	bic.w	r2, r3, #7
 8001b54:	4909      	ldr	r1, [pc, #36]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b5c:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40022000 	.word	0x40022000

08001b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b88:	2300      	movs	r3, #0
 8001b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d031      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ba4:	d01a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ba6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001baa:	d814      	bhi.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001bb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bb4:	d10f      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a5c      	ldr	r2, [pc, #368]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bc2:	e00c      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f9f0 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bd4:	e003      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8001bda:	e000      	b.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10b      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001be4:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	494e      	ldr	r1, [pc, #312]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001bfa:	e001      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bfc:	7cfb      	ldrb	r3, [r7, #19]
 8001bfe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 809e 	beq.w	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c12:	4b46      	ldr	r3, [pc, #280]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001c22:	2300      	movs	r3, #0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00d      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	4a3f      	ldr	r2, [pc, #252]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c34:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c40:	2301      	movs	r3, #1
 8001c42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c44:	4b3a      	ldr	r3, [pc, #232]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a39      	ldr	r2, [pc, #228]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c50:	f7fe fe6a 	bl	8000928 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c56:	e009      	b.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c58:	f7fe fe66 	bl	8000928 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d902      	bls.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	74fb      	strb	r3, [r7, #19]
        break;
 8001c6a:	e005      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c6c:	4b30      	ldr	r3, [pc, #192]	@ (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ef      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d15a      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01e      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d019      	beq.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c9a:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ca6:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cac:	4a1f      	ldr	r2, [pc, #124]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cc6:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d016      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fe26 	bl	8000928 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe fe22 	bl	8000928 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	74fb      	strb	r3, [r7, #19]
            break;
 8001cf6:	e006      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ec      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001d06:	7cfb      	ldrb	r3, [r7, #19]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10b      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	4904      	ldr	r1, [pc, #16]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001d22:	e009      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	74bb      	strb	r3, [r7, #18]
 8001d28:	e006      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d38:	7c7b      	ldrb	r3, [r7, #17]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d105      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b9b      	ldr	r3, [pc, #620]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a9a      	ldr	r2, [pc, #616]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00a      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d56:	4b95      	ldr	r3, [pc, #596]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5c:	f023 0203 	bic.w	r2, r3, #3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4991      	ldr	r1, [pc, #580]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d78:	4b8c      	ldr	r3, [pc, #560]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	f023 020c 	bic.w	r2, r3, #12
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	4989      	ldr	r1, [pc, #548]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d9a:	4b84      	ldr	r3, [pc, #528]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	4980      	ldr	r1, [pc, #512]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00a      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	4978      	ldr	r1, [pc, #480]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001dde:	4b73      	ldr	r3, [pc, #460]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	496f      	ldr	r1, [pc, #444]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00a      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e00:	4b6a      	ldr	r3, [pc, #424]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4967      	ldr	r1, [pc, #412]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e22:	4b62      	ldr	r3, [pc, #392]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	495e      	ldr	r1, [pc, #376]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e44:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e52:	4956      	ldr	r1, [pc, #344]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e66:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e74:	494d      	ldr	r1, [pc, #308]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d028      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e88:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e96:	4945      	ldr	r1, [pc, #276]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea8:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a3f      	ldr	r2, [pc, #252]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001eb2:	60d3      	str	r3, [r2, #12]
 8001eb4:	e011      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f872 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ed0:	7cfb      	ldrb	r3, [r7, #19]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d028      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eec:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	492d      	ldr	r1, [pc, #180]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f04:	d106      	bne.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f06:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	4a28      	ldr	r2, [pc, #160]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f10:	60d3      	str	r3, [r2, #12]
 8001f12:	e011      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2101      	movs	r1, #1
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f843 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f2e:	7cfb      	ldrb	r3, [r7, #19]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01c      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f52:	4916      	ldr	r1, [pc, #88]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f62:	d10c      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	2102      	movs	r1, #2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f820 	bl	8001fb0 <RCCEx_PLLSAI1_Config>
 8001f70:	4603      	mov	r3, r0
 8001f72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8001f7a:	7cfb      	ldrb	r3, [r7, #19]
 8001f7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f90:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f98:	4904      	ldr	r1, [pc, #16]	@ (8001fac <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fbe:	4b74      	ldr	r3, [pc, #464]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d018      	beq.n	8001ffc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001fca:	4b71      	ldr	r3, [pc, #452]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d10d      	bne.n	8001ff6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
       ||
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fe2:	4b6b      	ldr	r3, [pc, #428]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
       ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d047      	beq.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
 8001ffa:	e044      	b.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d018      	beq.n	8002036 <RCCEx_PLLSAI1_Config+0x86>
 8002004:	2b03      	cmp	r3, #3
 8002006:	d825      	bhi.n	8002054 <RCCEx_PLLSAI1_Config+0xa4>
 8002008:	2b01      	cmp	r3, #1
 800200a:	d002      	beq.n	8002012 <RCCEx_PLLSAI1_Config+0x62>
 800200c:	2b02      	cmp	r3, #2
 800200e:	d009      	beq.n	8002024 <RCCEx_PLLSAI1_Config+0x74>
 8002010:	e020      	b.n	8002054 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002012:	4b5f      	ldr	r3, [pc, #380]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11d      	bne.n	800205a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002022:	e01a      	b.n	800205a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002024:	4b5a      	ldr	r3, [pc, #360]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	d116      	bne.n	800205e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002034:	e013      	b.n	800205e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002036:	4b56      	ldr	r3, [pc, #344]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002042:	4b53      	ldr	r3, [pc, #332]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002052:	e006      	b.n	8002062 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      break;
 8002058:	e004      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205a:	bf00      	nop
 800205c:	e002      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800205e:	bf00      	nop
 8002060:	e000      	b.n	8002064 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002062:	bf00      	nop
    }

    if(status == HAL_OK)
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10d      	bne.n	8002086 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800206a:	4b49      	ldr	r3, [pc, #292]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	430b      	orrs	r3, r1
 8002080:	4943      	ldr	r1, [pc, #268]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002082:	4313      	orrs	r3, r2
 8002084:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d17c      	bne.n	8002186 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800208c:	4b40      	ldr	r3, [pc, #256]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3f      	ldr	r2, [pc, #252]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002092:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002098:	f7fe fc46 	bl	8000928 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800209e:	e009      	b.n	80020b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020a0:	f7fe fc42 	bl	8000928 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d902      	bls.n	80020b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	73fb      	strb	r3, [r7, #15]
        break;
 80020b2:	e005      	b.n	80020c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80020b4:	4b36      	ldr	r3, [pc, #216]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ef      	bne.n	80020a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d15f      	bne.n	8002186 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d110      	bne.n	80020ee <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020cc:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80020d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6892      	ldr	r2, [r2, #8]
 80020dc:	0211      	lsls	r1, r2, #8
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	06d2      	lsls	r2, r2, #27
 80020e4:	430a      	orrs	r2, r1
 80020e6:	492a      	ldr	r1, [pc, #168]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	610b      	str	r3, [r1, #16]
 80020ec:	e027      	b.n	800213e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d112      	bne.n	800211a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80020f4:	4b26      	ldr	r3, [pc, #152]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80020fc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6892      	ldr	r2, [r2, #8]
 8002104:	0211      	lsls	r1, r2, #8
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6912      	ldr	r2, [r2, #16]
 800210a:	0852      	lsrs	r2, r2, #1
 800210c:	3a01      	subs	r2, #1
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	430a      	orrs	r2, r1
 8002112:	491f      	ldr	r1, [pc, #124]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002114:	4313      	orrs	r3, r2
 8002116:	610b      	str	r3, [r1, #16]
 8002118:	e011      	b.n	800213e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002122:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6892      	ldr	r2, [r2, #8]
 800212a:	0211      	lsls	r1, r2, #8
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6952      	ldr	r2, [r2, #20]
 8002130:	0852      	lsrs	r2, r2, #1
 8002132:	3a01      	subs	r2, #1
 8002134:	0652      	lsls	r2, r2, #25
 8002136:	430a      	orrs	r2, r1
 8002138:	4915      	ldr	r1, [pc, #84]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 800213a:	4313      	orrs	r3, r2
 800213c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002144:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002148:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214a:	f7fe fbed 	bl	8000928 <HAL_GetTick>
 800214e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002150:	e009      	b.n	8002166 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002152:	f7fe fbe9 	bl	8000928 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d902      	bls.n	8002166 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	73fb      	strb	r3, [r7, #15]
          break;
 8002164:	e005      	b.n	8002172 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002166:	4b0a      	ldr	r3, [pc, #40]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0ef      	beq.n	8002152 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	4903      	ldr	r1, [pc, #12]	@ (8002190 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002182:	4313      	orrs	r3, r2
 8002184:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e040      	b.n	8002228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d106      	bne.n	80021bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe facc 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2224      	movs	r2, #36	@ 0x24
 80021c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0201 	bic.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb0c 	bl	80027f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f8af 	bl	8002344 <UART_SetConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e01b      	b.n	8002228 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800220e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fb8b 	bl	800293c <UART_CheckIdleState>
 8002226:	4603      	mov	r3, r0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	@ 0x28
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002244:	2b20      	cmp	r3, #32
 8002246:	d177      	bne.n	8002338 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Transmit+0x24>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e070      	b.n	800233a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2221      	movs	r2, #33	@ 0x21
 8002264:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fb5f 	bl	8000928 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002284:	d108      	bne.n	8002298 <HAL_UART_Transmit+0x68>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d104      	bne.n	8002298 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	e003      	b.n	80022a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022a0:	e02f      	b.n	8002302 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2180      	movs	r1, #128	@ 0x80
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fbed 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e03b      	b.n	800233a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d10b      	bne.n	80022e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	881a      	ldrh	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	b292      	uxth	r2, r2
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	3302      	adds	r3, #2
 80022dc:	61bb      	str	r3, [r7, #24]
 80022de:	e007      	b.n	80022f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1c9      	bne.n	80022a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2200      	movs	r2, #0
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fbb7 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e005      	b.n	800233a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002338:	2302      	movs	r3, #2
  }
}
 800233a:	4618      	mov	r0, r3
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b08a      	sub	sp, #40	@ 0x28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	431a      	orrs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	4313      	orrs	r3, r2
 800236a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	4b9e      	ldr	r3, [pc, #632]	@ (80025ec <UART_SetConfig+0x2a8>)
 8002374:	4013      	ands	r3, r2
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800237c:	430b      	orrs	r3, r1
 800237e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a93      	ldr	r2, [pc, #588]	@ (80025f0 <UART_SetConfig+0x2ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d004      	beq.n	80023b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ac:	4313      	orrs	r3, r2
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8a      	ldr	r2, [pc, #552]	@ (80025f4 <UART_SetConfig+0x2b0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d126      	bne.n	800241c <UART_SetConfig+0xd8>
 80023ce:	4b8a      	ldr	r3, [pc, #552]	@ (80025f8 <UART_SetConfig+0x2b4>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d81b      	bhi.n	8002414 <UART_SetConfig+0xd0>
 80023dc:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <UART_SetConfig+0xa0>)
 80023de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e2:	bf00      	nop
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002405 	.word	0x08002405
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	0800240d 	.word	0x0800240d
 80023f4:	2301      	movs	r3, #1
 80023f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80023fa:	e0ab      	b.n	8002554 <UART_SetConfig+0x210>
 80023fc:	2302      	movs	r3, #2
 80023fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002402:	e0a7      	b.n	8002554 <UART_SetConfig+0x210>
 8002404:	2304      	movs	r3, #4
 8002406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800240a:	e0a3      	b.n	8002554 <UART_SetConfig+0x210>
 800240c:	2308      	movs	r3, #8
 800240e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002412:	e09f      	b.n	8002554 <UART_SetConfig+0x210>
 8002414:	2310      	movs	r3, #16
 8002416:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800241a:	e09b      	b.n	8002554 <UART_SetConfig+0x210>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a76      	ldr	r2, [pc, #472]	@ (80025fc <UART_SetConfig+0x2b8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d138      	bne.n	8002498 <UART_SetConfig+0x154>
 8002426:	4b74      	ldr	r3, [pc, #464]	@ (80025f8 <UART_SetConfig+0x2b4>)
 8002428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d82d      	bhi.n	8002490 <UART_SetConfig+0x14c>
 8002434:	a201      	add	r2, pc, #4	@ (adr r2, 800243c <UART_SetConfig+0xf8>)
 8002436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243a:	bf00      	nop
 800243c:	08002471 	.word	0x08002471
 8002440:	08002491 	.word	0x08002491
 8002444:	08002491 	.word	0x08002491
 8002448:	08002491 	.word	0x08002491
 800244c:	08002481 	.word	0x08002481
 8002450:	08002491 	.word	0x08002491
 8002454:	08002491 	.word	0x08002491
 8002458:	08002491 	.word	0x08002491
 800245c:	08002479 	.word	0x08002479
 8002460:	08002491 	.word	0x08002491
 8002464:	08002491 	.word	0x08002491
 8002468:	08002491 	.word	0x08002491
 800246c:	08002489 	.word	0x08002489
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002476:	e06d      	b.n	8002554 <UART_SetConfig+0x210>
 8002478:	2302      	movs	r3, #2
 800247a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800247e:	e069      	b.n	8002554 <UART_SetConfig+0x210>
 8002480:	2304      	movs	r3, #4
 8002482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002486:	e065      	b.n	8002554 <UART_SetConfig+0x210>
 8002488:	2308      	movs	r3, #8
 800248a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800248e:	e061      	b.n	8002554 <UART_SetConfig+0x210>
 8002490:	2310      	movs	r3, #16
 8002492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002496:	e05d      	b.n	8002554 <UART_SetConfig+0x210>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a58      	ldr	r2, [pc, #352]	@ (8002600 <UART_SetConfig+0x2bc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d125      	bne.n	80024ee <UART_SetConfig+0x1aa>
 80024a2:	4b55      	ldr	r3, [pc, #340]	@ (80025f8 <UART_SetConfig+0x2b4>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80024ac:	2b30      	cmp	r3, #48	@ 0x30
 80024ae:	d016      	beq.n	80024de <UART_SetConfig+0x19a>
 80024b0:	2b30      	cmp	r3, #48	@ 0x30
 80024b2:	d818      	bhi.n	80024e6 <UART_SetConfig+0x1a2>
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d00a      	beq.n	80024ce <UART_SetConfig+0x18a>
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d814      	bhi.n	80024e6 <UART_SetConfig+0x1a2>
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <UART_SetConfig+0x182>
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d008      	beq.n	80024d6 <UART_SetConfig+0x192>
 80024c4:	e00f      	b.n	80024e6 <UART_SetConfig+0x1a2>
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024cc:	e042      	b.n	8002554 <UART_SetConfig+0x210>
 80024ce:	2302      	movs	r3, #2
 80024d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024d4:	e03e      	b.n	8002554 <UART_SetConfig+0x210>
 80024d6:	2304      	movs	r3, #4
 80024d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024dc:	e03a      	b.n	8002554 <UART_SetConfig+0x210>
 80024de:	2308      	movs	r3, #8
 80024e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024e4:	e036      	b.n	8002554 <UART_SetConfig+0x210>
 80024e6:	2310      	movs	r3, #16
 80024e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80024ec:	e032      	b.n	8002554 <UART_SetConfig+0x210>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a3f      	ldr	r2, [pc, #252]	@ (80025f0 <UART_SetConfig+0x2ac>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d12a      	bne.n	800254e <UART_SetConfig+0x20a>
 80024f8:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <UART_SetConfig+0x2b4>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002502:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002506:	d01a      	beq.n	800253e <UART_SetConfig+0x1fa>
 8002508:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800250c:	d81b      	bhi.n	8002546 <UART_SetConfig+0x202>
 800250e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002512:	d00c      	beq.n	800252e <UART_SetConfig+0x1ea>
 8002514:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002518:	d815      	bhi.n	8002546 <UART_SetConfig+0x202>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <UART_SetConfig+0x1e2>
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002522:	d008      	beq.n	8002536 <UART_SetConfig+0x1f2>
 8002524:	e00f      	b.n	8002546 <UART_SetConfig+0x202>
 8002526:	2300      	movs	r3, #0
 8002528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800252c:	e012      	b.n	8002554 <UART_SetConfig+0x210>
 800252e:	2302      	movs	r3, #2
 8002530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002534:	e00e      	b.n	8002554 <UART_SetConfig+0x210>
 8002536:	2304      	movs	r3, #4
 8002538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800253c:	e00a      	b.n	8002554 <UART_SetConfig+0x210>
 800253e:	2308      	movs	r3, #8
 8002540:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002544:	e006      	b.n	8002554 <UART_SetConfig+0x210>
 8002546:	2310      	movs	r3, #16
 8002548:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800254c:	e002      	b.n	8002554 <UART_SetConfig+0x210>
 800254e:	2310      	movs	r3, #16
 8002550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a25      	ldr	r2, [pc, #148]	@ (80025f0 <UART_SetConfig+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 808a 	bne.w	8002674 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002560:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002564:	2b08      	cmp	r3, #8
 8002566:	d824      	bhi.n	80025b2 <UART_SetConfig+0x26e>
 8002568:	a201      	add	r2, pc, #4	@ (adr r2, 8002570 <UART_SetConfig+0x22c>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002595 	.word	0x08002595
 8002574:	080025b3 	.word	0x080025b3
 8002578:	0800259d 	.word	0x0800259d
 800257c:	080025b3 	.word	0x080025b3
 8002580:	080025a3 	.word	0x080025a3
 8002584:	080025b3 	.word	0x080025b3
 8002588:	080025b3 	.word	0x080025b3
 800258c:	080025b3 	.word	0x080025b3
 8002590:	080025ab 	.word	0x080025ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002594:	f7ff fa68 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8002598:	61f8      	str	r0, [r7, #28]
        break;
 800259a:	e010      	b.n	80025be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <UART_SetConfig+0x2c0>)
 800259e:	61fb      	str	r3, [r7, #28]
        break;
 80025a0:	e00d      	b.n	80025be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025a2:	f7ff f9c9 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80025a6:	61f8      	str	r0, [r7, #28]
        break;
 80025a8:	e009      	b.n	80025be <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025ae:	61fb      	str	r3, [r7, #28]
        break;
 80025b0:	e005      	b.n	80025be <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80025bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 8109 	beq.w	80027d8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d305      	bcc.n	80025e2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d912      	bls.n	8002608 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80025e8:	e0f6      	b.n	80027d8 <UART_SetConfig+0x494>
 80025ea:	bf00      	nop
 80025ec:	efff69f3 	.word	0xefff69f3
 80025f0:	40008000 	.word	0x40008000
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40004400 	.word	0x40004400
 8002600:	40004800 	.word	0x40004800
 8002604:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2200      	movs	r2, #0
 800260c:	461c      	mov	r4, r3
 800260e:	4615      	mov	r5, r2
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	022b      	lsls	r3, r5, #8
 800261a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800261e:	0222      	lsls	r2, r4, #8
 8002620:	68f9      	ldr	r1, [r7, #12]
 8002622:	6849      	ldr	r1, [r1, #4]
 8002624:	0849      	lsrs	r1, r1, #1
 8002626:	2000      	movs	r0, #0
 8002628:	4688      	mov	r8, r1
 800262a:	4681      	mov	r9, r0
 800262c:	eb12 0a08 	adds.w	sl, r2, r8
 8002630:	eb43 0b09 	adc.w	fp, r3, r9
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	603b      	str	r3, [r7, #0]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002642:	4650      	mov	r0, sl
 8002644:	4659      	mov	r1, fp
 8002646:	f7fd fdc1 	bl	80001cc <__aeabi_uldivmod>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4613      	mov	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002658:	d308      	bcc.n	800266c <UART_SetConfig+0x328>
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002660:	d204      	bcs.n	800266c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	e0b5      	b.n	80027d8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002672:	e0b1      	b.n	80027d8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800267c:	d15d      	bne.n	800273a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800267e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002682:	2b08      	cmp	r3, #8
 8002684:	d827      	bhi.n	80026d6 <UART_SetConfig+0x392>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <UART_SetConfig+0x348>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	080026b1 	.word	0x080026b1
 8002690:	080026b9 	.word	0x080026b9
 8002694:	080026c1 	.word	0x080026c1
 8002698:	080026d7 	.word	0x080026d7
 800269c:	080026c7 	.word	0x080026c7
 80026a0:	080026d7 	.word	0x080026d7
 80026a4:	080026d7 	.word	0x080026d7
 80026a8:	080026d7 	.word	0x080026d7
 80026ac:	080026cf 	.word	0x080026cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026b0:	f7ff f9da 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 80026b4:	61f8      	str	r0, [r7, #28]
        break;
 80026b6:	e014      	b.n	80026e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026b8:	f7ff f9ec 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 80026bc:	61f8      	str	r0, [r7, #28]
        break;
 80026be:	e010      	b.n	80026e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026c0:	4b4c      	ldr	r3, [pc, #304]	@ (80027f4 <UART_SetConfig+0x4b0>)
 80026c2:	61fb      	str	r3, [r7, #28]
        break;
 80026c4:	e00d      	b.n	80026e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026c6:	f7ff f937 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80026ca:	61f8      	str	r0, [r7, #28]
        break;
 80026cc:	e009      	b.n	80026e2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026d2:	61fb      	str	r3, [r7, #28]
        break;
 80026d4:	e005      	b.n	80026e2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80026e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d077      	beq.n	80027d8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005a      	lsls	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	085b      	lsrs	r3, r3, #1
 80026f2:	441a      	add	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b0f      	cmp	r3, #15
 8002702:	d916      	bls.n	8002732 <UART_SetConfig+0x3ee>
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270a:	d212      	bcs.n	8002732 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f023 030f 	bic.w	r3, r3, #15
 8002714:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	085b      	lsrs	r3, r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	b29a      	uxth	r2, r3
 8002722:	8afb      	ldrh	r3, [r7, #22]
 8002724:	4313      	orrs	r3, r2
 8002726:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	8afa      	ldrh	r2, [r7, #22]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	e052      	b.n	80027d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002738:	e04e      	b.n	80027d8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800273a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800273e:	2b08      	cmp	r3, #8
 8002740:	d827      	bhi.n	8002792 <UART_SetConfig+0x44e>
 8002742:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <UART_SetConfig+0x404>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	0800276d 	.word	0x0800276d
 800274c:	08002775 	.word	0x08002775
 8002750:	0800277d 	.word	0x0800277d
 8002754:	08002793 	.word	0x08002793
 8002758:	08002783 	.word	0x08002783
 800275c:	08002793 	.word	0x08002793
 8002760:	08002793 	.word	0x08002793
 8002764:	08002793 	.word	0x08002793
 8002768:	0800278b 	.word	0x0800278b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800276c:	f7ff f97c 	bl	8001a68 <HAL_RCC_GetPCLK1Freq>
 8002770:	61f8      	str	r0, [r7, #28]
        break;
 8002772:	e014      	b.n	800279e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002774:	f7ff f98e 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002778:	61f8      	str	r0, [r7, #28]
        break;
 800277a:	e010      	b.n	800279e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <UART_SetConfig+0x4b0>)
 800277e:	61fb      	str	r3, [r7, #28]
        break;
 8002780:	e00d      	b.n	800279e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002782:	f7ff f8d9 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 8002786:	61f8      	str	r0, [r7, #28]
        break;
 8002788:	e009      	b.n	800279e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800278a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800278e:	61fb      	str	r3, [r7, #28]
        break;
 8002790:	e005      	b.n	800279e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800279c:	bf00      	nop
    }

    if (pclk != 0U)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d019      	beq.n	80027d8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	085a      	lsrs	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	441a      	add	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2b0f      	cmp	r3, #15
 80027bc:	d909      	bls.n	80027d2 <UART_SetConfig+0x48e>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d205      	bcs.n	80027d2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60da      	str	r2, [r3, #12]
 80027d0:	e002      	b.n	80027d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80027e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3728      	adds	r7, #40	@ 0x28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	00f42400 	.word	0x00f42400

080027f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01a      	beq.n	800290e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028f6:	d10a      	bne.n	800290e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	605a      	str	r2, [r3, #4]
  }
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b098      	sub	sp, #96	@ 0x60
 8002940:	af02      	add	r7, sp, #8
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800294c:	f7fd ffec 	bl	8000928 <HAL_GetTick>
 8002950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b08      	cmp	r3, #8
 800295e:	d12e      	bne.n	80029be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f88c 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d021      	beq.n	80029be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800298e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
 800299a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800299e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e6      	bne.n	800297a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e062      	b.n	8002a84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d149      	bne.n	8002a60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029d4:	2200      	movs	r2, #0
 80029d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f856 	bl	8002a8c <UART_WaitOnFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03c      	beq.n	8002a60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	e853 3f00 	ldrex	r3, [r3]
 80029f2:	623b      	str	r3, [r7, #32]
   return(result);
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a0c:	e841 2300 	strex	r3, r2, [r1]
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1e6      	bne.n	80029e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3308      	adds	r3, #8
 8002a36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a38:	61fa      	str	r2, [r7, #28]
 8002a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	617b      	str	r3, [r7, #20]
   return(result);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e011      	b.n	8002a84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3758      	adds	r7, #88	@ 0x58
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9c:	e04f      	b.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa4:	d04b      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa6:	f7fd ff3f 	bl	8000928 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d302      	bcc.n	8002abc <UART_WaitOnFlagUntilTimeout+0x30>
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e04e      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d037      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b80      	cmp	r3, #128	@ 0x80
 8002ad2:	d034      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b40      	cmp	r3, #64	@ 0x40
 8002ad8:	d031      	beq.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d110      	bne.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2208      	movs	r2, #8
 8002aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f838 	bl	8002b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2208      	movs	r2, #8
 8002afa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e029      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b18:	d111      	bne.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f81e 	bl	8002b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e00f      	b.n	8002b5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69da      	ldr	r2, [r3, #28]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4013      	ands	r3, r2
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	bf0c      	ite	eq
 8002b4e:	2301      	moveq	r3, #1
 8002b50:	2300      	movne	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d0a0      	beq.n	8002a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b095      	sub	sp, #84	@ 0x54
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e6      	bne.n	8002b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002bc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d118      	bne.n	8002c0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	e853 3f00 	ldrex	r3, [r3]
 8002be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f023 0310 	bic.w	r3, r3, #16
 8002bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfe:	6979      	ldr	r1, [r7, #20]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	613b      	str	r3, [r7, #16]
   return(result);
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e6      	bne.n	8002bdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2220      	movs	r2, #32
 8002c12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002c22:	bf00      	nop
 8002c24:	3754      	adds	r7, #84	@ 0x54
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <memset>:
 8002c2e:	4402      	add	r2, r0
 8002c30:	4603      	mov	r3, r0
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d100      	bne.n	8002c38 <memset+0xa>
 8002c36:	4770      	bx	lr
 8002c38:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3c:	e7f9      	b.n	8002c32 <memset+0x4>
	...

08002c40 <__libc_init_array>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	4d0d      	ldr	r5, [pc, #52]	@ (8002c78 <__libc_init_array+0x38>)
 8002c44:	4c0d      	ldr	r4, [pc, #52]	@ (8002c7c <__libc_init_array+0x3c>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	42a6      	cmp	r6, r4
 8002c4e:	d109      	bne.n	8002c64 <__libc_init_array+0x24>
 8002c50:	4d0b      	ldr	r5, [pc, #44]	@ (8002c80 <__libc_init_array+0x40>)
 8002c52:	4c0c      	ldr	r4, [pc, #48]	@ (8002c84 <__libc_init_array+0x44>)
 8002c54:	f000 f818 	bl	8002c88 <_init>
 8002c58:	1b64      	subs	r4, r4, r5
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	42a6      	cmp	r6, r4
 8002c60:	d105      	bne.n	8002c6e <__libc_init_array+0x2e>
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c68:	4798      	blx	r3
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7ee      	b.n	8002c4c <__libc_init_array+0xc>
 8002c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c72:	4798      	blx	r3
 8002c74:	3601      	adds	r6, #1
 8002c76:	e7f2      	b.n	8002c5e <__libc_init_array+0x1e>
 8002c78:	08002cf8 	.word	0x08002cf8
 8002c7c:	08002cf8 	.word	0x08002cf8
 8002c80:	08002cf8 	.word	0x08002cf8
 8002c84:	08002cfc 	.word	0x08002cfc

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
