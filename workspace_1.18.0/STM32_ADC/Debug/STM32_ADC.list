
STM32_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  080084c8  080084c8  000094c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f34  08008f34  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f34  08008f34  00009f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f3c  08008f3c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f3c  08008f3c  00009f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f40  08008f40  00009f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f44  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  200001d4  08009118  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08009118  0000a850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bab  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000220d  00000000  00000000  00013da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00015fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e5  00000000  00000000  00016a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019010  00000000  00000000  0001720d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8c2  00000000  00000000  0003021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d6a  00000000  00000000  0003eadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8849  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000c888c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cc630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080084b0 	.word	0x080084b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080084b0 	.word	0x080084b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <MX_ADC1_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000bfe:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c12:	f000 ff99 	bl	8001b48 <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 f9b5 	bl	8000f8a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c20:	2305      	movs	r3, #5
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_ADC1_Init+0x74>)
 8000c32:	f001 fa21 	bl	8002078 <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c3c:	f000 f9a5 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001f0 	.word	0x200001f0
 8000c4c:	40012400 	.word	0x40012400

08000c50 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_ADC_MspInit+0x6c>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d121      	bne.n	8000cb4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6193      	str	r3, [r2, #24]
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <HAL_ADC_MspInit+0x70>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	4619      	mov	r1, r3
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <HAL_ADC_MspInit+0x74>)
 8000cb0:	f001 fd08 	bl	80026c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40012400 	.word	0x40012400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40010800 	.word	0x40010800

08000cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	4a13      	ldr	r2, [pc, #76]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6193      	str	r3, [r2, #24]
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	6193      	str	r3, [r2, #24]
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <MX_GPIO_Init+0x58>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

}
 8000d16:	bf00      	nop
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	40021000 	.word	0x40021000

08000d24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d2a:	4a13      	ldr	r2, [pc, #76]	@ (8000d78 <MX_I2C1_Init+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d2e:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d30:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <MX_I2C1_Init+0x58>)
 8000d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d42:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d54:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d60:	4804      	ldr	r0, [pc, #16]	@ (8000d74 <MX_I2C1_Init+0x50>)
 8000d62:	f001 fe33 	bl	80029cc <HAL_I2C_Init>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d6c:	f000 f90d 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000220 	.word	0x20000220
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	00061a80 	.word	0x00061a80

08000d80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a15      	ldr	r2, [pc, #84]	@ (8000df0 <HAL_I2C_MspInit+0x70>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d123      	bne.n	8000de8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a13      	ldr	r2, [pc, #76]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000da6:	f043 0308 	orr.w	r3, r3, #8
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0308 	and.w	r3, r3, #8
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db8:	23c0      	movs	r3, #192	@ 0xc0
 8000dba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbc:	2312      	movs	r3, #18
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <HAL_I2C_MspInit+0x78>)
 8000dcc:	f001 fc7a 	bl	80026c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd2:	69db      	ldr	r3, [r3, #28]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dd6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dda:	61d3      	str	r3, [r2, #28]
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_I2C_MspInit+0x74>)
 8000dde:	69db      	ldr	r3, [r3, #28]
 8000de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000de8:	bf00      	nop
 8000dea:	3720      	adds	r7, #32
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40005400 	.word	0x40005400
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	00000000 	.word	0x00000000

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fe19 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f863 	bl	8000ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f7ff ff5b 	bl	8000cc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e12:	f7ff ff87 	bl	8000d24 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e16:	f7ff fedd 	bl	8000bd4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    HAL_Delay(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f000 fe70 	bl	8001b00 <HAL_Delay>
    OLED_Init();
 8000e20:	f000 f8e2 	bl	8000fe8 <OLED_Init>
    OLED_Startup();
 8000e24:	f000 fc95 	bl	8001752 <OLED_Startup>

    uint32_t adcValue=0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    double adcVoltage=0.0;
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    char message[30];

    HAL_ADCEx_Calibration_Start(&hadc1);
 8000e38:	4823      	ldr	r0, [pc, #140]	@ (8000ec8 <main+0xc8>)
 8000e3a:	f001 fab1 	bl	80023a0 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(&hadc1);
 8000e3e:	4822      	ldr	r0, [pc, #136]	@ (8000ec8 <main+0xc8>)
 8000e40:	f000 ff5a 	bl	8001cf8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	481f      	ldr	r0, [pc, #124]	@ (8000ec8 <main+0xc8>)
 8000e4a:	f001 f803 	bl	8001e54 <HAL_ADC_PollForConversion>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


      adcValue= HAL_ADC_GetValue(&hadc1);
 8000e4e:	481e      	ldr	r0, [pc, #120]	@ (8000ec8 <main+0xc8>)
 8000e50:	f001 f906 	bl	8002060 <HAL_ADC_GetValue>
 8000e54:	62f8      	str	r0, [r7, #44]	@ 0x2c
      adcVoltage=(adcValue/4095.0)*3.3;
 8000e56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e58:	f7ff fac4 	bl	80003e4 <__aeabi_ui2d>
 8000e5c:	a316      	add	r3, pc, #88	@ (adr r3, 8000eb8 <main+0xb8>)
 8000e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e62:	f7ff fc63 	bl	800072c <__aeabi_ddiv>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	a314      	add	r3, pc, #80	@ (adr r3, 8000ec0 <main+0xc0>)
 8000e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e74:	f7ff fb30 	bl	80004d8 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	e9c7 2308 	strd	r2, r3, [r7, #32]

      sprintf(message,"ADC:%d %.2fV",adcValue,adcVoltage);
 8000e80:	4638      	mov	r0, r7
 8000e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e86:	e9cd 2300 	strd	r2, r3, [sp]
 8000e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e8c:	490f      	ldr	r1, [pc, #60]	@ (8000ecc <main+0xcc>)
 8000e8e:	f003 fedb 	bl	8004c48 <siprintf>
      OLED_NewFrame();
 8000e92:	f000 f8ff 	bl	8001094 <OLED_NewFrame>
      OLED_PrintASCIIString(0,0,message,&afont16x8,OLED_COLOR_NORMAL);
 8000e96:	463a      	mov	r2, r7
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <main+0xd0>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 fc2f 	bl	8001704 <OLED_PrintASCIIString>
      OLED_ShowFrame();
 8000ea6:	f000 f901 	bl	80010ac <OLED_ShowFrame>
      HAL_Delay(500);
 8000eaa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000eae:	f000 fe27 	bl	8001b00 <HAL_Delay>
      adcValue= HAL_ADC_GetValue(&hadc1);
 8000eb2:	bf00      	nop
 8000eb4:	e7cb      	b.n	8000e4e <main+0x4e>
 8000eb6:	bf00      	nop
 8000eb8:	00000000 	.word	0x00000000
 8000ebc:	40affe00 	.word	0x40affe00
 8000ec0:	66666666 	.word	0x66666666
 8000ec4:	400a6666 	.word	0x400a6666
 8000ec8:	200001f0 	.word	0x200001f0
 8000ecc:	080084c8 	.word	0x080084c8
 8000ed0:	08008ac8 	.word	0x08008ac8

08000ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b094      	sub	sp, #80	@ 0x50
 8000ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ede:	2228      	movs	r2, #40	@ 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 ff15 	bl	8004d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f12:	2301      	movs	r3, #1
 8000f14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f20:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 f9ea 	bl	8003304 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f36:	f000 f828 	bl	8000f8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f002 fc56 	bl	8003808 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f62:	f000 f812 	bl	8000f8a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f66:	2302      	movs	r3, #2
 8000f68:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fdd6 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f7e:	f000 f804 	bl	8000f8a <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3750      	adds	r7, #80	@ 0x50
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8e:	b672      	cpsid	i
}
 8000f90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f92:	bf00      	nop
 8000f94:	e7fd      	b.n	8000f92 <Error_Handler+0x8>
	...

08000f98 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	9200      	str	r2, [sp, #0]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	217a      	movs	r1, #122	@ 0x7a
 8000fb2:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <OLED_Send+0x28>)
 8000fb4:	f001 fe4e 	bl	8002c54 <HAL_I2C_Master_Transmit>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000220 	.word	0x20000220

08000fc4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <OLED_SendCmd+0x20>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <OLED_SendCmd+0x20>)
 8000fd8:	f7ff ffde 	bl	8000f98 <OLED_Send>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000674 	.word	0x20000674

08000fe8 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000fec:	20ae      	movs	r0, #174	@ 0xae
 8000fee:	f7ff ffe9 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	f7ff ffe6 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8000ff8:	2010      	movs	r0, #16
 8000ffa:	f7ff ffe3 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 8000ffe:	2040      	movs	r0, #64	@ 0x40
 8001000:	f7ff ffe0 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 8001004:	20b0      	movs	r0, #176	@ 0xb0
 8001006:	f7ff ffdd 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 800100a:	2081      	movs	r0, #129	@ 0x81
 800100c:	f7ff ffda 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001010:	20cf      	movs	r0, #207	@ 0xcf
 8001012:	f7ff ffd7 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8001016:	20a1      	movs	r0, #161	@ 0xa1
 8001018:	f7ff ffd4 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800101c:	20a6      	movs	r0, #166	@ 0xa6
 800101e:	f7ff ffd1 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8001022:	20a8      	movs	r0, #168	@ 0xa8
 8001024:	f7ff ffce 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8001028:	203f      	movs	r0, #63	@ 0x3f
 800102a:	f7ff ffcb 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800102e:	20ad      	movs	r0, #173	@ 0xad
 8001030:	f7ff ffc8 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8001034:	208b      	movs	r0, #139	@ 0x8b
 8001036:	f7ff ffc5 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800103a:	2033      	movs	r0, #51	@ 0x33
 800103c:	f7ff ffc2 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8001040:	20c8      	movs	r0, #200	@ 0xc8
 8001042:	f7ff ffbf 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8001046:	20d3      	movs	r0, #211	@ 0xd3
 8001048:	f7ff ffbc 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff ffb9 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8001052:	20d5      	movs	r0, #213	@ 0xd5
 8001054:	f7ff ffb6 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8001058:	20c0      	movs	r0, #192	@ 0xc0
 800105a:	f7ff ffb3 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800105e:	20d9      	movs	r0, #217	@ 0xd9
 8001060:	f7ff ffb0 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8001064:	201f      	movs	r0, #31
 8001066:	f7ff ffad 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800106a:	20da      	movs	r0, #218	@ 0xda
 800106c:	f7ff ffaa 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001070:	2012      	movs	r0, #18
 8001072:	f7ff ffa7 	bl	8000fc4 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 8001076:	20db      	movs	r0, #219	@ 0xdb
 8001078:	f7ff ffa4 	bl	8000fc4 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 800107c:	2040      	movs	r0, #64	@ 0x40
 800107e:	f7ff ffa1 	bl	8000fc4 <OLED_SendCmd>

  OLED_NewFrame();
 8001082:	f000 f807 	bl	8001094 <OLED_NewFrame>
  OLED_ShowFrame();
 8001086:	f000 f811 	bl	80010ac <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800108a:	20af      	movs	r0, #175	@ 0xaf
 800108c:	f7ff ff9a 	bl	8000fc4 <OLED_SendCmd>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001098:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800109c:	2100      	movs	r1, #0
 800109e:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <OLED_NewFrame+0x14>)
 80010a0:	f003 fe37 	bl	8004d12 <memset>
  
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000274 	.word	0x20000274

080010ac <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <OLED_ShowFrame+0x5c>)
 80010b4:	2240      	movs	r2, #64	@ 0x40
 80010b6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	e01b      	b.n	80010f6 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b50      	subs	r3, #80	@ 0x50
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff7d 	bl	8000fc4 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff ff7a 	bl	8000fc4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80010d0:	2010      	movs	r0, #16
 80010d2:	f7ff ff77 	bl	8000fc4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80010d6:	480d      	ldr	r0, [pc, #52]	@ (800110c <OLED_ShowFrame+0x60>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	01db      	lsls	r3, r3, #7
 80010dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <OLED_ShowFrame+0x64>)
 80010de:	4413      	add	r3, r2
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	4619      	mov	r1, r3
 80010e4:	f003 fea3 	bl	8004e2e <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80010e8:	2181      	movs	r1, #129	@ 0x81
 80010ea:	4807      	ldr	r0, [pc, #28]	@ (8001108 <OLED_ShowFrame+0x5c>)
 80010ec:	f7ff ff54 	bl	8000f98 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3301      	adds	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d9e0      	bls.n	80010be <OLED_ShowFrame+0x12>
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000678 	.word	0x20000678
 800110c:	20000679 	.word	0x20000679
 8001110:	20000274 	.word	0x20000274

08001114 <OLED_Clean>:

//清屏
void OLED_Clean()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8001118:	f7ff ffbc 	bl	8001094 <OLED_NewFrame>
    OLED_ShowFrame();
 800111c:	f7ff ffc6 	bl	80010ac <OLED_ShowFrame>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
 800112e:	460b      	mov	r3, r1
 8001130:	71bb      	strb	r3, [r7, #6]
 8001132:	4613      	mov	r3, r2
 8001134:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db43      	blt.n	80011c6 <OLED_SetPixel+0xa2>
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b3f      	cmp	r3, #63	@ 0x3f
 8001142:	d840      	bhi.n	80011c6 <OLED_SetPixel+0xa2>
  if (!color) {
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d11d      	bne.n	8001186 <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 800114a:	79bb      	ldrb	r3, [r7, #6]
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	b2d8      	uxtb	r0, r3
 8001150:	4602      	mov	r2, r0
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	491e      	ldr	r1, [pc, #120]	@ (80011d0 <OLED_SetPixel+0xac>)
 8001156:	01d2      	lsls	r2, r2, #7
 8001158:	440a      	add	r2, r1
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b25a      	sxtb	r2, r3
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f303 	lsl.w	r3, r1, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b259      	sxtb	r1, r3
 8001172:	4602      	mov	r2, r0
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	b2c8      	uxtb	r0, r1
 8001178:	4915      	ldr	r1, [pc, #84]	@ (80011d0 <OLED_SetPixel+0xac>)
 800117a:	01d2      	lsls	r2, r2, #7
 800117c:	440a      	add	r2, r1
 800117e:	4413      	add	r3, r2
 8001180:	4602      	mov	r2, r0
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	e020      	b.n	80011c8 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b2d8      	uxtb	r0, r3
 800118c:	4602      	mov	r2, r0
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	490f      	ldr	r1, [pc, #60]	@ (80011d0 <OLED_SetPixel+0xac>)
 8001192:	01d2      	lsls	r2, r2, #7
 8001194:	440a      	add	r2, r1
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b25a      	sxtb	r2, r3
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	2101      	movs	r1, #1
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	4013      	ands	r3, r2
 80011b0:	b259      	sxtb	r1, r3
 80011b2:	4602      	mov	r2, r0
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	b2c8      	uxtb	r0, r1
 80011b8:	4905      	ldr	r1, [pc, #20]	@ (80011d0 <OLED_SetPixel+0xac>)
 80011ba:	01d2      	lsls	r2, r2, #7
 80011bc:	440a      	add	r2, r1
 80011be:	4413      	add	r3, r2
 80011c0:	4602      	mov	r2, r0
 80011c2:	701a      	strb	r2, [r3, #0]
 80011c4:	e000      	b.n	80011c8 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 80011c6:	bf00      	nop
  }
}
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000274 	.word	0x20000274

080011d4 <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 80011d4:	b490      	push	{r4, r7}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4604      	mov	r4, r0
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4623      	mov	r3, r4
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	4603      	mov	r3, r0
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	460b      	mov	r3, r1
 80011ec:	717b      	strb	r3, [r7, #5]
 80011ee:	4613      	mov	r3, r2
 80011f0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	2b07      	cmp	r3, #7
 80011f6:	d85f      	bhi.n	80012b8 <OLED_SetByte_Fine+0xe4>
 80011f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db5b      	blt.n	80012b8 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 8001200:	7d3b      	ldrb	r3, [r7, #20]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <OLED_SetByte_Fine+0x38>
 8001206:	797b      	ldrb	r3, [r7, #5]
 8001208:	43db      	mvns	r3, r3
 800120a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800120c:	7c3b      	ldrb	r3, [r7, #16]
 800120e:	3301      	adds	r3, #1
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	b25a      	sxtb	r2, r3
 8001218:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800121c:	4313      	orrs	r3, r2
 800121e:	b25a      	sxtb	r2, r3
 8001220:	793b      	ldrb	r3, [r7, #4]
 8001222:	f1c3 0308 	rsb	r3, r3, #8
 8001226:	21ff      	movs	r1, #255	@ 0xff
 8001228:	fa41 f303 	asr.w	r3, r1, r3
 800122c:	b25b      	sxtb	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <OLED_SetByte_Fine+0xf0>)
 8001236:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	4922      	ldr	r1, [pc, #136]	@ (80012c8 <OLED_SetByte_Fine+0xf4>)
 800123e:	01d2      	lsls	r2, r2, #7
 8001240:	440a      	add	r2, r1
 8001242:	4413      	add	r3, r2
 8001244:	7818      	ldrb	r0, [r3, #0]
 8001246:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <OLED_SetByte_Fine+0xf0>)
 8001248:	7819      	ldrb	r1, [r3, #0]
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	79bb      	ldrb	r3, [r7, #6]
 800124e:	4001      	ands	r1, r0
 8001250:	b2c8      	uxtb	r0, r1
 8001252:	491d      	ldr	r1, [pc, #116]	@ (80012c8 <OLED_SetByte_Fine+0xf4>)
 8001254:	01d2      	lsls	r2, r2, #7
 8001256:	440a      	add	r2, r1
 8001258:	4413      	add	r3, r2
 800125a:	4602      	mov	r2, r0
 800125c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800125e:	7c3b      	ldrb	r3, [r7, #16]
 8001260:	3301      	adds	r3, #1
 8001262:	22ff      	movs	r2, #255	@ 0xff
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	b25b      	sxtb	r3, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	b25a      	sxtb	r2, r3
 800126e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001272:	4013      	ands	r3, r2
 8001274:	b25a      	sxtb	r2, r3
 8001276:	793b      	ldrb	r3, [r7, #4]
 8001278:	f1c3 0308 	rsb	r3, r3, #8
 800127c:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8001280:	fa41 f303 	asr.w	r3, r1, r3
 8001284:	b25b      	sxtb	r3, r3
 8001286:	4013      	ands	r3, r2
 8001288:	b25b      	sxtb	r3, r3
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <OLED_SetByte_Fine+0xf0>)
 800128e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001290:	79fa      	ldrb	r2, [r7, #7]
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	490c      	ldr	r1, [pc, #48]	@ (80012c8 <OLED_SetByte_Fine+0xf4>)
 8001296:	01d2      	lsls	r2, r2, #7
 8001298:	440a      	add	r2, r1
 800129a:	4413      	add	r3, r2
 800129c:	7818      	ldrb	r0, [r3, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <OLED_SetByte_Fine+0xf0>)
 80012a0:	7819      	ldrb	r1, [r3, #0]
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	79bb      	ldrb	r3, [r7, #6]
 80012a6:	4301      	orrs	r1, r0
 80012a8:	b2c8      	uxtb	r0, r1
 80012aa:	4907      	ldr	r1, [pc, #28]	@ (80012c8 <OLED_SetByte_Fine+0xf4>)
 80012ac:	01d2      	lsls	r2, r2, #7
 80012ae:	440a      	add	r2, r1
 80012b0:	4413      	add	r3, r2
 80012b2:	4602      	mov	r2, r0
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e000      	b.n	80012ba <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80012b8:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc90      	pop	{r4, r7}
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	200006f9 	.word	0x200006f9
 80012c8:	20000274 	.word	0x20000274

080012cc <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	08db      	lsrs	r3, r3, #3
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 80012f8:	7bba      	ldrb	r2, [r7, #14]
 80012fa:	793b      	ldrb	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	2b08      	cmp	r3, #8
 8001300:	dd29      	ble.n	8001356 <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001302:	797a      	ldrb	r2, [r7, #5]
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	b2da      	uxtb	r2, r3
 800130c:	7bbc      	ldrb	r4, [r7, #14]
 800130e:	79f9      	ldrb	r1, [r7, #7]
 8001310:	7bf8      	ldrb	r0, [r7, #15]
 8001312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	2307      	movs	r3, #7
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4623      	mov	r3, r4
 800131e:	f7ff ff59 	bl	80011d4 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	3301      	adds	r3, #1
 8001326:	b2d8      	uxtb	r0, r3
 8001328:	797a      	ldrb	r2, [r7, #5]
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	f1c3 0308 	rsb	r3, r3, #8
 8001330:	fa42 f303 	asr.w	r3, r2, r3
 8001334:	b2dc      	uxtb	r4, r3
 8001336:	793a      	ldrb	r2, [r7, #4]
 8001338:	7bbb      	ldrb	r3, [r7, #14]
 800133a:	4413      	add	r3, r2
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3b09      	subs	r3, #9
 8001340:	b2db      	uxtb	r3, r3
 8001342:	79f9      	ldrb	r1, [r7, #7]
 8001344:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	4622      	mov	r2, r4
 8001350:	f7ff ff40 	bl	80011d4 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001354:	e015      	b.n	8001382 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001356:	797a      	ldrb	r2, [r7, #5]
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	b2dc      	uxtb	r4, r3
 8001360:	7bba      	ldrb	r2, [r7, #14]
 8001362:	793b      	ldrb	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	b2db      	uxtb	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	7bbd      	ldrb	r5, [r7, #14]
 800136e:	79f9      	ldrb	r1, [r7, #7]
 8001370:	7bf8      	ldrb	r0, [r7, #15]
 8001372:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001376:	9201      	str	r2, [sp, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	462b      	mov	r3, r5
 800137c:	4622      	mov	r2, r4
 800137e:	f7ff ff29 	bl	80011d4 <OLED_SetByte_Fine>
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bdb0      	pop	{r4, r5, r7, pc}

0800138a <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 800138a:	b590      	push	{r4, r7, lr}
 800138c:	b087      	sub	sp, #28
 800138e:	af02      	add	r7, sp, #8
 8001390:	4604      	mov	r4, r0
 8001392:	4608      	mov	r0, r1
 8001394:	4611      	mov	r1, r2
 8001396:	461a      	mov	r2, r3
 8001398:	4623      	mov	r3, r4
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4603      	mov	r3, r0
 800139e:	71bb      	strb	r3, [r7, #6]
 80013a0:	460b      	mov	r3, r1
 80013a2:	717b      	strb	r3, [r7, #5]
 80013a4:	4613      	mov	r3, r2
 80013a6:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80013a8:	79bb      	ldrb	r3, [r7, #6]
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80013b6:	797a      	ldrb	r2, [r7, #5]
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	7bbc      	ldrb	r4, [r7, #14]
 80013c2:	79f9      	ldrb	r1, [r7, #7]
 80013c4:	7bf8      	ldrb	r0, [r7, #15]
 80013c6:	793b      	ldrb	r3, [r7, #4]
 80013c8:	9301      	str	r3, [sp, #4]
 80013ca:	2307      	movs	r3, #7
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4623      	mov	r3, r4
 80013d0:	f7ff ff00 	bl	80011d4 <OLED_SetByte_Fine>
  if (bit) {
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d014      	beq.n	8001404 <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2d8      	uxtb	r0, r3
 80013e0:	797a      	ldrb	r2, [r7, #5]
 80013e2:	7bbb      	ldrb	r3, [r7, #14]
 80013e4:	f1c3 0308 	rsb	r3, r3, #8
 80013e8:	fa42 f303 	asr.w	r3, r2, r3
 80013ec:	b2dc      	uxtb	r4, r3
 80013ee:	7bbb      	ldrb	r3, [r7, #14]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	79f9      	ldrb	r1, [r7, #7]
 80013f6:	793a      	ldrb	r2, [r7, #4]
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	4622      	mov	r2, r4
 8001400:	f7ff fee8 	bl	80011d4 <OLED_SetByte_Fine>
  }
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bd90      	pop	{r4, r7, pc}

0800140c <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b087      	sub	sp, #28
 8001410:	af02      	add	r7, sp, #8
 8001412:	603a      	str	r2, [r7, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001422:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800142a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e025      	b.n	8001486 <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 800143a:	2300      	movs	r3, #0
 800143c:	73bb      	strb	r3, [r7, #14]
 800143e:	e01b      	b.n	8001478 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	4413      	add	r3, r2
 8001446:	b2d8      	uxtb	r0, r3
 8001448:	7bbb      	ldrb	r3, [r7, #14]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	79bb      	ldrb	r3, [r7, #6]
 8001450:	4413      	add	r3, r2
 8001452:	b2dc      	uxtb	r4, r3
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	7979      	ldrb	r1, [r7, #5]
 800145a:	fb01 f303 	mul.w	r3, r1, r3
 800145e:	4413      	add	r3, r2
 8001460:	461a      	mov	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800146c:	4621      	mov	r1, r4
 800146e:	f7ff ff8c 	bl	800138a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	3301      	adds	r3, #1
 8001476:	73bb      	strb	r3, [r7, #14]
 8001478:	7bba      	ldrb	r2, [r7, #14]
 800147a:	7b3b      	ldrb	r3, [r7, #12]
 800147c:	429a      	cmp	r2, r3
 800147e:	d3df      	bcc.n	8001440 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	3301      	adds	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	7bfa      	ldrb	r2, [r7, #15]
 8001488:	797b      	ldrb	r3, [r7, #5]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3d5      	bcc.n	800143a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d028      	beq.n	80014e6 <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001494:	797b      	ldrb	r3, [r7, #5]
 8001496:	b29b      	uxth	r3, r3
 8001498:	7b3a      	ldrb	r2, [r7, #12]
 800149a:	b292      	uxth	r2, r2
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 80014a2:	2300      	movs	r3, #0
 80014a4:	737b      	strb	r3, [r7, #13]
 80014a6:	e01a      	b.n	80014de <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	7b7b      	ldrb	r3, [r7, #13]
 80014ac:	4413      	add	r3, r2
 80014ae:	b2d8      	uxtb	r0, r3
 80014b0:	7b3b      	ldrb	r3, [r7, #12]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2d9      	uxtb	r1, r3
 80014bc:	893a      	ldrh	r2, [r7, #8]
 80014be:	7b7b      	ldrb	r3, [r7, #13]
 80014c0:	4413      	add	r3, r2
 80014c2:	461a      	mov	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	781a      	ldrb	r2, [r3, #0]
 80014ca:	7afc      	ldrb	r4, [r7, #11]
 80014cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4623      	mov	r3, r4
 80014d4:	f7ff fefa 	bl	80012cc <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	3301      	adds	r3, #1
 80014dc:	737b      	strb	r3, [r7, #13]
 80014de:	7b7a      	ldrb	r2, [r7, #13]
 80014e0:	797b      	ldrb	r3, [r7, #5]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d3e0      	bcc.n	80014a8 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd90      	pop	{r4, r7, pc}

080014ee <OLED_DrawCircle>:
 * @param y 圆心纵坐标
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color) {
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4604      	mov	r4, r0
 80014f6:	4608      	mov	r0, r1
 80014f8:	4611      	mov	r1, r2
 80014fa:	461a      	mov	r2, r3
 80014fc:	4623      	mov	r3, r4
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	4603      	mov	r3, r0
 8001502:	71bb      	strb	r3, [r7, #6]
 8001504:	460b      	mov	r3, r1
 8001506:	717b      	strb	r3, [r7, #5]
 8001508:	4613      	mov	r3, r2
 800150a:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 800150c:	2300      	movs	r3, #0
 800150e:	81fb      	strh	r3, [r7, #14]
 8001510:	797b      	ldrb	r3, [r7, #5]
 8001512:	81bb      	strh	r3, [r7, #12]
 8001514:	797b      	ldrb	r3, [r7, #5]
 8001516:	b29b      	uxth	r3, r3
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	b29b      	uxth	r3, r3
 800151c:	f1c3 0303 	rsb	r3, r3, #3
 8001520:	b29b      	uxth	r3, r3
 8001522:	817b      	strh	r3, [r7, #10]
  while (a <= b) {
 8001524:	e0b3      	b.n	800168e <OLED_DrawCircle+0x1a0>
    OLED_SetPixel(x - b, y - a, color);
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	79fa      	ldrb	r2, [r7, #7]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	b2d8      	uxtb	r0, r3
 8001530:	89fb      	ldrh	r3, [r7, #14]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	79ba      	ldrb	r2, [r7, #6]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	b2db      	uxtb	r3, r3
 800153a:	793a      	ldrb	r2, [r7, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fdf1 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8001542:	89bb      	ldrh	r3, [r7, #12]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4413      	add	r3, r2
 800154a:	b2d8      	uxtb	r0, r3
 800154c:	89fb      	ldrh	r3, [r7, #14]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	79ba      	ldrb	r2, [r7, #6]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	793a      	ldrb	r2, [r7, #4]
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fde3 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	89bb      	ldrh	r3, [r7, #12]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	4413      	add	r3, r2
 8001570:	b2db      	uxtb	r3, r3
 8001572:	793a      	ldrb	r2, [r7, #4]
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fdd5 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	79ba      	ldrb	r2, [r7, #6]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	793a      	ldrb	r2, [r7, #4]
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fdc7 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	79fa      	ldrb	r2, [r7, #7]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b2d8      	uxtb	r0, r3
 80015a0:	89bb      	ldrh	r3, [r7, #12]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	793a      	ldrb	r2, [r7, #4]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f7ff fdb9 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 80015b2:	89bb      	ldrh	r3, [r7, #12]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4413      	add	r3, r2
 80015ba:	b2d8      	uxtb	r0, r3
 80015bc:	89fb      	ldrh	r3, [r7, #14]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	4413      	add	r3, r2
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	793a      	ldrb	r2, [r7, #4]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff fdab 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4413      	add	r3, r2
 80015d6:	b2d8      	uxtb	r0, r3
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	79ba      	ldrb	r2, [r7, #6]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	793a      	ldrb	r2, [r7, #4]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fd9d 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4413      	add	r3, r2
 80015f2:	b2d8      	uxtb	r0, r3
 80015f4:	89bb      	ldrh	r3, [r7, #12]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	4413      	add	r3, r2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	793a      	ldrb	r2, [r7, #4]
 8001600:	4619      	mov	r1, r3
 8001602:	f7ff fd8f 	bl	8001124 <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8001606:	89bb      	ldrh	r3, [r7, #12]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	b2d8      	uxtb	r0, r3
 8001610:	89fb      	ldrh	r3, [r7, #14]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	4413      	add	r3, r2
 8001618:	b2db      	uxtb	r3, r3
 800161a:	793a      	ldrb	r2, [r7, #4]
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fd81 	bl	8001124 <OLED_SetPixel>
    a++;
 8001622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001626:	b29b      	uxth	r3, r3
 8001628:	3301      	adds	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	81fb      	strh	r3, [r7, #14]
    if (di < 0) {
 800162e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da09      	bge.n	800164a <OLED_DrawCircle+0x15c>
      di += 4 * a + 6;
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	b29a      	uxth	r2, r3
 800163c:	897b      	ldrh	r3, [r7, #10]
 800163e:	4413      	add	r3, r2
 8001640:	b29b      	uxth	r3, r3
 8001642:	3306      	adds	r3, #6
 8001644:	b29b      	uxth	r3, r3
 8001646:	817b      	strh	r3, [r7, #10]
 8001648:	e013      	b.n	8001672 <OLED_DrawCircle+0x184>
    } else {
      di += 10 + 4 * (a - b);
 800164a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800164e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b29b      	uxth	r3, r3
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	b29a      	uxth	r2, r3
 800165a:	897b      	ldrh	r3, [r7, #10]
 800165c:	4413      	add	r3, r2
 800165e:	b29b      	uxth	r3, r3
 8001660:	330a      	adds	r3, #10
 8001662:	b29b      	uxth	r3, r3
 8001664:	817b      	strh	r3, [r7, #10]
      b--;
 8001666:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29b      	uxth	r3, r3
 8001670:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4413      	add	r3, r2
 800167a:	b2d8      	uxtb	r0, r3
 800167c:	89bb      	ldrh	r3, [r7, #12]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	79bb      	ldrb	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	793a      	ldrb	r2, [r7, #4]
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fd4b 	bl	8001124 <OLED_SetPixel>
  while (a <= b) {
 800168e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001692:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	f77f af45 	ble.w	8001526 <OLED_DrawCircle+0x38>
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}

080016a6 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 80016a6:	b5b0      	push	{r4, r5, r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	460b      	mov	r3, r1
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	4613      	mov	r3, r2
 80016b8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	f1a3 0120 	sub.w	r1, r3, #32
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	3307      	adds	r3, #7
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da00      	bge.n	80016d0 <OLED_PrintASCIIChar+0x2a>
 80016ce:	3307      	adds	r3, #7
 80016d0:	10db      	asrs	r3, r3, #3
 80016d2:	4618      	mov	r0, r3
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	fb00 f303 	mul.w	r3, r0, r3
 80016dc:	fb01 f303 	mul.w	r3, r1, r3
 80016e0:	18d4      	adds	r4, r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	785d      	ldrb	r5, [r3, #1]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	79b9      	ldrb	r1, [r7, #6]
 80016ec:	79f8      	ldrb	r0, [r7, #7]
 80016ee:	7e3a      	ldrb	r2, [r7, #24]
 80016f0:	9201      	str	r2, [sp, #4]
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	462b      	mov	r3, r5
 80016f6:	4622      	mov	r2, r4
 80016f8:	f7ff fe88 	bl	800140c <OLED_SetBlock>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}

08001704 <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af02      	add	r7, sp, #8
 800170a:	60ba      	str	r2, [r7, #8]
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	460b      	mov	r3, r1
 8001714:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 800171a:	e011      	b.n	8001740 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	781a      	ldrb	r2, [r3, #0]
 8001720:	7bb9      	ldrb	r1, [r7, #14]
 8001722:	7df8      	ldrb	r0, [r7, #23]
 8001724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f7ff ffbb 	bl	80016a6 <OLED_PrintASCIIChar>
    x0 += font->w;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	785a      	ldrb	r2, [r3, #1]
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	4413      	add	r3, r2
 8001738:	75fb      	strb	r3, [r7, #23]
    str++;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e9      	bne.n	800171c <OLED_PrintASCIIString+0x18>
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <OLED_Startup>:
    }
  }
}

void OLED_Startup()
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; ++i) {
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	e01a      	b.n	8001794 <OLED_Startup+0x42>

        OLED_Clean();
 800175e:	f7ff fcd9 	bl	8001114 <OLED_Clean>
        OLED_DrawCircle(64,32,4*i,OLED_COLOR_NORMAL);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	b2da      	uxtb	r2, r3
 800176a:	2300      	movs	r3, #0
 800176c:	2120      	movs	r1, #32
 800176e:	2040      	movs	r0, #64	@ 0x40
 8001770:	f7ff febd 	bl	80014ee <OLED_DrawCircle>
        OLED_DrawCircle(64,32,2*i,OLED_COLOR_NORMAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	2300      	movs	r3, #0
 800177e:	2120      	movs	r1, #32
 8001780:	2040      	movs	r0, #64	@ 0x40
 8001782:	f7ff feb4 	bl	80014ee <OLED_DrawCircle>
        OLED_ShowFrame();
 8001786:	f7ff fc91 	bl	80010ac <OLED_ShowFrame>
        //HAL_Delay(10);
        OLED_Clean();
 800178a:	f7ff fcc3 	bl	8001114 <OLED_Clean>
    for (int i = 0; i < 32; ++i) {
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3301      	adds	r3, #1
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b1f      	cmp	r3, #31
 8001798:	dde1      	ble.n	800175e <OLED_Startup+0xc>
    }
}
 800179a:	bf00      	nop
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017aa:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <HAL_MspInit+0x5c>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <HAL_MspInit+0x5c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6193      	str	r3, [r2, #24]
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <HAL_MspInit+0x5c>)
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_MspInit+0x5c>)
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_MspInit+0x5c>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	61d3      	str	r3, [r2, #28]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_MspInit+0x5c>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_MspInit+0x60>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <HAL_MspInit+0x60>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000
 8001804:	40010000 	.word	0x40010000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <HardFault_Handler+0x4>

08001818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <MemManage_Handler+0x4>

08001820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <BusFault_Handler+0x4>

08001828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <UsageFault_Handler+0x4>

08001830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001858:	f000 f936 	bl	8001ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return 1;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <_kill>:

int _kill(int pid, int sig)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001878:	f003 fa9e 	bl	8004db8 <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	2216      	movs	r2, #22
 8001880:	601a      	str	r2, [r3, #0]
  return -1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_exit>:

void _exit (int status)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001896:	f04f 31ff 	mov.w	r1, #4294967295
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffe7 	bl	800186e <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <_exit+0x12>

080018a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e00a      	b.n	80018cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018b6:	f3af 8000 	nop.w
 80018ba:	4601      	mov	r1, r0
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60ba      	str	r2, [r7, #8]
 80018c2:	b2ca      	uxtb	r2, r1
 80018c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3301      	adds	r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	dbf0      	blt.n	80018b6 <_read+0x12>
  }

  return len;
 80018d4:	687b      	ldr	r3, [r7, #4]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e009      	b.n	8001904 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	60ba      	str	r2, [r7, #8]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <_write+0x12>
  }
  return len;
 800190c:	687b      	ldr	r3, [r7, #4]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_close>:

int _close(int file)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001922:	4618      	mov	r0, r3
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800193c:	605a      	str	r2, [r3, #4]
  return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <_isatty>:

int _isatty(int file)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	@ (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f003 fa06 	bl	8004db8 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20005000 	.word	0x20005000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	200006fc 	.word	0x200006fc
 80019e0:	20000850 	.word	0x20000850

080019e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019f0:	f7ff fff8 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019f6:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <LoopFillZerobss+0x16>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a09      	ldr	r2, [pc, #36]	@ (8001a30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a0c:	4c09      	ldr	r4, [pc, #36]	@ (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f003 f9d3 	bl	8004dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1e:	f7ff f9ef 	bl	8000e00 <main>
  bx lr
 8001a22:	4770      	bx	lr
  ldr r0, =_sdata
 8001a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a28:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a2c:	08008f44 	.word	0x08008f44
  ldr r2, =_sbss
 8001a30:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a34:	20000850 	.word	0x20000850

08001a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC1_2_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <HAL_Init+0x28>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <HAL_Init+0x28>)
 8001a46:	f043 0310 	orr.w	r3, r3, #16
 8001a4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f000 fe05 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a52:	200f      	movs	r0, #15
 8001a54:	f000 f808 	bl	8001a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a58:	f7ff fea4 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40022000 	.word	0x40022000

08001a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x54>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_InitTick+0x58>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fe0f 	bl	80026aa <HAL_SYSTICK_Config>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00e      	b.n	8001ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b0f      	cmp	r3, #15
 8001a9a:	d80a      	bhi.n	8001ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	f000 fde5 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa8:	4a06      	ldr	r2, [pc, #24]	@ (8001ac4 <HAL_InitTick+0x5c>)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e000      	b.n	8001ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	20000004 	.word	0x20000004

08001ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_IncTick+0x1c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	@ (8001ae8 <HAL_IncTick+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a03      	ldr	r2, [pc, #12]	@ (8001ae8 <HAL_IncTick+0x20>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000700 	.word	0x20000700

08001aec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b02      	ldr	r3, [pc, #8]	@ (8001afc <HAL_GetTick+0x10>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000700 	.word	0x20000700

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fff0 	bl	8001aec <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffe0 	bl	8001aec <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0be      	b.n	8001ce8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff f862 	bl	8000c50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fbc5 	bl	800231c <ADC_ConversionStop_Disable>
 8001b92:	4603      	mov	r3, r0
 8001b94:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 8099 	bne.w	8001cd6 <HAL_ADC_Init+0x18e>
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8095 	bne.w	8001cd6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bb4:	f023 0302 	bic.w	r3, r3, #2
 8001bb8:	f043 0202 	orr.w	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7b1b      	ldrb	r3, [r3, #12]
 8001bce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be0:	d003      	beq.n	8001bea <HAL_ADC_Init+0xa2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d102      	bne.n	8001bf0 <HAL_ADC_Init+0xa8>
 8001bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bee:	e000      	b.n	8001bf2 <HAL_ADC_Init+0xaa>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7d1b      	ldrb	r3, [r3, #20]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d119      	bne.n	8001c34 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7b1b      	ldrb	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d109      	bne.n	8001c1c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	035a      	lsls	r2, r3, #13
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	e00b      	b.n	8001c34 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	4b28      	ldr	r3, [pc, #160]	@ (8001cf0 <HAL_ADC_Init+0x1a8>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c64:	d003      	beq.n	8001c6e <HAL_ADC_Init+0x126>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d104      	bne.n	8001c78 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	051b      	lsls	r3, r3, #20
 8001c76:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_ADC_Init+0x1ac>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cb2:	e018      	b.n	8001ce6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	f023 0312 	bic.w	r3, r3, #18
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cd4:	e007      	b.n	8001ce6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	f043 0210 	orr.w	r2, r3, #16
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	ffe1f7fd 	.word	0xffe1f7fd
 8001cf4:	ff1f0efe 	.word	0xff1f0efe

08001cf8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_Start+0x1a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e098      	b.n	8001e44 <HAL_ADC_Start+0x14c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 faa4 	bl	8002268 <ADC_Enable>
 8001d20:	4603      	mov	r3, r0
 8001d22:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8087 	bne.w	8001e3a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a41      	ldr	r2, [pc, #260]	@ (8001e4c <HAL_ADC_Start+0x154>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d105      	bne.n	8001d56 <HAL_ADC_Start+0x5e>
 8001d4a:	4b41      	ldr	r3, [pc, #260]	@ (8001e50 <HAL_ADC_Start+0x158>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d026      	beq.n	8001dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d80:	e01d      	b.n	8001dbe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2f      	ldr	r2, [pc, #188]	@ (8001e50 <HAL_ADC_Start+0x158>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_Start+0xaa>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e4c <HAL_ADC_Start+0x154>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10d      	bne.n	8001dbe <HAL_ADC_Start+0xc6>
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_ADC_Start+0x158>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	f023 0206 	bic.w	r2, r3, #6
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001dd6:	e002      	b.n	8001dde <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0202 	mvn.w	r2, #2
 8001dee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dfa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dfe:	d113      	bne.n	8001e28 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e04:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_ADC_Start+0x154>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d105      	bne.n	8001e16 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <HAL_ADC_Start+0x158>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	e00c      	b.n	8001e42 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	e003      	b.n	8001e42 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40012800 	.word	0x40012800
 8001e50:	40012400 	.word	0x40012400

08001e54 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e6a:	f7ff fe3f 	bl	8001aec <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f043 0220 	orr.w	r2, r3, #32
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0d3      	b.n	800203e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d131      	bne.n	8001f08 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d12a      	bne.n	8001f08 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001eb2:	e021      	b.n	8001ef8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eba:	d01d      	beq.n	8001ef8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <HAL_ADC_PollForConversion+0x7e>
 8001ec2:	f7ff fe13 	bl	8001aec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d212      	bcs.n	8001ef8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10b      	bne.n	8001ef8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0a2      	b.n	800203e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0d6      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001f06:	e070      	b.n	8001fea <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f08:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <HAL_ADC_PollForConversion+0x1f4>)
 8001f0a:	681c      	ldr	r4, [r3, #0]
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f001 febf 	bl	8003c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6919      	ldr	r1, [r3, #16]
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_ADC_PollForConversion+0x1f8>)
 8001f20:	400b      	ands	r3, r1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x104>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	4b48      	ldr	r3, [pc, #288]	@ (8002050 <HAL_ADC_PollForConversion+0x1fc>)
 8001f2e:	400b      	ands	r3, r1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d111      	bne.n	8001f58 <HAL_ADC_PollForConversion+0x104>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	4b46      	ldr	r3, [pc, #280]	@ (8002054 <HAL_ADC_PollForConversion+0x200>)
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d108      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x100>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68d9      	ldr	r1, [r3, #12]
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_ADC_PollForConversion+0x204>)
 8001f4a:	400b      	ands	r3, r1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_PollForConversion+0x100>
 8001f50:	2314      	movs	r3, #20
 8001f52:	e020      	b.n	8001f96 <HAL_ADC_PollForConversion+0x142>
 8001f54:	2329      	movs	r3, #41	@ 0x29
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_PollForConversion+0x142>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002054 <HAL_ADC_PollForConversion+0x200>)
 8001f60:	400b      	ands	r3, r1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_ADC_PollForConversion+0x120>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68d9      	ldr	r1, [r3, #12]
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_ADC_PollForConversion+0x204>)
 8001f6e:	400b      	ands	r3, r1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_ADC_PollForConversion+0x13c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	4b38      	ldr	r3, [pc, #224]	@ (800205c <HAL_ADC_PollForConversion+0x208>)
 8001f7c:	400b      	ands	r3, r1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x140>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	4b34      	ldr	r3, [pc, #208]	@ (800205c <HAL_ADC_PollForConversion+0x208>)
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_PollForConversion+0x140>
 8001f90:	2354      	movs	r3, #84	@ 0x54
 8001f92:	e000      	b.n	8001f96 <HAL_ADC_PollForConversion+0x142>
 8001f94:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f9c:	e021      	b.n	8001fe2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d01a      	beq.n	8001fdc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_ADC_PollForConversion+0x168>
 8001fac:	f7ff fd9e 	bl	8001aec <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d20f      	bcs.n	8001fdc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d90b      	bls.n	8001fdc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	f043 0204 	orr.w	r2, r3, #4
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e030      	b.n	800203e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d8d9      	bhi.n	8001f9e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f06f 0212 	mvn.w	r2, #18
 8001ff2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800200a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800200e:	d115      	bne.n	800203c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002014:	2b00      	cmp	r3, #0
 8002016:	d111      	bne.n	800203c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	bf00      	nop
 8002048:	20000000 	.word	0x20000000
 800204c:	24924924 	.word	0x24924924
 8002050:	00924924 	.word	0x00924924
 8002054:	12492492 	.word	0x12492492
 8002058:	00492492 	.word	0x00492492
 800205c:	00249249 	.word	0x00249249

08002060 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x20>
 8002094:	2302      	movs	r3, #2
 8002096:	e0dc      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1da>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d81c      	bhi.n	80020e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b05      	subs	r3, #5
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b05      	subs	r3, #5
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	635a      	str	r2, [r3, #52]	@ 0x34
 80020e0:	e03c      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d81c      	bhi.n	8002124 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b23      	subs	r3, #35	@ 0x23
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	4019      	ands	r1, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b23      	subs	r3, #35	@ 0x23
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	@ 0x30
 8002122:	e01b      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b41      	subs	r3, #65	@ 0x41
 8002136:	221f      	movs	r2, #31
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b41      	subs	r3, #65	@ 0x41
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d91c      	bls.n	800219e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1e      	subs	r3, #30
 8002176:	2207      	movs	r2, #7
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1e      	subs	r3, #30
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	e019      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d003      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021de:	2b11      	cmp	r3, #17
 80021e0:	d132      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	@ (800225c <HAL_ADC_ConfigChannel+0x1e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d125      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d126      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002208:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d11a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002212:	4b13      	ldr	r3, [pc, #76]	@ (8002260 <HAL_ADC_ConfigChannel+0x1e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	@ (8002264 <HAL_ADC_ConfigChannel+0x1ec>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9a      	lsrs	r2, r3, #18
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x1b2>
 8002236:	e007      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012400 	.word	0x40012400
 8002260:	20000000 	.word	0x20000000
 8002264:	431bde83 	.word	0x431bde83

08002268 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d040      	beq.n	8002308 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002296:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <ADC_Enable+0xac>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1f      	ldr	r2, [pc, #124]	@ (8002318 <ADC_Enable+0xb0>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a4:	e002      	b.n	80022ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b2:	f7ff fc1b 	bl	8001aec <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022b8:	e01f      	b.n	80022fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ba:	f7ff fc17 	bl	8001aec <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d918      	bls.n	80022fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d011      	beq.n	80022fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022da:	f043 0210 	orr.w	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e007      	b.n	800230a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d1d8      	bne.n	80022ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d12e      	bne.n	8002394 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002346:	f7ff fbd1 	bl	8001aec <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800234c:	e01b      	b.n	8002386 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800234e:	f7ff fbcd 	bl	8001aec <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d914      	bls.n	8002386 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b01      	cmp	r3, #1
 8002368:	d10d      	bne.n	8002386 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800236e:	f043 0210 	orr.w	r2, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237a:	f043 0201 	orr.w	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e007      	b.n	8002396 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d0dc      	beq.n	800234e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_ADCEx_Calibration_Start+0x1e>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e097      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14e>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffa8 	bl	800231c <ADC_ConversionStop_Disable>
 80023cc:	4603      	mov	r3, r0
 80023ce:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff49 	bl	8002268 <ADC_Enable>
 80023d6:	4603      	mov	r3, r0
 80023d8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 8081 	bne.w	80024e4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ea:	f023 0302 	bic.w	r3, r3, #2
 80023ee:	f043 0202 	orr.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80023f6:	4b40      	ldr	r3, [pc, #256]	@ (80024f8 <HAL_ADCEx_Calibration_Start+0x158>)
 80023f8:	681c      	ldr	r4, [r3, #0]
 80023fa:	2002      	movs	r0, #2
 80023fc:	f001 fc48 	bl	8003c90 <HAL_RCCEx_GetPeriphCLKFreq>
 8002400:	4603      	mov	r3, r0
 8002402:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002406:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002408:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800240a:	e002      	b.n	8002412 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3b01      	subs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0208 	orr.w	r2, r2, #8
 8002426:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002428:	f7ff fb60 	bl	8001aec <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800242e:	e01b      	b.n	8002468 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002430:	f7ff fb5c 	bl	8001aec <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b0a      	cmp	r3, #10
 800243c:	d914      	bls.n	8002468 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002450:	f023 0312 	bic.w	r3, r3, #18
 8002454:	f043 0210 	orr.w	r2, r3, #16
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e042      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1dc      	bne.n	8002430 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 0204 	orr.w	r2, r2, #4
 8002484:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002486:	f7ff fb31 	bl	8001aec <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800248c:	e01b      	b.n	80024c6 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800248e:	f7ff fb2d 	bl	8001aec <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b0a      	cmp	r3, #10
 800249a:	d914      	bls.n	80024c6 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00d      	beq.n	80024c6 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ae:	f023 0312 	bic.w	r3, r3, #18
 80024b2:	f043 0210 	orr.w	r2, r3, #16
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e013      	b.n	80024ee <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1dc      	bne.n	800248e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	f023 0303 	bic.w	r3, r3, #3
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000000 	.word	0x20000000

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	bc80      	pop	{r7}
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	@ (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	@ (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	@ 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	@ 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff90 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	@ (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff49 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff5e 	bl	8002544 <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff90 	bl	80025b4 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5f 	bl	8002560 <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff ffb0 	bl	8002618 <SysTick_Config>
 80026b8:	4603      	mov	r3, r0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b08b      	sub	sp, #44	@ 0x2c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d6:	e169      	b.n	80029ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026d8:	2201      	movs	r2, #1
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 8158 	bne.w	80029a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	4a9a      	ldr	r2, [pc, #616]	@ (8002964 <HAL_GPIO_Init+0x2a0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d05e      	beq.n	80027be <HAL_GPIO_Init+0xfa>
 8002700:	4a98      	ldr	r2, [pc, #608]	@ (8002964 <HAL_GPIO_Init+0x2a0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d875      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 8002706:	4a98      	ldr	r2, [pc, #608]	@ (8002968 <HAL_GPIO_Init+0x2a4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d058      	beq.n	80027be <HAL_GPIO_Init+0xfa>
 800270c:	4a96      	ldr	r2, [pc, #600]	@ (8002968 <HAL_GPIO_Init+0x2a4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d86f      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 8002712:	4a96      	ldr	r2, [pc, #600]	@ (800296c <HAL_GPIO_Init+0x2a8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d052      	beq.n	80027be <HAL_GPIO_Init+0xfa>
 8002718:	4a94      	ldr	r2, [pc, #592]	@ (800296c <HAL_GPIO_Init+0x2a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d869      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 800271e:	4a94      	ldr	r2, [pc, #592]	@ (8002970 <HAL_GPIO_Init+0x2ac>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d04c      	beq.n	80027be <HAL_GPIO_Init+0xfa>
 8002724:	4a92      	ldr	r2, [pc, #584]	@ (8002970 <HAL_GPIO_Init+0x2ac>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d863      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 800272a:	4a92      	ldr	r2, [pc, #584]	@ (8002974 <HAL_GPIO_Init+0x2b0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d046      	beq.n	80027be <HAL_GPIO_Init+0xfa>
 8002730:	4a90      	ldr	r2, [pc, #576]	@ (8002974 <HAL_GPIO_Init+0x2b0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d85d      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 8002736:	2b12      	cmp	r3, #18
 8002738:	d82a      	bhi.n	8002790 <HAL_GPIO_Init+0xcc>
 800273a:	2b12      	cmp	r3, #18
 800273c:	d859      	bhi.n	80027f2 <HAL_GPIO_Init+0x12e>
 800273e:	a201      	add	r2, pc, #4	@ (adr r2, 8002744 <HAL_GPIO_Init+0x80>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	080027bf 	.word	0x080027bf
 8002748:	08002799 	.word	0x08002799
 800274c:	080027ab 	.word	0x080027ab
 8002750:	080027ed 	.word	0x080027ed
 8002754:	080027f3 	.word	0x080027f3
 8002758:	080027f3 	.word	0x080027f3
 800275c:	080027f3 	.word	0x080027f3
 8002760:	080027f3 	.word	0x080027f3
 8002764:	080027f3 	.word	0x080027f3
 8002768:	080027f3 	.word	0x080027f3
 800276c:	080027f3 	.word	0x080027f3
 8002770:	080027f3 	.word	0x080027f3
 8002774:	080027f3 	.word	0x080027f3
 8002778:	080027f3 	.word	0x080027f3
 800277c:	080027f3 	.word	0x080027f3
 8002780:	080027f3 	.word	0x080027f3
 8002784:	080027f3 	.word	0x080027f3
 8002788:	080027a1 	.word	0x080027a1
 800278c:	080027b5 	.word	0x080027b5
 8002790:	4a79      	ldr	r2, [pc, #484]	@ (8002978 <HAL_GPIO_Init+0x2b4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d013      	beq.n	80027be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002796:	e02c      	b.n	80027f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	623b      	str	r3, [r7, #32]
          break;
 800279e:	e029      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	3304      	adds	r3, #4
 80027a6:	623b      	str	r3, [r7, #32]
          break;
 80027a8:	e024      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	3308      	adds	r3, #8
 80027b0:	623b      	str	r3, [r7, #32]
          break;
 80027b2:	e01f      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	330c      	adds	r3, #12
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e01a      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027c6:	2304      	movs	r3, #4
 80027c8:	623b      	str	r3, [r7, #32]
          break;
 80027ca:	e013      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d105      	bne.n	80027e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	611a      	str	r2, [r3, #16]
          break;
 80027de:	e009      	b.n	80027f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e0:	2308      	movs	r3, #8
 80027e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	615a      	str	r2, [r3, #20]
          break;
 80027ea:	e003      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027ec:	2300      	movs	r3, #0
 80027ee:	623b      	str	r3, [r7, #32]
          break;
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x130>
          break;
 80027f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2bff      	cmp	r3, #255	@ 0xff
 80027f8:	d801      	bhi.n	80027fe <HAL_GPIO_Init+0x13a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	e001      	b.n	8002802 <HAL_GPIO_Init+0x13e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3304      	adds	r3, #4
 8002802:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	2bff      	cmp	r3, #255	@ 0xff
 8002808:	d802      	bhi.n	8002810 <HAL_GPIO_Init+0x14c>
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	e002      	b.n	8002816 <HAL_GPIO_Init+0x152>
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	3b08      	subs	r3, #8
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	210f      	movs	r1, #15
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	6a39      	ldr	r1, [r7, #32]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	431a      	orrs	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80b1 	beq.w	80029a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002844:	4b4d      	ldr	r3, [pc, #308]	@ (800297c <HAL_GPIO_Init+0x2b8>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a4c      	ldr	r2, [pc, #304]	@ (800297c <HAL_GPIO_Init+0x2b8>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b4a      	ldr	r3, [pc, #296]	@ (800297c <HAL_GPIO_Init+0x2b8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800285c:	4a48      	ldr	r2, [pc, #288]	@ (8002980 <HAL_GPIO_Init+0x2bc>)
 800285e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002860:	089b      	lsrs	r3, r3, #2
 8002862:	3302      	adds	r3, #2
 8002864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002868:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	f003 0303 	and.w	r3, r3, #3
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	220f      	movs	r2, #15
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a40      	ldr	r2, [pc, #256]	@ (8002984 <HAL_GPIO_Init+0x2c0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x1ec>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a3f      	ldr	r2, [pc, #252]	@ (8002988 <HAL_GPIO_Init+0x2c4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1e8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a3e      	ldr	r2, [pc, #248]	@ (800298c <HAL_GPIO_Init+0x2c8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1e4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a3d      	ldr	r2, [pc, #244]	@ (8002990 <HAL_GPIO_Init+0x2cc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1e0>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e006      	b.n	80028b2 <HAL_GPIO_Init+0x1ee>
 80028a4:	2304      	movs	r3, #4
 80028a6:	e004      	b.n	80028b2 <HAL_GPIO_Init+0x1ee>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e002      	b.n	80028b2 <HAL_GPIO_Init+0x1ee>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_GPIO_Init+0x1ee>
 80028b0:	2300      	movs	r3, #0
 80028b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b4:	f002 0203 	and.w	r2, r2, #3
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	4093      	lsls	r3, r2
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4313      	orrs	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028c2:	492f      	ldr	r1, [pc, #188]	@ (8002980 <HAL_GPIO_Init+0x2bc>)
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d006      	beq.n	80028ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	492c      	ldr	r1, [pc, #176]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
 80028e8:	e006      	b.n	80028f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	4928      	ldr	r1, [pc, #160]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002904:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4922      	ldr	r1, [pc, #136]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	43db      	mvns	r3, r3
 800291a:	491e      	ldr	r1, [pc, #120]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 800291c:	4013      	ands	r3, r2
 800291e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4918      	ldr	r1, [pc, #96]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	43db      	mvns	r3, r3
 8002942:	4914      	ldr	r1, [pc, #80]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 8002944:	4013      	ands	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d021      	beq.n	8002998 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002954:	4b0f      	ldr	r3, [pc, #60]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	490e      	ldr	r1, [pc, #56]	@ (8002994 <HAL_GPIO_Init+0x2d0>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
 8002960:	e021      	b.n	80029a6 <HAL_GPIO_Init+0x2e2>
 8002962:	bf00      	nop
 8002964:	10320000 	.word	0x10320000
 8002968:	10310000 	.word	0x10310000
 800296c:	10220000 	.word	0x10220000
 8002970:	10210000 	.word	0x10210000
 8002974:	10120000 	.word	0x10120000
 8002978:	10110000 	.word	0x10110000
 800297c:	40021000 	.word	0x40021000
 8002980:	40010000 	.word	0x40010000
 8002984:	40010800 	.word	0x40010800
 8002988:	40010c00 	.word	0x40010c00
 800298c:	40011000 	.word	0x40011000
 8002990:	40011400 	.word	0x40011400
 8002994:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002998:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	43db      	mvns	r3, r3
 80029a0:	4909      	ldr	r1, [pc, #36]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	3301      	adds	r3, #1
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f47f ae8e 	bne.w	80026d8 <HAL_GPIO_Init+0x14>
  }
}
 80029bc:	bf00      	nop
 80029be:	bf00      	nop
 80029c0:	372c      	adds	r7, #44	@ 0x2c
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40010400 	.word	0x40010400

080029cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e12b      	b.n	8002c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d106      	bne.n	80029f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fe f9c4 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2224      	movs	r2, #36	@ 0x24
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a30:	f001 f832 	bl	8003a98 <HAL_RCC_GetPCLK1Freq>
 8002a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4a81      	ldr	r2, [pc, #516]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d807      	bhi.n	8002a50 <HAL_I2C_Init+0x84>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a80      	ldr	r2, [pc, #512]	@ (8002c44 <HAL_I2C_Init+0x278>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e006      	b.n	8002a5e <HAL_I2C_Init+0x92>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a7d      	ldr	r2, [pc, #500]	@ (8002c48 <HAL_I2C_Init+0x27c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	bf94      	ite	ls
 8002a58:	2301      	movls	r3, #1
 8002a5a:	2300      	movhi	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0e7      	b.n	8002c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	4a78      	ldr	r2, [pc, #480]	@ (8002c4c <HAL_I2C_Init+0x280>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	0c9b      	lsrs	r3, r3, #18
 8002a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a6a      	ldr	r2, [pc, #424]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d802      	bhi.n	8002aa0 <HAL_I2C_Init+0xd4>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	e009      	b.n	8002ab4 <HAL_I2C_Init+0xe8>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	4a69      	ldr	r2, [pc, #420]	@ (8002c50 <HAL_I2C_Init+0x284>)
 8002aac:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ac6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	495c      	ldr	r1, [pc, #368]	@ (8002c40 <HAL_I2C_Init+0x274>)
 8002ad0:	428b      	cmp	r3, r1
 8002ad2:	d819      	bhi.n	8002b08 <HAL_I2C_Init+0x13c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1e59      	subs	r1, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ae2:	1c59      	adds	r1, r3, #1
 8002ae4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae8:	400b      	ands	r3, r1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_I2C_Init+0x138>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1e59      	subs	r1, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b02:	e051      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e04f      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d111      	bne.n	8002b34 <HAL_I2C_Init+0x168>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e58      	subs	r0, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	e012      	b.n	8002b5a <HAL_I2C_Init+0x18e>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1e58      	subs	r0, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	0099      	lsls	r1, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Init+0x196>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e022      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10e      	bne.n	8002b88 <HAL_I2C_Init+0x1bc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1e58      	subs	r0, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	440b      	add	r3, r1
 8002b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b86:	e00f      	b.n	8002ba8 <HAL_I2C_Init+0x1dc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1e58      	subs	r0, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6859      	ldr	r1, [r3, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	0099      	lsls	r1, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	6809      	ldr	r1, [r1, #0]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6911      	ldr	r1, [r2, #16]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	68d2      	ldr	r2, [r2, #12]
 8002be2:	4311      	orrs	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	000186a0 	.word	0x000186a0
 8002c44:	001e847f 	.word	0x001e847f
 8002c48:	003d08ff 	.word	0x003d08ff
 8002c4c:	431bde83 	.word	0x431bde83
 8002c50:	10624dd3 	.word	0x10624dd3

08002c54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	607a      	str	r2, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	460b      	mov	r3, r1
 8002c62:	817b      	strh	r3, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7fe ff40 	bl	8001aec <HAL_GetTick>
 8002c6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b20      	cmp	r3, #32
 8002c78:	f040 80e0 	bne.w	8002e3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2319      	movs	r3, #25
 8002c82:	2201      	movs	r2, #1
 8002c84:	4970      	ldr	r1, [pc, #448]	@ (8002e48 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f964 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e0d3      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_I2C_Master_Transmit+0x50>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e0cc      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d007      	beq.n	8002cca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2221      	movs	r2, #33	@ 0x21
 8002cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	893a      	ldrh	r2, [r7, #8]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	6a3a      	ldr	r2, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f89c 	bl	8002e50 <I2C_MasterRequestWrite>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e08d      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d38:	e066      	b.n	8002e08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	6a39      	ldr	r1, [r7, #32]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fa22 	bl	8003188 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d107      	bne.n	8002d62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e06b      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	781a      	ldrb	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	1c5a      	adds	r2, r3, #1
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d11b      	bne.n	8002ddc <HAL_I2C_Master_Transmit+0x188>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	781a      	ldrb	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	6a39      	ldr	r1, [r7, #32]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fa19 	bl	8003218 <I2C_WaitOnBTFFlagUntilTimeout>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00d      	beq.n	8002e08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d107      	bne.n	8002e04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e01a      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d194      	bne.n	8002d3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	00100002 	.word	0x00100002
 8002e4c:	ffff0000 	.word	0xffff0000

08002e50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d006      	beq.n	8002e7a <I2C_MasterRequestWrite+0x2a>
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d003      	beq.n	8002e7a <I2C_MasterRequestWrite+0x2a>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e78:	d108      	bne.n	8002e8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e00b      	b.n	8002ea4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e90:	2b12      	cmp	r3, #18
 8002e92:	d107      	bne.n	8002ea4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ea2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f84f 	bl	8002f54 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00d      	beq.n	8002ed8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eca:	d103      	bne.n	8002ed4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e035      	b.n	8002f44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ee0:	d108      	bne.n	8002ef4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ef0:	611a      	str	r2, [r3, #16]
 8002ef2:	e01b      	b.n	8002f2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ef4:	897b      	ldrh	r3, [r7, #10]
 8002ef6:	11db      	asrs	r3, r3, #7
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 0306 	and.w	r3, r3, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f063 030f 	orn	r3, r3, #15
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	490e      	ldr	r1, [pc, #56]	@ (8002f4c <I2C_MasterRequestWrite+0xfc>)
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f898 	bl	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e010      	b.n	8002f44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f22:	897b      	ldrh	r3, [r7, #10]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4907      	ldr	r1, [pc, #28]	@ (8002f50 <I2C_MasterRequestWrite+0x100>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f888 	bl	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	00010008 	.word	0x00010008
 8002f50:	00010002 	.word	0x00010002

08002f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	4613      	mov	r3, r2
 8002f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f64:	e048      	b.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6c:	d044      	beq.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe fdbd 	bl	8001aec <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d139      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d10d      	bne.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	43da      	mvns	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	e00c      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d116      	bne.n	8002ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e023      	b.n	8003040 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d10d      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	e00c      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	43da      	mvns	r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	429a      	cmp	r2, r3
 800303c:	d093      	beq.n	8002f66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003056:	e071      	b.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003066:	d123      	bne.n	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003076:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f043 0204 	orr.w	r2, r3, #4
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e067      	b.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d041      	beq.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fe fd18 	bl	8001aec <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d136      	bne.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	0c1b      	lsrs	r3, r3, #16
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4013      	ands	r3, r2
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	e00b      	b.n	800310a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d016      	beq.n	800313c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f043 0220 	orr.w	r2, r3, #32
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e021      	b.n	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	0c1b      	lsrs	r3, r3, #16
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10c      	bne.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e00b      	b.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f af6d 	bne.w	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003194:	e034      	b.n	8003200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 f886 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e034      	b.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ac:	d028      	beq.n	8003200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ae:	f7fe fc9d 	bl	8001aec <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d302      	bcc.n	80031c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d11d      	bne.n	8003200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b80      	cmp	r3, #128	@ 0x80
 80031d0:	d016      	beq.n	8003200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	f043 0220 	orr.w	r2, r3, #32
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e007      	b.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320a:	2b80      	cmp	r3, #128	@ 0x80
 800320c:	d1c3      	bne.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003224:	e034      	b.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 f83e 	bl	80032a8 <I2C_IsAcknowledgeFailed>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e034      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d028      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323e:	f7fe fc55 	bl	8001aec <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d11d      	bne.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b04      	cmp	r3, #4
 8003260:	d016      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f043 0220 	orr.w	r2, r3, #32
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d1c3      	bne.n	8003226 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d11b      	bne.n	80032f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e272      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8087 	beq.w	8003432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003324:	4b92      	ldr	r3, [pc, #584]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b04      	cmp	r3, #4
 800332e:	d00c      	beq.n	800334a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003330:	4b8f      	ldr	r3, [pc, #572]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d112      	bne.n	8003362 <HAL_RCC_OscConfig+0x5e>
 800333c:	4b8c      	ldr	r3, [pc, #560]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003348:	d10b      	bne.n	8003362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334a:	4b89      	ldr	r3, [pc, #548]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d06c      	beq.n	8003430 <HAL_RCC_OscConfig+0x12c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d168      	bne.n	8003430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e24c      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x76>
 800336c:	4b80      	ldr	r3, [pc, #512]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a7f      	ldr	r2, [pc, #508]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0xd4>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x98>
 8003382:	4b7b      	ldr	r3, [pc, #492]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a7a      	ldr	r2, [pc, #488]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b78      	ldr	r3, [pc, #480]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a77      	ldr	r2, [pc, #476]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003394:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xd4>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xbc>
 80033a6:	4b72      	ldr	r3, [pc, #456]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a71      	ldr	r2, [pc, #452]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b6f      	ldr	r3, [pc, #444]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6e      	ldr	r2, [pc, #440]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xd4>
 80033c0:	4b6b      	ldr	r3, [pc, #428]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b68      	ldr	r3, [pc, #416]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a67      	ldr	r2, [pc, #412]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fe fb84 	bl	8001aec <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fb80 	bl	8001aec <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	@ 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e200      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe4>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fb70 	bl	8001aec <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fb6c 	bl	8001aec <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	@ 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e1ec      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b53      	ldr	r3, [pc, #332]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x10c>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800343e:	4b4c      	ldr	r3, [pc, #304]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800344a:	4b49      	ldr	r3, [pc, #292]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x18c>
 8003456:	4b46      	ldr	r3, [pc, #280]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b43      	ldr	r3, [pc, #268]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x176>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1c0      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4939      	ldr	r1, [pc, #228]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e03a      	b.n	8003506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b36      	ldr	r3, [pc, #216]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fe fb25 	bl	8001aec <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fe fb21 	bl	8001aec <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1a1      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4927      	ldr	r1, [pc, #156]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b26      	ldr	r3, [pc, #152]	@ (8003574 <HAL_RCC_OscConfig+0x270>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fb04 	bl	8001aec <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fe fb00 	bl	8001aec <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e180      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d03a      	beq.n	8003588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d019      	beq.n	800354e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fe fae4 	bl	8001aec <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fae0 	bl	8001aec <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e160      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4b0d      	ldr	r3, [pc, #52]	@ (8003570 <HAL_RCC_OscConfig+0x26c>)
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003546:	2001      	movs	r0, #1
 8003548:	f000 face 	bl	8003ae8 <RCC_Delay>
 800354c:	e01c      	b.n	8003588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354e:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <HAL_RCC_OscConfig+0x274>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003554:	f7fe faca 	bl	8001aec <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800355a:	e00f      	b.n	800357c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355c:	f7fe fac6 	bl	8001aec <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d908      	bls.n	800357c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e146      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	42420000 	.word	0x42420000
 8003578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357c:	4b92      	ldr	r3, [pc, #584]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e9      	bne.n	800355c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a6 	beq.w	80036e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800359a:	4b8b      	ldr	r3, [pc, #556]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10d      	bne.n	80035c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	4b88      	ldr	r3, [pc, #544]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4a87      	ldr	r2, [pc, #540]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	61d3      	str	r3, [r2, #28]
 80035b2:	4b85      	ldr	r3, [pc, #532]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035be:	2301      	movs	r3, #1
 80035c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c2:	4b82      	ldr	r3, [pc, #520]	@ (80037cc <HAL_RCC_OscConfig+0x4c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d118      	bne.n	8003600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ce:	4b7f      	ldr	r3, [pc, #508]	@ (80037cc <HAL_RCC_OscConfig+0x4c8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7e      	ldr	r2, [pc, #504]	@ (80037cc <HAL_RCC_OscConfig+0x4c8>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035da:	f7fe fa87 	bl	8001aec <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e2:	f7fe fa83 	bl	8001aec <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b64      	cmp	r3, #100	@ 0x64
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e103      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	4b75      	ldr	r3, [pc, #468]	@ (80037cc <HAL_RCC_OscConfig+0x4c8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x312>
 8003608:	4b6f      	ldr	r3, [pc, #444]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	4a6e      	ldr	r2, [pc, #440]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6213      	str	r3, [r2, #32]
 8003614:	e02d      	b.n	8003672 <HAL_RCC_OscConfig+0x36e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x334>
 800361e:	4b6a      	ldr	r3, [pc, #424]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a69      	ldr	r2, [pc, #420]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	4b67      	ldr	r3, [pc, #412]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a66      	ldr	r2, [pc, #408]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6213      	str	r3, [r2, #32]
 8003636:	e01c      	b.n	8003672 <HAL_RCC_OscConfig+0x36e>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x356>
 8003640:	4b61      	ldr	r3, [pc, #388]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a60      	ldr	r2, [pc, #384]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6213      	str	r3, [r2, #32]
 800364c:	4b5e      	ldr	r3, [pc, #376]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a5d      	ldr	r2, [pc, #372]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x36e>
 800365a:	4b5b      	ldr	r3, [pc, #364]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a5a      	ldr	r2, [pc, #360]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4b58      	ldr	r3, [pc, #352]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a57      	ldr	r2, [pc, #348]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367a:	f7fe fa37 	bl	8001aec <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fe fa33 	bl	8001aec <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0b1      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	4b4b      	ldr	r3, [pc, #300]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCC_OscConfig+0x37e>
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fa21 	bl	8001aec <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe fa1d 	bl	8001aec <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e09b      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b40      	ldr	r3, [pc, #256]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b3c      	ldr	r3, [pc, #240]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	4a3b      	ldr	r2, [pc, #236]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036ec:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d061      	beq.n	80037bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d146      	bne.n	800378e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b33      	ldr	r3, [pc, #204]	@ (80037d0 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fe f9f1 	bl	8001aec <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe f9ed 	bl	8001aec <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e06d      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	4b29      	ldr	r3, [pc, #164]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	d108      	bne.n	8003748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003736:	4b24      	ldr	r3, [pc, #144]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4921      	ldr	r1, [pc, #132]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003748:	4b1f      	ldr	r3, [pc, #124]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a19      	ldr	r1, [r3, #32]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	430b      	orrs	r3, r1
 800375a:	491b      	ldr	r1, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x4cc>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe f9c1 	bl	8001aec <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe f9bd 	bl	8001aec <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e03d      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x46a>
 800378c:	e035      	b.n	80037fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <HAL_RCC_OscConfig+0x4cc>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe f9aa 	bl	8001aec <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fe f9a6 	bl	8001aec <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e026      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x498>
 80037ba:	e01e      	b.n	80037fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e019      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003804 <HAL_RCC_OscConfig+0x500>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d001      	beq.n	80037fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0d0      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b6a      	ldr	r3, [pc, #424]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d910      	bls.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b67      	ldr	r3, [pc, #412]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f023 0207 	bic.w	r2, r3, #7
 8003832:	4965      	ldr	r1, [pc, #404]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	4b63      	ldr	r3, [pc, #396]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0b8      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003864:	4b59      	ldr	r3, [pc, #356]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a58      	ldr	r2, [pc, #352]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800386e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800387c:	4b53      	ldr	r3, [pc, #332]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a52      	ldr	r2, [pc, #328]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b50      	ldr	r3, [pc, #320]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	494d      	ldr	r1, [pc, #308]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	4313      	orrs	r3, r2
 8003898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d040      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d107      	bne.n	80038be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	4b47      	ldr	r3, [pc, #284]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d115      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07f      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e073      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3d      	ldr	r3, [pc, #244]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e06b      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b39      	ldr	r3, [pc, #228]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4936      	ldr	r1, [pc, #216]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe f8f8 	bl	8001aec <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe f8f4 	bl	8001aec <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e053      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2d      	ldr	r3, [pc, #180]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d210      	bcs.n	8003958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f023 0207 	bic.w	r2, r3, #7
 800393e:	4922      	ldr	r1, [pc, #136]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	4313      	orrs	r3, r2
 8003944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003946:	4b20      	ldr	r3, [pc, #128]	@ (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d001      	beq.n	8003958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e032      	b.n	80039be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4916      	ldr	r1, [pc, #88]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	490e      	ldr	r1, [pc, #56]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003996:	f000 f821 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 800399a:	4602      	mov	r2, r0
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	490a      	ldr	r1, [pc, #40]	@ (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039a8:	5ccb      	ldrb	r3, [r1, r3]
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	4a09      	ldr	r2, [pc, #36]	@ (80039d4 <HAL_RCC_ClockConfig+0x1cc>)
 80039b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039b2:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <HAL_RCC_ClockConfig+0x1d0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe f856 	bl	8001a68 <HAL_InitTick>

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08008ad0 	.word	0x08008ad0
 80039d4:	20000000 	.word	0x20000000
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	2300      	movs	r3, #0
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d002      	beq.n	8003a0c <HAL_RCC_GetSysClockFreq+0x30>
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d003      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x36>
 8003a0a:	e027      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a0c:	4b19      	ldr	r3, [pc, #100]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0e:	613b      	str	r3, [r7, #16]
      break;
 8003a10:	e027      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0c9b      	lsrs	r3, r3, #18
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	4a17      	ldr	r2, [pc, #92]	@ (8003a78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
 8003a1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a2a:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	0c5b      	lsrs	r3, r3, #17
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	4a11      	ldr	r2, [pc, #68]	@ (8003a7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a36:	5cd3      	ldrb	r3, [r2, r3]
 8003a38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e004      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	613b      	str	r3, [r7, #16]
      break;
 8003a5a:	e002      	b.n	8003a62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5e:	613b      	str	r3, [r7, #16]
      break;
 8003a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a62:	693b      	ldr	r3, [r7, #16]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	371c      	adds	r7, #28
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000
 8003a74:	007a1200 	.word	0x007a1200
 8003a78:	08008ae8 	.word	0x08008ae8
 8003a7c:	08008af8 	.word	0x08008af8
 8003a80:	003d0900 	.word	0x003d0900

08003a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a88:	4b02      	ldr	r3, [pc, #8]	@ (8003a94 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a9c:	f7ff fff2 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	@ (8003abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	08008ae0 	.word	0x08008ae0

08003ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ac4:	f7ff ffde 	bl	8003a84 <HAL_RCC_GetHCLKFreq>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	0adb      	lsrs	r3, r3, #11
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	4903      	ldr	r1, [pc, #12]	@ (8003ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad6:	5ccb      	ldrb	r3, [r1, r3]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	08008ae0 	.word	0x08008ae0

08003ae8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003af0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <RCC_Delay+0x34>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <RCC_Delay+0x38>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0a5b      	lsrs	r3, r3, #9
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	fb02 f303 	mul.w	r3, r2, r3
 8003b02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b04:	bf00      	nop
  }
  while (Delay --);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	60fa      	str	r2, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f9      	bne.n	8003b04 <RCC_Delay+0x1c>
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bc80      	pop	{r7}
 8003b1a:	4770      	bx	lr
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	10624dd3 	.word	0x10624dd3

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d07d      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b40:	2300      	movs	r3, #0
 8003b42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b44:	4b4f      	ldr	r3, [pc, #316]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b50:	4b4c      	ldr	r3, [pc, #304]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	4a4b      	ldr	r2, [pc, #300]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	61d3      	str	r3, [r2, #28]
 8003b5c:	4b49      	ldr	r3, [pc, #292]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6c:	4b46      	ldr	r3, [pc, #280]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d118      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b78:	4b43      	ldr	r3, [pc, #268]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b84:	f7fd ffb2 	bl	8001aec <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fd ffae 	bl	8001aec <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e06d      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003baa:	4b36      	ldr	r3, [pc, #216]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d02e      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d027      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bde:	4a29      	ldr	r2, [pc, #164]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d014      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fd ff7d 	bl	8001aec <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf6:	f7fd ff79 	bl	8001aec <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e036      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ee      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c18:	4b1a      	ldr	r3, [pc, #104]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4917      	ldr	r1, [pc, #92]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c2a:	7dfb      	ldrb	r3, [r7, #23]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c30:	4b14      	ldr	r3, [pc, #80]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4a13      	ldr	r2, [pc, #76]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c48:	4b0e      	ldr	r3, [pc, #56]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	490b      	ldr	r1, [pc, #44]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c66:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4904      	ldr	r1, [pc, #16]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	42420440 	.word	0x42420440

08003c90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	f200 808a 	bhi.w	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d045      	beq.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d075      	beq.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003cc6:	e082      	b.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003cc8:	4b46      	ldr	r3, [pc, #280]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003cce:	4b45      	ldr	r3, [pc, #276]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d07b      	beq.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	0c9b      	lsrs	r3, r3, #18
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	4a41      	ldr	r2, [pc, #260]	@ (8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003ce4:	5cd3      	ldrb	r3, [r2, r3]
 8003ce6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d015      	beq.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	0c5b      	lsrs	r3, r3, #17
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003cfe:	5cd3      	ldrb	r3, [r2, r3]
 8003d00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	e004      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4a34      	ldr	r2, [pc, #208]	@ (8003df4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003d28:	4b2e      	ldr	r3, [pc, #184]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d34:	d102      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	61bb      	str	r3, [r7, #24]
      break;
 8003d3a:	e04a      	b.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4a2d      	ldr	r2, [pc, #180]	@ (8003df8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	085b      	lsrs	r3, r3, #1
 8003d48:	61bb      	str	r3, [r7, #24]
      break;
 8003d4a:	e042      	b.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d4c:	4b25      	ldr	r3, [pc, #148]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d5c:	d108      	bne.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	e01f      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d7a:	d109      	bne.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d7c:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d88:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d9a:	d11c      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d9c:	4b11      	ldr	r3, [pc, #68]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003da8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003dac:	61bb      	str	r3, [r7, #24]
      break;
 8003dae:	e012      	b.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003db0:	e011      	b.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003db2:	f7ff fe85 	bl	8003ac0 <HAL_RCC_GetPCLK2Freq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0b9b      	lsrs	r3, r3, #14
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	61bb      	str	r3, [r7, #24]
      break;
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e000      	b.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003dd6:	bf00      	nop
    }
  }
  return (frequency);
 8003dd8:	69bb      	ldr	r3, [r7, #24]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08008afc 	.word	0x08008afc
 8003dec:	08008b0c 	.word	0x08008b0c
 8003df0:	007a1200 	.word	0x007a1200
 8003df4:	003d0900 	.word	0x003d0900
 8003df8:	aaaaaaab 	.word	0xaaaaaaab

08003dfc <__cvt>:
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e02:	461d      	mov	r5, r3
 8003e04:	bfbb      	ittet	lt
 8003e06:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003e0a:	461d      	movlt	r5, r3
 8003e0c:	2300      	movge	r3, #0
 8003e0e:	232d      	movlt	r3, #45	@ 0x2d
 8003e10:	b088      	sub	sp, #32
 8003e12:	4614      	mov	r4, r2
 8003e14:	bfb8      	it	lt
 8003e16:	4614      	movlt	r4, r2
 8003e18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003e1a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003e1c:	7013      	strb	r3, [r2, #0]
 8003e1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003e20:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003e24:	f023 0820 	bic.w	r8, r3, #32
 8003e28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e2c:	d005      	beq.n	8003e3a <__cvt+0x3e>
 8003e2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e32:	d100      	bne.n	8003e36 <__cvt+0x3a>
 8003e34:	3601      	adds	r6, #1
 8003e36:	2302      	movs	r3, #2
 8003e38:	e000      	b.n	8003e3c <__cvt+0x40>
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	aa07      	add	r2, sp, #28
 8003e3e:	9204      	str	r2, [sp, #16]
 8003e40:	aa06      	add	r2, sp, #24
 8003e42:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e46:	e9cd 3600 	strd	r3, r6, [sp]
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	f001 f88b 	bl	8004f68 <_dtoa_r>
 8003e52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e56:	4607      	mov	r7, r0
 8003e58:	d119      	bne.n	8003e8e <__cvt+0x92>
 8003e5a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003e5c:	07db      	lsls	r3, r3, #31
 8003e5e:	d50e      	bpl.n	8003e7e <__cvt+0x82>
 8003e60:	eb00 0906 	add.w	r9, r0, r6
 8003e64:	2200      	movs	r2, #0
 8003e66:	2300      	movs	r3, #0
 8003e68:	4620      	mov	r0, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	f7fc fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003e70:	b108      	cbz	r0, 8003e76 <__cvt+0x7a>
 8003e72:	f8cd 901c 	str.w	r9, [sp, #28]
 8003e76:	2230      	movs	r2, #48	@ 0x30
 8003e78:	9b07      	ldr	r3, [sp, #28]
 8003e7a:	454b      	cmp	r3, r9
 8003e7c:	d31e      	bcc.n	8003ebc <__cvt+0xc0>
 8003e7e:	4638      	mov	r0, r7
 8003e80:	9b07      	ldr	r3, [sp, #28]
 8003e82:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003e84:	1bdb      	subs	r3, r3, r7
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	b008      	add	sp, #32
 8003e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e92:	eb00 0906 	add.w	r9, r0, r6
 8003e96:	d1e5      	bne.n	8003e64 <__cvt+0x68>
 8003e98:	7803      	ldrb	r3, [r0, #0]
 8003e9a:	2b30      	cmp	r3, #48	@ 0x30
 8003e9c:	d10a      	bne.n	8003eb4 <__cvt+0xb8>
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc fd7f 	bl	80009a8 <__aeabi_dcmpeq>
 8003eaa:	b918      	cbnz	r0, 8003eb4 <__cvt+0xb8>
 8003eac:	f1c6 0601 	rsb	r6, r6, #1
 8003eb0:	f8ca 6000 	str.w	r6, [sl]
 8003eb4:	f8da 3000 	ldr.w	r3, [sl]
 8003eb8:	4499      	add	r9, r3
 8003eba:	e7d3      	b.n	8003e64 <__cvt+0x68>
 8003ebc:	1c59      	adds	r1, r3, #1
 8003ebe:	9107      	str	r1, [sp, #28]
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e7d9      	b.n	8003e78 <__cvt+0x7c>

08003ec4 <__exponent>:
 8003ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ec6:	2900      	cmp	r1, #0
 8003ec8:	bfb6      	itet	lt
 8003eca:	232d      	movlt	r3, #45	@ 0x2d
 8003ecc:	232b      	movge	r3, #43	@ 0x2b
 8003ece:	4249      	neglt	r1, r1
 8003ed0:	2909      	cmp	r1, #9
 8003ed2:	7002      	strb	r2, [r0, #0]
 8003ed4:	7043      	strb	r3, [r0, #1]
 8003ed6:	dd29      	ble.n	8003f2c <__exponent+0x68>
 8003ed8:	f10d 0307 	add.w	r3, sp, #7
 8003edc:	461d      	mov	r5, r3
 8003ede:	270a      	movs	r7, #10
 8003ee0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	fb07 1416 	mls	r4, r7, r6, r1
 8003eea:	3430      	adds	r4, #48	@ 0x30
 8003eec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	2c63      	cmp	r4, #99	@ 0x63
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003efa:	dcf1      	bgt.n	8003ee0 <__exponent+0x1c>
 8003efc:	3130      	adds	r1, #48	@ 0x30
 8003efe:	1e94      	subs	r4, r2, #2
 8003f00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f04:	4623      	mov	r3, r4
 8003f06:	1c41      	adds	r1, r0, #1
 8003f08:	42ab      	cmp	r3, r5
 8003f0a:	d30a      	bcc.n	8003f22 <__exponent+0x5e>
 8003f0c:	f10d 0309 	add.w	r3, sp, #9
 8003f10:	1a9b      	subs	r3, r3, r2
 8003f12:	42ac      	cmp	r4, r5
 8003f14:	bf88      	it	hi
 8003f16:	2300      	movhi	r3, #0
 8003f18:	3302      	adds	r3, #2
 8003f1a:	4403      	add	r3, r0
 8003f1c:	1a18      	subs	r0, r3, r0
 8003f1e:	b003      	add	sp, #12
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f2a:	e7ed      	b.n	8003f08 <__exponent+0x44>
 8003f2c:	2330      	movs	r3, #48	@ 0x30
 8003f2e:	3130      	adds	r1, #48	@ 0x30
 8003f30:	7083      	strb	r3, [r0, #2]
 8003f32:	70c1      	strb	r1, [r0, #3]
 8003f34:	1d03      	adds	r3, r0, #4
 8003f36:	e7f1      	b.n	8003f1c <__exponent+0x58>

08003f38 <_printf_float>:
 8003f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3c:	b091      	sub	sp, #68	@ 0x44
 8003f3e:	460c      	mov	r4, r1
 8003f40:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003f44:	4616      	mov	r6, r2
 8003f46:	461f      	mov	r7, r3
 8003f48:	4605      	mov	r5, r0
 8003f4a:	f000 feeb 	bl	8004d24 <_localeconv_r>
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	9308      	str	r3, [sp, #32]
 8003f54:	f7fc f8fc 	bl	8000150 <strlen>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003f60:	9009      	str	r0, [sp, #36]	@ 0x24
 8003f62:	3307      	adds	r3, #7
 8003f64:	f023 0307 	bic.w	r3, r3, #7
 8003f68:	f103 0208 	add.w	r2, r3, #8
 8003f6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f70:	f8d4 b000 	ldr.w	fp, [r4]
 8003f74:	f8c8 2000 	str.w	r2, [r8]
 8003f78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f82:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003f86:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f92:	4b9c      	ldr	r3, [pc, #624]	@ (8004204 <_printf_float+0x2cc>)
 8003f94:	f7fc fd3a 	bl	8000a0c <__aeabi_dcmpun>
 8003f98:	bb70      	cbnz	r0, 8003ff8 <_printf_float+0xc0>
 8003f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa2:	4b98      	ldr	r3, [pc, #608]	@ (8004204 <_printf_float+0x2cc>)
 8003fa4:	f7fc fd14 	bl	80009d0 <__aeabi_dcmple>
 8003fa8:	bb30      	cbnz	r0, 8003ff8 <_printf_float+0xc0>
 8003faa:	2200      	movs	r2, #0
 8003fac:	2300      	movs	r3, #0
 8003fae:	4640      	mov	r0, r8
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	f7fc fd03 	bl	80009bc <__aeabi_dcmplt>
 8003fb6:	b110      	cbz	r0, 8003fbe <_printf_float+0x86>
 8003fb8:	232d      	movs	r3, #45	@ 0x2d
 8003fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fbe:	4a92      	ldr	r2, [pc, #584]	@ (8004208 <_printf_float+0x2d0>)
 8003fc0:	4b92      	ldr	r3, [pc, #584]	@ (800420c <_printf_float+0x2d4>)
 8003fc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fc6:	bf8c      	ite	hi
 8003fc8:	4690      	movhi	r8, r2
 8003fca:	4698      	movls	r8, r3
 8003fcc:	2303      	movs	r3, #3
 8003fce:	f04f 0900 	mov.w	r9, #0
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	f02b 0304 	bic.w	r3, fp, #4
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	4633      	mov	r3, r6
 8003fdc:	4621      	mov	r1, r4
 8003fde:	4628      	mov	r0, r5
 8003fe0:	9700      	str	r7, [sp, #0]
 8003fe2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003fe4:	f000 f9d4 	bl	8004390 <_printf_common>
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f040 8090 	bne.w	800410e <_printf_float+0x1d6>
 8003fee:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff2:	b011      	add	sp, #68	@ 0x44
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	4640      	mov	r0, r8
 8003ffe:	4649      	mov	r1, r9
 8004000:	f7fc fd04 	bl	8000a0c <__aeabi_dcmpun>
 8004004:	b148      	cbz	r0, 800401a <_printf_float+0xe2>
 8004006:	464b      	mov	r3, r9
 8004008:	2b00      	cmp	r3, #0
 800400a:	bfb8      	it	lt
 800400c:	232d      	movlt	r3, #45	@ 0x2d
 800400e:	4a80      	ldr	r2, [pc, #512]	@ (8004210 <_printf_float+0x2d8>)
 8004010:	bfb8      	it	lt
 8004012:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004016:	4b7f      	ldr	r3, [pc, #508]	@ (8004214 <_printf_float+0x2dc>)
 8004018:	e7d3      	b.n	8003fc2 <_printf_float+0x8a>
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	d13f      	bne.n	80040a4 <_printf_float+0x16c>
 8004024:	2306      	movs	r3, #6
 8004026:	6063      	str	r3, [r4, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	9206      	str	r2, [sp, #24]
 8004032:	aa0e      	add	r2, sp, #56	@ 0x38
 8004034:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004038:	aa0d      	add	r2, sp, #52	@ 0x34
 800403a:	9203      	str	r2, [sp, #12]
 800403c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004040:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	4642      	mov	r2, r8
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4628      	mov	r0, r5
 800404c:	464b      	mov	r3, r9
 800404e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004050:	f7ff fed4 	bl	8003dfc <__cvt>
 8004054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004056:	4680      	mov	r8, r0
 8004058:	2947      	cmp	r1, #71	@ 0x47
 800405a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800405c:	d128      	bne.n	80040b0 <_printf_float+0x178>
 800405e:	1cc8      	adds	r0, r1, #3
 8004060:	db02      	blt.n	8004068 <_printf_float+0x130>
 8004062:	6863      	ldr	r3, [r4, #4]
 8004064:	4299      	cmp	r1, r3
 8004066:	dd40      	ble.n	80040ea <_printf_float+0x1b2>
 8004068:	f1aa 0a02 	sub.w	sl, sl, #2
 800406c:	fa5f fa8a 	uxtb.w	sl, sl
 8004070:	4652      	mov	r2, sl
 8004072:	3901      	subs	r1, #1
 8004074:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004078:	910d      	str	r1, [sp, #52]	@ 0x34
 800407a:	f7ff ff23 	bl	8003ec4 <__exponent>
 800407e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004080:	4681      	mov	r9, r0
 8004082:	1813      	adds	r3, r2, r0
 8004084:	2a01      	cmp	r2, #1
 8004086:	6123      	str	r3, [r4, #16]
 8004088:	dc02      	bgt.n	8004090 <_printf_float+0x158>
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	07d2      	lsls	r2, r2, #31
 800408e:	d501      	bpl.n	8004094 <_printf_float+0x15c>
 8004090:	3301      	adds	r3, #1
 8004092:	6123      	str	r3, [r4, #16]
 8004094:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004098:	2b00      	cmp	r3, #0
 800409a:	d09e      	beq.n	8003fda <_printf_float+0xa2>
 800409c:	232d      	movs	r3, #45	@ 0x2d
 800409e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040a2:	e79a      	b.n	8003fda <_printf_float+0xa2>
 80040a4:	2947      	cmp	r1, #71	@ 0x47
 80040a6:	d1bf      	bne.n	8004028 <_printf_float+0xf0>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1bd      	bne.n	8004028 <_printf_float+0xf0>
 80040ac:	2301      	movs	r3, #1
 80040ae:	e7ba      	b.n	8004026 <_printf_float+0xee>
 80040b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040b4:	d9dc      	bls.n	8004070 <_printf_float+0x138>
 80040b6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040ba:	d118      	bne.n	80040ee <_printf_float+0x1b6>
 80040bc:	2900      	cmp	r1, #0
 80040be:	6863      	ldr	r3, [r4, #4]
 80040c0:	dd0b      	ble.n	80040da <_printf_float+0x1a2>
 80040c2:	6121      	str	r1, [r4, #16]
 80040c4:	b913      	cbnz	r3, 80040cc <_printf_float+0x194>
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	07d0      	lsls	r0, r2, #31
 80040ca:	d502      	bpl.n	80040d2 <_printf_float+0x19a>
 80040cc:	3301      	adds	r3, #1
 80040ce:	440b      	add	r3, r1
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	f04f 0900 	mov.w	r9, #0
 80040d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040d8:	e7dc      	b.n	8004094 <_printf_float+0x15c>
 80040da:	b913      	cbnz	r3, 80040e2 <_printf_float+0x1aa>
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	07d2      	lsls	r2, r2, #31
 80040e0:	d501      	bpl.n	80040e6 <_printf_float+0x1ae>
 80040e2:	3302      	adds	r3, #2
 80040e4:	e7f4      	b.n	80040d0 <_printf_float+0x198>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e7f2      	b.n	80040d0 <_printf_float+0x198>
 80040ea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040f0:	4299      	cmp	r1, r3
 80040f2:	db05      	blt.n	8004100 <_printf_float+0x1c8>
 80040f4:	6823      	ldr	r3, [r4, #0]
 80040f6:	6121      	str	r1, [r4, #16]
 80040f8:	07d8      	lsls	r0, r3, #31
 80040fa:	d5ea      	bpl.n	80040d2 <_printf_float+0x19a>
 80040fc:	1c4b      	adds	r3, r1, #1
 80040fe:	e7e7      	b.n	80040d0 <_printf_float+0x198>
 8004100:	2900      	cmp	r1, #0
 8004102:	bfcc      	ite	gt
 8004104:	2201      	movgt	r2, #1
 8004106:	f1c1 0202 	rsble	r2, r1, #2
 800410a:	4413      	add	r3, r2
 800410c:	e7e0      	b.n	80040d0 <_printf_float+0x198>
 800410e:	6823      	ldr	r3, [r4, #0]
 8004110:	055a      	lsls	r2, r3, #21
 8004112:	d407      	bmi.n	8004124 <_printf_float+0x1ec>
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	4642      	mov	r2, r8
 8004118:	4631      	mov	r1, r6
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	d12b      	bne.n	800417a <_printf_float+0x242>
 8004122:	e764      	b.n	8003fee <_printf_float+0xb6>
 8004124:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004128:	f240 80dc 	bls.w	80042e4 <_printf_float+0x3ac>
 800412c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004130:	2200      	movs	r2, #0
 8004132:	2300      	movs	r3, #0
 8004134:	f7fc fc38 	bl	80009a8 <__aeabi_dcmpeq>
 8004138:	2800      	cmp	r0, #0
 800413a:	d033      	beq.n	80041a4 <_printf_float+0x26c>
 800413c:	2301      	movs	r3, #1
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <_printf_float+0x2e0>)
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af51 	beq.w	8003fee <_printf_float+0xb6>
 800414c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004150:	4543      	cmp	r3, r8
 8004152:	db02      	blt.n	800415a <_printf_float+0x222>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07d8      	lsls	r0, r3, #31
 8004158:	d50f      	bpl.n	800417a <_printf_float+0x242>
 800415a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800415e:	4631      	mov	r1, r6
 8004160:	4628      	mov	r0, r5
 8004162:	47b8      	blx	r7
 8004164:	3001      	adds	r0, #1
 8004166:	f43f af42 	beq.w	8003fee <_printf_float+0xb6>
 800416a:	f04f 0900 	mov.w	r9, #0
 800416e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004172:	f104 0a1a 	add.w	sl, r4, #26
 8004176:	45c8      	cmp	r8, r9
 8004178:	dc09      	bgt.n	800418e <_printf_float+0x256>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	079b      	lsls	r3, r3, #30
 800417e:	f100 8102 	bmi.w	8004386 <_printf_float+0x44e>
 8004182:	68e0      	ldr	r0, [r4, #12]
 8004184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004186:	4298      	cmp	r0, r3
 8004188:	bfb8      	it	lt
 800418a:	4618      	movlt	r0, r3
 800418c:	e731      	b.n	8003ff2 <_printf_float+0xba>
 800418e:	2301      	movs	r3, #1
 8004190:	4652      	mov	r2, sl
 8004192:	4631      	mov	r1, r6
 8004194:	4628      	mov	r0, r5
 8004196:	47b8      	blx	r7
 8004198:	3001      	adds	r0, #1
 800419a:	f43f af28 	beq.w	8003fee <_printf_float+0xb6>
 800419e:	f109 0901 	add.w	r9, r9, #1
 80041a2:	e7e8      	b.n	8004176 <_printf_float+0x23e>
 80041a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	dc38      	bgt.n	800421c <_printf_float+0x2e4>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <_printf_float+0x2e0>)
 80041b2:	47b8      	blx	r7
 80041b4:	3001      	adds	r0, #1
 80041b6:	f43f af1a 	beq.w	8003fee <_printf_float+0xb6>
 80041ba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80041be:	ea59 0303 	orrs.w	r3, r9, r3
 80041c2:	d102      	bne.n	80041ca <_printf_float+0x292>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	07d9      	lsls	r1, r3, #31
 80041c8:	d5d7      	bpl.n	800417a <_printf_float+0x242>
 80041ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f af0a 	beq.w	8003fee <_printf_float+0xb6>
 80041da:	f04f 0a00 	mov.w	sl, #0
 80041de:	f104 0b1a 	add.w	fp, r4, #26
 80041e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80041e4:	425b      	negs	r3, r3
 80041e6:	4553      	cmp	r3, sl
 80041e8:	dc01      	bgt.n	80041ee <_printf_float+0x2b6>
 80041ea:	464b      	mov	r3, r9
 80041ec:	e793      	b.n	8004116 <_printf_float+0x1de>
 80041ee:	2301      	movs	r3, #1
 80041f0:	465a      	mov	r2, fp
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	f43f aef8 	beq.w	8003fee <_printf_float+0xb6>
 80041fe:	f10a 0a01 	add.w	sl, sl, #1
 8004202:	e7ee      	b.n	80041e2 <_printf_float+0x2aa>
 8004204:	7fefffff 	.word	0x7fefffff
 8004208:	08008b12 	.word	0x08008b12
 800420c:	08008b0e 	.word	0x08008b0e
 8004210:	08008b1a 	.word	0x08008b1a
 8004214:	08008b16 	.word	0x08008b16
 8004218:	08008b1e 	.word	0x08008b1e
 800421c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800421e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004222:	4553      	cmp	r3, sl
 8004224:	bfa8      	it	ge
 8004226:	4653      	movge	r3, sl
 8004228:	2b00      	cmp	r3, #0
 800422a:	4699      	mov	r9, r3
 800422c:	dc36      	bgt.n	800429c <_printf_float+0x364>
 800422e:	f04f 0b00 	mov.w	fp, #0
 8004232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004236:	f104 021a 	add.w	r2, r4, #26
 800423a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800423c:	930a      	str	r3, [sp, #40]	@ 0x28
 800423e:	eba3 0309 	sub.w	r3, r3, r9
 8004242:	455b      	cmp	r3, fp
 8004244:	dc31      	bgt.n	80042aa <_printf_float+0x372>
 8004246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004248:	459a      	cmp	sl, r3
 800424a:	dc3a      	bgt.n	80042c2 <_printf_float+0x38a>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	07da      	lsls	r2, r3, #31
 8004250:	d437      	bmi.n	80042c2 <_printf_float+0x38a>
 8004252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004254:	ebaa 0903 	sub.w	r9, sl, r3
 8004258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800425a:	ebaa 0303 	sub.w	r3, sl, r3
 800425e:	4599      	cmp	r9, r3
 8004260:	bfa8      	it	ge
 8004262:	4699      	movge	r9, r3
 8004264:	f1b9 0f00 	cmp.w	r9, #0
 8004268:	dc33      	bgt.n	80042d2 <_printf_float+0x39a>
 800426a:	f04f 0800 	mov.w	r8, #0
 800426e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004272:	f104 0b1a 	add.w	fp, r4, #26
 8004276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004278:	ebaa 0303 	sub.w	r3, sl, r3
 800427c:	eba3 0309 	sub.w	r3, r3, r9
 8004280:	4543      	cmp	r3, r8
 8004282:	f77f af7a 	ble.w	800417a <_printf_float+0x242>
 8004286:	2301      	movs	r3, #1
 8004288:	465a      	mov	r2, fp
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f aeac 	beq.w	8003fee <_printf_float+0xb6>
 8004296:	f108 0801 	add.w	r8, r8, #1
 800429a:	e7ec      	b.n	8004276 <_printf_float+0x33e>
 800429c:	4642      	mov	r2, r8
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	d1c2      	bne.n	800422e <_printf_float+0x2f6>
 80042a8:	e6a1      	b.n	8003fee <_printf_float+0xb6>
 80042aa:	2301      	movs	r3, #1
 80042ac:	4631      	mov	r1, r6
 80042ae:	4628      	mov	r0, r5
 80042b0:	920a      	str	r2, [sp, #40]	@ 0x28
 80042b2:	47b8      	blx	r7
 80042b4:	3001      	adds	r0, #1
 80042b6:	f43f ae9a 	beq.w	8003fee <_printf_float+0xb6>
 80042ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042bc:	f10b 0b01 	add.w	fp, fp, #1
 80042c0:	e7bb      	b.n	800423a <_printf_float+0x302>
 80042c2:	4631      	mov	r1, r6
 80042c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1c0      	bne.n	8004252 <_printf_float+0x31a>
 80042d0:	e68d      	b.n	8003fee <_printf_float+0xb6>
 80042d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80042d4:	464b      	mov	r3, r9
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	4442      	add	r2, r8
 80042dc:	47b8      	blx	r7
 80042de:	3001      	adds	r0, #1
 80042e0:	d1c3      	bne.n	800426a <_printf_float+0x332>
 80042e2:	e684      	b.n	8003fee <_printf_float+0xb6>
 80042e4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80042e8:	f1ba 0f01 	cmp.w	sl, #1
 80042ec:	dc01      	bgt.n	80042f2 <_printf_float+0x3ba>
 80042ee:	07db      	lsls	r3, r3, #31
 80042f0:	d536      	bpl.n	8004360 <_printf_float+0x428>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4642      	mov	r2, r8
 80042f6:	4631      	mov	r1, r6
 80042f8:	4628      	mov	r0, r5
 80042fa:	47b8      	blx	r7
 80042fc:	3001      	adds	r0, #1
 80042fe:	f43f ae76 	beq.w	8003fee <_printf_float+0xb6>
 8004302:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae6e 	beq.w	8003fee <_printf_float+0xb6>
 8004312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004316:	2200      	movs	r2, #0
 8004318:	2300      	movs	r3, #0
 800431a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800431e:	f7fc fb43 	bl	80009a8 <__aeabi_dcmpeq>
 8004322:	b9c0      	cbnz	r0, 8004356 <_printf_float+0x41e>
 8004324:	4653      	mov	r3, sl
 8004326:	f108 0201 	add.w	r2, r8, #1
 800432a:	4631      	mov	r1, r6
 800432c:	4628      	mov	r0, r5
 800432e:	47b8      	blx	r7
 8004330:	3001      	adds	r0, #1
 8004332:	d10c      	bne.n	800434e <_printf_float+0x416>
 8004334:	e65b      	b.n	8003fee <_printf_float+0xb6>
 8004336:	2301      	movs	r3, #1
 8004338:	465a      	mov	r2, fp
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	f43f ae54 	beq.w	8003fee <_printf_float+0xb6>
 8004346:	f108 0801 	add.w	r8, r8, #1
 800434a:	45d0      	cmp	r8, sl
 800434c:	dbf3      	blt.n	8004336 <_printf_float+0x3fe>
 800434e:	464b      	mov	r3, r9
 8004350:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004354:	e6e0      	b.n	8004118 <_printf_float+0x1e0>
 8004356:	f04f 0800 	mov.w	r8, #0
 800435a:	f104 0b1a 	add.w	fp, r4, #26
 800435e:	e7f4      	b.n	800434a <_printf_float+0x412>
 8004360:	2301      	movs	r3, #1
 8004362:	4642      	mov	r2, r8
 8004364:	e7e1      	b.n	800432a <_printf_float+0x3f2>
 8004366:	2301      	movs	r3, #1
 8004368:	464a      	mov	r2, r9
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	f43f ae3c 	beq.w	8003fee <_printf_float+0xb6>
 8004376:	f108 0801 	add.w	r8, r8, #1
 800437a:	68e3      	ldr	r3, [r4, #12]
 800437c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800437e:	1a5b      	subs	r3, r3, r1
 8004380:	4543      	cmp	r3, r8
 8004382:	dcf0      	bgt.n	8004366 <_printf_float+0x42e>
 8004384:	e6fd      	b.n	8004182 <_printf_float+0x24a>
 8004386:	f04f 0800 	mov.w	r8, #0
 800438a:	f104 0919 	add.w	r9, r4, #25
 800438e:	e7f4      	b.n	800437a <_printf_float+0x442>

08004390 <_printf_common>:
 8004390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004394:	4616      	mov	r6, r2
 8004396:	4698      	mov	r8, r3
 8004398:	688a      	ldr	r2, [r1, #8]
 800439a:	690b      	ldr	r3, [r1, #16]
 800439c:	4607      	mov	r7, r0
 800439e:	4293      	cmp	r3, r2
 80043a0:	bfb8      	it	lt
 80043a2:	4613      	movlt	r3, r2
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043aa:	460c      	mov	r4, r1
 80043ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043b0:	b10a      	cbz	r2, 80043b6 <_printf_common+0x26>
 80043b2:	3301      	adds	r3, #1
 80043b4:	6033      	str	r3, [r6, #0]
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	0699      	lsls	r1, r3, #26
 80043ba:	bf42      	ittt	mi
 80043bc:	6833      	ldrmi	r3, [r6, #0]
 80043be:	3302      	addmi	r3, #2
 80043c0:	6033      	strmi	r3, [r6, #0]
 80043c2:	6825      	ldr	r5, [r4, #0]
 80043c4:	f015 0506 	ands.w	r5, r5, #6
 80043c8:	d106      	bne.n	80043d8 <_printf_common+0x48>
 80043ca:	f104 0a19 	add.w	sl, r4, #25
 80043ce:	68e3      	ldr	r3, [r4, #12]
 80043d0:	6832      	ldr	r2, [r6, #0]
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	42ab      	cmp	r3, r5
 80043d6:	dc2b      	bgt.n	8004430 <_printf_common+0xa0>
 80043d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043dc:	6822      	ldr	r2, [r4, #0]
 80043de:	3b00      	subs	r3, #0
 80043e0:	bf18      	it	ne
 80043e2:	2301      	movne	r3, #1
 80043e4:	0692      	lsls	r2, r2, #26
 80043e6:	d430      	bmi.n	800444a <_printf_common+0xba>
 80043e8:	4641      	mov	r1, r8
 80043ea:	4638      	mov	r0, r7
 80043ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043f0:	47c8      	blx	r9
 80043f2:	3001      	adds	r0, #1
 80043f4:	d023      	beq.n	800443e <_printf_common+0xae>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	6922      	ldr	r2, [r4, #16]
 80043fa:	f003 0306 	and.w	r3, r3, #6
 80043fe:	2b04      	cmp	r3, #4
 8004400:	bf14      	ite	ne
 8004402:	2500      	movne	r5, #0
 8004404:	6833      	ldreq	r3, [r6, #0]
 8004406:	f04f 0600 	mov.w	r6, #0
 800440a:	bf08      	it	eq
 800440c:	68e5      	ldreq	r5, [r4, #12]
 800440e:	f104 041a 	add.w	r4, r4, #26
 8004412:	bf08      	it	eq
 8004414:	1aed      	subeq	r5, r5, r3
 8004416:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800441a:	bf08      	it	eq
 800441c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004420:	4293      	cmp	r3, r2
 8004422:	bfc4      	itt	gt
 8004424:	1a9b      	subgt	r3, r3, r2
 8004426:	18ed      	addgt	r5, r5, r3
 8004428:	42b5      	cmp	r5, r6
 800442a:	d11a      	bne.n	8004462 <_printf_common+0xd2>
 800442c:	2000      	movs	r0, #0
 800442e:	e008      	b.n	8004442 <_printf_common+0xb2>
 8004430:	2301      	movs	r3, #1
 8004432:	4652      	mov	r2, sl
 8004434:	4641      	mov	r1, r8
 8004436:	4638      	mov	r0, r7
 8004438:	47c8      	blx	r9
 800443a:	3001      	adds	r0, #1
 800443c:	d103      	bne.n	8004446 <_printf_common+0xb6>
 800443e:	f04f 30ff 	mov.w	r0, #4294967295
 8004442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004446:	3501      	adds	r5, #1
 8004448:	e7c1      	b.n	80043ce <_printf_common+0x3e>
 800444a:	2030      	movs	r0, #48	@ 0x30
 800444c:	18e1      	adds	r1, r4, r3
 800444e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004458:	4422      	add	r2, r4
 800445a:	3302      	adds	r3, #2
 800445c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004460:	e7c2      	b.n	80043e8 <_printf_common+0x58>
 8004462:	2301      	movs	r3, #1
 8004464:	4622      	mov	r2, r4
 8004466:	4641      	mov	r1, r8
 8004468:	4638      	mov	r0, r7
 800446a:	47c8      	blx	r9
 800446c:	3001      	adds	r0, #1
 800446e:	d0e6      	beq.n	800443e <_printf_common+0xae>
 8004470:	3601      	adds	r6, #1
 8004472:	e7d9      	b.n	8004428 <_printf_common+0x98>

08004474 <_printf_i>:
 8004474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004478:	7e0f      	ldrb	r7, [r1, #24]
 800447a:	4691      	mov	r9, r2
 800447c:	2f78      	cmp	r7, #120	@ 0x78
 800447e:	4680      	mov	r8, r0
 8004480:	460c      	mov	r4, r1
 8004482:	469a      	mov	sl, r3
 8004484:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004486:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800448a:	d807      	bhi.n	800449c <_printf_i+0x28>
 800448c:	2f62      	cmp	r7, #98	@ 0x62
 800448e:	d80a      	bhi.n	80044a6 <_printf_i+0x32>
 8004490:	2f00      	cmp	r7, #0
 8004492:	f000 80d1 	beq.w	8004638 <_printf_i+0x1c4>
 8004496:	2f58      	cmp	r7, #88	@ 0x58
 8004498:	f000 80b8 	beq.w	800460c <_printf_i+0x198>
 800449c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044a4:	e03a      	b.n	800451c <_printf_i+0xa8>
 80044a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044aa:	2b15      	cmp	r3, #21
 80044ac:	d8f6      	bhi.n	800449c <_printf_i+0x28>
 80044ae:	a101      	add	r1, pc, #4	@ (adr r1, 80044b4 <_printf_i+0x40>)
 80044b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044b4:	0800450d 	.word	0x0800450d
 80044b8:	08004521 	.word	0x08004521
 80044bc:	0800449d 	.word	0x0800449d
 80044c0:	0800449d 	.word	0x0800449d
 80044c4:	0800449d 	.word	0x0800449d
 80044c8:	0800449d 	.word	0x0800449d
 80044cc:	08004521 	.word	0x08004521
 80044d0:	0800449d 	.word	0x0800449d
 80044d4:	0800449d 	.word	0x0800449d
 80044d8:	0800449d 	.word	0x0800449d
 80044dc:	0800449d 	.word	0x0800449d
 80044e0:	0800461f 	.word	0x0800461f
 80044e4:	0800454b 	.word	0x0800454b
 80044e8:	080045d9 	.word	0x080045d9
 80044ec:	0800449d 	.word	0x0800449d
 80044f0:	0800449d 	.word	0x0800449d
 80044f4:	08004641 	.word	0x08004641
 80044f8:	0800449d 	.word	0x0800449d
 80044fc:	0800454b 	.word	0x0800454b
 8004500:	0800449d 	.word	0x0800449d
 8004504:	0800449d 	.word	0x0800449d
 8004508:	080045e1 	.word	0x080045e1
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	1d1a      	adds	r2, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6032      	str	r2, [r6, #0]
 8004514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004518:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800451c:	2301      	movs	r3, #1
 800451e:	e09c      	b.n	800465a <_printf_i+0x1e6>
 8004520:	6833      	ldr	r3, [r6, #0]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1d19      	adds	r1, r3, #4
 8004526:	6031      	str	r1, [r6, #0]
 8004528:	0606      	lsls	r6, r0, #24
 800452a:	d501      	bpl.n	8004530 <_printf_i+0xbc>
 800452c:	681d      	ldr	r5, [r3, #0]
 800452e:	e003      	b.n	8004538 <_printf_i+0xc4>
 8004530:	0645      	lsls	r5, r0, #25
 8004532:	d5fb      	bpl.n	800452c <_printf_i+0xb8>
 8004534:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004538:	2d00      	cmp	r5, #0
 800453a:	da03      	bge.n	8004544 <_printf_i+0xd0>
 800453c:	232d      	movs	r3, #45	@ 0x2d
 800453e:	426d      	negs	r5, r5
 8004540:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004544:	230a      	movs	r3, #10
 8004546:	4858      	ldr	r0, [pc, #352]	@ (80046a8 <_printf_i+0x234>)
 8004548:	e011      	b.n	800456e <_printf_i+0xfa>
 800454a:	6821      	ldr	r1, [r4, #0]
 800454c:	6833      	ldr	r3, [r6, #0]
 800454e:	0608      	lsls	r0, r1, #24
 8004550:	f853 5b04 	ldr.w	r5, [r3], #4
 8004554:	d402      	bmi.n	800455c <_printf_i+0xe8>
 8004556:	0649      	lsls	r1, r1, #25
 8004558:	bf48      	it	mi
 800455a:	b2ad      	uxthmi	r5, r5
 800455c:	2f6f      	cmp	r7, #111	@ 0x6f
 800455e:	6033      	str	r3, [r6, #0]
 8004560:	bf14      	ite	ne
 8004562:	230a      	movne	r3, #10
 8004564:	2308      	moveq	r3, #8
 8004566:	4850      	ldr	r0, [pc, #320]	@ (80046a8 <_printf_i+0x234>)
 8004568:	2100      	movs	r1, #0
 800456a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800456e:	6866      	ldr	r6, [r4, #4]
 8004570:	2e00      	cmp	r6, #0
 8004572:	60a6      	str	r6, [r4, #8]
 8004574:	db05      	blt.n	8004582 <_printf_i+0x10e>
 8004576:	6821      	ldr	r1, [r4, #0]
 8004578:	432e      	orrs	r6, r5
 800457a:	f021 0104 	bic.w	r1, r1, #4
 800457e:	6021      	str	r1, [r4, #0]
 8004580:	d04b      	beq.n	800461a <_printf_i+0x1a6>
 8004582:	4616      	mov	r6, r2
 8004584:	fbb5 f1f3 	udiv	r1, r5, r3
 8004588:	fb03 5711 	mls	r7, r3, r1, r5
 800458c:	5dc7      	ldrb	r7, [r0, r7]
 800458e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004592:	462f      	mov	r7, r5
 8004594:	42bb      	cmp	r3, r7
 8004596:	460d      	mov	r5, r1
 8004598:	d9f4      	bls.n	8004584 <_printf_i+0x110>
 800459a:	2b08      	cmp	r3, #8
 800459c:	d10b      	bne.n	80045b6 <_printf_i+0x142>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	07df      	lsls	r7, r3, #31
 80045a2:	d508      	bpl.n	80045b6 <_printf_i+0x142>
 80045a4:	6923      	ldr	r3, [r4, #16]
 80045a6:	6861      	ldr	r1, [r4, #4]
 80045a8:	4299      	cmp	r1, r3
 80045aa:	bfde      	ittt	le
 80045ac:	2330      	movle	r3, #48	@ 0x30
 80045ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045b6:	1b92      	subs	r2, r2, r6
 80045b8:	6122      	str	r2, [r4, #16]
 80045ba:	464b      	mov	r3, r9
 80045bc:	4621      	mov	r1, r4
 80045be:	4640      	mov	r0, r8
 80045c0:	f8cd a000 	str.w	sl, [sp]
 80045c4:	aa03      	add	r2, sp, #12
 80045c6:	f7ff fee3 	bl	8004390 <_printf_common>
 80045ca:	3001      	adds	r0, #1
 80045cc:	d14a      	bne.n	8004664 <_printf_i+0x1f0>
 80045ce:	f04f 30ff 	mov.w	r0, #4294967295
 80045d2:	b004      	add	sp, #16
 80045d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f043 0320 	orr.w	r3, r3, #32
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	2778      	movs	r7, #120	@ 0x78
 80045e2:	4832      	ldr	r0, [pc, #200]	@ (80046ac <_printf_i+0x238>)
 80045e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	6831      	ldr	r1, [r6, #0]
 80045ec:	061f      	lsls	r7, r3, #24
 80045ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80045f2:	d402      	bmi.n	80045fa <_printf_i+0x186>
 80045f4:	065f      	lsls	r7, r3, #25
 80045f6:	bf48      	it	mi
 80045f8:	b2ad      	uxthmi	r5, r5
 80045fa:	6031      	str	r1, [r6, #0]
 80045fc:	07d9      	lsls	r1, r3, #31
 80045fe:	bf44      	itt	mi
 8004600:	f043 0320 	orrmi.w	r3, r3, #32
 8004604:	6023      	strmi	r3, [r4, #0]
 8004606:	b11d      	cbz	r5, 8004610 <_printf_i+0x19c>
 8004608:	2310      	movs	r3, #16
 800460a:	e7ad      	b.n	8004568 <_printf_i+0xf4>
 800460c:	4826      	ldr	r0, [pc, #152]	@ (80046a8 <_printf_i+0x234>)
 800460e:	e7e9      	b.n	80045e4 <_printf_i+0x170>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	f023 0320 	bic.w	r3, r3, #32
 8004616:	6023      	str	r3, [r4, #0]
 8004618:	e7f6      	b.n	8004608 <_printf_i+0x194>
 800461a:	4616      	mov	r6, r2
 800461c:	e7bd      	b.n	800459a <_printf_i+0x126>
 800461e:	6833      	ldr	r3, [r6, #0]
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6961      	ldr	r1, [r4, #20]
 8004626:	6030      	str	r0, [r6, #0]
 8004628:	062e      	lsls	r6, r5, #24
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	d501      	bpl.n	8004632 <_printf_i+0x1be>
 800462e:	6019      	str	r1, [r3, #0]
 8004630:	e002      	b.n	8004638 <_printf_i+0x1c4>
 8004632:	0668      	lsls	r0, r5, #25
 8004634:	d5fb      	bpl.n	800462e <_printf_i+0x1ba>
 8004636:	8019      	strh	r1, [r3, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	4616      	mov	r6, r2
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	e7bc      	b.n	80045ba <_printf_i+0x146>
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	2100      	movs	r1, #0
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	6032      	str	r2, [r6, #0]
 8004648:	681e      	ldr	r6, [r3, #0]
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	4630      	mov	r0, r6
 800464e:	f000 fbe0 	bl	8004e12 <memchr>
 8004652:	b108      	cbz	r0, 8004658 <_printf_i+0x1e4>
 8004654:	1b80      	subs	r0, r0, r6
 8004656:	6060      	str	r0, [r4, #4]
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	2300      	movs	r3, #0
 800465e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004662:	e7aa      	b.n	80045ba <_printf_i+0x146>
 8004664:	4632      	mov	r2, r6
 8004666:	4649      	mov	r1, r9
 8004668:	4640      	mov	r0, r8
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	47d0      	blx	sl
 800466e:	3001      	adds	r0, #1
 8004670:	d0ad      	beq.n	80045ce <_printf_i+0x15a>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	079b      	lsls	r3, r3, #30
 8004676:	d413      	bmi.n	80046a0 <_printf_i+0x22c>
 8004678:	68e0      	ldr	r0, [r4, #12]
 800467a:	9b03      	ldr	r3, [sp, #12]
 800467c:	4298      	cmp	r0, r3
 800467e:	bfb8      	it	lt
 8004680:	4618      	movlt	r0, r3
 8004682:	e7a6      	b.n	80045d2 <_printf_i+0x15e>
 8004684:	2301      	movs	r3, #1
 8004686:	4632      	mov	r2, r6
 8004688:	4649      	mov	r1, r9
 800468a:	4640      	mov	r0, r8
 800468c:	47d0      	blx	sl
 800468e:	3001      	adds	r0, #1
 8004690:	d09d      	beq.n	80045ce <_printf_i+0x15a>
 8004692:	3501      	adds	r5, #1
 8004694:	68e3      	ldr	r3, [r4, #12]
 8004696:	9903      	ldr	r1, [sp, #12]
 8004698:	1a5b      	subs	r3, r3, r1
 800469a:	42ab      	cmp	r3, r5
 800469c:	dcf2      	bgt.n	8004684 <_printf_i+0x210>
 800469e:	e7eb      	b.n	8004678 <_printf_i+0x204>
 80046a0:	2500      	movs	r5, #0
 80046a2:	f104 0619 	add.w	r6, r4, #25
 80046a6:	e7f5      	b.n	8004694 <_printf_i+0x220>
 80046a8:	08008b20 	.word	0x08008b20
 80046ac:	08008b31 	.word	0x08008b31

080046b0 <_scanf_float>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	b087      	sub	sp, #28
 80046b6:	9303      	str	r3, [sp, #12]
 80046b8:	688b      	ldr	r3, [r1, #8]
 80046ba:	4691      	mov	r9, r2
 80046bc:	1e5a      	subs	r2, r3, #1
 80046be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80046c2:	bf82      	ittt	hi
 80046c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80046c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80046cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80046d0:	460a      	mov	r2, r1
 80046d2:	f04f 0500 	mov.w	r5, #0
 80046d6:	bf88      	it	hi
 80046d8:	608b      	strhi	r3, [r1, #8]
 80046da:	680b      	ldr	r3, [r1, #0]
 80046dc:	4680      	mov	r8, r0
 80046de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80046e2:	f842 3b1c 	str.w	r3, [r2], #28
 80046e6:	460c      	mov	r4, r1
 80046e8:	bf98      	it	ls
 80046ea:	f04f 0b00 	movls.w	fp, #0
 80046ee:	4616      	mov	r6, r2
 80046f0:	46aa      	mov	sl, r5
 80046f2:	462f      	mov	r7, r5
 80046f4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046f8:	9201      	str	r2, [sp, #4]
 80046fa:	9502      	str	r5, [sp, #8]
 80046fc:	68a2      	ldr	r2, [r4, #8]
 80046fe:	b15a      	cbz	r2, 8004718 <_scanf_float+0x68>
 8004700:	f8d9 3000 	ldr.w	r3, [r9]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b4e      	cmp	r3, #78	@ 0x4e
 8004708:	d862      	bhi.n	80047d0 <_scanf_float+0x120>
 800470a:	2b40      	cmp	r3, #64	@ 0x40
 800470c:	d83a      	bhi.n	8004784 <_scanf_float+0xd4>
 800470e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004712:	b2c8      	uxtb	r0, r1
 8004714:	280e      	cmp	r0, #14
 8004716:	d938      	bls.n	800478a <_scanf_float+0xda>
 8004718:	b11f      	cbz	r7, 8004722 <_scanf_float+0x72>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004726:	f1ba 0f01 	cmp.w	sl, #1
 800472a:	f200 8114 	bhi.w	8004956 <_scanf_float+0x2a6>
 800472e:	9b01      	ldr	r3, [sp, #4]
 8004730:	429e      	cmp	r6, r3
 8004732:	f200 8105 	bhi.w	8004940 <_scanf_float+0x290>
 8004736:	2001      	movs	r0, #1
 8004738:	b007      	add	sp, #28
 800473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800473e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004742:	2a0d      	cmp	r2, #13
 8004744:	d8e8      	bhi.n	8004718 <_scanf_float+0x68>
 8004746:	a101      	add	r1, pc, #4	@ (adr r1, 800474c <_scanf_float+0x9c>)
 8004748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800474c:	08004895 	.word	0x08004895
 8004750:	08004719 	.word	0x08004719
 8004754:	08004719 	.word	0x08004719
 8004758:	08004719 	.word	0x08004719
 800475c:	080048f1 	.word	0x080048f1
 8004760:	080048cb 	.word	0x080048cb
 8004764:	08004719 	.word	0x08004719
 8004768:	08004719 	.word	0x08004719
 800476c:	080048a3 	.word	0x080048a3
 8004770:	08004719 	.word	0x08004719
 8004774:	08004719 	.word	0x08004719
 8004778:	08004719 	.word	0x08004719
 800477c:	08004719 	.word	0x08004719
 8004780:	0800485f 	.word	0x0800485f
 8004784:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004788:	e7db      	b.n	8004742 <_scanf_float+0x92>
 800478a:	290e      	cmp	r1, #14
 800478c:	d8c4      	bhi.n	8004718 <_scanf_float+0x68>
 800478e:	a001      	add	r0, pc, #4	@ (adr r0, 8004794 <_scanf_float+0xe4>)
 8004790:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004794:	0800484f 	.word	0x0800484f
 8004798:	08004719 	.word	0x08004719
 800479c:	0800484f 	.word	0x0800484f
 80047a0:	080048df 	.word	0x080048df
 80047a4:	08004719 	.word	0x08004719
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	08004835 	.word	0x08004835
 80047b0:	08004835 	.word	0x08004835
 80047b4:	08004835 	.word	0x08004835
 80047b8:	08004835 	.word	0x08004835
 80047bc:	08004835 	.word	0x08004835
 80047c0:	08004835 	.word	0x08004835
 80047c4:	08004835 	.word	0x08004835
 80047c8:	08004835 	.word	0x08004835
 80047cc:	08004835 	.word	0x08004835
 80047d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80047d2:	d809      	bhi.n	80047e8 <_scanf_float+0x138>
 80047d4:	2b60      	cmp	r3, #96	@ 0x60
 80047d6:	d8b2      	bhi.n	800473e <_scanf_float+0x8e>
 80047d8:	2b54      	cmp	r3, #84	@ 0x54
 80047da:	d07b      	beq.n	80048d4 <_scanf_float+0x224>
 80047dc:	2b59      	cmp	r3, #89	@ 0x59
 80047de:	d19b      	bne.n	8004718 <_scanf_float+0x68>
 80047e0:	2d07      	cmp	r5, #7
 80047e2:	d199      	bne.n	8004718 <_scanf_float+0x68>
 80047e4:	2508      	movs	r5, #8
 80047e6:	e02f      	b.n	8004848 <_scanf_float+0x198>
 80047e8:	2b74      	cmp	r3, #116	@ 0x74
 80047ea:	d073      	beq.n	80048d4 <_scanf_float+0x224>
 80047ec:	2b79      	cmp	r3, #121	@ 0x79
 80047ee:	e7f6      	b.n	80047de <_scanf_float+0x12e>
 80047f0:	6821      	ldr	r1, [r4, #0]
 80047f2:	05c8      	lsls	r0, r1, #23
 80047f4:	d51e      	bpl.n	8004834 <_scanf_float+0x184>
 80047f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047fa:	6021      	str	r1, [r4, #0]
 80047fc:	3701      	adds	r7, #1
 80047fe:	f1bb 0f00 	cmp.w	fp, #0
 8004802:	d003      	beq.n	800480c <_scanf_float+0x15c>
 8004804:	3201      	adds	r2, #1
 8004806:	f10b 3bff 	add.w	fp, fp, #4294967295
 800480a:	60a2      	str	r2, [r4, #8]
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	3b01      	subs	r3, #1
 8004810:	60a3      	str	r3, [r4, #8]
 8004812:	6923      	ldr	r3, [r4, #16]
 8004814:	3301      	adds	r3, #1
 8004816:	6123      	str	r3, [r4, #16]
 8004818:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800481c:	3b01      	subs	r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	f8c9 3004 	str.w	r3, [r9, #4]
 8004824:	f340 8083 	ble.w	800492e <_scanf_float+0x27e>
 8004828:	f8d9 3000 	ldr.w	r3, [r9]
 800482c:	3301      	adds	r3, #1
 800482e:	f8c9 3000 	str.w	r3, [r9]
 8004832:	e763      	b.n	80046fc <_scanf_float+0x4c>
 8004834:	eb1a 0105 	adds.w	r1, sl, r5
 8004838:	f47f af6e 	bne.w	8004718 <_scanf_float+0x68>
 800483c:	460d      	mov	r5, r1
 800483e:	468a      	mov	sl, r1
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004846:	6022      	str	r2, [r4, #0]
 8004848:	f806 3b01 	strb.w	r3, [r6], #1
 800484c:	e7de      	b.n	800480c <_scanf_float+0x15c>
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	0610      	lsls	r0, r2, #24
 8004852:	f57f af61 	bpl.w	8004718 <_scanf_float+0x68>
 8004856:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800485a:	6022      	str	r2, [r4, #0]
 800485c:	e7f4      	b.n	8004848 <_scanf_float+0x198>
 800485e:	f1ba 0f00 	cmp.w	sl, #0
 8004862:	d10c      	bne.n	800487e <_scanf_float+0x1ce>
 8004864:	b977      	cbnz	r7, 8004884 <_scanf_float+0x1d4>
 8004866:	6822      	ldr	r2, [r4, #0]
 8004868:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800486c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004870:	d108      	bne.n	8004884 <_scanf_float+0x1d4>
 8004872:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004876:	f04f 0a01 	mov.w	sl, #1
 800487a:	6022      	str	r2, [r4, #0]
 800487c:	e7e4      	b.n	8004848 <_scanf_float+0x198>
 800487e:	f1ba 0f02 	cmp.w	sl, #2
 8004882:	d051      	beq.n	8004928 <_scanf_float+0x278>
 8004884:	2d01      	cmp	r5, #1
 8004886:	d002      	beq.n	800488e <_scanf_float+0x1de>
 8004888:	2d04      	cmp	r5, #4
 800488a:	f47f af45 	bne.w	8004718 <_scanf_float+0x68>
 800488e:	3501      	adds	r5, #1
 8004890:	b2ed      	uxtb	r5, r5
 8004892:	e7d9      	b.n	8004848 <_scanf_float+0x198>
 8004894:	f1ba 0f01 	cmp.w	sl, #1
 8004898:	f47f af3e 	bne.w	8004718 <_scanf_float+0x68>
 800489c:	f04f 0a02 	mov.w	sl, #2
 80048a0:	e7d2      	b.n	8004848 <_scanf_float+0x198>
 80048a2:	b975      	cbnz	r5, 80048c2 <_scanf_float+0x212>
 80048a4:	2f00      	cmp	r7, #0
 80048a6:	f47f af38 	bne.w	800471a <_scanf_float+0x6a>
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80048b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048b4:	f040 80ff 	bne.w	8004ab6 <_scanf_float+0x406>
 80048b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048bc:	2501      	movs	r5, #1
 80048be:	6022      	str	r2, [r4, #0]
 80048c0:	e7c2      	b.n	8004848 <_scanf_float+0x198>
 80048c2:	2d03      	cmp	r5, #3
 80048c4:	d0e3      	beq.n	800488e <_scanf_float+0x1de>
 80048c6:	2d05      	cmp	r5, #5
 80048c8:	e7df      	b.n	800488a <_scanf_float+0x1da>
 80048ca:	2d02      	cmp	r5, #2
 80048cc:	f47f af24 	bne.w	8004718 <_scanf_float+0x68>
 80048d0:	2503      	movs	r5, #3
 80048d2:	e7b9      	b.n	8004848 <_scanf_float+0x198>
 80048d4:	2d06      	cmp	r5, #6
 80048d6:	f47f af1f 	bne.w	8004718 <_scanf_float+0x68>
 80048da:	2507      	movs	r5, #7
 80048dc:	e7b4      	b.n	8004848 <_scanf_float+0x198>
 80048de:	6822      	ldr	r2, [r4, #0]
 80048e0:	0591      	lsls	r1, r2, #22
 80048e2:	f57f af19 	bpl.w	8004718 <_scanf_float+0x68>
 80048e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	9702      	str	r7, [sp, #8]
 80048ee:	e7ab      	b.n	8004848 <_scanf_float+0x198>
 80048f0:	6822      	ldr	r2, [r4, #0]
 80048f2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048f6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048fa:	d005      	beq.n	8004908 <_scanf_float+0x258>
 80048fc:	0550      	lsls	r0, r2, #21
 80048fe:	f57f af0b 	bpl.w	8004718 <_scanf_float+0x68>
 8004902:	2f00      	cmp	r7, #0
 8004904:	f000 80d7 	beq.w	8004ab6 <_scanf_float+0x406>
 8004908:	0591      	lsls	r1, r2, #22
 800490a:	bf58      	it	pl
 800490c:	9902      	ldrpl	r1, [sp, #8]
 800490e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004912:	bf58      	it	pl
 8004914:	1a79      	subpl	r1, r7, r1
 8004916:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800491a:	f04f 0700 	mov.w	r7, #0
 800491e:	bf58      	it	pl
 8004920:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004924:	6022      	str	r2, [r4, #0]
 8004926:	e78f      	b.n	8004848 <_scanf_float+0x198>
 8004928:	f04f 0a03 	mov.w	sl, #3
 800492c:	e78c      	b.n	8004848 <_scanf_float+0x198>
 800492e:	4649      	mov	r1, r9
 8004930:	4640      	mov	r0, r8
 8004932:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004936:	4798      	blx	r3
 8004938:	2800      	cmp	r0, #0
 800493a:	f43f aedf 	beq.w	80046fc <_scanf_float+0x4c>
 800493e:	e6eb      	b.n	8004718 <_scanf_float+0x68>
 8004940:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004944:	464a      	mov	r2, r9
 8004946:	4640      	mov	r0, r8
 8004948:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800494c:	4798      	blx	r3
 800494e:	6923      	ldr	r3, [r4, #16]
 8004950:	3b01      	subs	r3, #1
 8004952:	6123      	str	r3, [r4, #16]
 8004954:	e6eb      	b.n	800472e <_scanf_float+0x7e>
 8004956:	1e6b      	subs	r3, r5, #1
 8004958:	2b06      	cmp	r3, #6
 800495a:	d824      	bhi.n	80049a6 <_scanf_float+0x2f6>
 800495c:	2d02      	cmp	r5, #2
 800495e:	d836      	bhi.n	80049ce <_scanf_float+0x31e>
 8004960:	9b01      	ldr	r3, [sp, #4]
 8004962:	429e      	cmp	r6, r3
 8004964:	f67f aee7 	bls.w	8004736 <_scanf_float+0x86>
 8004968:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800496c:	464a      	mov	r2, r9
 800496e:	4640      	mov	r0, r8
 8004970:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004974:	4798      	blx	r3
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	3b01      	subs	r3, #1
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	e7f0      	b.n	8004960 <_scanf_float+0x2b0>
 800497e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004982:	464a      	mov	r2, r9
 8004984:	4640      	mov	r0, r8
 8004986:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800498a:	4798      	blx	r3
 800498c:	6923      	ldr	r3, [r4, #16]
 800498e:	3b01      	subs	r3, #1
 8004990:	6123      	str	r3, [r4, #16]
 8004992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004996:	fa5f fa8a 	uxtb.w	sl, sl
 800499a:	f1ba 0f02 	cmp.w	sl, #2
 800499e:	d1ee      	bne.n	800497e <_scanf_float+0x2ce>
 80049a0:	3d03      	subs	r5, #3
 80049a2:	b2ed      	uxtb	r5, r5
 80049a4:	1b76      	subs	r6, r6, r5
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	05da      	lsls	r2, r3, #23
 80049aa:	d530      	bpl.n	8004a0e <_scanf_float+0x35e>
 80049ac:	055b      	lsls	r3, r3, #21
 80049ae:	d511      	bpl.n	80049d4 <_scanf_float+0x324>
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	429e      	cmp	r6, r3
 80049b4:	f67f aebf 	bls.w	8004736 <_scanf_float+0x86>
 80049b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049bc:	464a      	mov	r2, r9
 80049be:	4640      	mov	r0, r8
 80049c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049c4:	4798      	blx	r3
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	6123      	str	r3, [r4, #16]
 80049cc:	e7f0      	b.n	80049b0 <_scanf_float+0x300>
 80049ce:	46aa      	mov	sl, r5
 80049d0:	46b3      	mov	fp, r6
 80049d2:	e7de      	b.n	8004992 <_scanf_float+0x2e2>
 80049d4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	2965      	cmp	r1, #101	@ 0x65
 80049dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80049e0:	f106 35ff 	add.w	r5, r6, #4294967295
 80049e4:	6123      	str	r3, [r4, #16]
 80049e6:	d00c      	beq.n	8004a02 <_scanf_float+0x352>
 80049e8:	2945      	cmp	r1, #69	@ 0x45
 80049ea:	d00a      	beq.n	8004a02 <_scanf_float+0x352>
 80049ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049f0:	464a      	mov	r2, r9
 80049f2:	4640      	mov	r0, r8
 80049f4:	4798      	blx	r3
 80049f6:	6923      	ldr	r3, [r4, #16]
 80049f8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	1eb5      	subs	r5, r6, #2
 8004a00:	6123      	str	r3, [r4, #16]
 8004a02:	464a      	mov	r2, r9
 8004a04:	4640      	mov	r0, r8
 8004a06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a0a:	4798      	blx	r3
 8004a0c:	462e      	mov	r6, r5
 8004a0e:	6822      	ldr	r2, [r4, #0]
 8004a10:	f012 0210 	ands.w	r2, r2, #16
 8004a14:	d001      	beq.n	8004a1a <_scanf_float+0x36a>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e68e      	b.n	8004738 <_scanf_float+0x88>
 8004a1a:	7032      	strb	r2, [r6, #0]
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d125      	bne.n	8004a74 <_scanf_float+0x3c4>
 8004a28:	9b02      	ldr	r3, [sp, #8]
 8004a2a:	429f      	cmp	r7, r3
 8004a2c:	d00a      	beq.n	8004a44 <_scanf_float+0x394>
 8004a2e:	1bda      	subs	r2, r3, r7
 8004a30:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a34:	429e      	cmp	r6, r3
 8004a36:	bf28      	it	cs
 8004a38:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	491f      	ldr	r1, [pc, #124]	@ (8004abc <_scanf_float+0x40c>)
 8004a40:	f000 f902 	bl	8004c48 <siprintf>
 8004a44:	2200      	movs	r2, #0
 8004a46:	4640      	mov	r0, r8
 8004a48:	9901      	ldr	r1, [sp, #4]
 8004a4a:	f002 fbf9 	bl	8007240 <_strtod_r>
 8004a4e:	9b03      	ldr	r3, [sp, #12]
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f015 0f02 	tst.w	r5, #2
 8004a58:	4606      	mov	r6, r0
 8004a5a:	460f      	mov	r7, r1
 8004a5c:	f103 0204 	add.w	r2, r3, #4
 8004a60:	d015      	beq.n	8004a8e <_scanf_float+0x3de>
 8004a62:	9903      	ldr	r1, [sp, #12]
 8004a64:	600a      	str	r2, [r1, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	e9c3 6700 	strd	r6, r7, [r3]
 8004a6c:	68e3      	ldr	r3, [r4, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60e3      	str	r3, [r4, #12]
 8004a72:	e7d0      	b.n	8004a16 <_scanf_float+0x366>
 8004a74:	9b04      	ldr	r3, [sp, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0e4      	beq.n	8004a44 <_scanf_float+0x394>
 8004a7a:	9905      	ldr	r1, [sp, #20]
 8004a7c:	230a      	movs	r3, #10
 8004a7e:	4640      	mov	r0, r8
 8004a80:	3101      	adds	r1, #1
 8004a82:	f002 fc5d 	bl	8007340 <_strtol_r>
 8004a86:	9b04      	ldr	r3, [sp, #16]
 8004a88:	9e05      	ldr	r6, [sp, #20]
 8004a8a:	1ac2      	subs	r2, r0, r3
 8004a8c:	e7d0      	b.n	8004a30 <_scanf_float+0x380>
 8004a8e:	076d      	lsls	r5, r5, #29
 8004a90:	d4e7      	bmi.n	8004a62 <_scanf_float+0x3b2>
 8004a92:	9d03      	ldr	r5, [sp, #12]
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	681d      	ldr	r5, [r3, #0]
 8004a98:	4602      	mov	r2, r0
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	f7fb ffb6 	bl	8000a0c <__aeabi_dcmpun>
 8004aa0:	b120      	cbz	r0, 8004aac <_scanf_float+0x3fc>
 8004aa2:	4807      	ldr	r0, [pc, #28]	@ (8004ac0 <_scanf_float+0x410>)
 8004aa4:	f000 f9d2 	bl	8004e4c <nanf>
 8004aa8:	6028      	str	r0, [r5, #0]
 8004aaa:	e7df      	b.n	8004a6c <_scanf_float+0x3bc>
 8004aac:	4630      	mov	r0, r6
 8004aae:	4639      	mov	r1, r7
 8004ab0:	f7fc f80a 	bl	8000ac8 <__aeabi_d2f>
 8004ab4:	e7f8      	b.n	8004aa8 <_scanf_float+0x3f8>
 8004ab6:	2700      	movs	r7, #0
 8004ab8:	e633      	b.n	8004722 <_scanf_float+0x72>
 8004aba:	bf00      	nop
 8004abc:	08008b42 	.word	0x08008b42
 8004ac0:	08008c83 	.word	0x08008c83

08004ac4 <std>:
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	b510      	push	{r4, lr}
 8004ac8:	4604      	mov	r4, r0
 8004aca:	e9c0 3300 	strd	r3, r3, [r0]
 8004ace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ad2:	6083      	str	r3, [r0, #8]
 8004ad4:	8181      	strh	r1, [r0, #12]
 8004ad6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ad8:	81c2      	strh	r2, [r0, #14]
 8004ada:	6183      	str	r3, [r0, #24]
 8004adc:	4619      	mov	r1, r3
 8004ade:	2208      	movs	r2, #8
 8004ae0:	305c      	adds	r0, #92	@ 0x5c
 8004ae2:	f000 f916 	bl	8004d12 <memset>
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <std+0x58>)
 8004ae8:	6224      	str	r4, [r4, #32]
 8004aea:	6263      	str	r3, [r4, #36]	@ 0x24
 8004aec:	4b0c      	ldr	r3, [pc, #48]	@ (8004b20 <std+0x5c>)
 8004aee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004af0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b24 <std+0x60>)
 8004af2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004af4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <std+0x64>)
 8004af6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004af8:	4b0c      	ldr	r3, [pc, #48]	@ (8004b2c <std+0x68>)
 8004afa:	429c      	cmp	r4, r3
 8004afc:	d006      	beq.n	8004b0c <std+0x48>
 8004afe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b02:	4294      	cmp	r4, r2
 8004b04:	d002      	beq.n	8004b0c <std+0x48>
 8004b06:	33d0      	adds	r3, #208	@ 0xd0
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	d105      	bne.n	8004b18 <std+0x54>
 8004b0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b14:	f000 b97a 	b.w	8004e0c <__retarget_lock_init_recursive>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	bf00      	nop
 8004b1c:	08004c8d 	.word	0x08004c8d
 8004b20:	08004caf 	.word	0x08004caf
 8004b24:	08004ce7 	.word	0x08004ce7
 8004b28:	08004d0b 	.word	0x08004d0b
 8004b2c:	20000704 	.word	0x20000704

08004b30 <stdio_exit_handler>:
 8004b30:	4a02      	ldr	r2, [pc, #8]	@ (8004b3c <stdio_exit_handler+0xc>)
 8004b32:	4903      	ldr	r1, [pc, #12]	@ (8004b40 <stdio_exit_handler+0x10>)
 8004b34:	4803      	ldr	r0, [pc, #12]	@ (8004b44 <stdio_exit_handler+0x14>)
 8004b36:	f000 b869 	b.w	8004c0c <_fwalk_sglue>
 8004b3a:	bf00      	nop
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	080076f5 	.word	0x080076f5
 8004b44:	2000001c 	.word	0x2000001c

08004b48 <cleanup_stdio>:
 8004b48:	6841      	ldr	r1, [r0, #4]
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b7c <cleanup_stdio+0x34>)
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	4604      	mov	r4, r0
 8004b52:	d001      	beq.n	8004b58 <cleanup_stdio+0x10>
 8004b54:	f002 fdce 	bl	80076f4 <_fflush_r>
 8004b58:	68a1      	ldr	r1, [r4, #8]
 8004b5a:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <cleanup_stdio+0x38>)
 8004b5c:	4299      	cmp	r1, r3
 8004b5e:	d002      	beq.n	8004b66 <cleanup_stdio+0x1e>
 8004b60:	4620      	mov	r0, r4
 8004b62:	f002 fdc7 	bl	80076f4 <_fflush_r>
 8004b66:	68e1      	ldr	r1, [r4, #12]
 8004b68:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <cleanup_stdio+0x3c>)
 8004b6a:	4299      	cmp	r1, r3
 8004b6c:	d004      	beq.n	8004b78 <cleanup_stdio+0x30>
 8004b6e:	4620      	mov	r0, r4
 8004b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b74:	f002 bdbe 	b.w	80076f4 <_fflush_r>
 8004b78:	bd10      	pop	{r4, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000704 	.word	0x20000704
 8004b80:	2000076c 	.word	0x2000076c
 8004b84:	200007d4 	.word	0x200007d4

08004b88 <global_stdio_init.part.0>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb8 <global_stdio_init.part.0+0x30>)
 8004b8c:	4c0b      	ldr	r4, [pc, #44]	@ (8004bbc <global_stdio_init.part.0+0x34>)
 8004b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bc0 <global_stdio_init.part.0+0x38>)
 8004b90:	4620      	mov	r0, r4
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	2104      	movs	r1, #4
 8004b96:	2200      	movs	r2, #0
 8004b98:	f7ff ff94 	bl	8004ac4 <std>
 8004b9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2109      	movs	r1, #9
 8004ba4:	f7ff ff8e 	bl	8004ac4 <std>
 8004ba8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bac:	2202      	movs	r2, #2
 8004bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb2:	2112      	movs	r1, #18
 8004bb4:	f7ff bf86 	b.w	8004ac4 <std>
 8004bb8:	2000083c 	.word	0x2000083c
 8004bbc:	20000704 	.word	0x20000704
 8004bc0:	08004b31 	.word	0x08004b31

08004bc4 <__sfp_lock_acquire>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	@ (8004bcc <__sfp_lock_acquire+0x8>)
 8004bc6:	f000 b922 	b.w	8004e0e <__retarget_lock_acquire_recursive>
 8004bca:	bf00      	nop
 8004bcc:	20000845 	.word	0x20000845

08004bd0 <__sfp_lock_release>:
 8004bd0:	4801      	ldr	r0, [pc, #4]	@ (8004bd8 <__sfp_lock_release+0x8>)
 8004bd2:	f000 b91d 	b.w	8004e10 <__retarget_lock_release_recursive>
 8004bd6:	bf00      	nop
 8004bd8:	20000845 	.word	0x20000845

08004bdc <__sinit>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4604      	mov	r4, r0
 8004be0:	f7ff fff0 	bl	8004bc4 <__sfp_lock_acquire>
 8004be4:	6a23      	ldr	r3, [r4, #32]
 8004be6:	b11b      	cbz	r3, 8004bf0 <__sinit+0x14>
 8004be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bec:	f7ff bff0 	b.w	8004bd0 <__sfp_lock_release>
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <__sinit+0x28>)
 8004bf2:	6223      	str	r3, [r4, #32]
 8004bf4:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <__sinit+0x2c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f5      	bne.n	8004be8 <__sinit+0xc>
 8004bfc:	f7ff ffc4 	bl	8004b88 <global_stdio_init.part.0>
 8004c00:	e7f2      	b.n	8004be8 <__sinit+0xc>
 8004c02:	bf00      	nop
 8004c04:	08004b49 	.word	0x08004b49
 8004c08:	2000083c 	.word	0x2000083c

08004c0c <_fwalk_sglue>:
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	4607      	mov	r7, r0
 8004c12:	4688      	mov	r8, r1
 8004c14:	4614      	mov	r4, r2
 8004c16:	2600      	movs	r6, #0
 8004c18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004c20:	d505      	bpl.n	8004c2e <_fwalk_sglue+0x22>
 8004c22:	6824      	ldr	r4, [r4, #0]
 8004c24:	2c00      	cmp	r4, #0
 8004c26:	d1f7      	bne.n	8004c18 <_fwalk_sglue+0xc>
 8004c28:	4630      	mov	r0, r6
 8004c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d907      	bls.n	8004c44 <_fwalk_sglue+0x38>
 8004c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	d003      	beq.n	8004c44 <_fwalk_sglue+0x38>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4638      	mov	r0, r7
 8004c40:	47c0      	blx	r8
 8004c42:	4306      	orrs	r6, r0
 8004c44:	3568      	adds	r5, #104	@ 0x68
 8004c46:	e7e9      	b.n	8004c1c <_fwalk_sglue+0x10>

08004c48 <siprintf>:
 8004c48:	b40e      	push	{r1, r2, r3}
 8004c4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c4e:	b510      	push	{r4, lr}
 8004c50:	2400      	movs	r4, #0
 8004c52:	b09d      	sub	sp, #116	@ 0x74
 8004c54:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c56:	9002      	str	r0, [sp, #8]
 8004c58:	9006      	str	r0, [sp, #24]
 8004c5a:	9107      	str	r1, [sp, #28]
 8004c5c:	9104      	str	r1, [sp, #16]
 8004c5e:	4809      	ldr	r0, [pc, #36]	@ (8004c84 <siprintf+0x3c>)
 8004c60:	4909      	ldr	r1, [pc, #36]	@ (8004c88 <siprintf+0x40>)
 8004c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c66:	9105      	str	r1, [sp, #20]
 8004c68:	6800      	ldr	r0, [r0, #0]
 8004c6a:	a902      	add	r1, sp, #8
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c70:	f002 fbc4 	bl	80073fc <_svfiprintf_r>
 8004c74:	9b02      	ldr	r3, [sp, #8]
 8004c76:	701c      	strb	r4, [r3, #0]
 8004c78:	b01d      	add	sp, #116	@ 0x74
 8004c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c7e:	b003      	add	sp, #12
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000018 	.word	0x20000018
 8004c88:	ffff0208 	.word	0xffff0208

08004c8c <__sread>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	460c      	mov	r4, r1
 8004c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c94:	f000 f86c 	bl	8004d70 <_read_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	bfab      	itete	ge
 8004c9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004ca0:	181b      	addge	r3, r3, r0
 8004ca2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca6:	bfac      	ite	ge
 8004ca8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004caa:	81a3      	strhlt	r3, [r4, #12]
 8004cac:	bd10      	pop	{r4, pc}

08004cae <__swrite>:
 8004cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cb2:	461f      	mov	r7, r3
 8004cb4:	898b      	ldrh	r3, [r1, #12]
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	05db      	lsls	r3, r3, #23
 8004cba:	460c      	mov	r4, r1
 8004cbc:	4616      	mov	r6, r2
 8004cbe:	d505      	bpl.n	8004ccc <__swrite+0x1e>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc8:	f000 f840 	bl	8004d4c <_lseek_r>
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	4632      	mov	r2, r6
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	463b      	mov	r3, r7
 8004cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce2:	f000 b857 	b.w	8004d94 <_write_r>

08004ce6 <__sseek>:
 8004ce6:	b510      	push	{r4, lr}
 8004ce8:	460c      	mov	r4, r1
 8004cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cee:	f000 f82d 	bl	8004d4c <_lseek_r>
 8004cf2:	1c43      	adds	r3, r0, #1
 8004cf4:	89a3      	ldrh	r3, [r4, #12]
 8004cf6:	bf15      	itete	ne
 8004cf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cfa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cfe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d02:	81a3      	strheq	r3, [r4, #12]
 8004d04:	bf18      	it	ne
 8004d06:	81a3      	strhne	r3, [r4, #12]
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <__sclose>:
 8004d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0e:	f000 b80d 	b.w	8004d2c <_close_r>

08004d12 <memset>:
 8004d12:	4603      	mov	r3, r0
 8004d14:	4402      	add	r2, r0
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d100      	bne.n	8004d1c <memset+0xa>
 8004d1a:	4770      	bx	lr
 8004d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d20:	e7f9      	b.n	8004d16 <memset+0x4>
	...

08004d24 <_localeconv_r>:
 8004d24:	4800      	ldr	r0, [pc, #0]	@ (8004d28 <_localeconv_r+0x4>)
 8004d26:	4770      	bx	lr
 8004d28:	20000158 	.word	0x20000158

08004d2c <_close_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	2300      	movs	r3, #0
 8004d30:	4d05      	ldr	r5, [pc, #20]	@ (8004d48 <_close_r+0x1c>)
 8004d32:	4604      	mov	r4, r0
 8004d34:	4608      	mov	r0, r1
 8004d36:	602b      	str	r3, [r5, #0]
 8004d38:	f7fc fded 	bl	8001916 <_close>
 8004d3c:	1c43      	adds	r3, r0, #1
 8004d3e:	d102      	bne.n	8004d46 <_close_r+0x1a>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	b103      	cbz	r3, 8004d46 <_close_r+0x1a>
 8004d44:	6023      	str	r3, [r4, #0]
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	20000840 	.word	0x20000840

08004d4c <_lseek_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4604      	mov	r4, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	4611      	mov	r1, r2
 8004d54:	2200      	movs	r2, #0
 8004d56:	4d05      	ldr	r5, [pc, #20]	@ (8004d6c <_lseek_r+0x20>)
 8004d58:	602a      	str	r2, [r5, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f7fc fdff 	bl	800195e <_lseek>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_lseek_r+0x1e>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_lseek_r+0x1e>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20000840 	.word	0x20000840

08004d70 <_read_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	4604      	mov	r4, r0
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4d05      	ldr	r5, [pc, #20]	@ (8004d90 <_read_r+0x20>)
 8004d7c:	602a      	str	r2, [r5, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f7fc fd90 	bl	80018a4 <_read>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d102      	bne.n	8004d8e <_read_r+0x1e>
 8004d88:	682b      	ldr	r3, [r5, #0]
 8004d8a:	b103      	cbz	r3, 8004d8e <_read_r+0x1e>
 8004d8c:	6023      	str	r3, [r4, #0]
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	20000840 	.word	0x20000840

08004d94 <_write_r>:
 8004d94:	b538      	push	{r3, r4, r5, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	4d05      	ldr	r5, [pc, #20]	@ (8004db4 <_write_r+0x20>)
 8004da0:	602a      	str	r2, [r5, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	f7fc fd9b 	bl	80018de <_write>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_write_r+0x1e>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_write_r+0x1e>
 8004db0:	6023      	str	r3, [r4, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	20000840 	.word	0x20000840

08004db8 <__errno>:
 8004db8:	4b01      	ldr	r3, [pc, #4]	@ (8004dc0 <__errno+0x8>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000018 	.word	0x20000018

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	4d0c      	ldr	r5, [pc, #48]	@ (8004dfc <__libc_init_array+0x38>)
 8004dca:	4c0d      	ldr	r4, [pc, #52]	@ (8004e00 <__libc_init_array+0x3c>)
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	f003 fb6c 	bl	80084b0 <_init>
 8004dd8:	2600      	movs	r6, #0
 8004dda:	4d0a      	ldr	r5, [pc, #40]	@ (8004e04 <__libc_init_array+0x40>)
 8004ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8004e08 <__libc_init_array+0x44>)
 8004dde:	1b64      	subs	r4, r4, r5
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	08008f3c 	.word	0x08008f3c
 8004e00:	08008f3c 	.word	0x08008f3c
 8004e04:	08008f3c 	.word	0x08008f3c
 8004e08:	08008f40 	.word	0x08008f40

08004e0c <__retarget_lock_init_recursive>:
 8004e0c:	4770      	bx	lr

08004e0e <__retarget_lock_acquire_recursive>:
 8004e0e:	4770      	bx	lr

08004e10 <__retarget_lock_release_recursive>:
 8004e10:	4770      	bx	lr

08004e12 <memchr>:
 8004e12:	4603      	mov	r3, r0
 8004e14:	b510      	push	{r4, lr}
 8004e16:	b2c9      	uxtb	r1, r1
 8004e18:	4402      	add	r2, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	d101      	bne.n	8004e24 <memchr+0x12>
 8004e20:	2000      	movs	r0, #0
 8004e22:	e003      	b.n	8004e2c <memchr+0x1a>
 8004e24:	7804      	ldrb	r4, [r0, #0]
 8004e26:	3301      	adds	r3, #1
 8004e28:	428c      	cmp	r4, r1
 8004e2a:	d1f6      	bne.n	8004e1a <memchr+0x8>
 8004e2c:	bd10      	pop	{r4, pc}

08004e2e <memcpy>:
 8004e2e:	440a      	add	r2, r1
 8004e30:	4291      	cmp	r1, r2
 8004e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e36:	d100      	bne.n	8004e3a <memcpy+0xc>
 8004e38:	4770      	bx	lr
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e40:	4291      	cmp	r1, r2
 8004e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e46:	d1f9      	bne.n	8004e3c <memcpy+0xe>
 8004e48:	bd10      	pop	{r4, pc}
	...

08004e4c <nanf>:
 8004e4c:	4800      	ldr	r0, [pc, #0]	@ (8004e50 <nanf+0x4>)
 8004e4e:	4770      	bx	lr
 8004e50:	7fc00000 	.word	0x7fc00000

08004e54 <quorem>:
 8004e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e58:	6903      	ldr	r3, [r0, #16]
 8004e5a:	690c      	ldr	r4, [r1, #16]
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	42a3      	cmp	r3, r4
 8004e60:	db7e      	blt.n	8004f60 <quorem+0x10c>
 8004e62:	3c01      	subs	r4, #1
 8004e64:	00a3      	lsls	r3, r4, #2
 8004e66:	f100 0514 	add.w	r5, r0, #20
 8004e6a:	f101 0814 	add.w	r8, r1, #20
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	429a      	cmp	r2, r3
 8004e82:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e8a:	d32e      	bcc.n	8004eea <quorem+0x96>
 8004e8c:	f04f 0a00 	mov.w	sl, #0
 8004e90:	46c4      	mov	ip, r8
 8004e92:	46ae      	mov	lr, r5
 8004e94:	46d3      	mov	fp, sl
 8004e96:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e9a:	b298      	uxth	r0, r3
 8004e9c:	fb06 a000 	mla	r0, r6, r0, sl
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	0c02      	lsrs	r2, r0, #16
 8004ea4:	fb06 2303 	mla	r3, r6, r3, r2
 8004ea8:	f8de 2000 	ldr.w	r2, [lr]
 8004eac:	b280      	uxth	r0, r0
 8004eae:	b292      	uxth	r2, r2
 8004eb0:	1a12      	subs	r2, r2, r0
 8004eb2:	445a      	add	r2, fp
 8004eb4:	f8de 0000 	ldr.w	r0, [lr]
 8004eb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ec2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ecc:	45e1      	cmp	r9, ip
 8004ece:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ed2:	f84e 2b04 	str.w	r2, [lr], #4
 8004ed6:	d2de      	bcs.n	8004e96 <quorem+0x42>
 8004ed8:	9b00      	ldr	r3, [sp, #0]
 8004eda:	58eb      	ldr	r3, [r5, r3]
 8004edc:	b92b      	cbnz	r3, 8004eea <quorem+0x96>
 8004ede:	9b01      	ldr	r3, [sp, #4]
 8004ee0:	3b04      	subs	r3, #4
 8004ee2:	429d      	cmp	r5, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	d32f      	bcc.n	8004f48 <quorem+0xf4>
 8004ee8:	613c      	str	r4, [r7, #16]
 8004eea:	4638      	mov	r0, r7
 8004eec:	f001 f9ca 	bl	8006284 <__mcmp>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	db25      	blt.n	8004f40 <quorem+0xec>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004efc:	f8d1 c000 	ldr.w	ip, [r1]
 8004f00:	fa1f fe82 	uxth.w	lr, r2
 8004f04:	fa1f f38c 	uxth.w	r3, ip
 8004f08:	eba3 030e 	sub.w	r3, r3, lr
 8004f0c:	4403      	add	r3, r0
 8004f0e:	0c12      	lsrs	r2, r2, #16
 8004f10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f1e:	45c1      	cmp	r9, r8
 8004f20:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f24:	f841 3b04 	str.w	r3, [r1], #4
 8004f28:	d2e6      	bcs.n	8004ef8 <quorem+0xa4>
 8004f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f32:	b922      	cbnz	r2, 8004f3e <quorem+0xea>
 8004f34:	3b04      	subs	r3, #4
 8004f36:	429d      	cmp	r5, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	d30b      	bcc.n	8004f54 <quorem+0x100>
 8004f3c:	613c      	str	r4, [r7, #16]
 8004f3e:	3601      	adds	r6, #1
 8004f40:	4630      	mov	r0, r6
 8004f42:	b003      	add	sp, #12
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d1cb      	bne.n	8004ee8 <quorem+0x94>
 8004f50:	3c01      	subs	r4, #1
 8004f52:	e7c6      	b.n	8004ee2 <quorem+0x8e>
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	2a00      	cmp	r2, #0
 8004f5a:	d1ef      	bne.n	8004f3c <quorem+0xe8>
 8004f5c:	3c01      	subs	r4, #1
 8004f5e:	e7ea      	b.n	8004f36 <quorem+0xe2>
 8004f60:	2000      	movs	r0, #0
 8004f62:	e7ee      	b.n	8004f42 <quorem+0xee>
 8004f64:	0000      	movs	r0, r0
	...

08004f68 <_dtoa_r>:
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	69c7      	ldr	r7, [r0, #28]
 8004f72:	b097      	sub	sp, #92	@ 0x5c
 8004f74:	4681      	mov	r9, r0
 8004f76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004f7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004f7c:	b97f      	cbnz	r7, 8004f9e <_dtoa_r+0x36>
 8004f7e:	2010      	movs	r0, #16
 8004f80:	f000 fe0e 	bl	8005ba0 <malloc>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f8c9 001c 	str.w	r0, [r9, #28]
 8004f8a:	b920      	cbnz	r0, 8004f96 <_dtoa_r+0x2e>
 8004f8c:	21ef      	movs	r1, #239	@ 0xef
 8004f8e:	4bac      	ldr	r3, [pc, #688]	@ (8005240 <_dtoa_r+0x2d8>)
 8004f90:	48ac      	ldr	r0, [pc, #688]	@ (8005244 <_dtoa_r+0x2dc>)
 8004f92:	f002 fc19 	bl	80077c8 <__assert_func>
 8004f96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f9a:	6007      	str	r7, [r0, #0]
 8004f9c:	60c7      	str	r7, [r0, #12]
 8004f9e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	b159      	cbz	r1, 8004fbe <_dtoa_r+0x56>
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4093      	lsls	r3, r2
 8004fac:	604a      	str	r2, [r1, #4]
 8004fae:	608b      	str	r3, [r1, #8]
 8004fb0:	4648      	mov	r0, r9
 8004fb2:	f000 feeb 	bl	8005d8c <_Bfree>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	1e2b      	subs	r3, r5, #0
 8004fc0:	bfaf      	iteee	ge
 8004fc2:	2300      	movge	r3, #0
 8004fc4:	2201      	movlt	r2, #1
 8004fc6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004fca:	9307      	strlt	r3, [sp, #28]
 8004fcc:	bfa8      	it	ge
 8004fce:	6033      	strge	r3, [r6, #0]
 8004fd0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004fd4:	4b9c      	ldr	r3, [pc, #624]	@ (8005248 <_dtoa_r+0x2e0>)
 8004fd6:	bfb8      	it	lt
 8004fd8:	6032      	strlt	r2, [r6, #0]
 8004fda:	ea33 0308 	bics.w	r3, r3, r8
 8004fde:	d112      	bne.n	8005006 <_dtoa_r+0x9e>
 8004fe0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004fe4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fec:	4323      	orrs	r3, r4
 8004fee:	f000 855e 	beq.w	8005aae <_dtoa_r+0xb46>
 8004ff2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ff4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800524c <_dtoa_r+0x2e4>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8560 	beq.w	8005abe <_dtoa_r+0xb56>
 8004ffe:	f10a 0303 	add.w	r3, sl, #3
 8005002:	f000 bd5a 	b.w	8005aba <_dtoa_r+0xb52>
 8005006:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800500a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800500e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005012:	2200      	movs	r2, #0
 8005014:	2300      	movs	r3, #0
 8005016:	f7fb fcc7 	bl	80009a8 <__aeabi_dcmpeq>
 800501a:	4607      	mov	r7, r0
 800501c:	b158      	cbz	r0, 8005036 <_dtoa_r+0xce>
 800501e:	2301      	movs	r3, #1
 8005020:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005026:	b113      	cbz	r3, 800502e <_dtoa_r+0xc6>
 8005028:	4b89      	ldr	r3, [pc, #548]	@ (8005250 <_dtoa_r+0x2e8>)
 800502a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005254 <_dtoa_r+0x2ec>
 8005032:	f000 bd44 	b.w	8005abe <_dtoa_r+0xb56>
 8005036:	ab14      	add	r3, sp, #80	@ 0x50
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	ab15      	add	r3, sp, #84	@ 0x54
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4648      	mov	r0, r9
 8005040:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005044:	f001 fa36 	bl	80064b4 <__d2b>
 8005048:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800504c:	9003      	str	r0, [sp, #12]
 800504e:	2e00      	cmp	r6, #0
 8005050:	d078      	beq.n	8005144 <_dtoa_r+0x1dc>
 8005052:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005058:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800505c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005060:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005064:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005068:	9712      	str	r7, [sp, #72]	@ 0x48
 800506a:	4619      	mov	r1, r3
 800506c:	2200      	movs	r2, #0
 800506e:	4b7a      	ldr	r3, [pc, #488]	@ (8005258 <_dtoa_r+0x2f0>)
 8005070:	f7fb f87a 	bl	8000168 <__aeabi_dsub>
 8005074:	a36c      	add	r3, pc, #432	@ (adr r3, 8005228 <_dtoa_r+0x2c0>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fa2d 	bl	80004d8 <__aeabi_dmul>
 800507e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005230 <_dtoa_r+0x2c8>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	f7fb f872 	bl	800016c <__adddf3>
 8005088:	4604      	mov	r4, r0
 800508a:	4630      	mov	r0, r6
 800508c:	460d      	mov	r5, r1
 800508e:	f7fb f9b9 	bl	8000404 <__aeabi_i2d>
 8005092:	a369      	add	r3, pc, #420	@ (adr r3, 8005238 <_dtoa_r+0x2d0>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fa1e 	bl	80004d8 <__aeabi_dmul>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4620      	mov	r0, r4
 80050a2:	4629      	mov	r1, r5
 80050a4:	f7fb f862 	bl	800016c <__adddf3>
 80050a8:	4604      	mov	r4, r0
 80050aa:	460d      	mov	r5, r1
 80050ac:	f7fb fcc4 	bl	8000a38 <__aeabi_d2iz>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4607      	mov	r7, r0
 80050b4:	2300      	movs	r3, #0
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb fc7f 	bl	80009bc <__aeabi_dcmplt>
 80050be:	b140      	cbz	r0, 80050d2 <_dtoa_r+0x16a>
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7fb f99f 	bl	8000404 <__aeabi_i2d>
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	f7fb fc6d 	bl	80009a8 <__aeabi_dcmpeq>
 80050ce:	b900      	cbnz	r0, 80050d2 <_dtoa_r+0x16a>
 80050d0:	3f01      	subs	r7, #1
 80050d2:	2f16      	cmp	r7, #22
 80050d4:	d854      	bhi.n	8005180 <_dtoa_r+0x218>
 80050d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050da:	4b60      	ldr	r3, [pc, #384]	@ (800525c <_dtoa_r+0x2f4>)
 80050dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f7fb fc6a 	bl	80009bc <__aeabi_dcmplt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d04b      	beq.n	8005184 <_dtoa_r+0x21c>
 80050ec:	2300      	movs	r3, #0
 80050ee:	3f01      	subs	r7, #1
 80050f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80050f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050f4:	1b9b      	subs	r3, r3, r6
 80050f6:	1e5a      	subs	r2, r3, #1
 80050f8:	bf49      	itett	mi
 80050fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80050fe:	2300      	movpl	r3, #0
 8005100:	9304      	strmi	r3, [sp, #16]
 8005102:	2300      	movmi	r3, #0
 8005104:	9209      	str	r2, [sp, #36]	@ 0x24
 8005106:	bf54      	ite	pl
 8005108:	9304      	strpl	r3, [sp, #16]
 800510a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800510c:	2f00      	cmp	r7, #0
 800510e:	db3b      	blt.n	8005188 <_dtoa_r+0x220>
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	970e      	str	r7, [sp, #56]	@ 0x38
 8005114:	443b      	add	r3, r7
 8005116:	9309      	str	r3, [sp, #36]	@ 0x24
 8005118:	2300      	movs	r3, #0
 800511a:	930a      	str	r3, [sp, #40]	@ 0x28
 800511c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800511e:	2b09      	cmp	r3, #9
 8005120:	d865      	bhi.n	80051ee <_dtoa_r+0x286>
 8005122:	2b05      	cmp	r3, #5
 8005124:	bfc4      	itt	gt
 8005126:	3b04      	subgt	r3, #4
 8005128:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800512a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800512c:	bfc8      	it	gt
 800512e:	2400      	movgt	r4, #0
 8005130:	f1a3 0302 	sub.w	r3, r3, #2
 8005134:	bfd8      	it	le
 8005136:	2401      	movle	r4, #1
 8005138:	2b03      	cmp	r3, #3
 800513a:	d864      	bhi.n	8005206 <_dtoa_r+0x29e>
 800513c:	e8df f003 	tbb	[pc, r3]
 8005140:	2c385553 	.word	0x2c385553
 8005144:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005148:	441e      	add	r6, r3
 800514a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800514e:	2b20      	cmp	r3, #32
 8005150:	bfc1      	itttt	gt
 8005152:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005156:	fa08 f803 	lslgt.w	r8, r8, r3
 800515a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800515e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005162:	bfd6      	itet	le
 8005164:	f1c3 0320 	rsble	r3, r3, #32
 8005168:	ea48 0003 	orrgt.w	r0, r8, r3
 800516c:	fa04 f003 	lslle.w	r0, r4, r3
 8005170:	f7fb f938 	bl	80003e4 <__aeabi_ui2d>
 8005174:	2201      	movs	r2, #1
 8005176:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800517a:	3e01      	subs	r6, #1
 800517c:	9212      	str	r2, [sp, #72]	@ 0x48
 800517e:	e774      	b.n	800506a <_dtoa_r+0x102>
 8005180:	2301      	movs	r3, #1
 8005182:	e7b5      	b.n	80050f0 <_dtoa_r+0x188>
 8005184:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005186:	e7b4      	b.n	80050f2 <_dtoa_r+0x18a>
 8005188:	9b04      	ldr	r3, [sp, #16]
 800518a:	1bdb      	subs	r3, r3, r7
 800518c:	9304      	str	r3, [sp, #16]
 800518e:	427b      	negs	r3, r7
 8005190:	930a      	str	r3, [sp, #40]	@ 0x28
 8005192:	2300      	movs	r3, #0
 8005194:	930e      	str	r3, [sp, #56]	@ 0x38
 8005196:	e7c1      	b.n	800511c <_dtoa_r+0x1b4>
 8005198:	2301      	movs	r3, #1
 800519a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800519c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800519e:	eb07 0b03 	add.w	fp, r7, r3
 80051a2:	f10b 0301 	add.w	r3, fp, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	9308      	str	r3, [sp, #32]
 80051aa:	bfb8      	it	lt
 80051ac:	2301      	movlt	r3, #1
 80051ae:	e006      	b.n	80051be <_dtoa_r+0x256>
 80051b0:	2301      	movs	r3, #1
 80051b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	dd28      	ble.n	800520c <_dtoa_r+0x2a4>
 80051ba:	469b      	mov	fp, r3
 80051bc:	9308      	str	r3, [sp, #32]
 80051be:	2100      	movs	r1, #0
 80051c0:	2204      	movs	r2, #4
 80051c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80051c6:	f102 0514 	add.w	r5, r2, #20
 80051ca:	429d      	cmp	r5, r3
 80051cc:	d926      	bls.n	800521c <_dtoa_r+0x2b4>
 80051ce:	6041      	str	r1, [r0, #4]
 80051d0:	4648      	mov	r0, r9
 80051d2:	f000 fd9b 	bl	8005d0c <_Balloc>
 80051d6:	4682      	mov	sl, r0
 80051d8:	2800      	cmp	r0, #0
 80051da:	d143      	bne.n	8005264 <_dtoa_r+0x2fc>
 80051dc:	4602      	mov	r2, r0
 80051de:	f240 11af 	movw	r1, #431	@ 0x1af
 80051e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005260 <_dtoa_r+0x2f8>)
 80051e4:	e6d4      	b.n	8004f90 <_dtoa_r+0x28>
 80051e6:	2300      	movs	r3, #0
 80051e8:	e7e3      	b.n	80051b2 <_dtoa_r+0x24a>
 80051ea:	2300      	movs	r3, #0
 80051ec:	e7d5      	b.n	800519a <_dtoa_r+0x232>
 80051ee:	2401      	movs	r4, #1
 80051f0:	2300      	movs	r3, #0
 80051f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80051f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80051f6:	f04f 3bff 	mov.w	fp, #4294967295
 80051fa:	2200      	movs	r2, #0
 80051fc:	2312      	movs	r3, #18
 80051fe:	f8cd b020 	str.w	fp, [sp, #32]
 8005202:	9221      	str	r2, [sp, #132]	@ 0x84
 8005204:	e7db      	b.n	80051be <_dtoa_r+0x256>
 8005206:	2301      	movs	r3, #1
 8005208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800520a:	e7f4      	b.n	80051f6 <_dtoa_r+0x28e>
 800520c:	f04f 0b01 	mov.w	fp, #1
 8005210:	465b      	mov	r3, fp
 8005212:	f8cd b020 	str.w	fp, [sp, #32]
 8005216:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800521a:	e7d0      	b.n	80051be <_dtoa_r+0x256>
 800521c:	3101      	adds	r1, #1
 800521e:	0052      	lsls	r2, r2, #1
 8005220:	e7d1      	b.n	80051c6 <_dtoa_r+0x25e>
 8005222:	bf00      	nop
 8005224:	f3af 8000 	nop.w
 8005228:	636f4361 	.word	0x636f4361
 800522c:	3fd287a7 	.word	0x3fd287a7
 8005230:	8b60c8b3 	.word	0x8b60c8b3
 8005234:	3fc68a28 	.word	0x3fc68a28
 8005238:	509f79fb 	.word	0x509f79fb
 800523c:	3fd34413 	.word	0x3fd34413
 8005240:	08008b54 	.word	0x08008b54
 8005244:	08008b6b 	.word	0x08008b6b
 8005248:	7ff00000 	.word	0x7ff00000
 800524c:	08008b50 	.word	0x08008b50
 8005250:	08008b1f 	.word	0x08008b1f
 8005254:	08008b1e 	.word	0x08008b1e
 8005258:	3ff80000 	.word	0x3ff80000
 800525c:	08008d18 	.word	0x08008d18
 8005260:	08008bc3 	.word	0x08008bc3
 8005264:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005268:	6018      	str	r0, [r3, #0]
 800526a:	9b08      	ldr	r3, [sp, #32]
 800526c:	2b0e      	cmp	r3, #14
 800526e:	f200 80a1 	bhi.w	80053b4 <_dtoa_r+0x44c>
 8005272:	2c00      	cmp	r4, #0
 8005274:	f000 809e 	beq.w	80053b4 <_dtoa_r+0x44c>
 8005278:	2f00      	cmp	r7, #0
 800527a:	dd33      	ble.n	80052e4 <_dtoa_r+0x37c>
 800527c:	4b9c      	ldr	r3, [pc, #624]	@ (80054f0 <_dtoa_r+0x588>)
 800527e:	f007 020f 	and.w	r2, r7, #15
 8005282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005286:	05f8      	lsls	r0, r7, #23
 8005288:	e9d3 3400 	ldrd	r3, r4, [r3]
 800528c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005290:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005294:	d516      	bpl.n	80052c4 <_dtoa_r+0x35c>
 8005296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800529a:	4b96      	ldr	r3, [pc, #600]	@ (80054f4 <_dtoa_r+0x58c>)
 800529c:	2603      	movs	r6, #3
 800529e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a2:	f7fb fa43 	bl	800072c <__aeabi_ddiv>
 80052a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052aa:	f004 040f 	and.w	r4, r4, #15
 80052ae:	4d91      	ldr	r5, [pc, #580]	@ (80054f4 <_dtoa_r+0x58c>)
 80052b0:	b954      	cbnz	r4, 80052c8 <_dtoa_r+0x360>
 80052b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052ba:	f7fb fa37 	bl	800072c <__aeabi_ddiv>
 80052be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052c2:	e028      	b.n	8005316 <_dtoa_r+0x3ae>
 80052c4:	2602      	movs	r6, #2
 80052c6:	e7f2      	b.n	80052ae <_dtoa_r+0x346>
 80052c8:	07e1      	lsls	r1, r4, #31
 80052ca:	d508      	bpl.n	80052de <_dtoa_r+0x376>
 80052cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80052d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052d4:	f7fb f900 	bl	80004d8 <__aeabi_dmul>
 80052d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052dc:	3601      	adds	r6, #1
 80052de:	1064      	asrs	r4, r4, #1
 80052e0:	3508      	adds	r5, #8
 80052e2:	e7e5      	b.n	80052b0 <_dtoa_r+0x348>
 80052e4:	f000 80af 	beq.w	8005446 <_dtoa_r+0x4de>
 80052e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ec:	427c      	negs	r4, r7
 80052ee:	4b80      	ldr	r3, [pc, #512]	@ (80054f0 <_dtoa_r+0x588>)
 80052f0:	f004 020f 	and.w	r2, r4, #15
 80052f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fb f8ec 	bl	80004d8 <__aeabi_dmul>
 8005300:	2602      	movs	r6, #2
 8005302:	2300      	movs	r3, #0
 8005304:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005308:	4d7a      	ldr	r5, [pc, #488]	@ (80054f4 <_dtoa_r+0x58c>)
 800530a:	1124      	asrs	r4, r4, #4
 800530c:	2c00      	cmp	r4, #0
 800530e:	f040 808f 	bne.w	8005430 <_dtoa_r+0x4c8>
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1d3      	bne.n	80052be <_dtoa_r+0x356>
 8005316:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800531a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8094 	beq.w	800544a <_dtoa_r+0x4e2>
 8005322:	2200      	movs	r2, #0
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	4b73      	ldr	r3, [pc, #460]	@ (80054f8 <_dtoa_r+0x590>)
 800532a:	f7fb fb47 	bl	80009bc <__aeabi_dcmplt>
 800532e:	2800      	cmp	r0, #0
 8005330:	f000 808b 	beq.w	800544a <_dtoa_r+0x4e2>
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8087 	beq.w	800544a <_dtoa_r+0x4e2>
 800533c:	f1bb 0f00 	cmp.w	fp, #0
 8005340:	dd34      	ble.n	80053ac <_dtoa_r+0x444>
 8005342:	4620      	mov	r0, r4
 8005344:	2200      	movs	r2, #0
 8005346:	4629      	mov	r1, r5
 8005348:	4b6c      	ldr	r3, [pc, #432]	@ (80054fc <_dtoa_r+0x594>)
 800534a:	f7fb f8c5 	bl	80004d8 <__aeabi_dmul>
 800534e:	465c      	mov	r4, fp
 8005350:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005354:	f107 38ff 	add.w	r8, r7, #4294967295
 8005358:	3601      	adds	r6, #1
 800535a:	4630      	mov	r0, r6
 800535c:	f7fb f852 	bl	8000404 <__aeabi_i2d>
 8005360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005364:	f7fb f8b8 	bl	80004d8 <__aeabi_dmul>
 8005368:	2200      	movs	r2, #0
 800536a:	4b65      	ldr	r3, [pc, #404]	@ (8005500 <_dtoa_r+0x598>)
 800536c:	f7fa fefe 	bl	800016c <__adddf3>
 8005370:	4605      	mov	r5, r0
 8005372:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005376:	2c00      	cmp	r4, #0
 8005378:	d16a      	bne.n	8005450 <_dtoa_r+0x4e8>
 800537a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800537e:	2200      	movs	r2, #0
 8005380:	4b60      	ldr	r3, [pc, #384]	@ (8005504 <_dtoa_r+0x59c>)
 8005382:	f7fa fef1 	bl	8000168 <__aeabi_dsub>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800538e:	462a      	mov	r2, r5
 8005390:	4633      	mov	r3, r6
 8005392:	f7fb fb31 	bl	80009f8 <__aeabi_dcmpgt>
 8005396:	2800      	cmp	r0, #0
 8005398:	f040 8298 	bne.w	80058cc <_dtoa_r+0x964>
 800539c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a0:	462a      	mov	r2, r5
 80053a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80053a6:	f7fb fb09 	bl	80009bc <__aeabi_dcmplt>
 80053aa:	bb38      	cbnz	r0, 80053fc <_dtoa_r+0x494>
 80053ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80053b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80053b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f2c0 8157 	blt.w	800566a <_dtoa_r+0x702>
 80053bc:	2f0e      	cmp	r7, #14
 80053be:	f300 8154 	bgt.w	800566a <_dtoa_r+0x702>
 80053c2:	4b4b      	ldr	r3, [pc, #300]	@ (80054f0 <_dtoa_r+0x588>)
 80053c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f280 80e5 	bge.w	80055a2 <_dtoa_r+0x63a>
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f300 80e1 	bgt.w	80055a2 <_dtoa_r+0x63a>
 80053e0:	d10c      	bne.n	80053fc <_dtoa_r+0x494>
 80053e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053e6:	2200      	movs	r2, #0
 80053e8:	4b46      	ldr	r3, [pc, #280]	@ (8005504 <_dtoa_r+0x59c>)
 80053ea:	f7fb f875 	bl	80004d8 <__aeabi_dmul>
 80053ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f2:	f7fb faf7 	bl	80009e4 <__aeabi_dcmpge>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	f000 8266 	beq.w	80058c8 <_dtoa_r+0x960>
 80053fc:	2400      	movs	r4, #0
 80053fe:	4625      	mov	r5, r4
 8005400:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005402:	4656      	mov	r6, sl
 8005404:	ea6f 0803 	mvn.w	r8, r3
 8005408:	2700      	movs	r7, #0
 800540a:	4621      	mov	r1, r4
 800540c:	4648      	mov	r0, r9
 800540e:	f000 fcbd 	bl	8005d8c <_Bfree>
 8005412:	2d00      	cmp	r5, #0
 8005414:	f000 80bd 	beq.w	8005592 <_dtoa_r+0x62a>
 8005418:	b12f      	cbz	r7, 8005426 <_dtoa_r+0x4be>
 800541a:	42af      	cmp	r7, r5
 800541c:	d003      	beq.n	8005426 <_dtoa_r+0x4be>
 800541e:	4639      	mov	r1, r7
 8005420:	4648      	mov	r0, r9
 8005422:	f000 fcb3 	bl	8005d8c <_Bfree>
 8005426:	4629      	mov	r1, r5
 8005428:	4648      	mov	r0, r9
 800542a:	f000 fcaf 	bl	8005d8c <_Bfree>
 800542e:	e0b0      	b.n	8005592 <_dtoa_r+0x62a>
 8005430:	07e2      	lsls	r2, r4, #31
 8005432:	d505      	bpl.n	8005440 <_dtoa_r+0x4d8>
 8005434:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005438:	f7fb f84e 	bl	80004d8 <__aeabi_dmul>
 800543c:	2301      	movs	r3, #1
 800543e:	3601      	adds	r6, #1
 8005440:	1064      	asrs	r4, r4, #1
 8005442:	3508      	adds	r5, #8
 8005444:	e762      	b.n	800530c <_dtoa_r+0x3a4>
 8005446:	2602      	movs	r6, #2
 8005448:	e765      	b.n	8005316 <_dtoa_r+0x3ae>
 800544a:	46b8      	mov	r8, r7
 800544c:	9c08      	ldr	r4, [sp, #32]
 800544e:	e784      	b.n	800535a <_dtoa_r+0x3f2>
 8005450:	4b27      	ldr	r3, [pc, #156]	@ (80054f0 <_dtoa_r+0x588>)
 8005452:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005454:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005458:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800545c:	4454      	add	r4, sl
 800545e:	2900      	cmp	r1, #0
 8005460:	d054      	beq.n	800550c <_dtoa_r+0x5a4>
 8005462:	2000      	movs	r0, #0
 8005464:	4928      	ldr	r1, [pc, #160]	@ (8005508 <_dtoa_r+0x5a0>)
 8005466:	f7fb f961 	bl	800072c <__aeabi_ddiv>
 800546a:	4633      	mov	r3, r6
 800546c:	462a      	mov	r2, r5
 800546e:	f7fa fe7b 	bl	8000168 <__aeabi_dsub>
 8005472:	4656      	mov	r6, sl
 8005474:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005478:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800547c:	f7fb fadc 	bl	8000a38 <__aeabi_d2iz>
 8005480:	4605      	mov	r5, r0
 8005482:	f7fa ffbf 	bl	8000404 <__aeabi_i2d>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800548e:	f7fa fe6b 	bl	8000168 <__aeabi_dsub>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	3530      	adds	r5, #48	@ 0x30
 8005498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800549c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054a0:	f806 5b01 	strb.w	r5, [r6], #1
 80054a4:	f7fb fa8a 	bl	80009bc <__aeabi_dcmplt>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d172      	bne.n	8005592 <_dtoa_r+0x62a>
 80054ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054b0:	2000      	movs	r0, #0
 80054b2:	4911      	ldr	r1, [pc, #68]	@ (80054f8 <_dtoa_r+0x590>)
 80054b4:	f7fa fe58 	bl	8000168 <__aeabi_dsub>
 80054b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80054bc:	f7fb fa7e 	bl	80009bc <__aeabi_dcmplt>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f040 80b4 	bne.w	800562e <_dtoa_r+0x6c6>
 80054c6:	42a6      	cmp	r6, r4
 80054c8:	f43f af70 	beq.w	80053ac <_dtoa_r+0x444>
 80054cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80054d0:	2200      	movs	r2, #0
 80054d2:	4b0a      	ldr	r3, [pc, #40]	@ (80054fc <_dtoa_r+0x594>)
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	2200      	movs	r2, #0
 80054da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80054de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054e2:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <_dtoa_r+0x594>)
 80054e4:	f7fa fff8 	bl	80004d8 <__aeabi_dmul>
 80054e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054ec:	e7c4      	b.n	8005478 <_dtoa_r+0x510>
 80054ee:	bf00      	nop
 80054f0:	08008d18 	.word	0x08008d18
 80054f4:	08008cf0 	.word	0x08008cf0
 80054f8:	3ff00000 	.word	0x3ff00000
 80054fc:	40240000 	.word	0x40240000
 8005500:	401c0000 	.word	0x401c0000
 8005504:	40140000 	.word	0x40140000
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	f7fa ffe2 	bl	80004d8 <__aeabi_dmul>
 8005514:	4656      	mov	r6, sl
 8005516:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800551a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800551c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005520:	f7fb fa8a 	bl	8000a38 <__aeabi_d2iz>
 8005524:	4605      	mov	r5, r0
 8005526:	f7fa ff6d 	bl	8000404 <__aeabi_i2d>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005532:	f7fa fe19 	bl	8000168 <__aeabi_dsub>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	3530      	adds	r5, #48	@ 0x30
 800553c:	f806 5b01 	strb.w	r5, [r6], #1
 8005540:	42a6      	cmp	r6, r4
 8005542:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	d124      	bne.n	8005596 <_dtoa_r+0x62e>
 800554c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005550:	4bae      	ldr	r3, [pc, #696]	@ (800580c <_dtoa_r+0x8a4>)
 8005552:	f7fa fe0b 	bl	800016c <__adddf3>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800555e:	f7fb fa4b 	bl	80009f8 <__aeabi_dcmpgt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d163      	bne.n	800562e <_dtoa_r+0x6c6>
 8005566:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800556a:	2000      	movs	r0, #0
 800556c:	49a7      	ldr	r1, [pc, #668]	@ (800580c <_dtoa_r+0x8a4>)
 800556e:	f7fa fdfb 	bl	8000168 <__aeabi_dsub>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800557a:	f7fb fa1f 	bl	80009bc <__aeabi_dcmplt>
 800557e:	2800      	cmp	r0, #0
 8005580:	f43f af14 	beq.w	80053ac <_dtoa_r+0x444>
 8005584:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005586:	1e73      	subs	r3, r6, #1
 8005588:	9313      	str	r3, [sp, #76]	@ 0x4c
 800558a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800558e:	2b30      	cmp	r3, #48	@ 0x30
 8005590:	d0f8      	beq.n	8005584 <_dtoa_r+0x61c>
 8005592:	4647      	mov	r7, r8
 8005594:	e03b      	b.n	800560e <_dtoa_r+0x6a6>
 8005596:	4b9e      	ldr	r3, [pc, #632]	@ (8005810 <_dtoa_r+0x8a8>)
 8005598:	f7fa ff9e 	bl	80004d8 <__aeabi_dmul>
 800559c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055a0:	e7bc      	b.n	800551c <_dtoa_r+0x5b4>
 80055a2:	4656      	mov	r6, sl
 80055a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80055a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fb f8bc 	bl	800072c <__aeabi_ddiv>
 80055b4:	f7fb fa40 	bl	8000a38 <__aeabi_d2iz>
 80055b8:	4680      	mov	r8, r0
 80055ba:	f7fa ff23 	bl	8000404 <__aeabi_i2d>
 80055be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c2:	f7fa ff89 	bl	80004d8 <__aeabi_dmul>
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4620      	mov	r0, r4
 80055cc:	4629      	mov	r1, r5
 80055ce:	f7fa fdcb 	bl	8000168 <__aeabi_dsub>
 80055d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055d6:	9d08      	ldr	r5, [sp, #32]
 80055d8:	f806 4b01 	strb.w	r4, [r6], #1
 80055dc:	eba6 040a 	sub.w	r4, r6, sl
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	d133      	bne.n	8005650 <_dtoa_r+0x6e8>
 80055e8:	f7fa fdc0 	bl	800016c <__adddf3>
 80055ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	f7fb fa00 	bl	80009f8 <__aeabi_dcmpgt>
 80055f8:	b9c0      	cbnz	r0, 800562c <_dtoa_r+0x6c4>
 80055fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055fe:	4620      	mov	r0, r4
 8005600:	4629      	mov	r1, r5
 8005602:	f7fb f9d1 	bl	80009a8 <__aeabi_dcmpeq>
 8005606:	b110      	cbz	r0, 800560e <_dtoa_r+0x6a6>
 8005608:	f018 0f01 	tst.w	r8, #1
 800560c:	d10e      	bne.n	800562c <_dtoa_r+0x6c4>
 800560e:	4648      	mov	r0, r9
 8005610:	9903      	ldr	r1, [sp, #12]
 8005612:	f000 fbbb 	bl	8005d8c <_Bfree>
 8005616:	2300      	movs	r3, #0
 8005618:	7033      	strb	r3, [r6, #0]
 800561a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800561c:	3701      	adds	r7, #1
 800561e:	601f      	str	r7, [r3, #0]
 8005620:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 824b 	beq.w	8005abe <_dtoa_r+0xb56>
 8005628:	601e      	str	r6, [r3, #0]
 800562a:	e248      	b.n	8005abe <_dtoa_r+0xb56>
 800562c:	46b8      	mov	r8, r7
 800562e:	4633      	mov	r3, r6
 8005630:	461e      	mov	r6, r3
 8005632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005636:	2a39      	cmp	r2, #57	@ 0x39
 8005638:	d106      	bne.n	8005648 <_dtoa_r+0x6e0>
 800563a:	459a      	cmp	sl, r3
 800563c:	d1f8      	bne.n	8005630 <_dtoa_r+0x6c8>
 800563e:	2230      	movs	r2, #48	@ 0x30
 8005640:	f108 0801 	add.w	r8, r8, #1
 8005644:	f88a 2000 	strb.w	r2, [sl]
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	3201      	adds	r2, #1
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	e7a0      	b.n	8005592 <_dtoa_r+0x62a>
 8005650:	2200      	movs	r2, #0
 8005652:	4b6f      	ldr	r3, [pc, #444]	@ (8005810 <_dtoa_r+0x8a8>)
 8005654:	f7fa ff40 	bl	80004d8 <__aeabi_dmul>
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	f7fb f9a2 	bl	80009a8 <__aeabi_dcmpeq>
 8005664:	2800      	cmp	r0, #0
 8005666:	d09f      	beq.n	80055a8 <_dtoa_r+0x640>
 8005668:	e7d1      	b.n	800560e <_dtoa_r+0x6a6>
 800566a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800566c:	2a00      	cmp	r2, #0
 800566e:	f000 80ea 	beq.w	8005846 <_dtoa_r+0x8de>
 8005672:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005674:	2a01      	cmp	r2, #1
 8005676:	f300 80cd 	bgt.w	8005814 <_dtoa_r+0x8ac>
 800567a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800567c:	2a00      	cmp	r2, #0
 800567e:	f000 80c1 	beq.w	8005804 <_dtoa_r+0x89c>
 8005682:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005686:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005688:	9e04      	ldr	r6, [sp, #16]
 800568a:	9a04      	ldr	r2, [sp, #16]
 800568c:	2101      	movs	r1, #1
 800568e:	441a      	add	r2, r3
 8005690:	9204      	str	r2, [sp, #16]
 8005692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005694:	4648      	mov	r0, r9
 8005696:	441a      	add	r2, r3
 8005698:	9209      	str	r2, [sp, #36]	@ 0x24
 800569a:	f000 fc75 	bl	8005f88 <__i2b>
 800569e:	4605      	mov	r5, r0
 80056a0:	b166      	cbz	r6, 80056bc <_dtoa_r+0x754>
 80056a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd09      	ble.n	80056bc <_dtoa_r+0x754>
 80056a8:	42b3      	cmp	r3, r6
 80056aa:	bfa8      	it	ge
 80056ac:	4633      	movge	r3, r6
 80056ae:	9a04      	ldr	r2, [sp, #16]
 80056b0:	1af6      	subs	r6, r6, r3
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	9204      	str	r2, [sp, #16]
 80056b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80056bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056be:	b30b      	cbz	r3, 8005704 <_dtoa_r+0x79c>
 80056c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 80c6 	beq.w	8005854 <_dtoa_r+0x8ec>
 80056c8:	2c00      	cmp	r4, #0
 80056ca:	f000 80c0 	beq.w	800584e <_dtoa_r+0x8e6>
 80056ce:	4629      	mov	r1, r5
 80056d0:	4622      	mov	r2, r4
 80056d2:	4648      	mov	r0, r9
 80056d4:	f000 fd10 	bl	80060f8 <__pow5mult>
 80056d8:	9a03      	ldr	r2, [sp, #12]
 80056da:	4601      	mov	r1, r0
 80056dc:	4605      	mov	r5, r0
 80056de:	4648      	mov	r0, r9
 80056e0:	f000 fc68 	bl	8005fb4 <__multiply>
 80056e4:	9903      	ldr	r1, [sp, #12]
 80056e6:	4680      	mov	r8, r0
 80056e8:	4648      	mov	r0, r9
 80056ea:	f000 fb4f 	bl	8005d8c <_Bfree>
 80056ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056f0:	1b1b      	subs	r3, r3, r4
 80056f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80056f4:	f000 80b1 	beq.w	800585a <_dtoa_r+0x8f2>
 80056f8:	4641      	mov	r1, r8
 80056fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056fc:	4648      	mov	r0, r9
 80056fe:	f000 fcfb 	bl	80060f8 <__pow5mult>
 8005702:	9003      	str	r0, [sp, #12]
 8005704:	2101      	movs	r1, #1
 8005706:	4648      	mov	r0, r9
 8005708:	f000 fc3e 	bl	8005f88 <__i2b>
 800570c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800570e:	4604      	mov	r4, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 81d8 	beq.w	8005ac6 <_dtoa_r+0xb5e>
 8005716:	461a      	mov	r2, r3
 8005718:	4601      	mov	r1, r0
 800571a:	4648      	mov	r0, r9
 800571c:	f000 fcec 	bl	80060f8 <__pow5mult>
 8005720:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005722:	4604      	mov	r4, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	f300 809f 	bgt.w	8005868 <_dtoa_r+0x900>
 800572a:	9b06      	ldr	r3, [sp, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f040 8097 	bne.w	8005860 <_dtoa_r+0x8f8>
 8005732:	9b07      	ldr	r3, [sp, #28]
 8005734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 8093 	bne.w	8005864 <_dtoa_r+0x8fc>
 800573e:	9b07      	ldr	r3, [sp, #28]
 8005740:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005744:	0d1b      	lsrs	r3, r3, #20
 8005746:	051b      	lsls	r3, r3, #20
 8005748:	b133      	cbz	r3, 8005758 <_dtoa_r+0x7f0>
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	3301      	adds	r3, #1
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005752:	3301      	adds	r3, #1
 8005754:	9309      	str	r3, [sp, #36]	@ 0x24
 8005756:	2301      	movs	r3, #1
 8005758:	930a      	str	r3, [sp, #40]	@ 0x28
 800575a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800575c:	2b00      	cmp	r3, #0
 800575e:	f000 81b8 	beq.w	8005ad2 <_dtoa_r+0xb6a>
 8005762:	6923      	ldr	r3, [r4, #16]
 8005764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005768:	6918      	ldr	r0, [r3, #16]
 800576a:	f000 fbc1 	bl	8005ef0 <__hi0bits>
 800576e:	f1c0 0020 	rsb	r0, r0, #32
 8005772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005774:	4418      	add	r0, r3
 8005776:	f010 001f 	ands.w	r0, r0, #31
 800577a:	f000 8082 	beq.w	8005882 <_dtoa_r+0x91a>
 800577e:	f1c0 0320 	rsb	r3, r0, #32
 8005782:	2b04      	cmp	r3, #4
 8005784:	dd73      	ble.n	800586e <_dtoa_r+0x906>
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	f1c0 001c 	rsb	r0, r0, #28
 800578c:	4403      	add	r3, r0
 800578e:	9304      	str	r3, [sp, #16]
 8005790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005792:	4406      	add	r6, r0
 8005794:	4403      	add	r3, r0
 8005796:	9309      	str	r3, [sp, #36]	@ 0x24
 8005798:	9b04      	ldr	r3, [sp, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dd05      	ble.n	80057aa <_dtoa_r+0x842>
 800579e:	461a      	mov	r2, r3
 80057a0:	4648      	mov	r0, r9
 80057a2:	9903      	ldr	r1, [sp, #12]
 80057a4:	f000 fd02 	bl	80061ac <__lshift>
 80057a8:	9003      	str	r0, [sp, #12]
 80057aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dd05      	ble.n	80057bc <_dtoa_r+0x854>
 80057b0:	4621      	mov	r1, r4
 80057b2:	461a      	mov	r2, r3
 80057b4:	4648      	mov	r0, r9
 80057b6:	f000 fcf9 	bl	80061ac <__lshift>
 80057ba:	4604      	mov	r4, r0
 80057bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d061      	beq.n	8005886 <_dtoa_r+0x91e>
 80057c2:	4621      	mov	r1, r4
 80057c4:	9803      	ldr	r0, [sp, #12]
 80057c6:	f000 fd5d 	bl	8006284 <__mcmp>
 80057ca:	2800      	cmp	r0, #0
 80057cc:	da5b      	bge.n	8005886 <_dtoa_r+0x91e>
 80057ce:	2300      	movs	r3, #0
 80057d0:	220a      	movs	r2, #10
 80057d2:	4648      	mov	r0, r9
 80057d4:	9903      	ldr	r1, [sp, #12]
 80057d6:	f000 fafb 	bl	8005dd0 <__multadd>
 80057da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80057e0:	9003      	str	r0, [sp, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8177 	beq.w	8005ad6 <_dtoa_r+0xb6e>
 80057e8:	4629      	mov	r1, r5
 80057ea:	2300      	movs	r3, #0
 80057ec:	220a      	movs	r2, #10
 80057ee:	4648      	mov	r0, r9
 80057f0:	f000 faee 	bl	8005dd0 <__multadd>
 80057f4:	f1bb 0f00 	cmp.w	fp, #0
 80057f8:	4605      	mov	r5, r0
 80057fa:	dc6f      	bgt.n	80058dc <_dtoa_r+0x974>
 80057fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80057fe:	2b02      	cmp	r3, #2
 8005800:	dc49      	bgt.n	8005896 <_dtoa_r+0x92e>
 8005802:	e06b      	b.n	80058dc <_dtoa_r+0x974>
 8005804:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005806:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800580a:	e73c      	b.n	8005686 <_dtoa_r+0x71e>
 800580c:	3fe00000 	.word	0x3fe00000
 8005810:	40240000 	.word	0x40240000
 8005814:	9b08      	ldr	r3, [sp, #32]
 8005816:	1e5c      	subs	r4, r3, #1
 8005818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800581a:	42a3      	cmp	r3, r4
 800581c:	db09      	blt.n	8005832 <_dtoa_r+0x8ca>
 800581e:	1b1c      	subs	r4, r3, r4
 8005820:	9b08      	ldr	r3, [sp, #32]
 8005822:	2b00      	cmp	r3, #0
 8005824:	f6bf af30 	bge.w	8005688 <_dtoa_r+0x720>
 8005828:	9b04      	ldr	r3, [sp, #16]
 800582a:	9a08      	ldr	r2, [sp, #32]
 800582c:	1a9e      	subs	r6, r3, r2
 800582e:	2300      	movs	r3, #0
 8005830:	e72b      	b.n	800568a <_dtoa_r+0x722>
 8005832:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005834:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005836:	1ae3      	subs	r3, r4, r3
 8005838:	441a      	add	r2, r3
 800583a:	940a      	str	r4, [sp, #40]	@ 0x28
 800583c:	9e04      	ldr	r6, [sp, #16]
 800583e:	2400      	movs	r4, #0
 8005840:	9b08      	ldr	r3, [sp, #32]
 8005842:	920e      	str	r2, [sp, #56]	@ 0x38
 8005844:	e721      	b.n	800568a <_dtoa_r+0x722>
 8005846:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005848:	9e04      	ldr	r6, [sp, #16]
 800584a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800584c:	e728      	b.n	80056a0 <_dtoa_r+0x738>
 800584e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005852:	e751      	b.n	80056f8 <_dtoa_r+0x790>
 8005854:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005856:	9903      	ldr	r1, [sp, #12]
 8005858:	e750      	b.n	80056fc <_dtoa_r+0x794>
 800585a:	f8cd 800c 	str.w	r8, [sp, #12]
 800585e:	e751      	b.n	8005704 <_dtoa_r+0x79c>
 8005860:	2300      	movs	r3, #0
 8005862:	e779      	b.n	8005758 <_dtoa_r+0x7f0>
 8005864:	9b06      	ldr	r3, [sp, #24]
 8005866:	e777      	b.n	8005758 <_dtoa_r+0x7f0>
 8005868:	2300      	movs	r3, #0
 800586a:	930a      	str	r3, [sp, #40]	@ 0x28
 800586c:	e779      	b.n	8005762 <_dtoa_r+0x7fa>
 800586e:	d093      	beq.n	8005798 <_dtoa_r+0x830>
 8005870:	9a04      	ldr	r2, [sp, #16]
 8005872:	331c      	adds	r3, #28
 8005874:	441a      	add	r2, r3
 8005876:	9204      	str	r2, [sp, #16]
 8005878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800587a:	441e      	add	r6, r3
 800587c:	441a      	add	r2, r3
 800587e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005880:	e78a      	b.n	8005798 <_dtoa_r+0x830>
 8005882:	4603      	mov	r3, r0
 8005884:	e7f4      	b.n	8005870 <_dtoa_r+0x908>
 8005886:	9b08      	ldr	r3, [sp, #32]
 8005888:	46b8      	mov	r8, r7
 800588a:	2b00      	cmp	r3, #0
 800588c:	dc20      	bgt.n	80058d0 <_dtoa_r+0x968>
 800588e:	469b      	mov	fp, r3
 8005890:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005892:	2b02      	cmp	r3, #2
 8005894:	dd1e      	ble.n	80058d4 <_dtoa_r+0x96c>
 8005896:	f1bb 0f00 	cmp.w	fp, #0
 800589a:	f47f adb1 	bne.w	8005400 <_dtoa_r+0x498>
 800589e:	4621      	mov	r1, r4
 80058a0:	465b      	mov	r3, fp
 80058a2:	2205      	movs	r2, #5
 80058a4:	4648      	mov	r0, r9
 80058a6:	f000 fa93 	bl	8005dd0 <__multadd>
 80058aa:	4601      	mov	r1, r0
 80058ac:	4604      	mov	r4, r0
 80058ae:	9803      	ldr	r0, [sp, #12]
 80058b0:	f000 fce8 	bl	8006284 <__mcmp>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	f77f ada3 	ble.w	8005400 <_dtoa_r+0x498>
 80058ba:	4656      	mov	r6, sl
 80058bc:	2331      	movs	r3, #49	@ 0x31
 80058be:	f108 0801 	add.w	r8, r8, #1
 80058c2:	f806 3b01 	strb.w	r3, [r6], #1
 80058c6:	e59f      	b.n	8005408 <_dtoa_r+0x4a0>
 80058c8:	46b8      	mov	r8, r7
 80058ca:	9c08      	ldr	r4, [sp, #32]
 80058cc:	4625      	mov	r5, r4
 80058ce:	e7f4      	b.n	80058ba <_dtoa_r+0x952>
 80058d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80058d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8101 	beq.w	8005ade <_dtoa_r+0xb76>
 80058dc:	2e00      	cmp	r6, #0
 80058de:	dd05      	ble.n	80058ec <_dtoa_r+0x984>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4632      	mov	r2, r6
 80058e4:	4648      	mov	r0, r9
 80058e6:	f000 fc61 	bl	80061ac <__lshift>
 80058ea:	4605      	mov	r5, r0
 80058ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d05c      	beq.n	80059ac <_dtoa_r+0xa44>
 80058f2:	4648      	mov	r0, r9
 80058f4:	6869      	ldr	r1, [r5, #4]
 80058f6:	f000 fa09 	bl	8005d0c <_Balloc>
 80058fa:	4606      	mov	r6, r0
 80058fc:	b928      	cbnz	r0, 800590a <_dtoa_r+0x9a2>
 80058fe:	4602      	mov	r2, r0
 8005900:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005904:	4b80      	ldr	r3, [pc, #512]	@ (8005b08 <_dtoa_r+0xba0>)
 8005906:	f7ff bb43 	b.w	8004f90 <_dtoa_r+0x28>
 800590a:	692a      	ldr	r2, [r5, #16]
 800590c:	f105 010c 	add.w	r1, r5, #12
 8005910:	3202      	adds	r2, #2
 8005912:	0092      	lsls	r2, r2, #2
 8005914:	300c      	adds	r0, #12
 8005916:	f7ff fa8a 	bl	8004e2e <memcpy>
 800591a:	2201      	movs	r2, #1
 800591c:	4631      	mov	r1, r6
 800591e:	4648      	mov	r0, r9
 8005920:	f000 fc44 	bl	80061ac <__lshift>
 8005924:	462f      	mov	r7, r5
 8005926:	4605      	mov	r5, r0
 8005928:	f10a 0301 	add.w	r3, sl, #1
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	eb0a 030b 	add.w	r3, sl, fp
 8005932:	930a      	str	r3, [sp, #40]	@ 0x28
 8005934:	9b06      	ldr	r3, [sp, #24]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	9309      	str	r3, [sp, #36]	@ 0x24
 800593c:	9b04      	ldr	r3, [sp, #16]
 800593e:	4621      	mov	r1, r4
 8005940:	9803      	ldr	r0, [sp, #12]
 8005942:	f103 3bff 	add.w	fp, r3, #4294967295
 8005946:	f7ff fa85 	bl	8004e54 <quorem>
 800594a:	4603      	mov	r3, r0
 800594c:	4639      	mov	r1, r7
 800594e:	3330      	adds	r3, #48	@ 0x30
 8005950:	9006      	str	r0, [sp, #24]
 8005952:	9803      	ldr	r0, [sp, #12]
 8005954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005956:	f000 fc95 	bl	8006284 <__mcmp>
 800595a:	462a      	mov	r2, r5
 800595c:	9008      	str	r0, [sp, #32]
 800595e:	4621      	mov	r1, r4
 8005960:	4648      	mov	r0, r9
 8005962:	f000 fcab 	bl	80062bc <__mdiff>
 8005966:	68c2      	ldr	r2, [r0, #12]
 8005968:	4606      	mov	r6, r0
 800596a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800596c:	bb02      	cbnz	r2, 80059b0 <_dtoa_r+0xa48>
 800596e:	4601      	mov	r1, r0
 8005970:	9803      	ldr	r0, [sp, #12]
 8005972:	f000 fc87 	bl	8006284 <__mcmp>
 8005976:	4602      	mov	r2, r0
 8005978:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800597a:	4631      	mov	r1, r6
 800597c:	4648      	mov	r0, r9
 800597e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005982:	f000 fa03 	bl	8005d8c <_Bfree>
 8005986:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005988:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800598a:	9e04      	ldr	r6, [sp, #16]
 800598c:	ea42 0103 	orr.w	r1, r2, r3
 8005990:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005992:	4319      	orrs	r1, r3
 8005994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005996:	d10d      	bne.n	80059b4 <_dtoa_r+0xa4c>
 8005998:	2b39      	cmp	r3, #57	@ 0x39
 800599a:	d027      	beq.n	80059ec <_dtoa_r+0xa84>
 800599c:	9a08      	ldr	r2, [sp, #32]
 800599e:	2a00      	cmp	r2, #0
 80059a0:	dd01      	ble.n	80059a6 <_dtoa_r+0xa3e>
 80059a2:	9b06      	ldr	r3, [sp, #24]
 80059a4:	3331      	adds	r3, #49	@ 0x31
 80059a6:	f88b 3000 	strb.w	r3, [fp]
 80059aa:	e52e      	b.n	800540a <_dtoa_r+0x4a2>
 80059ac:	4628      	mov	r0, r5
 80059ae:	e7b9      	b.n	8005924 <_dtoa_r+0x9bc>
 80059b0:	2201      	movs	r2, #1
 80059b2:	e7e2      	b.n	800597a <_dtoa_r+0xa12>
 80059b4:	9908      	ldr	r1, [sp, #32]
 80059b6:	2900      	cmp	r1, #0
 80059b8:	db04      	blt.n	80059c4 <_dtoa_r+0xa5c>
 80059ba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80059bc:	4301      	orrs	r1, r0
 80059be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059c0:	4301      	orrs	r1, r0
 80059c2:	d120      	bne.n	8005a06 <_dtoa_r+0xa9e>
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	ddee      	ble.n	80059a6 <_dtoa_r+0xa3e>
 80059c8:	2201      	movs	r2, #1
 80059ca:	9903      	ldr	r1, [sp, #12]
 80059cc:	4648      	mov	r0, r9
 80059ce:	9304      	str	r3, [sp, #16]
 80059d0:	f000 fbec 	bl	80061ac <__lshift>
 80059d4:	4621      	mov	r1, r4
 80059d6:	9003      	str	r0, [sp, #12]
 80059d8:	f000 fc54 	bl	8006284 <__mcmp>
 80059dc:	2800      	cmp	r0, #0
 80059de:	9b04      	ldr	r3, [sp, #16]
 80059e0:	dc02      	bgt.n	80059e8 <_dtoa_r+0xa80>
 80059e2:	d1e0      	bne.n	80059a6 <_dtoa_r+0xa3e>
 80059e4:	07da      	lsls	r2, r3, #31
 80059e6:	d5de      	bpl.n	80059a6 <_dtoa_r+0xa3e>
 80059e8:	2b39      	cmp	r3, #57	@ 0x39
 80059ea:	d1da      	bne.n	80059a2 <_dtoa_r+0xa3a>
 80059ec:	2339      	movs	r3, #57	@ 0x39
 80059ee:	f88b 3000 	strb.w	r3, [fp]
 80059f2:	4633      	mov	r3, r6
 80059f4:	461e      	mov	r6, r3
 80059f6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	2a39      	cmp	r2, #57	@ 0x39
 80059fe:	d04e      	beq.n	8005a9e <_dtoa_r+0xb36>
 8005a00:	3201      	adds	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e501      	b.n	800540a <_dtoa_r+0x4a2>
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	dd03      	ble.n	8005a12 <_dtoa_r+0xaaa>
 8005a0a:	2b39      	cmp	r3, #57	@ 0x39
 8005a0c:	d0ee      	beq.n	80059ec <_dtoa_r+0xa84>
 8005a0e:	3301      	adds	r3, #1
 8005a10:	e7c9      	b.n	80059a6 <_dtoa_r+0xa3e>
 8005a12:	9a04      	ldr	r2, [sp, #16]
 8005a14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a1a:	428a      	cmp	r2, r1
 8005a1c:	d028      	beq.n	8005a70 <_dtoa_r+0xb08>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	220a      	movs	r2, #10
 8005a22:	9903      	ldr	r1, [sp, #12]
 8005a24:	4648      	mov	r0, r9
 8005a26:	f000 f9d3 	bl	8005dd0 <__multadd>
 8005a2a:	42af      	cmp	r7, r5
 8005a2c:	9003      	str	r0, [sp, #12]
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	f04f 020a 	mov.w	r2, #10
 8005a36:	4639      	mov	r1, r7
 8005a38:	4648      	mov	r0, r9
 8005a3a:	d107      	bne.n	8005a4c <_dtoa_r+0xae4>
 8005a3c:	f000 f9c8 	bl	8005dd0 <__multadd>
 8005a40:	4607      	mov	r7, r0
 8005a42:	4605      	mov	r5, r0
 8005a44:	9b04      	ldr	r3, [sp, #16]
 8005a46:	3301      	adds	r3, #1
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	e777      	b.n	800593c <_dtoa_r+0x9d4>
 8005a4c:	f000 f9c0 	bl	8005dd0 <__multadd>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4607      	mov	r7, r0
 8005a54:	2300      	movs	r3, #0
 8005a56:	220a      	movs	r2, #10
 8005a58:	4648      	mov	r0, r9
 8005a5a:	f000 f9b9 	bl	8005dd0 <__multadd>
 8005a5e:	4605      	mov	r5, r0
 8005a60:	e7f0      	b.n	8005a44 <_dtoa_r+0xadc>
 8005a62:	f1bb 0f00 	cmp.w	fp, #0
 8005a66:	bfcc      	ite	gt
 8005a68:	465e      	movgt	r6, fp
 8005a6a:	2601      	movle	r6, #1
 8005a6c:	2700      	movs	r7, #0
 8005a6e:	4456      	add	r6, sl
 8005a70:	2201      	movs	r2, #1
 8005a72:	9903      	ldr	r1, [sp, #12]
 8005a74:	4648      	mov	r0, r9
 8005a76:	9304      	str	r3, [sp, #16]
 8005a78:	f000 fb98 	bl	80061ac <__lshift>
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	9003      	str	r0, [sp, #12]
 8005a80:	f000 fc00 	bl	8006284 <__mcmp>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	dcb4      	bgt.n	80059f2 <_dtoa_r+0xa8a>
 8005a88:	d102      	bne.n	8005a90 <_dtoa_r+0xb28>
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	07db      	lsls	r3, r3, #31
 8005a8e:	d4b0      	bmi.n	80059f2 <_dtoa_r+0xa8a>
 8005a90:	4633      	mov	r3, r6
 8005a92:	461e      	mov	r6, r3
 8005a94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a98:	2a30      	cmp	r2, #48	@ 0x30
 8005a9a:	d0fa      	beq.n	8005a92 <_dtoa_r+0xb2a>
 8005a9c:	e4b5      	b.n	800540a <_dtoa_r+0x4a2>
 8005a9e:	459a      	cmp	sl, r3
 8005aa0:	d1a8      	bne.n	80059f4 <_dtoa_r+0xa8c>
 8005aa2:	2331      	movs	r3, #49	@ 0x31
 8005aa4:	f108 0801 	add.w	r8, r8, #1
 8005aa8:	f88a 3000 	strb.w	r3, [sl]
 8005aac:	e4ad      	b.n	800540a <_dtoa_r+0x4a2>
 8005aae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ab0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005b0c <_dtoa_r+0xba4>
 8005ab4:	b11b      	cbz	r3, 8005abe <_dtoa_r+0xb56>
 8005ab6:	f10a 0308 	add.w	r3, sl, #8
 8005aba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	4650      	mov	r0, sl
 8005ac0:	b017      	add	sp, #92	@ 0x5c
 8005ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	f77f ae2e 	ble.w	800572a <_dtoa_r+0x7c2>
 8005ace:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e64d      	b.n	8005772 <_dtoa_r+0x80a>
 8005ad6:	f1bb 0f00 	cmp.w	fp, #0
 8005ada:	f77f aed9 	ble.w	8005890 <_dtoa_r+0x928>
 8005ade:	4656      	mov	r6, sl
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	9803      	ldr	r0, [sp, #12]
 8005ae4:	f7ff f9b6 	bl	8004e54 <quorem>
 8005ae8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005aec:	f806 3b01 	strb.w	r3, [r6], #1
 8005af0:	eba6 020a 	sub.w	r2, r6, sl
 8005af4:	4593      	cmp	fp, r2
 8005af6:	ddb4      	ble.n	8005a62 <_dtoa_r+0xafa>
 8005af8:	2300      	movs	r3, #0
 8005afa:	220a      	movs	r2, #10
 8005afc:	4648      	mov	r0, r9
 8005afe:	9903      	ldr	r1, [sp, #12]
 8005b00:	f000 f966 	bl	8005dd0 <__multadd>
 8005b04:	9003      	str	r0, [sp, #12]
 8005b06:	e7eb      	b.n	8005ae0 <_dtoa_r+0xb78>
 8005b08:	08008bc3 	.word	0x08008bc3
 8005b0c:	08008b47 	.word	0x08008b47

08005b10 <_free_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4605      	mov	r5, r0
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d040      	beq.n	8005b9a <_free_r+0x8a>
 8005b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1c:	1f0c      	subs	r4, r1, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	18e4      	addlt	r4, r4, r3
 8005b24:	f000 f8e6 	bl	8005cf4 <__malloc_lock>
 8005b28:	4a1c      	ldr	r2, [pc, #112]	@ (8005b9c <_free_r+0x8c>)
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	b933      	cbnz	r3, 8005b3c <_free_r+0x2c>
 8005b2e:	6063      	str	r3, [r4, #4]
 8005b30:	6014      	str	r4, [r2, #0]
 8005b32:	4628      	mov	r0, r5
 8005b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b38:	f000 b8e2 	b.w	8005d00 <__malloc_unlock>
 8005b3c:	42a3      	cmp	r3, r4
 8005b3e:	d908      	bls.n	8005b52 <_free_r+0x42>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	1821      	adds	r1, r4, r0
 8005b44:	428b      	cmp	r3, r1
 8005b46:	bf01      	itttt	eq
 8005b48:	6819      	ldreq	r1, [r3, #0]
 8005b4a:	685b      	ldreq	r3, [r3, #4]
 8005b4c:	1809      	addeq	r1, r1, r0
 8005b4e:	6021      	streq	r1, [r4, #0]
 8005b50:	e7ed      	b.n	8005b2e <_free_r+0x1e>
 8005b52:	461a      	mov	r2, r3
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	b10b      	cbz	r3, 8005b5c <_free_r+0x4c>
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	d9fa      	bls.n	8005b52 <_free_r+0x42>
 8005b5c:	6811      	ldr	r1, [r2, #0]
 8005b5e:	1850      	adds	r0, r2, r1
 8005b60:	42a0      	cmp	r0, r4
 8005b62:	d10b      	bne.n	8005b7c <_free_r+0x6c>
 8005b64:	6820      	ldr	r0, [r4, #0]
 8005b66:	4401      	add	r1, r0
 8005b68:	1850      	adds	r0, r2, r1
 8005b6a:	4283      	cmp	r3, r0
 8005b6c:	6011      	str	r1, [r2, #0]
 8005b6e:	d1e0      	bne.n	8005b32 <_free_r+0x22>
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4408      	add	r0, r1
 8005b76:	6010      	str	r0, [r2, #0]
 8005b78:	6053      	str	r3, [r2, #4]
 8005b7a:	e7da      	b.n	8005b32 <_free_r+0x22>
 8005b7c:	d902      	bls.n	8005b84 <_free_r+0x74>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	e7d6      	b.n	8005b32 <_free_r+0x22>
 8005b84:	6820      	ldr	r0, [r4, #0]
 8005b86:	1821      	adds	r1, r4, r0
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	bf01      	itttt	eq
 8005b8c:	6819      	ldreq	r1, [r3, #0]
 8005b8e:	685b      	ldreq	r3, [r3, #4]
 8005b90:	1809      	addeq	r1, r1, r0
 8005b92:	6021      	streq	r1, [r4, #0]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	6054      	str	r4, [r2, #4]
 8005b98:	e7cb      	b.n	8005b32 <_free_r+0x22>
 8005b9a:	bd38      	pop	{r3, r4, r5, pc}
 8005b9c:	2000084c 	.word	0x2000084c

08005ba0 <malloc>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	@ (8005bac <malloc+0xc>)
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f000 b825 	b.w	8005bf4 <_malloc_r>
 8005baa:	bf00      	nop
 8005bac:	20000018 	.word	0x20000018

08005bb0 <sbrk_aligned>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005bf0 <sbrk_aligned+0x40>)
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	6831      	ldr	r1, [r6, #0]
 8005bb8:	4605      	mov	r5, r0
 8005bba:	b911      	cbnz	r1, 8005bc2 <sbrk_aligned+0x12>
 8005bbc:	f001 fdee 	bl	800779c <_sbrk_r>
 8005bc0:	6030      	str	r0, [r6, #0]
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f001 fde9 	bl	800779c <_sbrk_r>
 8005bca:	1c43      	adds	r3, r0, #1
 8005bcc:	d103      	bne.n	8005bd6 <sbrk_aligned+0x26>
 8005bce:	f04f 34ff 	mov.w	r4, #4294967295
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}
 8005bd6:	1cc4      	adds	r4, r0, #3
 8005bd8:	f024 0403 	bic.w	r4, r4, #3
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d0f8      	beq.n	8005bd2 <sbrk_aligned+0x22>
 8005be0:	1a21      	subs	r1, r4, r0
 8005be2:	4628      	mov	r0, r5
 8005be4:	f001 fdda 	bl	800779c <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d1f2      	bne.n	8005bd2 <sbrk_aligned+0x22>
 8005bec:	e7ef      	b.n	8005bce <sbrk_aligned+0x1e>
 8005bee:	bf00      	nop
 8005bf0:	20000848 	.word	0x20000848

08005bf4 <_malloc_r>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	1ccd      	adds	r5, r1, #3
 8005bfa:	f025 0503 	bic.w	r5, r5, #3
 8005bfe:	3508      	adds	r5, #8
 8005c00:	2d0c      	cmp	r5, #12
 8005c02:	bf38      	it	cc
 8005c04:	250c      	movcc	r5, #12
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	4606      	mov	r6, r0
 8005c0a:	db01      	blt.n	8005c10 <_malloc_r+0x1c>
 8005c0c:	42a9      	cmp	r1, r5
 8005c0e:	d904      	bls.n	8005c1a <_malloc_r+0x26>
 8005c10:	230c      	movs	r3, #12
 8005c12:	6033      	str	r3, [r6, #0]
 8005c14:	2000      	movs	r0, #0
 8005c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005cf0 <_malloc_r+0xfc>
 8005c1e:	f000 f869 	bl	8005cf4 <__malloc_lock>
 8005c22:	f8d8 3000 	ldr.w	r3, [r8]
 8005c26:	461c      	mov	r4, r3
 8005c28:	bb44      	cbnz	r4, 8005c7c <_malloc_r+0x88>
 8005c2a:	4629      	mov	r1, r5
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f7ff ffbf 	bl	8005bb0 <sbrk_aligned>
 8005c32:	1c43      	adds	r3, r0, #1
 8005c34:	4604      	mov	r4, r0
 8005c36:	d158      	bne.n	8005cea <_malloc_r+0xf6>
 8005c38:	f8d8 4000 	ldr.w	r4, [r8]
 8005c3c:	4627      	mov	r7, r4
 8005c3e:	2f00      	cmp	r7, #0
 8005c40:	d143      	bne.n	8005cca <_malloc_r+0xd6>
 8005c42:	2c00      	cmp	r4, #0
 8005c44:	d04b      	beq.n	8005cde <_malloc_r+0xea>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	4639      	mov	r1, r7
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	eb04 0903 	add.w	r9, r4, r3
 8005c50:	f001 fda4 	bl	800779c <_sbrk_r>
 8005c54:	4581      	cmp	r9, r0
 8005c56:	d142      	bne.n	8005cde <_malloc_r+0xea>
 8005c58:	6821      	ldr	r1, [r4, #0]
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	1a6d      	subs	r5, r5, r1
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7ff ffa6 	bl	8005bb0 <sbrk_aligned>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d03a      	beq.n	8005cde <_malloc_r+0xea>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	442b      	add	r3, r5
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	bb62      	cbnz	r2, 8005cd0 <_malloc_r+0xdc>
 8005c76:	f8c8 7000 	str.w	r7, [r8]
 8005c7a:	e00f      	b.n	8005c9c <_malloc_r+0xa8>
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	1b52      	subs	r2, r2, r5
 8005c80:	d420      	bmi.n	8005cc4 <_malloc_r+0xd0>
 8005c82:	2a0b      	cmp	r2, #11
 8005c84:	d917      	bls.n	8005cb6 <_malloc_r+0xc2>
 8005c86:	1961      	adds	r1, r4, r5
 8005c88:	42a3      	cmp	r3, r4
 8005c8a:	6025      	str	r5, [r4, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	6059      	strne	r1, [r3, #4]
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	bf08      	it	eq
 8005c94:	f8c8 1000 	streq.w	r1, [r8]
 8005c98:	5162      	str	r2, [r4, r5]
 8005c9a:	604b      	str	r3, [r1, #4]
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 f82f 	bl	8005d00 <__malloc_unlock>
 8005ca2:	f104 000b 	add.w	r0, r4, #11
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	f020 0007 	bic.w	r0, r0, #7
 8005cac:	1ac2      	subs	r2, r0, r3
 8005cae:	bf1c      	itt	ne
 8005cb0:	1a1b      	subne	r3, r3, r0
 8005cb2:	50a3      	strne	r3, [r4, r2]
 8005cb4:	e7af      	b.n	8005c16 <_malloc_r+0x22>
 8005cb6:	6862      	ldr	r2, [r4, #4]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	bf0c      	ite	eq
 8005cbc:	f8c8 2000 	streq.w	r2, [r8]
 8005cc0:	605a      	strne	r2, [r3, #4]
 8005cc2:	e7eb      	b.n	8005c9c <_malloc_r+0xa8>
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	6864      	ldr	r4, [r4, #4]
 8005cc8:	e7ae      	b.n	8005c28 <_malloc_r+0x34>
 8005cca:	463c      	mov	r4, r7
 8005ccc:	687f      	ldr	r7, [r7, #4]
 8005cce:	e7b6      	b.n	8005c3e <_malloc_r+0x4a>
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d1fb      	bne.n	8005cd0 <_malloc_r+0xdc>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	6053      	str	r3, [r2, #4]
 8005cdc:	e7de      	b.n	8005c9c <_malloc_r+0xa8>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	6033      	str	r3, [r6, #0]
 8005ce4:	f000 f80c 	bl	8005d00 <__malloc_unlock>
 8005ce8:	e794      	b.n	8005c14 <_malloc_r+0x20>
 8005cea:	6005      	str	r5, [r0, #0]
 8005cec:	e7d6      	b.n	8005c9c <_malloc_r+0xa8>
 8005cee:	bf00      	nop
 8005cf0:	2000084c 	.word	0x2000084c

08005cf4 <__malloc_lock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	@ (8005cfc <__malloc_lock+0x8>)
 8005cf6:	f7ff b88a 	b.w	8004e0e <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	20000844 	.word	0x20000844

08005d00 <__malloc_unlock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	@ (8005d08 <__malloc_unlock+0x8>)
 8005d02:	f7ff b885 	b.w	8004e10 <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	20000844 	.word	0x20000844

08005d0c <_Balloc>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	69c6      	ldr	r6, [r0, #28]
 8005d10:	4604      	mov	r4, r0
 8005d12:	460d      	mov	r5, r1
 8005d14:	b976      	cbnz	r6, 8005d34 <_Balloc+0x28>
 8005d16:	2010      	movs	r0, #16
 8005d18:	f7ff ff42 	bl	8005ba0 <malloc>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	61e0      	str	r0, [r4, #28]
 8005d20:	b920      	cbnz	r0, 8005d2c <_Balloc+0x20>
 8005d22:	216b      	movs	r1, #107	@ 0x6b
 8005d24:	4b17      	ldr	r3, [pc, #92]	@ (8005d84 <_Balloc+0x78>)
 8005d26:	4818      	ldr	r0, [pc, #96]	@ (8005d88 <_Balloc+0x7c>)
 8005d28:	f001 fd4e 	bl	80077c8 <__assert_func>
 8005d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d30:	6006      	str	r6, [r0, #0]
 8005d32:	60c6      	str	r6, [r0, #12]
 8005d34:	69e6      	ldr	r6, [r4, #28]
 8005d36:	68f3      	ldr	r3, [r6, #12]
 8005d38:	b183      	cbz	r3, 8005d5c <_Balloc+0x50>
 8005d3a:	69e3      	ldr	r3, [r4, #28]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d42:	b9b8      	cbnz	r0, 8005d74 <_Balloc+0x68>
 8005d44:	2101      	movs	r1, #1
 8005d46:	fa01 f605 	lsl.w	r6, r1, r5
 8005d4a:	1d72      	adds	r2, r6, #5
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	f001 fd58 	bl	8007804 <_calloc_r>
 8005d54:	b160      	cbz	r0, 8005d70 <_Balloc+0x64>
 8005d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d5a:	e00e      	b.n	8005d7a <_Balloc+0x6e>
 8005d5c:	2221      	movs	r2, #33	@ 0x21
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4620      	mov	r0, r4
 8005d62:	f001 fd4f 	bl	8007804 <_calloc_r>
 8005d66:	69e3      	ldr	r3, [r4, #28]
 8005d68:	60f0      	str	r0, [r6, #12]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e4      	bne.n	8005d3a <_Balloc+0x2e>
 8005d70:	2000      	movs	r0, #0
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	6802      	ldr	r2, [r0, #0]
 8005d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d80:	e7f7      	b.n	8005d72 <_Balloc+0x66>
 8005d82:	bf00      	nop
 8005d84:	08008b54 	.word	0x08008b54
 8005d88:	08008bd4 	.word	0x08008bd4

08005d8c <_Bfree>:
 8005d8c:	b570      	push	{r4, r5, r6, lr}
 8005d8e:	69c6      	ldr	r6, [r0, #28]
 8005d90:	4605      	mov	r5, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b976      	cbnz	r6, 8005db4 <_Bfree+0x28>
 8005d96:	2010      	movs	r0, #16
 8005d98:	f7ff ff02 	bl	8005ba0 <malloc>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	61e8      	str	r0, [r5, #28]
 8005da0:	b920      	cbnz	r0, 8005dac <_Bfree+0x20>
 8005da2:	218f      	movs	r1, #143	@ 0x8f
 8005da4:	4b08      	ldr	r3, [pc, #32]	@ (8005dc8 <_Bfree+0x3c>)
 8005da6:	4809      	ldr	r0, [pc, #36]	@ (8005dcc <_Bfree+0x40>)
 8005da8:	f001 fd0e 	bl	80077c8 <__assert_func>
 8005dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005db0:	6006      	str	r6, [r0, #0]
 8005db2:	60c6      	str	r6, [r0, #12]
 8005db4:	b13c      	cbz	r4, 8005dc6 <_Bfree+0x3a>
 8005db6:	69eb      	ldr	r3, [r5, #28]
 8005db8:	6862      	ldr	r2, [r4, #4]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dc0:	6021      	str	r1, [r4, #0]
 8005dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	08008b54 	.word	0x08008b54
 8005dcc:	08008bd4 	.word	0x08008bd4

08005dd0 <__multadd>:
 8005dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461e      	mov	r6, r3
 8005dda:	2000      	movs	r0, #0
 8005ddc:	690d      	ldr	r5, [r1, #16]
 8005dde:	f101 0c14 	add.w	ip, r1, #20
 8005de2:	f8dc 3000 	ldr.w	r3, [ip]
 8005de6:	3001      	adds	r0, #1
 8005de8:	b299      	uxth	r1, r3
 8005dea:	fb02 6101 	mla	r1, r2, r1, r6
 8005dee:	0c1e      	lsrs	r6, r3, #16
 8005df0:	0c0b      	lsrs	r3, r1, #16
 8005df2:	fb02 3306 	mla	r3, r2, r6, r3
 8005df6:	b289      	uxth	r1, r1
 8005df8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dfc:	4285      	cmp	r5, r0
 8005dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e02:	f84c 1b04 	str.w	r1, [ip], #4
 8005e06:	dcec      	bgt.n	8005de2 <__multadd+0x12>
 8005e08:	b30e      	cbz	r6, 8005e4e <__multadd+0x7e>
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dc19      	bgt.n	8005e44 <__multadd+0x74>
 8005e10:	6861      	ldr	r1, [r4, #4]
 8005e12:	4638      	mov	r0, r7
 8005e14:	3101      	adds	r1, #1
 8005e16:	f7ff ff79 	bl	8005d0c <_Balloc>
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	b928      	cbnz	r0, 8005e2a <__multadd+0x5a>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	21ba      	movs	r1, #186	@ 0xba
 8005e22:	4b0c      	ldr	r3, [pc, #48]	@ (8005e54 <__multadd+0x84>)
 8005e24:	480c      	ldr	r0, [pc, #48]	@ (8005e58 <__multadd+0x88>)
 8005e26:	f001 fccf 	bl	80077c8 <__assert_func>
 8005e2a:	6922      	ldr	r2, [r4, #16]
 8005e2c:	f104 010c 	add.w	r1, r4, #12
 8005e30:	3202      	adds	r2, #2
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	300c      	adds	r0, #12
 8005e36:	f7fe fffa 	bl	8004e2e <memcpy>
 8005e3a:	4621      	mov	r1, r4
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	f7ff ffa5 	bl	8005d8c <_Bfree>
 8005e42:	4644      	mov	r4, r8
 8005e44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e48:	3501      	adds	r5, #1
 8005e4a:	615e      	str	r6, [r3, #20]
 8005e4c:	6125      	str	r5, [r4, #16]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e54:	08008bc3 	.word	0x08008bc3
 8005e58:	08008bd4 	.word	0x08008bd4

08005e5c <__s2b>:
 8005e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e60:	4615      	mov	r5, r2
 8005e62:	2209      	movs	r2, #9
 8005e64:	461f      	mov	r7, r3
 8005e66:	3308      	adds	r3, #8
 8005e68:	460c      	mov	r4, r1
 8005e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e6e:	4606      	mov	r6, r0
 8005e70:	2201      	movs	r2, #1
 8005e72:	2100      	movs	r1, #0
 8005e74:	429a      	cmp	r2, r3
 8005e76:	db09      	blt.n	8005e8c <__s2b+0x30>
 8005e78:	4630      	mov	r0, r6
 8005e7a:	f7ff ff47 	bl	8005d0c <_Balloc>
 8005e7e:	b940      	cbnz	r0, 8005e92 <__s2b+0x36>
 8005e80:	4602      	mov	r2, r0
 8005e82:	21d3      	movs	r1, #211	@ 0xd3
 8005e84:	4b18      	ldr	r3, [pc, #96]	@ (8005ee8 <__s2b+0x8c>)
 8005e86:	4819      	ldr	r0, [pc, #100]	@ (8005eec <__s2b+0x90>)
 8005e88:	f001 fc9e 	bl	80077c8 <__assert_func>
 8005e8c:	0052      	lsls	r2, r2, #1
 8005e8e:	3101      	adds	r1, #1
 8005e90:	e7f0      	b.n	8005e74 <__s2b+0x18>
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	2d09      	cmp	r5, #9
 8005e96:	6143      	str	r3, [r0, #20]
 8005e98:	f04f 0301 	mov.w	r3, #1
 8005e9c:	6103      	str	r3, [r0, #16]
 8005e9e:	dd16      	ble.n	8005ece <__s2b+0x72>
 8005ea0:	f104 0909 	add.w	r9, r4, #9
 8005ea4:	46c8      	mov	r8, r9
 8005ea6:	442c      	add	r4, r5
 8005ea8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005eac:	4601      	mov	r1, r0
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	3b30      	subs	r3, #48	@ 0x30
 8005eb4:	f7ff ff8c 	bl	8005dd0 <__multadd>
 8005eb8:	45a0      	cmp	r8, r4
 8005eba:	d1f5      	bne.n	8005ea8 <__s2b+0x4c>
 8005ebc:	f1a5 0408 	sub.w	r4, r5, #8
 8005ec0:	444c      	add	r4, r9
 8005ec2:	1b2d      	subs	r5, r5, r4
 8005ec4:	1963      	adds	r3, r4, r5
 8005ec6:	42bb      	cmp	r3, r7
 8005ec8:	db04      	blt.n	8005ed4 <__s2b+0x78>
 8005eca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ece:	2509      	movs	r5, #9
 8005ed0:	340a      	adds	r4, #10
 8005ed2:	e7f6      	b.n	8005ec2 <__s2b+0x66>
 8005ed4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ed8:	4601      	mov	r1, r0
 8005eda:	220a      	movs	r2, #10
 8005edc:	4630      	mov	r0, r6
 8005ede:	3b30      	subs	r3, #48	@ 0x30
 8005ee0:	f7ff ff76 	bl	8005dd0 <__multadd>
 8005ee4:	e7ee      	b.n	8005ec4 <__s2b+0x68>
 8005ee6:	bf00      	nop
 8005ee8:	08008bc3 	.word	0x08008bc3
 8005eec:	08008bd4 	.word	0x08008bd4

08005ef0 <__hi0bits>:
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ef6:	bf3a      	itte	cc
 8005ef8:	0403      	lslcc	r3, r0, #16
 8005efa:	2010      	movcc	r0, #16
 8005efc:	2000      	movcs	r0, #0
 8005efe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f02:	bf3c      	itt	cc
 8005f04:	021b      	lslcc	r3, r3, #8
 8005f06:	3008      	addcc	r0, #8
 8005f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f0c:	bf3c      	itt	cc
 8005f0e:	011b      	lslcc	r3, r3, #4
 8005f10:	3004      	addcc	r0, #4
 8005f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f16:	bf3c      	itt	cc
 8005f18:	009b      	lslcc	r3, r3, #2
 8005f1a:	3002      	addcc	r0, #2
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	db05      	blt.n	8005f2c <__hi0bits+0x3c>
 8005f20:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f24:	f100 0001 	add.w	r0, r0, #1
 8005f28:	bf08      	it	eq
 8005f2a:	2020      	moveq	r0, #32
 8005f2c:	4770      	bx	lr

08005f2e <__lo0bits>:
 8005f2e:	6803      	ldr	r3, [r0, #0]
 8005f30:	4602      	mov	r2, r0
 8005f32:	f013 0007 	ands.w	r0, r3, #7
 8005f36:	d00b      	beq.n	8005f50 <__lo0bits+0x22>
 8005f38:	07d9      	lsls	r1, r3, #31
 8005f3a:	d421      	bmi.n	8005f80 <__lo0bits+0x52>
 8005f3c:	0798      	lsls	r0, r3, #30
 8005f3e:	bf49      	itett	mi
 8005f40:	085b      	lsrmi	r3, r3, #1
 8005f42:	089b      	lsrpl	r3, r3, #2
 8005f44:	2001      	movmi	r0, #1
 8005f46:	6013      	strmi	r3, [r2, #0]
 8005f48:	bf5c      	itt	pl
 8005f4a:	2002      	movpl	r0, #2
 8005f4c:	6013      	strpl	r3, [r2, #0]
 8005f4e:	4770      	bx	lr
 8005f50:	b299      	uxth	r1, r3
 8005f52:	b909      	cbnz	r1, 8005f58 <__lo0bits+0x2a>
 8005f54:	2010      	movs	r0, #16
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	b2d9      	uxtb	r1, r3
 8005f5a:	b909      	cbnz	r1, 8005f60 <__lo0bits+0x32>
 8005f5c:	3008      	adds	r0, #8
 8005f5e:	0a1b      	lsrs	r3, r3, #8
 8005f60:	0719      	lsls	r1, r3, #28
 8005f62:	bf04      	itt	eq
 8005f64:	091b      	lsreq	r3, r3, #4
 8005f66:	3004      	addeq	r0, #4
 8005f68:	0799      	lsls	r1, r3, #30
 8005f6a:	bf04      	itt	eq
 8005f6c:	089b      	lsreq	r3, r3, #2
 8005f6e:	3002      	addeq	r0, #2
 8005f70:	07d9      	lsls	r1, r3, #31
 8005f72:	d403      	bmi.n	8005f7c <__lo0bits+0x4e>
 8005f74:	085b      	lsrs	r3, r3, #1
 8005f76:	f100 0001 	add.w	r0, r0, #1
 8005f7a:	d003      	beq.n	8005f84 <__lo0bits+0x56>
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4770      	bx	lr
 8005f80:	2000      	movs	r0, #0
 8005f82:	4770      	bx	lr
 8005f84:	2020      	movs	r0, #32
 8005f86:	4770      	bx	lr

08005f88 <__i2b>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	f7ff febd 	bl	8005d0c <_Balloc>
 8005f92:	4602      	mov	r2, r0
 8005f94:	b928      	cbnz	r0, 8005fa2 <__i2b+0x1a>
 8005f96:	f240 1145 	movw	r1, #325	@ 0x145
 8005f9a:	4b04      	ldr	r3, [pc, #16]	@ (8005fac <__i2b+0x24>)
 8005f9c:	4804      	ldr	r0, [pc, #16]	@ (8005fb0 <__i2b+0x28>)
 8005f9e:	f001 fc13 	bl	80077c8 <__assert_func>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	6144      	str	r4, [r0, #20]
 8005fa6:	6103      	str	r3, [r0, #16]
 8005fa8:	bd10      	pop	{r4, pc}
 8005faa:	bf00      	nop
 8005fac:	08008bc3 	.word	0x08008bc3
 8005fb0:	08008bd4 	.word	0x08008bd4

08005fb4 <__multiply>:
 8005fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	4617      	mov	r7, r2
 8005fba:	690a      	ldr	r2, [r1, #16]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	bfa2      	ittt	ge
 8005fc4:	463b      	movge	r3, r7
 8005fc6:	460f      	movge	r7, r1
 8005fc8:	4699      	movge	r9, r3
 8005fca:	693d      	ldr	r5, [r7, #16]
 8005fcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	eb05 060a 	add.w	r6, r5, sl
 8005fd8:	42b3      	cmp	r3, r6
 8005fda:	b085      	sub	sp, #20
 8005fdc:	bfb8      	it	lt
 8005fde:	3101      	addlt	r1, #1
 8005fe0:	f7ff fe94 	bl	8005d0c <_Balloc>
 8005fe4:	b930      	cbnz	r0, 8005ff4 <__multiply+0x40>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fec:	4b40      	ldr	r3, [pc, #256]	@ (80060f0 <__multiply+0x13c>)
 8005fee:	4841      	ldr	r0, [pc, #260]	@ (80060f4 <__multiply+0x140>)
 8005ff0:	f001 fbea 	bl	80077c8 <__assert_func>
 8005ff4:	f100 0414 	add.w	r4, r0, #20
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006000:	4573      	cmp	r3, lr
 8006002:	d320      	bcc.n	8006046 <__multiply+0x92>
 8006004:	f107 0814 	add.w	r8, r7, #20
 8006008:	f109 0114 	add.w	r1, r9, #20
 800600c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006010:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006014:	9302      	str	r3, [sp, #8]
 8006016:	1beb      	subs	r3, r5, r7
 8006018:	3b15      	subs	r3, #21
 800601a:	f023 0303 	bic.w	r3, r3, #3
 800601e:	3304      	adds	r3, #4
 8006020:	3715      	adds	r7, #21
 8006022:	42bd      	cmp	r5, r7
 8006024:	bf38      	it	cc
 8006026:	2304      	movcc	r3, #4
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	9103      	str	r1, [sp, #12]
 800602e:	428b      	cmp	r3, r1
 8006030:	d80c      	bhi.n	800604c <__multiply+0x98>
 8006032:	2e00      	cmp	r6, #0
 8006034:	dd03      	ble.n	800603e <__multiply+0x8a>
 8006036:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800603a:	2b00      	cmp	r3, #0
 800603c:	d055      	beq.n	80060ea <__multiply+0x136>
 800603e:	6106      	str	r6, [r0, #16]
 8006040:	b005      	add	sp, #20
 8006042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006046:	f843 2b04 	str.w	r2, [r3], #4
 800604a:	e7d9      	b.n	8006000 <__multiply+0x4c>
 800604c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006050:	f1ba 0f00 	cmp.w	sl, #0
 8006054:	d01f      	beq.n	8006096 <__multiply+0xe2>
 8006056:	46c4      	mov	ip, r8
 8006058:	46a1      	mov	r9, r4
 800605a:	2700      	movs	r7, #0
 800605c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006060:	f8d9 3000 	ldr.w	r3, [r9]
 8006064:	fa1f fb82 	uxth.w	fp, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	fb0a 330b 	mla	r3, sl, fp, r3
 800606e:	443b      	add	r3, r7
 8006070:	f8d9 7000 	ldr.w	r7, [r9]
 8006074:	0c12      	lsrs	r2, r2, #16
 8006076:	0c3f      	lsrs	r7, r7, #16
 8006078:	fb0a 7202 	mla	r2, sl, r2, r7
 800607c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006080:	b29b      	uxth	r3, r3
 8006082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006086:	4565      	cmp	r5, ip
 8006088:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800608c:	f849 3b04 	str.w	r3, [r9], #4
 8006090:	d8e4      	bhi.n	800605c <__multiply+0xa8>
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	50e7      	str	r7, [r4, r3]
 8006096:	9b03      	ldr	r3, [sp, #12]
 8006098:	3104      	adds	r1, #4
 800609a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800609e:	f1b9 0f00 	cmp.w	r9, #0
 80060a2:	d020      	beq.n	80060e6 <__multiply+0x132>
 80060a4:	4647      	mov	r7, r8
 80060a6:	46a4      	mov	ip, r4
 80060a8:	f04f 0a00 	mov.w	sl, #0
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	f8b7 b000 	ldrh.w	fp, [r7]
 80060b2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	fb09 220b 	mla	r2, r9, fp, r2
 80060bc:	4452      	add	r2, sl
 80060be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c2:	f84c 3b04 	str.w	r3, [ip], #4
 80060c6:	f857 3b04 	ldr.w	r3, [r7], #4
 80060ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ce:	f8bc 3000 	ldrh.w	r3, [ip]
 80060d2:	42bd      	cmp	r5, r7
 80060d4:	fb09 330a 	mla	r3, r9, sl, r3
 80060d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80060dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060e0:	d8e5      	bhi.n	80060ae <__multiply+0xfa>
 80060e2:	9a01      	ldr	r2, [sp, #4]
 80060e4:	50a3      	str	r3, [r4, r2]
 80060e6:	3404      	adds	r4, #4
 80060e8:	e79f      	b.n	800602a <__multiply+0x76>
 80060ea:	3e01      	subs	r6, #1
 80060ec:	e7a1      	b.n	8006032 <__multiply+0x7e>
 80060ee:	bf00      	nop
 80060f0:	08008bc3 	.word	0x08008bc3
 80060f4:	08008bd4 	.word	0x08008bd4

080060f8 <__pow5mult>:
 80060f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060fc:	4615      	mov	r5, r2
 80060fe:	f012 0203 	ands.w	r2, r2, #3
 8006102:	4607      	mov	r7, r0
 8006104:	460e      	mov	r6, r1
 8006106:	d007      	beq.n	8006118 <__pow5mult+0x20>
 8006108:	4c25      	ldr	r4, [pc, #148]	@ (80061a0 <__pow5mult+0xa8>)
 800610a:	3a01      	subs	r2, #1
 800610c:	2300      	movs	r3, #0
 800610e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006112:	f7ff fe5d 	bl	8005dd0 <__multadd>
 8006116:	4606      	mov	r6, r0
 8006118:	10ad      	asrs	r5, r5, #2
 800611a:	d03d      	beq.n	8006198 <__pow5mult+0xa0>
 800611c:	69fc      	ldr	r4, [r7, #28]
 800611e:	b97c      	cbnz	r4, 8006140 <__pow5mult+0x48>
 8006120:	2010      	movs	r0, #16
 8006122:	f7ff fd3d 	bl	8005ba0 <malloc>
 8006126:	4602      	mov	r2, r0
 8006128:	61f8      	str	r0, [r7, #28]
 800612a:	b928      	cbnz	r0, 8006138 <__pow5mult+0x40>
 800612c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006130:	4b1c      	ldr	r3, [pc, #112]	@ (80061a4 <__pow5mult+0xac>)
 8006132:	481d      	ldr	r0, [pc, #116]	@ (80061a8 <__pow5mult+0xb0>)
 8006134:	f001 fb48 	bl	80077c8 <__assert_func>
 8006138:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800613c:	6004      	str	r4, [r0, #0]
 800613e:	60c4      	str	r4, [r0, #12]
 8006140:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006144:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006148:	b94c      	cbnz	r4, 800615e <__pow5mult+0x66>
 800614a:	f240 2171 	movw	r1, #625	@ 0x271
 800614e:	4638      	mov	r0, r7
 8006150:	f7ff ff1a 	bl	8005f88 <__i2b>
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	f8c8 0008 	str.w	r0, [r8, #8]
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	f04f 0900 	mov.w	r9, #0
 8006162:	07eb      	lsls	r3, r5, #31
 8006164:	d50a      	bpl.n	800617c <__pow5mult+0x84>
 8006166:	4631      	mov	r1, r6
 8006168:	4622      	mov	r2, r4
 800616a:	4638      	mov	r0, r7
 800616c:	f7ff ff22 	bl	8005fb4 <__multiply>
 8006170:	4680      	mov	r8, r0
 8006172:	4631      	mov	r1, r6
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fe09 	bl	8005d8c <_Bfree>
 800617a:	4646      	mov	r6, r8
 800617c:	106d      	asrs	r5, r5, #1
 800617e:	d00b      	beq.n	8006198 <__pow5mult+0xa0>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	b938      	cbnz	r0, 8006194 <__pow5mult+0x9c>
 8006184:	4622      	mov	r2, r4
 8006186:	4621      	mov	r1, r4
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff ff13 	bl	8005fb4 <__multiply>
 800618e:	6020      	str	r0, [r4, #0]
 8006190:	f8c0 9000 	str.w	r9, [r0]
 8006194:	4604      	mov	r4, r0
 8006196:	e7e4      	b.n	8006162 <__pow5mult+0x6a>
 8006198:	4630      	mov	r0, r6
 800619a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800619e:	bf00      	nop
 80061a0:	08008ce4 	.word	0x08008ce4
 80061a4:	08008b54 	.word	0x08008b54
 80061a8:	08008bd4 	.word	0x08008bd4

080061ac <__lshift>:
 80061ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	460c      	mov	r4, r1
 80061b2:	4607      	mov	r7, r0
 80061b4:	4691      	mov	r9, r2
 80061b6:	6923      	ldr	r3, [r4, #16]
 80061b8:	6849      	ldr	r1, [r1, #4]
 80061ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061be:	68a3      	ldr	r3, [r4, #8]
 80061c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061c4:	f108 0601 	add.w	r6, r8, #1
 80061c8:	42b3      	cmp	r3, r6
 80061ca:	db0b      	blt.n	80061e4 <__lshift+0x38>
 80061cc:	4638      	mov	r0, r7
 80061ce:	f7ff fd9d 	bl	8005d0c <_Balloc>
 80061d2:	4605      	mov	r5, r0
 80061d4:	b948      	cbnz	r0, 80061ea <__lshift+0x3e>
 80061d6:	4602      	mov	r2, r0
 80061d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061dc:	4b27      	ldr	r3, [pc, #156]	@ (800627c <__lshift+0xd0>)
 80061de:	4828      	ldr	r0, [pc, #160]	@ (8006280 <__lshift+0xd4>)
 80061e0:	f001 faf2 	bl	80077c8 <__assert_func>
 80061e4:	3101      	adds	r1, #1
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	e7ee      	b.n	80061c8 <__lshift+0x1c>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f100 0114 	add.w	r1, r0, #20
 80061f0:	f100 0210 	add.w	r2, r0, #16
 80061f4:	4618      	mov	r0, r3
 80061f6:	4553      	cmp	r3, sl
 80061f8:	db33      	blt.n	8006262 <__lshift+0xb6>
 80061fa:	6920      	ldr	r0, [r4, #16]
 80061fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006200:	f104 0314 	add.w	r3, r4, #20
 8006204:	f019 091f 	ands.w	r9, r9, #31
 8006208:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800620c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006210:	d02b      	beq.n	800626a <__lshift+0xbe>
 8006212:	468a      	mov	sl, r1
 8006214:	2200      	movs	r2, #0
 8006216:	f1c9 0e20 	rsb	lr, r9, #32
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	fa00 f009 	lsl.w	r0, r0, r9
 8006220:	4310      	orrs	r0, r2
 8006222:	f84a 0b04 	str.w	r0, [sl], #4
 8006226:	f853 2b04 	ldr.w	r2, [r3], #4
 800622a:	459c      	cmp	ip, r3
 800622c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006230:	d8f3      	bhi.n	800621a <__lshift+0x6e>
 8006232:	ebac 0304 	sub.w	r3, ip, r4
 8006236:	3b15      	subs	r3, #21
 8006238:	f023 0303 	bic.w	r3, r3, #3
 800623c:	3304      	adds	r3, #4
 800623e:	f104 0015 	add.w	r0, r4, #21
 8006242:	4560      	cmp	r0, ip
 8006244:	bf88      	it	hi
 8006246:	2304      	movhi	r3, #4
 8006248:	50ca      	str	r2, [r1, r3]
 800624a:	b10a      	cbz	r2, 8006250 <__lshift+0xa4>
 800624c:	f108 0602 	add.w	r6, r8, #2
 8006250:	3e01      	subs	r6, #1
 8006252:	4638      	mov	r0, r7
 8006254:	4621      	mov	r1, r4
 8006256:	612e      	str	r6, [r5, #16]
 8006258:	f7ff fd98 	bl	8005d8c <_Bfree>
 800625c:	4628      	mov	r0, r5
 800625e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006262:	f842 0f04 	str.w	r0, [r2, #4]!
 8006266:	3301      	adds	r3, #1
 8006268:	e7c5      	b.n	80061f6 <__lshift+0x4a>
 800626a:	3904      	subs	r1, #4
 800626c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006270:	459c      	cmp	ip, r3
 8006272:	f841 2f04 	str.w	r2, [r1, #4]!
 8006276:	d8f9      	bhi.n	800626c <__lshift+0xc0>
 8006278:	e7ea      	b.n	8006250 <__lshift+0xa4>
 800627a:	bf00      	nop
 800627c:	08008bc3 	.word	0x08008bc3
 8006280:	08008bd4 	.word	0x08008bd4

08006284 <__mcmp>:
 8006284:	4603      	mov	r3, r0
 8006286:	690a      	ldr	r2, [r1, #16]
 8006288:	6900      	ldr	r0, [r0, #16]
 800628a:	b530      	push	{r4, r5, lr}
 800628c:	1a80      	subs	r0, r0, r2
 800628e:	d10e      	bne.n	80062ae <__mcmp+0x2a>
 8006290:	3314      	adds	r3, #20
 8006292:	3114      	adds	r1, #20
 8006294:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006298:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800629c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062a4:	4295      	cmp	r5, r2
 80062a6:	d003      	beq.n	80062b0 <__mcmp+0x2c>
 80062a8:	d205      	bcs.n	80062b6 <__mcmp+0x32>
 80062aa:	f04f 30ff 	mov.w	r0, #4294967295
 80062ae:	bd30      	pop	{r4, r5, pc}
 80062b0:	42a3      	cmp	r3, r4
 80062b2:	d3f3      	bcc.n	800629c <__mcmp+0x18>
 80062b4:	e7fb      	b.n	80062ae <__mcmp+0x2a>
 80062b6:	2001      	movs	r0, #1
 80062b8:	e7f9      	b.n	80062ae <__mcmp+0x2a>
	...

080062bc <__mdiff>:
 80062bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c0:	4689      	mov	r9, r1
 80062c2:	4606      	mov	r6, r0
 80062c4:	4611      	mov	r1, r2
 80062c6:	4648      	mov	r0, r9
 80062c8:	4614      	mov	r4, r2
 80062ca:	f7ff ffdb 	bl	8006284 <__mcmp>
 80062ce:	1e05      	subs	r5, r0, #0
 80062d0:	d112      	bne.n	80062f8 <__mdiff+0x3c>
 80062d2:	4629      	mov	r1, r5
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff fd19 	bl	8005d0c <_Balloc>
 80062da:	4602      	mov	r2, r0
 80062dc:	b928      	cbnz	r0, 80062ea <__mdiff+0x2e>
 80062de:	f240 2137 	movw	r1, #567	@ 0x237
 80062e2:	4b3e      	ldr	r3, [pc, #248]	@ (80063dc <__mdiff+0x120>)
 80062e4:	483e      	ldr	r0, [pc, #248]	@ (80063e0 <__mdiff+0x124>)
 80062e6:	f001 fa6f 	bl	80077c8 <__assert_func>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062f0:	4610      	mov	r0, r2
 80062f2:	b003      	add	sp, #12
 80062f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062f8:	bfbc      	itt	lt
 80062fa:	464b      	movlt	r3, r9
 80062fc:	46a1      	movlt	r9, r4
 80062fe:	4630      	mov	r0, r6
 8006300:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006304:	bfba      	itte	lt
 8006306:	461c      	movlt	r4, r3
 8006308:	2501      	movlt	r5, #1
 800630a:	2500      	movge	r5, #0
 800630c:	f7ff fcfe 	bl	8005d0c <_Balloc>
 8006310:	4602      	mov	r2, r0
 8006312:	b918      	cbnz	r0, 800631c <__mdiff+0x60>
 8006314:	f240 2145 	movw	r1, #581	@ 0x245
 8006318:	4b30      	ldr	r3, [pc, #192]	@ (80063dc <__mdiff+0x120>)
 800631a:	e7e3      	b.n	80062e4 <__mdiff+0x28>
 800631c:	f100 0b14 	add.w	fp, r0, #20
 8006320:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006324:	f109 0310 	add.w	r3, r9, #16
 8006328:	60c5      	str	r5, [r0, #12]
 800632a:	f04f 0c00 	mov.w	ip, #0
 800632e:	f109 0514 	add.w	r5, r9, #20
 8006332:	46d9      	mov	r9, fp
 8006334:	6926      	ldr	r6, [r4, #16]
 8006336:	f104 0e14 	add.w	lr, r4, #20
 800633a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800633e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006342:	9301      	str	r3, [sp, #4]
 8006344:	9b01      	ldr	r3, [sp, #4]
 8006346:	f85e 0b04 	ldr.w	r0, [lr], #4
 800634a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800634e:	b281      	uxth	r1, r0
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	fa1f f38a 	uxth.w	r3, sl
 8006356:	1a5b      	subs	r3, r3, r1
 8006358:	0c00      	lsrs	r0, r0, #16
 800635a:	4463      	add	r3, ip
 800635c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006360:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006364:	b29b      	uxth	r3, r3
 8006366:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800636a:	4576      	cmp	r6, lr
 800636c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006370:	f849 3b04 	str.w	r3, [r9], #4
 8006374:	d8e6      	bhi.n	8006344 <__mdiff+0x88>
 8006376:	1b33      	subs	r3, r6, r4
 8006378:	3b15      	subs	r3, #21
 800637a:	f023 0303 	bic.w	r3, r3, #3
 800637e:	3415      	adds	r4, #21
 8006380:	3304      	adds	r3, #4
 8006382:	42a6      	cmp	r6, r4
 8006384:	bf38      	it	cc
 8006386:	2304      	movcc	r3, #4
 8006388:	441d      	add	r5, r3
 800638a:	445b      	add	r3, fp
 800638c:	461e      	mov	r6, r3
 800638e:	462c      	mov	r4, r5
 8006390:	4544      	cmp	r4, r8
 8006392:	d30e      	bcc.n	80063b2 <__mdiff+0xf6>
 8006394:	f108 0103 	add.w	r1, r8, #3
 8006398:	1b49      	subs	r1, r1, r5
 800639a:	f021 0103 	bic.w	r1, r1, #3
 800639e:	3d03      	subs	r5, #3
 80063a0:	45a8      	cmp	r8, r5
 80063a2:	bf38      	it	cc
 80063a4:	2100      	movcc	r1, #0
 80063a6:	440b      	add	r3, r1
 80063a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ac:	b199      	cbz	r1, 80063d6 <__mdiff+0x11a>
 80063ae:	6117      	str	r7, [r2, #16]
 80063b0:	e79e      	b.n	80062f0 <__mdiff+0x34>
 80063b2:	46e6      	mov	lr, ip
 80063b4:	f854 1b04 	ldr.w	r1, [r4], #4
 80063b8:	fa1f fc81 	uxth.w	ip, r1
 80063bc:	44f4      	add	ip, lr
 80063be:	0c08      	lsrs	r0, r1, #16
 80063c0:	4471      	add	r1, lr
 80063c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063c6:	b289      	uxth	r1, r1
 80063c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063d0:	f846 1b04 	str.w	r1, [r6], #4
 80063d4:	e7dc      	b.n	8006390 <__mdiff+0xd4>
 80063d6:	3f01      	subs	r7, #1
 80063d8:	e7e6      	b.n	80063a8 <__mdiff+0xec>
 80063da:	bf00      	nop
 80063dc:	08008bc3 	.word	0x08008bc3
 80063e0:	08008bd4 	.word	0x08008bd4

080063e4 <__ulp>:
 80063e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006420 <__ulp+0x3c>)
 80063e6:	400b      	ands	r3, r1
 80063e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	dc08      	bgt.n	8006402 <__ulp+0x1e>
 80063f0:	425b      	negs	r3, r3
 80063f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80063f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063fa:	da04      	bge.n	8006406 <__ulp+0x22>
 80063fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006400:	4113      	asrs	r3, r2
 8006402:	2200      	movs	r2, #0
 8006404:	e008      	b.n	8006418 <__ulp+0x34>
 8006406:	f1a2 0314 	sub.w	r3, r2, #20
 800640a:	2b1e      	cmp	r3, #30
 800640c:	bfd6      	itet	le
 800640e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006412:	2201      	movgt	r2, #1
 8006414:	40da      	lsrle	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	7ff00000 	.word	0x7ff00000

08006424 <__b2d>:
 8006424:	6902      	ldr	r2, [r0, #16]
 8006426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006428:	f100 0614 	add.w	r6, r0, #20
 800642c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006430:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006434:	4f1e      	ldr	r7, [pc, #120]	@ (80064b0 <__b2d+0x8c>)
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff fd5a 	bl	8005ef0 <__hi0bits>
 800643c:	4603      	mov	r3, r0
 800643e:	f1c0 0020 	rsb	r0, r0, #32
 8006442:	2b0a      	cmp	r3, #10
 8006444:	f1a2 0504 	sub.w	r5, r2, #4
 8006448:	6008      	str	r0, [r1, #0]
 800644a:	dc12      	bgt.n	8006472 <__b2d+0x4e>
 800644c:	42ae      	cmp	r6, r5
 800644e:	bf2c      	ite	cs
 8006450:	2200      	movcs	r2, #0
 8006452:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006456:	f1c3 0c0b 	rsb	ip, r3, #11
 800645a:	3315      	adds	r3, #21
 800645c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006460:	fa04 f303 	lsl.w	r3, r4, r3
 8006464:	fa22 f20c 	lsr.w	r2, r2, ip
 8006468:	ea4e 0107 	orr.w	r1, lr, r7
 800646c:	431a      	orrs	r2, r3
 800646e:	4610      	mov	r0, r2
 8006470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006472:	42ae      	cmp	r6, r5
 8006474:	bf36      	itet	cc
 8006476:	f1a2 0508 	subcc.w	r5, r2, #8
 800647a:	2200      	movcs	r2, #0
 800647c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006480:	3b0b      	subs	r3, #11
 8006482:	d012      	beq.n	80064aa <__b2d+0x86>
 8006484:	f1c3 0720 	rsb	r7, r3, #32
 8006488:	fa22 f107 	lsr.w	r1, r2, r7
 800648c:	409c      	lsls	r4, r3
 800648e:	430c      	orrs	r4, r1
 8006490:	42b5      	cmp	r5, r6
 8006492:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006496:	bf94      	ite	ls
 8006498:	2400      	movls	r4, #0
 800649a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800649e:	409a      	lsls	r2, r3
 80064a0:	40fc      	lsrs	r4, r7
 80064a2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80064a6:	4322      	orrs	r2, r4
 80064a8:	e7e1      	b.n	800646e <__b2d+0x4a>
 80064aa:	ea44 0107 	orr.w	r1, r4, r7
 80064ae:	e7de      	b.n	800646e <__b2d+0x4a>
 80064b0:	3ff00000 	.word	0x3ff00000

080064b4 <__d2b>:
 80064b4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064b8:	2101      	movs	r1, #1
 80064ba:	4690      	mov	r8, r2
 80064bc:	4699      	mov	r9, r3
 80064be:	9e08      	ldr	r6, [sp, #32]
 80064c0:	f7ff fc24 	bl	8005d0c <_Balloc>
 80064c4:	4604      	mov	r4, r0
 80064c6:	b930      	cbnz	r0, 80064d6 <__d2b+0x22>
 80064c8:	4602      	mov	r2, r0
 80064ca:	f240 310f 	movw	r1, #783	@ 0x30f
 80064ce:	4b23      	ldr	r3, [pc, #140]	@ (800655c <__d2b+0xa8>)
 80064d0:	4823      	ldr	r0, [pc, #140]	@ (8006560 <__d2b+0xac>)
 80064d2:	f001 f979 	bl	80077c8 <__assert_func>
 80064d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064de:	b10d      	cbz	r5, 80064e4 <__d2b+0x30>
 80064e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	f1b8 0300 	subs.w	r3, r8, #0
 80064ea:	d024      	beq.n	8006536 <__d2b+0x82>
 80064ec:	4668      	mov	r0, sp
 80064ee:	9300      	str	r3, [sp, #0]
 80064f0:	f7ff fd1d 	bl	8005f2e <__lo0bits>
 80064f4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064f8:	b1d8      	cbz	r0, 8006532 <__d2b+0x7e>
 80064fa:	f1c0 0320 	rsb	r3, r0, #32
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	430b      	orrs	r3, r1
 8006504:	40c2      	lsrs	r2, r0
 8006506:	6163      	str	r3, [r4, #20]
 8006508:	9201      	str	r2, [sp, #4]
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	bf0c      	ite	eq
 8006510:	2201      	moveq	r2, #1
 8006512:	2202      	movne	r2, #2
 8006514:	61a3      	str	r3, [r4, #24]
 8006516:	6122      	str	r2, [r4, #16]
 8006518:	b1ad      	cbz	r5, 8006546 <__d2b+0x92>
 800651a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800651e:	4405      	add	r5, r0
 8006520:	6035      	str	r5, [r6, #0]
 8006522:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006528:	6018      	str	r0, [r3, #0]
 800652a:	4620      	mov	r0, r4
 800652c:	b002      	add	sp, #8
 800652e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006532:	6161      	str	r1, [r4, #20]
 8006534:	e7e9      	b.n	800650a <__d2b+0x56>
 8006536:	a801      	add	r0, sp, #4
 8006538:	f7ff fcf9 	bl	8005f2e <__lo0bits>
 800653c:	9b01      	ldr	r3, [sp, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	6163      	str	r3, [r4, #20]
 8006542:	3020      	adds	r0, #32
 8006544:	e7e7      	b.n	8006516 <__d2b+0x62>
 8006546:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800654a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800654e:	6030      	str	r0, [r6, #0]
 8006550:	6918      	ldr	r0, [r3, #16]
 8006552:	f7ff fccd 	bl	8005ef0 <__hi0bits>
 8006556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800655a:	e7e4      	b.n	8006526 <__d2b+0x72>
 800655c:	08008bc3 	.word	0x08008bc3
 8006560:	08008bd4 	.word	0x08008bd4

08006564 <__ratio>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	b085      	sub	sp, #20
 800656a:	e9cd 1000 	strd	r1, r0, [sp]
 800656e:	a902      	add	r1, sp, #8
 8006570:	f7ff ff58 	bl	8006424 <__b2d>
 8006574:	468b      	mov	fp, r1
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	9800      	ldr	r0, [sp, #0]
 800657c:	a903      	add	r1, sp, #12
 800657e:	f7ff ff51 	bl	8006424 <__b2d>
 8006582:	460d      	mov	r5, r1
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	4689      	mov	r9, r1
 8006588:	6919      	ldr	r1, [r3, #16]
 800658a:	9b00      	ldr	r3, [sp, #0]
 800658c:	4604      	mov	r4, r0
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	4630      	mov	r0, r6
 8006592:	1ac9      	subs	r1, r1, r3
 8006594:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfcd      	iteet	gt
 80065a2:	463a      	movgt	r2, r7
 80065a4:	462a      	movle	r2, r5
 80065a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80065aa:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80065ae:	bfd8      	it	le
 80065b0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80065b4:	464b      	mov	r3, r9
 80065b6:	4622      	mov	r2, r4
 80065b8:	4659      	mov	r1, fp
 80065ba:	f7fa f8b7 	bl	800072c <__aeabi_ddiv>
 80065be:	b005      	add	sp, #20
 80065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065c4 <__copybits>:
 80065c4:	3901      	subs	r1, #1
 80065c6:	b570      	push	{r4, r5, r6, lr}
 80065c8:	1149      	asrs	r1, r1, #5
 80065ca:	6914      	ldr	r4, [r2, #16]
 80065cc:	3101      	adds	r1, #1
 80065ce:	f102 0314 	add.w	r3, r2, #20
 80065d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065da:	1f05      	subs	r5, r0, #4
 80065dc:	42a3      	cmp	r3, r4
 80065de:	d30c      	bcc.n	80065fa <__copybits+0x36>
 80065e0:	1aa3      	subs	r3, r4, r2
 80065e2:	3b11      	subs	r3, #17
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	3211      	adds	r2, #17
 80065ea:	42a2      	cmp	r2, r4
 80065ec:	bf88      	it	hi
 80065ee:	2300      	movhi	r3, #0
 80065f0:	4418      	add	r0, r3
 80065f2:	2300      	movs	r3, #0
 80065f4:	4288      	cmp	r0, r1
 80065f6:	d305      	bcc.n	8006604 <__copybits+0x40>
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80065fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8006602:	e7eb      	b.n	80065dc <__copybits+0x18>
 8006604:	f840 3b04 	str.w	r3, [r0], #4
 8006608:	e7f4      	b.n	80065f4 <__copybits+0x30>

0800660a <__any_on>:
 800660a:	f100 0214 	add.w	r2, r0, #20
 800660e:	6900      	ldr	r0, [r0, #16]
 8006610:	114b      	asrs	r3, r1, #5
 8006612:	4298      	cmp	r0, r3
 8006614:	b510      	push	{r4, lr}
 8006616:	db11      	blt.n	800663c <__any_on+0x32>
 8006618:	dd0a      	ble.n	8006630 <__any_on+0x26>
 800661a:	f011 011f 	ands.w	r1, r1, #31
 800661e:	d007      	beq.n	8006630 <__any_on+0x26>
 8006620:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006624:	fa24 f001 	lsr.w	r0, r4, r1
 8006628:	fa00 f101 	lsl.w	r1, r0, r1
 800662c:	428c      	cmp	r4, r1
 800662e:	d10b      	bne.n	8006648 <__any_on+0x3e>
 8006630:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006634:	4293      	cmp	r3, r2
 8006636:	d803      	bhi.n	8006640 <__any_on+0x36>
 8006638:	2000      	movs	r0, #0
 800663a:	bd10      	pop	{r4, pc}
 800663c:	4603      	mov	r3, r0
 800663e:	e7f7      	b.n	8006630 <__any_on+0x26>
 8006640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006644:	2900      	cmp	r1, #0
 8006646:	d0f5      	beq.n	8006634 <__any_on+0x2a>
 8006648:	2001      	movs	r0, #1
 800664a:	e7f6      	b.n	800663a <__any_on+0x30>

0800664c <sulp>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	460f      	mov	r7, r1
 8006652:	4690      	mov	r8, r2
 8006654:	f7ff fec6 	bl	80063e4 <__ulp>
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	f1b8 0f00 	cmp.w	r8, #0
 8006660:	d011      	beq.n	8006686 <sulp+0x3a>
 8006662:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006666:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd0b      	ble.n	8006686 <sulp+0x3a>
 800666e:	2400      	movs	r4, #0
 8006670:	051b      	lsls	r3, r3, #20
 8006672:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006676:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800667a:	4622      	mov	r2, r4
 800667c:	462b      	mov	r3, r5
 800667e:	f7f9 ff2b 	bl	80004d8 <__aeabi_dmul>
 8006682:	4604      	mov	r4, r0
 8006684:	460d      	mov	r5, r1
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006690 <_strtod_l>:
 8006690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	b09f      	sub	sp, #124	@ 0x7c
 8006696:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006698:	2200      	movs	r2, #0
 800669a:	460c      	mov	r4, r1
 800669c:	921a      	str	r2, [sp, #104]	@ 0x68
 800669e:	f04f 0a00 	mov.w	sl, #0
 80066a2:	f04f 0b00 	mov.w	fp, #0
 80066a6:	460a      	mov	r2, r1
 80066a8:	9005      	str	r0, [sp, #20]
 80066aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80066ac:	7811      	ldrb	r1, [r2, #0]
 80066ae:	292b      	cmp	r1, #43	@ 0x2b
 80066b0:	d048      	beq.n	8006744 <_strtod_l+0xb4>
 80066b2:	d836      	bhi.n	8006722 <_strtod_l+0x92>
 80066b4:	290d      	cmp	r1, #13
 80066b6:	d830      	bhi.n	800671a <_strtod_l+0x8a>
 80066b8:	2908      	cmp	r1, #8
 80066ba:	d830      	bhi.n	800671e <_strtod_l+0x8e>
 80066bc:	2900      	cmp	r1, #0
 80066be:	d039      	beq.n	8006734 <_strtod_l+0xa4>
 80066c0:	2200      	movs	r2, #0
 80066c2:	920e      	str	r2, [sp, #56]	@ 0x38
 80066c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066c6:	782a      	ldrb	r2, [r5, #0]
 80066c8:	2a30      	cmp	r2, #48	@ 0x30
 80066ca:	f040 80b0 	bne.w	800682e <_strtod_l+0x19e>
 80066ce:	786a      	ldrb	r2, [r5, #1]
 80066d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066d4:	2a58      	cmp	r2, #88	@ 0x58
 80066d6:	d16c      	bne.n	80067b2 <_strtod_l+0x122>
 80066d8:	9302      	str	r3, [sp, #8]
 80066da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066dc:	4a8f      	ldr	r2, [pc, #572]	@ (800691c <_strtod_l+0x28c>)
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	ab1a      	add	r3, sp, #104	@ 0x68
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	9805      	ldr	r0, [sp, #20]
 80066e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80066e8:	a919      	add	r1, sp, #100	@ 0x64
 80066ea:	f001 f907 	bl	80078fc <__gethex>
 80066ee:	f010 060f 	ands.w	r6, r0, #15
 80066f2:	4604      	mov	r4, r0
 80066f4:	d005      	beq.n	8006702 <_strtod_l+0x72>
 80066f6:	2e06      	cmp	r6, #6
 80066f8:	d126      	bne.n	8006748 <_strtod_l+0xb8>
 80066fa:	2300      	movs	r3, #0
 80066fc:	3501      	adds	r5, #1
 80066fe:	9519      	str	r5, [sp, #100]	@ 0x64
 8006700:	930e      	str	r3, [sp, #56]	@ 0x38
 8006702:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8582 	bne.w	800720e <_strtod_l+0xb7e>
 800670a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800670c:	b1bb      	cbz	r3, 800673e <_strtod_l+0xae>
 800670e:	4650      	mov	r0, sl
 8006710:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006714:	b01f      	add	sp, #124	@ 0x7c
 8006716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671a:	2920      	cmp	r1, #32
 800671c:	d1d0      	bne.n	80066c0 <_strtod_l+0x30>
 800671e:	3201      	adds	r2, #1
 8006720:	e7c3      	b.n	80066aa <_strtod_l+0x1a>
 8006722:	292d      	cmp	r1, #45	@ 0x2d
 8006724:	d1cc      	bne.n	80066c0 <_strtod_l+0x30>
 8006726:	2101      	movs	r1, #1
 8006728:	910e      	str	r1, [sp, #56]	@ 0x38
 800672a:	1c51      	adds	r1, r2, #1
 800672c:	9119      	str	r1, [sp, #100]	@ 0x64
 800672e:	7852      	ldrb	r2, [r2, #1]
 8006730:	2a00      	cmp	r2, #0
 8006732:	d1c7      	bne.n	80066c4 <_strtod_l+0x34>
 8006734:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006736:	9419      	str	r4, [sp, #100]	@ 0x64
 8006738:	2b00      	cmp	r3, #0
 800673a:	f040 8566 	bne.w	800720a <_strtod_l+0xb7a>
 800673e:	4650      	mov	r0, sl
 8006740:	4659      	mov	r1, fp
 8006742:	e7e7      	b.n	8006714 <_strtod_l+0x84>
 8006744:	2100      	movs	r1, #0
 8006746:	e7ef      	b.n	8006728 <_strtod_l+0x98>
 8006748:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800674a:	b13a      	cbz	r2, 800675c <_strtod_l+0xcc>
 800674c:	2135      	movs	r1, #53	@ 0x35
 800674e:	a81c      	add	r0, sp, #112	@ 0x70
 8006750:	f7ff ff38 	bl	80065c4 <__copybits>
 8006754:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006756:	9805      	ldr	r0, [sp, #20]
 8006758:	f7ff fb18 	bl	8005d8c <_Bfree>
 800675c:	3e01      	subs	r6, #1
 800675e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006760:	2e04      	cmp	r6, #4
 8006762:	d806      	bhi.n	8006772 <_strtod_l+0xe2>
 8006764:	e8df f006 	tbb	[pc, r6]
 8006768:	201d0314 	.word	0x201d0314
 800676c:	14          	.byte	0x14
 800676d:	00          	.byte	0x00
 800676e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006772:	05e1      	lsls	r1, r4, #23
 8006774:	bf48      	it	mi
 8006776:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800677a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800677e:	0d1b      	lsrs	r3, r3, #20
 8006780:	051b      	lsls	r3, r3, #20
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1bd      	bne.n	8006702 <_strtod_l+0x72>
 8006786:	f7fe fb17 	bl	8004db8 <__errno>
 800678a:	2322      	movs	r3, #34	@ 0x22
 800678c:	6003      	str	r3, [r0, #0]
 800678e:	e7b8      	b.n	8006702 <_strtod_l+0x72>
 8006790:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006794:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006798:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800679c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067a0:	e7e7      	b.n	8006772 <_strtod_l+0xe2>
 80067a2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006920 <_strtod_l+0x290>
 80067a6:	e7e4      	b.n	8006772 <_strtod_l+0xe2>
 80067a8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80067ac:	f04f 3aff 	mov.w	sl, #4294967295
 80067b0:	e7df      	b.n	8006772 <_strtod_l+0xe2>
 80067b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b30      	cmp	r3, #48	@ 0x30
 80067bc:	d0f9      	beq.n	80067b2 <_strtod_l+0x122>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d09f      	beq.n	8006702 <_strtod_l+0x72>
 80067c2:	2301      	movs	r3, #1
 80067c4:	2700      	movs	r7, #0
 80067c6:	220a      	movs	r2, #10
 80067c8:	46b9      	mov	r9, r7
 80067ca:	9308      	str	r3, [sp, #32]
 80067cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067ce:	970b      	str	r7, [sp, #44]	@ 0x2c
 80067d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80067d2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067d4:	7805      	ldrb	r5, [r0, #0]
 80067d6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80067da:	b2d9      	uxtb	r1, r3
 80067dc:	2909      	cmp	r1, #9
 80067de:	d928      	bls.n	8006832 <_strtod_l+0x1a2>
 80067e0:	2201      	movs	r2, #1
 80067e2:	4950      	ldr	r1, [pc, #320]	@ (8006924 <_strtod_l+0x294>)
 80067e4:	f000 ffc8 	bl	8007778 <strncmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d032      	beq.n	8006852 <_strtod_l+0x1c2>
 80067ec:	2000      	movs	r0, #0
 80067ee:	462a      	mov	r2, r5
 80067f0:	4603      	mov	r3, r0
 80067f2:	464d      	mov	r5, r9
 80067f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80067f6:	2a65      	cmp	r2, #101	@ 0x65
 80067f8:	d001      	beq.n	80067fe <_strtod_l+0x16e>
 80067fa:	2a45      	cmp	r2, #69	@ 0x45
 80067fc:	d114      	bne.n	8006828 <_strtod_l+0x198>
 80067fe:	b91d      	cbnz	r5, 8006808 <_strtod_l+0x178>
 8006800:	9a08      	ldr	r2, [sp, #32]
 8006802:	4302      	orrs	r2, r0
 8006804:	d096      	beq.n	8006734 <_strtod_l+0xa4>
 8006806:	2500      	movs	r5, #0
 8006808:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800680a:	1c62      	adds	r2, r4, #1
 800680c:	9219      	str	r2, [sp, #100]	@ 0x64
 800680e:	7862      	ldrb	r2, [r4, #1]
 8006810:	2a2b      	cmp	r2, #43	@ 0x2b
 8006812:	d07a      	beq.n	800690a <_strtod_l+0x27a>
 8006814:	2a2d      	cmp	r2, #45	@ 0x2d
 8006816:	d07e      	beq.n	8006916 <_strtod_l+0x286>
 8006818:	f04f 0c00 	mov.w	ip, #0
 800681c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006820:	2909      	cmp	r1, #9
 8006822:	f240 8085 	bls.w	8006930 <_strtod_l+0x2a0>
 8006826:	9419      	str	r4, [sp, #100]	@ 0x64
 8006828:	f04f 0800 	mov.w	r8, #0
 800682c:	e0a5      	b.n	800697a <_strtod_l+0x2ea>
 800682e:	2300      	movs	r3, #0
 8006830:	e7c8      	b.n	80067c4 <_strtod_l+0x134>
 8006832:	f1b9 0f08 	cmp.w	r9, #8
 8006836:	bfd8      	it	le
 8006838:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800683a:	f100 0001 	add.w	r0, r0, #1
 800683e:	bfd6      	itet	le
 8006840:	fb02 3301 	mlale	r3, r2, r1, r3
 8006844:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006848:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800684a:	f109 0901 	add.w	r9, r9, #1
 800684e:	9019      	str	r0, [sp, #100]	@ 0x64
 8006850:	e7bf      	b.n	80067d2 <_strtod_l+0x142>
 8006852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	9219      	str	r2, [sp, #100]	@ 0x64
 8006858:	785a      	ldrb	r2, [r3, #1]
 800685a:	f1b9 0f00 	cmp.w	r9, #0
 800685e:	d03b      	beq.n	80068d8 <_strtod_l+0x248>
 8006860:	464d      	mov	r5, r9
 8006862:	900a      	str	r0, [sp, #40]	@ 0x28
 8006864:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006868:	2b09      	cmp	r3, #9
 800686a:	d912      	bls.n	8006892 <_strtod_l+0x202>
 800686c:	2301      	movs	r3, #1
 800686e:	e7c2      	b.n	80067f6 <_strtod_l+0x166>
 8006870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006872:	3001      	adds	r0, #1
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	9219      	str	r2, [sp, #100]	@ 0x64
 8006878:	785a      	ldrb	r2, [r3, #1]
 800687a:	2a30      	cmp	r2, #48	@ 0x30
 800687c:	d0f8      	beq.n	8006870 <_strtod_l+0x1e0>
 800687e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006882:	2b08      	cmp	r3, #8
 8006884:	f200 84c8 	bhi.w	8007218 <_strtod_l+0xb88>
 8006888:	900a      	str	r0, [sp, #40]	@ 0x28
 800688a:	2000      	movs	r0, #0
 800688c:	4605      	mov	r5, r0
 800688e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006890:	930c      	str	r3, [sp, #48]	@ 0x30
 8006892:	3a30      	subs	r2, #48	@ 0x30
 8006894:	f100 0301 	add.w	r3, r0, #1
 8006898:	d018      	beq.n	80068cc <_strtod_l+0x23c>
 800689a:	462e      	mov	r6, r5
 800689c:	f04f 0e0a 	mov.w	lr, #10
 80068a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068a2:	4419      	add	r1, r3
 80068a4:	910a      	str	r1, [sp, #40]	@ 0x28
 80068a6:	1c71      	adds	r1, r6, #1
 80068a8:	eba1 0c05 	sub.w	ip, r1, r5
 80068ac:	4563      	cmp	r3, ip
 80068ae:	dc15      	bgt.n	80068dc <_strtod_l+0x24c>
 80068b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80068b4:	182b      	adds	r3, r5, r0
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	f105 0501 	add.w	r5, r5, #1
 80068bc:	4405      	add	r5, r0
 80068be:	dc1a      	bgt.n	80068f6 <_strtod_l+0x266>
 80068c0:	230a      	movs	r3, #10
 80068c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068c4:	fb03 2301 	mla	r3, r3, r1, r2
 80068c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ca:	2300      	movs	r3, #0
 80068cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068ce:	4618      	mov	r0, r3
 80068d0:	1c51      	adds	r1, r2, #1
 80068d2:	9119      	str	r1, [sp, #100]	@ 0x64
 80068d4:	7852      	ldrb	r2, [r2, #1]
 80068d6:	e7c5      	b.n	8006864 <_strtod_l+0x1d4>
 80068d8:	4648      	mov	r0, r9
 80068da:	e7ce      	b.n	800687a <_strtod_l+0x1ea>
 80068dc:	2e08      	cmp	r6, #8
 80068de:	dc05      	bgt.n	80068ec <_strtod_l+0x25c>
 80068e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80068e2:	fb0e f606 	mul.w	r6, lr, r6
 80068e6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80068e8:	460e      	mov	r6, r1
 80068ea:	e7dc      	b.n	80068a6 <_strtod_l+0x216>
 80068ec:	2910      	cmp	r1, #16
 80068ee:	bfd8      	it	le
 80068f0:	fb0e f707 	mulle.w	r7, lr, r7
 80068f4:	e7f8      	b.n	80068e8 <_strtod_l+0x258>
 80068f6:	2b0f      	cmp	r3, #15
 80068f8:	bfdc      	itt	le
 80068fa:	230a      	movle	r3, #10
 80068fc:	fb03 2707 	mlale	r7, r3, r7, r2
 8006900:	e7e3      	b.n	80068ca <_strtod_l+0x23a>
 8006902:	2300      	movs	r3, #0
 8006904:	930a      	str	r3, [sp, #40]	@ 0x28
 8006906:	2301      	movs	r3, #1
 8006908:	e77a      	b.n	8006800 <_strtod_l+0x170>
 800690a:	f04f 0c00 	mov.w	ip, #0
 800690e:	1ca2      	adds	r2, r4, #2
 8006910:	9219      	str	r2, [sp, #100]	@ 0x64
 8006912:	78a2      	ldrb	r2, [r4, #2]
 8006914:	e782      	b.n	800681c <_strtod_l+0x18c>
 8006916:	f04f 0c01 	mov.w	ip, #1
 800691a:	e7f8      	b.n	800690e <_strtod_l+0x27e>
 800691c:	08008df4 	.word	0x08008df4
 8006920:	7ff00000 	.word	0x7ff00000
 8006924:	08008c2d 	.word	0x08008c2d
 8006928:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800692a:	1c51      	adds	r1, r2, #1
 800692c:	9119      	str	r1, [sp, #100]	@ 0x64
 800692e:	7852      	ldrb	r2, [r2, #1]
 8006930:	2a30      	cmp	r2, #48	@ 0x30
 8006932:	d0f9      	beq.n	8006928 <_strtod_l+0x298>
 8006934:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006938:	2908      	cmp	r1, #8
 800693a:	f63f af75 	bhi.w	8006828 <_strtod_l+0x198>
 800693e:	f04f 080a 	mov.w	r8, #10
 8006942:	3a30      	subs	r2, #48	@ 0x30
 8006944:	9209      	str	r2, [sp, #36]	@ 0x24
 8006946:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006948:	920f      	str	r2, [sp, #60]	@ 0x3c
 800694a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800694c:	1c56      	adds	r6, r2, #1
 800694e:	9619      	str	r6, [sp, #100]	@ 0x64
 8006950:	7852      	ldrb	r2, [r2, #1]
 8006952:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006956:	f1be 0f09 	cmp.w	lr, #9
 800695a:	d939      	bls.n	80069d0 <_strtod_l+0x340>
 800695c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800695e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006962:	1a76      	subs	r6, r6, r1
 8006964:	2e08      	cmp	r6, #8
 8006966:	dc03      	bgt.n	8006970 <_strtod_l+0x2e0>
 8006968:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800696a:	4588      	cmp	r8, r1
 800696c:	bfa8      	it	ge
 800696e:	4688      	movge	r8, r1
 8006970:	f1bc 0f00 	cmp.w	ip, #0
 8006974:	d001      	beq.n	800697a <_strtod_l+0x2ea>
 8006976:	f1c8 0800 	rsb	r8, r8, #0
 800697a:	2d00      	cmp	r5, #0
 800697c:	d14e      	bne.n	8006a1c <_strtod_l+0x38c>
 800697e:	9908      	ldr	r1, [sp, #32]
 8006980:	4308      	orrs	r0, r1
 8006982:	f47f aebe 	bne.w	8006702 <_strtod_l+0x72>
 8006986:	2b00      	cmp	r3, #0
 8006988:	f47f aed4 	bne.w	8006734 <_strtod_l+0xa4>
 800698c:	2a69      	cmp	r2, #105	@ 0x69
 800698e:	d028      	beq.n	80069e2 <_strtod_l+0x352>
 8006990:	dc25      	bgt.n	80069de <_strtod_l+0x34e>
 8006992:	2a49      	cmp	r2, #73	@ 0x49
 8006994:	d025      	beq.n	80069e2 <_strtod_l+0x352>
 8006996:	2a4e      	cmp	r2, #78	@ 0x4e
 8006998:	f47f aecc 	bne.w	8006734 <_strtod_l+0xa4>
 800699c:	4999      	ldr	r1, [pc, #612]	@ (8006c04 <_strtod_l+0x574>)
 800699e:	a819      	add	r0, sp, #100	@ 0x64
 80069a0:	f001 f9ce 	bl	8007d40 <__match>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f43f aec5 	beq.w	8006734 <_strtod_l+0xa4>
 80069aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b28      	cmp	r3, #40	@ 0x28
 80069b0:	d12e      	bne.n	8006a10 <_strtod_l+0x380>
 80069b2:	4995      	ldr	r1, [pc, #596]	@ (8006c08 <_strtod_l+0x578>)
 80069b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80069b6:	a819      	add	r0, sp, #100	@ 0x64
 80069b8:	f001 f9d6 	bl	8007d68 <__hexnan>
 80069bc:	2805      	cmp	r0, #5
 80069be:	d127      	bne.n	8006a10 <_strtod_l+0x380>
 80069c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069c2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069c6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069ca:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069ce:	e698      	b.n	8006702 <_strtod_l+0x72>
 80069d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069d2:	fb08 2101 	mla	r1, r8, r1, r2
 80069d6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80069da:	9209      	str	r2, [sp, #36]	@ 0x24
 80069dc:	e7b5      	b.n	800694a <_strtod_l+0x2ba>
 80069de:	2a6e      	cmp	r2, #110	@ 0x6e
 80069e0:	e7da      	b.n	8006998 <_strtod_l+0x308>
 80069e2:	498a      	ldr	r1, [pc, #552]	@ (8006c0c <_strtod_l+0x57c>)
 80069e4:	a819      	add	r0, sp, #100	@ 0x64
 80069e6:	f001 f9ab 	bl	8007d40 <__match>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f43f aea2 	beq.w	8006734 <_strtod_l+0xa4>
 80069f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069f2:	4987      	ldr	r1, [pc, #540]	@ (8006c10 <_strtod_l+0x580>)
 80069f4:	3b01      	subs	r3, #1
 80069f6:	a819      	add	r0, sp, #100	@ 0x64
 80069f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80069fa:	f001 f9a1 	bl	8007d40 <__match>
 80069fe:	b910      	cbnz	r0, 8006a06 <_strtod_l+0x376>
 8006a00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a02:	3301      	adds	r3, #1
 8006a04:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a06:	f04f 0a00 	mov.w	sl, #0
 8006a0a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006c14 <_strtod_l+0x584>
 8006a0e:	e678      	b.n	8006702 <_strtod_l+0x72>
 8006a10:	4881      	ldr	r0, [pc, #516]	@ (8006c18 <_strtod_l+0x588>)
 8006a12:	f000 fed3 	bl	80077bc <nan>
 8006a16:	4682      	mov	sl, r0
 8006a18:	468b      	mov	fp, r1
 8006a1a:	e672      	b.n	8006702 <_strtod_l+0x72>
 8006a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a1e:	f1b9 0f00 	cmp.w	r9, #0
 8006a22:	bf08      	it	eq
 8006a24:	46a9      	moveq	r9, r5
 8006a26:	eba8 0303 	sub.w	r3, r8, r3
 8006a2a:	2d10      	cmp	r5, #16
 8006a2c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a2e:	462c      	mov	r4, r5
 8006a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a32:	bfa8      	it	ge
 8006a34:	2410      	movge	r4, #16
 8006a36:	f7f9 fcd5 	bl	80003e4 <__aeabi_ui2d>
 8006a3a:	2d09      	cmp	r5, #9
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	468b      	mov	fp, r1
 8006a40:	dc11      	bgt.n	8006a66 <_strtod_l+0x3d6>
 8006a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f43f ae5c 	beq.w	8006702 <_strtod_l+0x72>
 8006a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4c:	dd76      	ble.n	8006b3c <_strtod_l+0x4ac>
 8006a4e:	2b16      	cmp	r3, #22
 8006a50:	dc5d      	bgt.n	8006b0e <_strtod_l+0x47e>
 8006a52:	4972      	ldr	r1, [pc, #456]	@ (8006c1c <_strtod_l+0x58c>)
 8006a54:	4652      	mov	r2, sl
 8006a56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a5a:	465b      	mov	r3, fp
 8006a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a60:	f7f9 fd3a 	bl	80004d8 <__aeabi_dmul>
 8006a64:	e7d7      	b.n	8006a16 <_strtod_l+0x386>
 8006a66:	4b6d      	ldr	r3, [pc, #436]	@ (8006c1c <_strtod_l+0x58c>)
 8006a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a70:	f7f9 fd32 	bl	80004d8 <__aeabi_dmul>
 8006a74:	4682      	mov	sl, r0
 8006a76:	4638      	mov	r0, r7
 8006a78:	468b      	mov	fp, r1
 8006a7a:	f7f9 fcb3 	bl	80003e4 <__aeabi_ui2d>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4650      	mov	r0, sl
 8006a84:	4659      	mov	r1, fp
 8006a86:	f7f9 fb71 	bl	800016c <__adddf3>
 8006a8a:	2d0f      	cmp	r5, #15
 8006a8c:	4682      	mov	sl, r0
 8006a8e:	468b      	mov	fp, r1
 8006a90:	ddd7      	ble.n	8006a42 <_strtod_l+0x3b2>
 8006a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a94:	1b2c      	subs	r4, r5, r4
 8006a96:	441c      	add	r4, r3
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	f340 8093 	ble.w	8006bc4 <_strtod_l+0x534>
 8006a9e:	f014 030f 	ands.w	r3, r4, #15
 8006aa2:	d00a      	beq.n	8006aba <_strtod_l+0x42a>
 8006aa4:	495d      	ldr	r1, [pc, #372]	@ (8006c1c <_strtod_l+0x58c>)
 8006aa6:	4652      	mov	r2, sl
 8006aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	f7f9 fd11 	bl	80004d8 <__aeabi_dmul>
 8006ab6:	4682      	mov	sl, r0
 8006ab8:	468b      	mov	fp, r1
 8006aba:	f034 040f 	bics.w	r4, r4, #15
 8006abe:	d073      	beq.n	8006ba8 <_strtod_l+0x518>
 8006ac0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006ac4:	dd49      	ble.n	8006b5a <_strtod_l+0x4ca>
 8006ac6:	2400      	movs	r4, #0
 8006ac8:	46a0      	mov	r8, r4
 8006aca:	46a1      	mov	r9, r4
 8006acc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ace:	2322      	movs	r3, #34	@ 0x22
 8006ad0:	f04f 0a00 	mov.w	sl, #0
 8006ad4:	9a05      	ldr	r2, [sp, #20]
 8006ad6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006c14 <_strtod_l+0x584>
 8006ada:	6013      	str	r3, [r2, #0]
 8006adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f43f ae0f 	beq.w	8006702 <_strtod_l+0x72>
 8006ae4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	f7ff f950 	bl	8005d8c <_Bfree>
 8006aec:	4649      	mov	r1, r9
 8006aee:	9805      	ldr	r0, [sp, #20]
 8006af0:	f7ff f94c 	bl	8005d8c <_Bfree>
 8006af4:	4641      	mov	r1, r8
 8006af6:	9805      	ldr	r0, [sp, #20]
 8006af8:	f7ff f948 	bl	8005d8c <_Bfree>
 8006afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006afe:	9805      	ldr	r0, [sp, #20]
 8006b00:	f7ff f944 	bl	8005d8c <_Bfree>
 8006b04:	4621      	mov	r1, r4
 8006b06:	9805      	ldr	r0, [sp, #20]
 8006b08:	f7ff f940 	bl	8005d8c <_Bfree>
 8006b0c:	e5f9      	b.n	8006702 <_strtod_l+0x72>
 8006b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b14:	4293      	cmp	r3, r2
 8006b16:	dbbc      	blt.n	8006a92 <_strtod_l+0x402>
 8006b18:	4c40      	ldr	r4, [pc, #256]	@ (8006c1c <_strtod_l+0x58c>)
 8006b1a:	f1c5 050f 	rsb	r5, r5, #15
 8006b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b22:	4652      	mov	r2, sl
 8006b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b28:	465b      	mov	r3, fp
 8006b2a:	f7f9 fcd5 	bl	80004d8 <__aeabi_dmul>
 8006b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b30:	1b5d      	subs	r5, r3, r5
 8006b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b3a:	e791      	b.n	8006a60 <_strtod_l+0x3d0>
 8006b3c:	3316      	adds	r3, #22
 8006b3e:	dba8      	blt.n	8006a92 <_strtod_l+0x402>
 8006b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b42:	4650      	mov	r0, sl
 8006b44:	eba3 0808 	sub.w	r8, r3, r8
 8006b48:	4b34      	ldr	r3, [pc, #208]	@ (8006c1c <_strtod_l+0x58c>)
 8006b4a:	4659      	mov	r1, fp
 8006b4c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b50:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b54:	f7f9 fdea 	bl	800072c <__aeabi_ddiv>
 8006b58:	e75d      	b.n	8006a16 <_strtod_l+0x386>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	4659      	mov	r1, fp
 8006b60:	461e      	mov	r6, r3
 8006b62:	4f2f      	ldr	r7, [pc, #188]	@ (8006c20 <_strtod_l+0x590>)
 8006b64:	1124      	asrs	r4, r4, #4
 8006b66:	2c01      	cmp	r4, #1
 8006b68:	dc21      	bgt.n	8006bae <_strtod_l+0x51e>
 8006b6a:	b10b      	cbz	r3, 8006b70 <_strtod_l+0x4e0>
 8006b6c:	4682      	mov	sl, r0
 8006b6e:	468b      	mov	fp, r1
 8006b70:	492b      	ldr	r1, [pc, #172]	@ (8006c20 <_strtod_l+0x590>)
 8006b72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b80:	465b      	mov	r3, fp
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	4b23      	ldr	r3, [pc, #140]	@ (8006c14 <_strtod_l+0x584>)
 8006b88:	460a      	mov	r2, r1
 8006b8a:	400b      	ands	r3, r1
 8006b8c:	4925      	ldr	r1, [pc, #148]	@ (8006c24 <_strtod_l+0x594>)
 8006b8e:	4682      	mov	sl, r0
 8006b90:	428b      	cmp	r3, r1
 8006b92:	d898      	bhi.n	8006ac6 <_strtod_l+0x436>
 8006b94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b98:	428b      	cmp	r3, r1
 8006b9a:	bf86      	itte	hi
 8006b9c:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ba0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006c28 <_strtod_l+0x598>
 8006ba4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ba8:	2300      	movs	r3, #0
 8006baa:	9308      	str	r3, [sp, #32]
 8006bac:	e076      	b.n	8006c9c <_strtod_l+0x60c>
 8006bae:	07e2      	lsls	r2, r4, #31
 8006bb0:	d504      	bpl.n	8006bbc <_strtod_l+0x52c>
 8006bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb6:	f7f9 fc8f 	bl	80004d8 <__aeabi_dmul>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	3601      	adds	r6, #1
 8006bbe:	1064      	asrs	r4, r4, #1
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	e7d0      	b.n	8006b66 <_strtod_l+0x4d6>
 8006bc4:	d0f0      	beq.n	8006ba8 <_strtod_l+0x518>
 8006bc6:	4264      	negs	r4, r4
 8006bc8:	f014 020f 	ands.w	r2, r4, #15
 8006bcc:	d00a      	beq.n	8006be4 <_strtod_l+0x554>
 8006bce:	4b13      	ldr	r3, [pc, #76]	@ (8006c1c <_strtod_l+0x58c>)
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd6:	4659      	mov	r1, fp
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f7f9 fda6 	bl	800072c <__aeabi_ddiv>
 8006be0:	4682      	mov	sl, r0
 8006be2:	468b      	mov	fp, r1
 8006be4:	1124      	asrs	r4, r4, #4
 8006be6:	d0df      	beq.n	8006ba8 <_strtod_l+0x518>
 8006be8:	2c1f      	cmp	r4, #31
 8006bea:	dd1f      	ble.n	8006c2c <_strtod_l+0x59c>
 8006bec:	2400      	movs	r4, #0
 8006bee:	46a0      	mov	r8, r4
 8006bf0:	46a1      	mov	r9, r4
 8006bf2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006bf4:	2322      	movs	r3, #34	@ 0x22
 8006bf6:	9a05      	ldr	r2, [sp, #20]
 8006bf8:	f04f 0a00 	mov.w	sl, #0
 8006bfc:	f04f 0b00 	mov.w	fp, #0
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e76b      	b.n	8006adc <_strtod_l+0x44c>
 8006c04:	08008b1b 	.word	0x08008b1b
 8006c08:	08008de0 	.word	0x08008de0
 8006c0c:	08008b13 	.word	0x08008b13
 8006c10:	08008b4a 	.word	0x08008b4a
 8006c14:	7ff00000 	.word	0x7ff00000
 8006c18:	08008c83 	.word	0x08008c83
 8006c1c:	08008d18 	.word	0x08008d18
 8006c20:	08008cf0 	.word	0x08008cf0
 8006c24:	7ca00000 	.word	0x7ca00000
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	f014 0310 	ands.w	r3, r4, #16
 8006c30:	bf18      	it	ne
 8006c32:	236a      	movne	r3, #106	@ 0x6a
 8006c34:	4650      	mov	r0, sl
 8006c36:	9308      	str	r3, [sp, #32]
 8006c38:	4659      	mov	r1, fp
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4e77      	ldr	r6, [pc, #476]	@ (8006e1c <_strtod_l+0x78c>)
 8006c3e:	07e7      	lsls	r7, r4, #31
 8006c40:	d504      	bpl.n	8006c4c <_strtod_l+0x5bc>
 8006c42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c46:	f7f9 fc47 	bl	80004d8 <__aeabi_dmul>
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	1064      	asrs	r4, r4, #1
 8006c4e:	f106 0608 	add.w	r6, r6, #8
 8006c52:	d1f4      	bne.n	8006c3e <_strtod_l+0x5ae>
 8006c54:	b10b      	cbz	r3, 8006c5a <_strtod_l+0x5ca>
 8006c56:	4682      	mov	sl, r0
 8006c58:	468b      	mov	fp, r1
 8006c5a:	9b08      	ldr	r3, [sp, #32]
 8006c5c:	b1b3      	cbz	r3, 8006c8c <_strtod_l+0x5fc>
 8006c5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	4659      	mov	r1, fp
 8006c6a:	dd0f      	ble.n	8006c8c <_strtod_l+0x5fc>
 8006c6c:	2b1f      	cmp	r3, #31
 8006c6e:	dd58      	ble.n	8006d22 <_strtod_l+0x692>
 8006c70:	2b34      	cmp	r3, #52	@ 0x34
 8006c72:	bfd8      	it	le
 8006c74:	f04f 33ff 	movle.w	r3, #4294967295
 8006c78:	f04f 0a00 	mov.w	sl, #0
 8006c7c:	bfcf      	iteee	gt
 8006c7e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006c82:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006c86:	4093      	lslle	r3, r2
 8006c88:	ea03 0b01 	andle.w	fp, r3, r1
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2300      	movs	r3, #0
 8006c90:	4650      	mov	r0, sl
 8006c92:	4659      	mov	r1, fp
 8006c94:	f7f9 fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d1a7      	bne.n	8006bec <_strtod_l+0x55c>
 8006c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c9e:	464a      	mov	r2, r9
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006ca4:	462b      	mov	r3, r5
 8006ca6:	9805      	ldr	r0, [sp, #20]
 8006ca8:	f7ff f8d8 	bl	8005e5c <__s2b>
 8006cac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f af09 	beq.w	8006ac6 <_strtod_l+0x436>
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	eba3 0308 	sub.w	r3, r3, r8
 8006cc0:	bfa8      	it	ge
 8006cc2:	2300      	movge	r3, #0
 8006cc4:	46a0      	mov	r8, r4
 8006cc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cc8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ccc:	9316      	str	r3, [sp, #88]	@ 0x58
 8006cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cd0:	9805      	ldr	r0, [sp, #20]
 8006cd2:	6859      	ldr	r1, [r3, #4]
 8006cd4:	f7ff f81a 	bl	8005d0c <_Balloc>
 8006cd8:	4681      	mov	r9, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	f43f aef7 	beq.w	8006ace <_strtod_l+0x43e>
 8006ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ce2:	300c      	adds	r0, #12
 8006ce4:	691a      	ldr	r2, [r3, #16]
 8006ce6:	f103 010c 	add.w	r1, r3, #12
 8006cea:	3202      	adds	r2, #2
 8006cec:	0092      	lsls	r2, r2, #2
 8006cee:	f7fe f89e 	bl	8004e2e <memcpy>
 8006cf2:	ab1c      	add	r3, sp, #112	@ 0x70
 8006cf4:	9301      	str	r3, [sp, #4]
 8006cf6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d04:	f7ff fbd6 	bl	80064b4 <__d2b>
 8006d08:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	f43f aedf 	beq.w	8006ace <_strtod_l+0x43e>
 8006d10:	2101      	movs	r1, #1
 8006d12:	9805      	ldr	r0, [sp, #20]
 8006d14:	f7ff f938 	bl	8005f88 <__i2b>
 8006d18:	4680      	mov	r8, r0
 8006d1a:	b948      	cbnz	r0, 8006d30 <_strtod_l+0x6a0>
 8006d1c:	f04f 0800 	mov.w	r8, #0
 8006d20:	e6d5      	b.n	8006ace <_strtod_l+0x43e>
 8006d22:	f04f 32ff 	mov.w	r2, #4294967295
 8006d26:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2a:	ea03 0a0a 	and.w	sl, r3, sl
 8006d2e:	e7ad      	b.n	8006c8c <_strtod_l+0x5fc>
 8006d30:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d32:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	bfab      	itete	ge
 8006d38:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d3a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d3c:	18ef      	addge	r7, r5, r3
 8006d3e:	1b5e      	sublt	r6, r3, r5
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	bfa8      	it	ge
 8006d44:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d46:	eba5 0503 	sub.w	r5, r5, r3
 8006d4a:	4415      	add	r5, r2
 8006d4c:	4b34      	ldr	r3, [pc, #208]	@ (8006e20 <_strtod_l+0x790>)
 8006d4e:	f105 35ff 	add.w	r5, r5, #4294967295
 8006d52:	bfb8      	it	lt
 8006d54:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d56:	429d      	cmp	r5, r3
 8006d58:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d5c:	da50      	bge.n	8006e00 <_strtod_l+0x770>
 8006d5e:	1b5b      	subs	r3, r3, r5
 8006d60:	2b1f      	cmp	r3, #31
 8006d62:	f04f 0101 	mov.w	r1, #1
 8006d66:	eba2 0203 	sub.w	r2, r2, r3
 8006d6a:	dc3d      	bgt.n	8006de8 <_strtod_l+0x758>
 8006d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d70:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d72:	2300      	movs	r3, #0
 8006d74:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d76:	18bd      	adds	r5, r7, r2
 8006d78:	9b08      	ldr	r3, [sp, #32]
 8006d7a:	42af      	cmp	r7, r5
 8006d7c:	4416      	add	r6, r2
 8006d7e:	441e      	add	r6, r3
 8006d80:	463b      	mov	r3, r7
 8006d82:	bfa8      	it	ge
 8006d84:	462b      	movge	r3, r5
 8006d86:	42b3      	cmp	r3, r6
 8006d88:	bfa8      	it	ge
 8006d8a:	4633      	movge	r3, r6
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	bfc2      	ittt	gt
 8006d90:	1aed      	subgt	r5, r5, r3
 8006d92:	1af6      	subgt	r6, r6, r3
 8006d94:	1aff      	subgt	r7, r7, r3
 8006d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dd16      	ble.n	8006dca <_strtod_l+0x73a>
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	461a      	mov	r2, r3
 8006da0:	9805      	ldr	r0, [sp, #20]
 8006da2:	f7ff f9a9 	bl	80060f8 <__pow5mult>
 8006da6:	4680      	mov	r8, r0
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d0b7      	beq.n	8006d1c <_strtod_l+0x68c>
 8006dac:	4601      	mov	r1, r0
 8006dae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006db0:	9805      	ldr	r0, [sp, #20]
 8006db2:	f7ff f8ff 	bl	8005fb4 <__multiply>
 8006db6:	900a      	str	r0, [sp, #40]	@ 0x28
 8006db8:	2800      	cmp	r0, #0
 8006dba:	f43f ae88 	beq.w	8006ace <_strtod_l+0x43e>
 8006dbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dc0:	9805      	ldr	r0, [sp, #20]
 8006dc2:	f7fe ffe3 	bl	8005d8c <_Bfree>
 8006dc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	dc1d      	bgt.n	8006e0a <_strtod_l+0x77a>
 8006dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dd27      	ble.n	8006e24 <_strtod_l+0x794>
 8006dd4:	4649      	mov	r1, r9
 8006dd6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006dd8:	9805      	ldr	r0, [sp, #20]
 8006dda:	f7ff f98d 	bl	80060f8 <__pow5mult>
 8006dde:	4681      	mov	r9, r0
 8006de0:	bb00      	cbnz	r0, 8006e24 <_strtod_l+0x794>
 8006de2:	f04f 0900 	mov.w	r9, #0
 8006de6:	e672      	b.n	8006ace <_strtod_l+0x43e>
 8006de8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006dec:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006df0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006df4:	35e2      	adds	r5, #226	@ 0xe2
 8006df6:	fa01 f305 	lsl.w	r3, r1, r5
 8006dfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dfc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006dfe:	e7ba      	b.n	8006d76 <_strtod_l+0x6e6>
 8006e00:	2300      	movs	r3, #0
 8006e02:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e04:	2301      	movs	r3, #1
 8006e06:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e08:	e7b5      	b.n	8006d76 <_strtod_l+0x6e6>
 8006e0a:	462a      	mov	r2, r5
 8006e0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e0e:	9805      	ldr	r0, [sp, #20]
 8006e10:	f7ff f9cc 	bl	80061ac <__lshift>
 8006e14:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d1d9      	bne.n	8006dce <_strtod_l+0x73e>
 8006e1a:	e658      	b.n	8006ace <_strtod_l+0x43e>
 8006e1c:	08008e08 	.word	0x08008e08
 8006e20:	fffffc02 	.word	0xfffffc02
 8006e24:	2e00      	cmp	r6, #0
 8006e26:	dd07      	ble.n	8006e38 <_strtod_l+0x7a8>
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	9805      	ldr	r0, [sp, #20]
 8006e2e:	f7ff f9bd 	bl	80061ac <__lshift>
 8006e32:	4681      	mov	r9, r0
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d0d4      	beq.n	8006de2 <_strtod_l+0x752>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	dd08      	ble.n	8006e4e <_strtod_l+0x7be>
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	463a      	mov	r2, r7
 8006e40:	9805      	ldr	r0, [sp, #20]
 8006e42:	f7ff f9b3 	bl	80061ac <__lshift>
 8006e46:	4680      	mov	r8, r0
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f43f ae40 	beq.w	8006ace <_strtod_l+0x43e>
 8006e4e:	464a      	mov	r2, r9
 8006e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e52:	9805      	ldr	r0, [sp, #20]
 8006e54:	f7ff fa32 	bl	80062bc <__mdiff>
 8006e58:	4604      	mov	r4, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f43f ae37 	beq.w	8006ace <_strtod_l+0x43e>
 8006e60:	68c3      	ldr	r3, [r0, #12]
 8006e62:	4641      	mov	r1, r8
 8006e64:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e66:	2300      	movs	r3, #0
 8006e68:	60c3      	str	r3, [r0, #12]
 8006e6a:	f7ff fa0b 	bl	8006284 <__mcmp>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	da3d      	bge.n	8006eee <_strtod_l+0x85e>
 8006e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e74:	ea53 030a 	orrs.w	r3, r3, sl
 8006e78:	d163      	bne.n	8006f42 <_strtod_l+0x8b2>
 8006e7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d15f      	bne.n	8006f42 <_strtod_l+0x8b2>
 8006e82:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e86:	0d1b      	lsrs	r3, r3, #20
 8006e88:	051b      	lsls	r3, r3, #20
 8006e8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e8e:	d958      	bls.n	8006f42 <_strtod_l+0x8b2>
 8006e90:	6963      	ldr	r3, [r4, #20]
 8006e92:	b913      	cbnz	r3, 8006e9a <_strtod_l+0x80a>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	dd53      	ble.n	8006f42 <_strtod_l+0x8b2>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	9805      	ldr	r0, [sp, #20]
 8006ea0:	f7ff f984 	bl	80061ac <__lshift>
 8006ea4:	4641      	mov	r1, r8
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	f7ff f9ec 	bl	8006284 <__mcmp>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	dd48      	ble.n	8006f42 <_strtod_l+0x8b2>
 8006eb0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eb4:	9a08      	ldr	r2, [sp, #32]
 8006eb6:	0d1b      	lsrs	r3, r3, #20
 8006eb8:	051b      	lsls	r3, r3, #20
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d062      	beq.n	8006f84 <_strtod_l+0x8f4>
 8006ebe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ec2:	d85f      	bhi.n	8006f84 <_strtod_l+0x8f4>
 8006ec4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ec8:	f67f ae94 	bls.w	8006bf4 <_strtod_l+0x564>
 8006ecc:	4650      	mov	r0, sl
 8006ece:	4659      	mov	r1, fp
 8006ed0:	4ba3      	ldr	r3, [pc, #652]	@ (8007160 <_strtod_l+0xad0>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f7f9 fb00 	bl	80004d8 <__aeabi_dmul>
 8006ed8:	4ba2      	ldr	r3, [pc, #648]	@ (8007164 <_strtod_l+0xad4>)
 8006eda:	4682      	mov	sl, r0
 8006edc:	400b      	ands	r3, r1
 8006ede:	468b      	mov	fp, r1
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f47f adff 	bne.w	8006ae4 <_strtod_l+0x454>
 8006ee6:	2322      	movs	r3, #34	@ 0x22
 8006ee8:	9a05      	ldr	r2, [sp, #20]
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e5fa      	b.n	8006ae4 <_strtod_l+0x454>
 8006eee:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006ef2:	d165      	bne.n	8006fc0 <_strtod_l+0x930>
 8006ef4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ef6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006efa:	b35a      	cbz	r2, 8006f54 <_strtod_l+0x8c4>
 8006efc:	4a9a      	ldr	r2, [pc, #616]	@ (8007168 <_strtod_l+0xad8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d12b      	bne.n	8006f5a <_strtod_l+0x8ca>
 8006f02:	9b08      	ldr	r3, [sp, #32]
 8006f04:	4651      	mov	r1, sl
 8006f06:	b303      	cbz	r3, 8006f4a <_strtod_l+0x8ba>
 8006f08:	465a      	mov	r2, fp
 8006f0a:	4b96      	ldr	r3, [pc, #600]	@ (8007164 <_strtod_l+0xad4>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f12:	f04f 32ff 	mov.w	r2, #4294967295
 8006f16:	d81b      	bhi.n	8006f50 <_strtod_l+0x8c0>
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f22:	4299      	cmp	r1, r3
 8006f24:	d119      	bne.n	8006f5a <_strtod_l+0x8ca>
 8006f26:	4b91      	ldr	r3, [pc, #580]	@ (800716c <_strtod_l+0xadc>)
 8006f28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d102      	bne.n	8006f34 <_strtod_l+0x8a4>
 8006f2e:	3101      	adds	r1, #1
 8006f30:	f43f adcd 	beq.w	8006ace <_strtod_l+0x43e>
 8006f34:	f04f 0a00 	mov.w	sl, #0
 8006f38:	4b8a      	ldr	r3, [pc, #552]	@ (8007164 <_strtod_l+0xad4>)
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f3c:	401a      	ands	r2, r3
 8006f3e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f42:	9b08      	ldr	r3, [sp, #32]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1c1      	bne.n	8006ecc <_strtod_l+0x83c>
 8006f48:	e5cc      	b.n	8006ae4 <_strtod_l+0x454>
 8006f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4e:	e7e8      	b.n	8006f22 <_strtod_l+0x892>
 8006f50:	4613      	mov	r3, r2
 8006f52:	e7e6      	b.n	8006f22 <_strtod_l+0x892>
 8006f54:	ea53 030a 	orrs.w	r3, r3, sl
 8006f58:	d0aa      	beq.n	8006eb0 <_strtod_l+0x820>
 8006f5a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f5c:	b1db      	cbz	r3, 8006f96 <_strtod_l+0x906>
 8006f5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f60:	4213      	tst	r3, r2
 8006f62:	d0ee      	beq.n	8006f42 <_strtod_l+0x8b2>
 8006f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f66:	4650      	mov	r0, sl
 8006f68:	4659      	mov	r1, fp
 8006f6a:	9a08      	ldr	r2, [sp, #32]
 8006f6c:	b1bb      	cbz	r3, 8006f9e <_strtod_l+0x90e>
 8006f6e:	f7ff fb6d 	bl	800664c <sulp>
 8006f72:	4602      	mov	r2, r0
 8006f74:	460b      	mov	r3, r1
 8006f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7a:	f7f9 f8f7 	bl	800016c <__adddf3>
 8006f7e:	4682      	mov	sl, r0
 8006f80:	468b      	mov	fp, r1
 8006f82:	e7de      	b.n	8006f42 <_strtod_l+0x8b2>
 8006f84:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f88:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f8c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f94:	e7d5      	b.n	8006f42 <_strtod_l+0x8b2>
 8006f96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f98:	ea13 0f0a 	tst.w	r3, sl
 8006f9c:	e7e1      	b.n	8006f62 <_strtod_l+0x8d2>
 8006f9e:	f7ff fb55 	bl	800664c <sulp>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006faa:	f7f9 f8dd 	bl	8000168 <__aeabi_dsub>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	468b      	mov	fp, r1
 8006fb6:	f7f9 fcf7 	bl	80009a8 <__aeabi_dcmpeq>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d0c1      	beq.n	8006f42 <_strtod_l+0x8b2>
 8006fbe:	e619      	b.n	8006bf4 <_strtod_l+0x564>
 8006fc0:	4641      	mov	r1, r8
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f7ff face 	bl	8006564 <__ratio>
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	f7f9 fcfd 	bl	80009d0 <__aeabi_dcmple>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	d06d      	beq.n	80070b6 <_strtod_l+0xa26>
 8006fda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d178      	bne.n	80070d2 <_strtod_l+0xa42>
 8006fe0:	f1ba 0f00 	cmp.w	sl, #0
 8006fe4:	d156      	bne.n	8007094 <_strtod_l+0xa04>
 8006fe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d158      	bne.n	80070a2 <_strtod_l+0xa12>
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4b5e      	ldr	r3, [pc, #376]	@ (8007170 <_strtod_l+0xae0>)
 8006ff8:	f7f9 fce0 	bl	80009bc <__aeabi_dcmplt>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	d157      	bne.n	80070b0 <_strtod_l+0xa20>
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	2200      	movs	r2, #0
 8007006:	4b5b      	ldr	r3, [pc, #364]	@ (8007174 <_strtod_l+0xae4>)
 8007008:	f7f9 fa66 	bl	80004d8 <__aeabi_dmul>
 800700c:	4606      	mov	r6, r0
 800700e:	460f      	mov	r7, r1
 8007010:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007014:	9606      	str	r6, [sp, #24]
 8007016:	9307      	str	r3, [sp, #28]
 8007018:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800701c:	4d51      	ldr	r5, [pc, #324]	@ (8007164 <_strtod_l+0xad4>)
 800701e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007022:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007024:	401d      	ands	r5, r3
 8007026:	4b54      	ldr	r3, [pc, #336]	@ (8007178 <_strtod_l+0xae8>)
 8007028:	429d      	cmp	r5, r3
 800702a:	f040 80ab 	bne.w	8007184 <_strtod_l+0xaf4>
 800702e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007030:	4650      	mov	r0, sl
 8007032:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007036:	4659      	mov	r1, fp
 8007038:	f7ff f9d4 	bl	80063e4 <__ulp>
 800703c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007040:	f7f9 fa4a 	bl	80004d8 <__aeabi_dmul>
 8007044:	4652      	mov	r2, sl
 8007046:	465b      	mov	r3, fp
 8007048:	f7f9 f890 	bl	800016c <__adddf3>
 800704c:	460b      	mov	r3, r1
 800704e:	4945      	ldr	r1, [pc, #276]	@ (8007164 <_strtod_l+0xad4>)
 8007050:	4a4a      	ldr	r2, [pc, #296]	@ (800717c <_strtod_l+0xaec>)
 8007052:	4019      	ands	r1, r3
 8007054:	4291      	cmp	r1, r2
 8007056:	4682      	mov	sl, r0
 8007058:	d942      	bls.n	80070e0 <_strtod_l+0xa50>
 800705a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800705c:	4b43      	ldr	r3, [pc, #268]	@ (800716c <_strtod_l+0xadc>)
 800705e:	429a      	cmp	r2, r3
 8007060:	d103      	bne.n	800706a <_strtod_l+0x9da>
 8007062:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007064:	3301      	adds	r3, #1
 8007066:	f43f ad32 	beq.w	8006ace <_strtod_l+0x43e>
 800706a:	f04f 3aff 	mov.w	sl, #4294967295
 800706e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800716c <_strtod_l+0xadc>
 8007072:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007074:	9805      	ldr	r0, [sp, #20]
 8007076:	f7fe fe89 	bl	8005d8c <_Bfree>
 800707a:	4649      	mov	r1, r9
 800707c:	9805      	ldr	r0, [sp, #20]
 800707e:	f7fe fe85 	bl	8005d8c <_Bfree>
 8007082:	4641      	mov	r1, r8
 8007084:	9805      	ldr	r0, [sp, #20]
 8007086:	f7fe fe81 	bl	8005d8c <_Bfree>
 800708a:	4621      	mov	r1, r4
 800708c:	9805      	ldr	r0, [sp, #20]
 800708e:	f7fe fe7d 	bl	8005d8c <_Bfree>
 8007092:	e61c      	b.n	8006cce <_strtod_l+0x63e>
 8007094:	f1ba 0f01 	cmp.w	sl, #1
 8007098:	d103      	bne.n	80070a2 <_strtod_l+0xa12>
 800709a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	f43f ada9 	beq.w	8006bf4 <_strtod_l+0x564>
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b36      	ldr	r3, [pc, #216]	@ (8007180 <_strtod_l+0xaf0>)
 80070a6:	2600      	movs	r6, #0
 80070a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070ac:	4f30      	ldr	r7, [pc, #192]	@ (8007170 <_strtod_l+0xae0>)
 80070ae:	e7b3      	b.n	8007018 <_strtod_l+0x988>
 80070b0:	2600      	movs	r6, #0
 80070b2:	4f30      	ldr	r7, [pc, #192]	@ (8007174 <_strtod_l+0xae4>)
 80070b4:	e7ac      	b.n	8007010 <_strtod_l+0x980>
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007174 <_strtod_l+0xae4>)
 80070bc:	2200      	movs	r2, #0
 80070be:	f7f9 fa0b 	bl	80004d8 <__aeabi_dmul>
 80070c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0a1      	beq.n	8007010 <_strtod_l+0x980>
 80070cc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070d0:	e7a2      	b.n	8007018 <_strtod_l+0x988>
 80070d2:	2200      	movs	r2, #0
 80070d4:	4b26      	ldr	r3, [pc, #152]	@ (8007170 <_strtod_l+0xae0>)
 80070d6:	4616      	mov	r6, r2
 80070d8:	461f      	mov	r7, r3
 80070da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070de:	e79b      	b.n	8007018 <_strtod_l+0x988>
 80070e0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80070e4:	9b08      	ldr	r3, [sp, #32]
 80070e6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1c1      	bne.n	8007072 <_strtod_l+0x9e2>
 80070ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070f2:	0d1b      	lsrs	r3, r3, #20
 80070f4:	051b      	lsls	r3, r3, #20
 80070f6:	429d      	cmp	r5, r3
 80070f8:	d1bb      	bne.n	8007072 <_strtod_l+0x9e2>
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 fd33 	bl	8000b68 <__aeabi_d2lz>
 8007102:	f7f9 f9bb 	bl	800047c <__aeabi_l2d>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 f82b 	bl	8000168 <__aeabi_dsub>
 8007112:	460b      	mov	r3, r1
 8007114:	4602      	mov	r2, r0
 8007116:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800711a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800711e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007120:	ea46 060a 	orr.w	r6, r6, sl
 8007124:	431e      	orrs	r6, r3
 8007126:	d06a      	beq.n	80071fe <_strtod_l+0xb6e>
 8007128:	a309      	add	r3, pc, #36	@ (adr r3, 8007150 <_strtod_l+0xac0>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 fc45 	bl	80009bc <__aeabi_dcmplt>
 8007132:	2800      	cmp	r0, #0
 8007134:	f47f acd6 	bne.w	8006ae4 <_strtod_l+0x454>
 8007138:	a307      	add	r3, pc, #28	@ (adr r3, 8007158 <_strtod_l+0xac8>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007142:	f7f9 fc59 	bl	80009f8 <__aeabi_dcmpgt>
 8007146:	2800      	cmp	r0, #0
 8007148:	d093      	beq.n	8007072 <_strtod_l+0x9e2>
 800714a:	e4cb      	b.n	8006ae4 <_strtod_l+0x454>
 800714c:	f3af 8000 	nop.w
 8007150:	94a03595 	.word	0x94a03595
 8007154:	3fdfffff 	.word	0x3fdfffff
 8007158:	35afe535 	.word	0x35afe535
 800715c:	3fe00000 	.word	0x3fe00000
 8007160:	39500000 	.word	0x39500000
 8007164:	7ff00000 	.word	0x7ff00000
 8007168:	000fffff 	.word	0x000fffff
 800716c:	7fefffff 	.word	0x7fefffff
 8007170:	3ff00000 	.word	0x3ff00000
 8007174:	3fe00000 	.word	0x3fe00000
 8007178:	7fe00000 	.word	0x7fe00000
 800717c:	7c9fffff 	.word	0x7c9fffff
 8007180:	bff00000 	.word	0xbff00000
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	b323      	cbz	r3, 80071d2 <_strtod_l+0xb42>
 8007188:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800718c:	d821      	bhi.n	80071d2 <_strtod_l+0xb42>
 800718e:	a328      	add	r3, pc, #160	@ (adr r3, 8007230 <_strtod_l+0xba0>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f7f9 fc1a 	bl	80009d0 <__aeabi_dcmple>
 800719c:	b1a0      	cbz	r0, 80071c8 <_strtod_l+0xb38>
 800719e:	4639      	mov	r1, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7f9 fc71 	bl	8000a88 <__aeabi_d2uiz>
 80071a6:	2801      	cmp	r0, #1
 80071a8:	bf38      	it	cc
 80071aa:	2001      	movcc	r0, #1
 80071ac:	f7f9 f91a 	bl	80003e4 <__aeabi_ui2d>
 80071b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b2:	4606      	mov	r6, r0
 80071b4:	460f      	mov	r7, r1
 80071b6:	b9fb      	cbnz	r3, 80071f8 <_strtod_l+0xb68>
 80071b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80071be:	9315      	str	r3, [sp, #84]	@ 0x54
 80071c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071ce:	1b5b      	subs	r3, r3, r5
 80071d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80071d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80071da:	f7ff f903 	bl	80063e4 <__ulp>
 80071de:	4602      	mov	r2, r0
 80071e0:	460b      	mov	r3, r1
 80071e2:	4650      	mov	r0, sl
 80071e4:	4659      	mov	r1, fp
 80071e6:	f7f9 f977 	bl	80004d8 <__aeabi_dmul>
 80071ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071ee:	f7f8 ffbd 	bl	800016c <__adddf3>
 80071f2:	4682      	mov	sl, r0
 80071f4:	468b      	mov	fp, r1
 80071f6:	e775      	b.n	80070e4 <_strtod_l+0xa54>
 80071f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80071fc:	e7e0      	b.n	80071c0 <_strtod_l+0xb30>
 80071fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007238 <_strtod_l+0xba8>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 fbda 	bl	80009bc <__aeabi_dcmplt>
 8007208:	e79d      	b.n	8007146 <_strtod_l+0xab6>
 800720a:	2300      	movs	r3, #0
 800720c:	930e      	str	r3, [sp, #56]	@ 0x38
 800720e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007210:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	f7ff ba79 	b.w	800670a <_strtod_l+0x7a>
 8007218:	2a65      	cmp	r2, #101	@ 0x65
 800721a:	f43f ab72 	beq.w	8006902 <_strtod_l+0x272>
 800721e:	2a45      	cmp	r2, #69	@ 0x45
 8007220:	f43f ab6f 	beq.w	8006902 <_strtod_l+0x272>
 8007224:	2301      	movs	r3, #1
 8007226:	f7ff bbaa 	b.w	800697e <_strtod_l+0x2ee>
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w
 8007230:	ffc00000 	.word	0xffc00000
 8007234:	41dfffff 	.word	0x41dfffff
 8007238:	94a03595 	.word	0x94a03595
 800723c:	3fcfffff 	.word	0x3fcfffff

08007240 <_strtod_r>:
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <_strtod_r+0x8>)
 8007242:	f7ff ba25 	b.w	8006690 <_strtod_l>
 8007246:	bf00      	nop
 8007248:	20000068 	.word	0x20000068

0800724c <_strtol_l.isra.0>:
 800724c:	2b24      	cmp	r3, #36	@ 0x24
 800724e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007252:	4686      	mov	lr, r0
 8007254:	4690      	mov	r8, r2
 8007256:	d801      	bhi.n	800725c <_strtol_l.isra.0+0x10>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <_strtol_l.isra.0+0x1e>
 800725c:	f7fd fdac 	bl	8004db8 <__errno>
 8007260:	2316      	movs	r3, #22
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	460d      	mov	r5, r1
 800726c:	4833      	ldr	r0, [pc, #204]	@ (800733c <_strtol_l.isra.0+0xf0>)
 800726e:	462a      	mov	r2, r5
 8007270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007274:	5d06      	ldrb	r6, [r0, r4]
 8007276:	f016 0608 	ands.w	r6, r6, #8
 800727a:	d1f8      	bne.n	800726e <_strtol_l.isra.0+0x22>
 800727c:	2c2d      	cmp	r4, #45	@ 0x2d
 800727e:	d110      	bne.n	80072a2 <_strtol_l.isra.0+0x56>
 8007280:	2601      	movs	r6, #1
 8007282:	782c      	ldrb	r4, [r5, #0]
 8007284:	1c95      	adds	r5, r2, #2
 8007286:	f033 0210 	bics.w	r2, r3, #16
 800728a:	d115      	bne.n	80072b8 <_strtol_l.isra.0+0x6c>
 800728c:	2c30      	cmp	r4, #48	@ 0x30
 800728e:	d10d      	bne.n	80072ac <_strtol_l.isra.0+0x60>
 8007290:	782a      	ldrb	r2, [r5, #0]
 8007292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007296:	2a58      	cmp	r2, #88	@ 0x58
 8007298:	d108      	bne.n	80072ac <_strtol_l.isra.0+0x60>
 800729a:	786c      	ldrb	r4, [r5, #1]
 800729c:	3502      	adds	r5, #2
 800729e:	2310      	movs	r3, #16
 80072a0:	e00a      	b.n	80072b8 <_strtol_l.isra.0+0x6c>
 80072a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80072a4:	bf04      	itt	eq
 80072a6:	782c      	ldrbeq	r4, [r5, #0]
 80072a8:	1c95      	addeq	r5, r2, #2
 80072aa:	e7ec      	b.n	8007286 <_strtol_l.isra.0+0x3a>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f6      	bne.n	800729e <_strtol_l.isra.0+0x52>
 80072b0:	2c30      	cmp	r4, #48	@ 0x30
 80072b2:	bf14      	ite	ne
 80072b4:	230a      	movne	r3, #10
 80072b6:	2308      	moveq	r3, #8
 80072b8:	2200      	movs	r2, #0
 80072ba:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072be:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072c2:	fbbc f9f3 	udiv	r9, ip, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80072cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072d0:	2f09      	cmp	r7, #9
 80072d2:	d80f      	bhi.n	80072f4 <_strtol_l.isra.0+0xa8>
 80072d4:	463c      	mov	r4, r7
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	dd1b      	ble.n	8007312 <_strtol_l.isra.0+0xc6>
 80072da:	1c57      	adds	r7, r2, #1
 80072dc:	d007      	beq.n	80072ee <_strtol_l.isra.0+0xa2>
 80072de:	4581      	cmp	r9, r0
 80072e0:	d314      	bcc.n	800730c <_strtol_l.isra.0+0xc0>
 80072e2:	d101      	bne.n	80072e8 <_strtol_l.isra.0+0x9c>
 80072e4:	45a2      	cmp	sl, r4
 80072e6:	db11      	blt.n	800730c <_strtol_l.isra.0+0xc0>
 80072e8:	2201      	movs	r2, #1
 80072ea:	fb00 4003 	mla	r0, r0, r3, r4
 80072ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f2:	e7eb      	b.n	80072cc <_strtol_l.isra.0+0x80>
 80072f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072f8:	2f19      	cmp	r7, #25
 80072fa:	d801      	bhi.n	8007300 <_strtol_l.isra.0+0xb4>
 80072fc:	3c37      	subs	r4, #55	@ 0x37
 80072fe:	e7ea      	b.n	80072d6 <_strtol_l.isra.0+0x8a>
 8007300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007304:	2f19      	cmp	r7, #25
 8007306:	d804      	bhi.n	8007312 <_strtol_l.isra.0+0xc6>
 8007308:	3c57      	subs	r4, #87	@ 0x57
 800730a:	e7e4      	b.n	80072d6 <_strtol_l.isra.0+0x8a>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	e7ed      	b.n	80072ee <_strtol_l.isra.0+0xa2>
 8007312:	1c53      	adds	r3, r2, #1
 8007314:	d108      	bne.n	8007328 <_strtol_l.isra.0+0xdc>
 8007316:	2322      	movs	r3, #34	@ 0x22
 8007318:	4660      	mov	r0, ip
 800731a:	f8ce 3000 	str.w	r3, [lr]
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d0a0      	beq.n	8007266 <_strtol_l.isra.0+0x1a>
 8007324:	1e69      	subs	r1, r5, #1
 8007326:	e006      	b.n	8007336 <_strtol_l.isra.0+0xea>
 8007328:	b106      	cbz	r6, 800732c <_strtol_l.isra.0+0xe0>
 800732a:	4240      	negs	r0, r0
 800732c:	f1b8 0f00 	cmp.w	r8, #0
 8007330:	d099      	beq.n	8007266 <_strtol_l.isra.0+0x1a>
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1f6      	bne.n	8007324 <_strtol_l.isra.0+0xd8>
 8007336:	f8c8 1000 	str.w	r1, [r8]
 800733a:	e794      	b.n	8007266 <_strtol_l.isra.0+0x1a>
 800733c:	08008e31 	.word	0x08008e31

08007340 <_strtol_r>:
 8007340:	f7ff bf84 	b.w	800724c <_strtol_l.isra.0>

08007344 <__ssputs_r>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	461f      	mov	r7, r3
 800734a:	688e      	ldr	r6, [r1, #8]
 800734c:	4682      	mov	sl, r0
 800734e:	42be      	cmp	r6, r7
 8007350:	460c      	mov	r4, r1
 8007352:	4690      	mov	r8, r2
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	d82d      	bhi.n	80073b4 <__ssputs_r+0x70>
 8007358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800735c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007360:	d026      	beq.n	80073b0 <__ssputs_r+0x6c>
 8007362:	6965      	ldr	r5, [r4, #20]
 8007364:	6909      	ldr	r1, [r1, #16]
 8007366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800736a:	eba3 0901 	sub.w	r9, r3, r1
 800736e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007372:	1c7b      	adds	r3, r7, #1
 8007374:	444b      	add	r3, r9
 8007376:	106d      	asrs	r5, r5, #1
 8007378:	429d      	cmp	r5, r3
 800737a:	bf38      	it	cc
 800737c:	461d      	movcc	r5, r3
 800737e:	0553      	lsls	r3, r2, #21
 8007380:	d527      	bpl.n	80073d2 <__ssputs_r+0x8e>
 8007382:	4629      	mov	r1, r5
 8007384:	f7fe fc36 	bl	8005bf4 <_malloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	b360      	cbz	r0, 80073e6 <__ssputs_r+0xa2>
 800738c:	464a      	mov	r2, r9
 800738e:	6921      	ldr	r1, [r4, #16]
 8007390:	f7fd fd4d 	bl	8004e2e <memcpy>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800739a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	6126      	str	r6, [r4, #16]
 80073a2:	444e      	add	r6, r9
 80073a4:	6026      	str	r6, [r4, #0]
 80073a6:	463e      	mov	r6, r7
 80073a8:	6165      	str	r5, [r4, #20]
 80073aa:	eba5 0509 	sub.w	r5, r5, r9
 80073ae:	60a5      	str	r5, [r4, #8]
 80073b0:	42be      	cmp	r6, r7
 80073b2:	d900      	bls.n	80073b6 <__ssputs_r+0x72>
 80073b4:	463e      	mov	r6, r7
 80073b6:	4632      	mov	r2, r6
 80073b8:	4641      	mov	r1, r8
 80073ba:	6820      	ldr	r0, [r4, #0]
 80073bc:	f000 f9c2 	bl	8007744 <memmove>
 80073c0:	2000      	movs	r0, #0
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	1b9b      	subs	r3, r3, r6
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	4433      	add	r3, r6
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	462a      	mov	r2, r5
 80073d4:	f000 fd75 	bl	8007ec2 <_realloc_r>
 80073d8:	4606      	mov	r6, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	d1e0      	bne.n	80073a0 <__ssputs_r+0x5c>
 80073de:	4650      	mov	r0, sl
 80073e0:	6921      	ldr	r1, [r4, #16]
 80073e2:	f7fe fb95 	bl	8005b10 <_free_r>
 80073e6:	230c      	movs	r3, #12
 80073e8:	f8ca 3000 	str.w	r3, [sl]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f04f 30ff 	mov.w	r0, #4294967295
 80073f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	e7e9      	b.n	80073ce <__ssputs_r+0x8a>
	...

080073fc <_svfiprintf_r>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	4698      	mov	r8, r3
 8007402:	898b      	ldrh	r3, [r1, #12]
 8007404:	4607      	mov	r7, r0
 8007406:	061b      	lsls	r3, r3, #24
 8007408:	460d      	mov	r5, r1
 800740a:	4614      	mov	r4, r2
 800740c:	b09d      	sub	sp, #116	@ 0x74
 800740e:	d510      	bpl.n	8007432 <_svfiprintf_r+0x36>
 8007410:	690b      	ldr	r3, [r1, #16]
 8007412:	b973      	cbnz	r3, 8007432 <_svfiprintf_r+0x36>
 8007414:	2140      	movs	r1, #64	@ 0x40
 8007416:	f7fe fbed 	bl	8005bf4 <_malloc_r>
 800741a:	6028      	str	r0, [r5, #0]
 800741c:	6128      	str	r0, [r5, #16]
 800741e:	b930      	cbnz	r0, 800742e <_svfiprintf_r+0x32>
 8007420:	230c      	movs	r3, #12
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	b01d      	add	sp, #116	@ 0x74
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	2340      	movs	r3, #64	@ 0x40
 8007430:	616b      	str	r3, [r5, #20]
 8007432:	2300      	movs	r3, #0
 8007434:	9309      	str	r3, [sp, #36]	@ 0x24
 8007436:	2320      	movs	r3, #32
 8007438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800743c:	2330      	movs	r3, #48	@ 0x30
 800743e:	f04f 0901 	mov.w	r9, #1
 8007442:	f8cd 800c 	str.w	r8, [sp, #12]
 8007446:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80075e0 <_svfiprintf_r+0x1e4>
 800744a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800744e:	4623      	mov	r3, r4
 8007450:	469a      	mov	sl, r3
 8007452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007456:	b10a      	cbz	r2, 800745c <_svfiprintf_r+0x60>
 8007458:	2a25      	cmp	r2, #37	@ 0x25
 800745a:	d1f9      	bne.n	8007450 <_svfiprintf_r+0x54>
 800745c:	ebba 0b04 	subs.w	fp, sl, r4
 8007460:	d00b      	beq.n	800747a <_svfiprintf_r+0x7e>
 8007462:	465b      	mov	r3, fp
 8007464:	4622      	mov	r2, r4
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ff6b 	bl	8007344 <__ssputs_r>
 800746e:	3001      	adds	r0, #1
 8007470:	f000 80a7 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007476:	445a      	add	r2, fp
 8007478:	9209      	str	r2, [sp, #36]	@ 0x24
 800747a:	f89a 3000 	ldrb.w	r3, [sl]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 809f 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007484:	2300      	movs	r3, #0
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800748e:	f10a 0a01 	add.w	sl, sl, #1
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800749a:	931a      	str	r3, [sp, #104]	@ 0x68
 800749c:	4654      	mov	r4, sl
 800749e:	2205      	movs	r2, #5
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	484e      	ldr	r0, [pc, #312]	@ (80075e0 <_svfiprintf_r+0x1e4>)
 80074a6:	f7fd fcb4 	bl	8004e12 <memchr>
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	b9d8      	cbnz	r0, 80074e6 <_svfiprintf_r+0xea>
 80074ae:	06d0      	lsls	r0, r2, #27
 80074b0:	bf44      	itt	mi
 80074b2:	2320      	movmi	r3, #32
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b8:	0711      	lsls	r1, r2, #28
 80074ba:	bf44      	itt	mi
 80074bc:	232b      	movmi	r3, #43	@ 0x2b
 80074be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c2:	f89a 3000 	ldrb.w	r3, [sl]
 80074c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c8:	d015      	beq.n	80074f6 <_svfiprintf_r+0xfa>
 80074ca:	4654      	mov	r4, sl
 80074cc:	2000      	movs	r0, #0
 80074ce:	f04f 0c0a 	mov.w	ip, #10
 80074d2:	9a07      	ldr	r2, [sp, #28]
 80074d4:	4621      	mov	r1, r4
 80074d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074da:	3b30      	subs	r3, #48	@ 0x30
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d94b      	bls.n	8007578 <_svfiprintf_r+0x17c>
 80074e0:	b1b0      	cbz	r0, 8007510 <_svfiprintf_r+0x114>
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	e014      	b.n	8007510 <_svfiprintf_r+0x114>
 80074e6:	eba0 0308 	sub.w	r3, r0, r8
 80074ea:	fa09 f303 	lsl.w	r3, r9, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	46a2      	mov	sl, r4
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	e7d2      	b.n	800749c <_svfiprintf_r+0xa0>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9103      	str	r1, [sp, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfbb      	ittet	lt
 8007502:	425b      	neglt	r3, r3
 8007504:	f042 0202 	orrlt.w	r2, r2, #2
 8007508:	9307      	strge	r3, [sp, #28]
 800750a:	9307      	strlt	r3, [sp, #28]
 800750c:	bfb8      	it	lt
 800750e:	9204      	strlt	r2, [sp, #16]
 8007510:	7823      	ldrb	r3, [r4, #0]
 8007512:	2b2e      	cmp	r3, #46	@ 0x2e
 8007514:	d10a      	bne.n	800752c <_svfiprintf_r+0x130>
 8007516:	7863      	ldrb	r3, [r4, #1]
 8007518:	2b2a      	cmp	r3, #42	@ 0x2a
 800751a:	d132      	bne.n	8007582 <_svfiprintf_r+0x186>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	3402      	adds	r4, #2
 8007520:	1d1a      	adds	r2, r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	9203      	str	r2, [sp, #12]
 8007526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80075e4 <_svfiprintf_r+0x1e8>
 8007530:	2203      	movs	r2, #3
 8007532:	4650      	mov	r0, sl
 8007534:	7821      	ldrb	r1, [r4, #0]
 8007536:	f7fd fc6c 	bl	8004e12 <memchr>
 800753a:	b138      	cbz	r0, 800754c <_svfiprintf_r+0x150>
 800753c:	2240      	movs	r2, #64	@ 0x40
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	eba0 000a 	sub.w	r0, r0, sl
 8007544:	4082      	lsls	r2, r0
 8007546:	4313      	orrs	r3, r2
 8007548:	3401      	adds	r4, #1
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	2206      	movs	r2, #6
 8007552:	4825      	ldr	r0, [pc, #148]	@ (80075e8 <_svfiprintf_r+0x1ec>)
 8007554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007558:	f7fd fc5b 	bl	8004e12 <memchr>
 800755c:	2800      	cmp	r0, #0
 800755e:	d036      	beq.n	80075ce <_svfiprintf_r+0x1d2>
 8007560:	4b22      	ldr	r3, [pc, #136]	@ (80075ec <_svfiprintf_r+0x1f0>)
 8007562:	bb1b      	cbnz	r3, 80075ac <_svfiprintf_r+0x1b0>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	3307      	adds	r3, #7
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	3308      	adds	r3, #8
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007572:	4433      	add	r3, r6
 8007574:	9309      	str	r3, [sp, #36]	@ 0x24
 8007576:	e76a      	b.n	800744e <_svfiprintf_r+0x52>
 8007578:	460c      	mov	r4, r1
 800757a:	2001      	movs	r0, #1
 800757c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007580:	e7a8      	b.n	80074d4 <_svfiprintf_r+0xd8>
 8007582:	2300      	movs	r3, #0
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	4619      	mov	r1, r3
 800758a:	3401      	adds	r4, #1
 800758c:	9305      	str	r3, [sp, #20]
 800758e:	4620      	mov	r0, r4
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	@ 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_svfiprintf_r+0x1a6>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c6      	beq.n	800752c <_svfiprintf_r+0x130>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c4      	b.n	800752c <_svfiprintf_r+0x130>
 80075a2:	4604      	mov	r4, r0
 80075a4:	2301      	movs	r3, #1
 80075a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80075aa:	e7f0      	b.n	800758e <_svfiprintf_r+0x192>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4638      	mov	r0, r7
 80075b4:	4b0e      	ldr	r3, [pc, #56]	@ (80075f0 <_svfiprintf_r+0x1f4>)
 80075b6:	a904      	add	r1, sp, #16
 80075b8:	f7fc fcbe 	bl	8003f38 <_printf_float>
 80075bc:	1c42      	adds	r2, r0, #1
 80075be:	4606      	mov	r6, r0
 80075c0:	d1d6      	bne.n	8007570 <_svfiprintf_r+0x174>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	065b      	lsls	r3, r3, #25
 80075c6:	f53f af2d 	bmi.w	8007424 <_svfiprintf_r+0x28>
 80075ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075cc:	e72c      	b.n	8007428 <_svfiprintf_r+0x2c>
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	462a      	mov	r2, r5
 80075d4:	4638      	mov	r0, r7
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <_svfiprintf_r+0x1f4>)
 80075d8:	a904      	add	r1, sp, #16
 80075da:	f7fc ff4b 	bl	8004474 <_printf_i>
 80075de:	e7ed      	b.n	80075bc <_svfiprintf_r+0x1c0>
 80075e0:	08008c2f 	.word	0x08008c2f
 80075e4:	08008c35 	.word	0x08008c35
 80075e8:	08008c39 	.word	0x08008c39
 80075ec:	08003f39 	.word	0x08003f39
 80075f0:	08007345 	.word	0x08007345

080075f4 <__sflush_r>:
 80075f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	0716      	lsls	r6, r2, #28
 80075fc:	4605      	mov	r5, r0
 80075fe:	460c      	mov	r4, r1
 8007600:	d454      	bmi.n	80076ac <__sflush_r+0xb8>
 8007602:	684b      	ldr	r3, [r1, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc02      	bgt.n	800760e <__sflush_r+0x1a>
 8007608:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	dd48      	ble.n	80076a0 <__sflush_r+0xac>
 800760e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007610:	2e00      	cmp	r6, #0
 8007612:	d045      	beq.n	80076a0 <__sflush_r+0xac>
 8007614:	2300      	movs	r3, #0
 8007616:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800761a:	682f      	ldr	r7, [r5, #0]
 800761c:	6a21      	ldr	r1, [r4, #32]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	d030      	beq.n	8007684 <__sflush_r+0x90>
 8007622:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	0759      	lsls	r1, r3, #29
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x42>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	1ad2      	subs	r2, r2, r3
 800762e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007630:	b10b      	cbz	r3, 8007636 <__sflush_r+0x42>
 8007632:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007634:	1ad2      	subs	r2, r2, r3
 8007636:	2300      	movs	r3, #0
 8007638:	4628      	mov	r0, r5
 800763a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	47b0      	blx	r6
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	d106      	bne.n	8007654 <__sflush_r+0x60>
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	291d      	cmp	r1, #29
 800764a:	d82b      	bhi.n	80076a4 <__sflush_r+0xb0>
 800764c:	4a28      	ldr	r2, [pc, #160]	@ (80076f0 <__sflush_r+0xfc>)
 800764e:	40ca      	lsrs	r2, r1
 8007650:	07d6      	lsls	r6, r2, #31
 8007652:	d527      	bpl.n	80076a4 <__sflush_r+0xb0>
 8007654:	2200      	movs	r2, #0
 8007656:	6062      	str	r2, [r4, #4]
 8007658:	6922      	ldr	r2, [r4, #16]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6022      	str	r2, [r4, #0]
 800765e:	d504      	bpl.n	800766a <__sflush_r+0x76>
 8007660:	1c42      	adds	r2, r0, #1
 8007662:	d101      	bne.n	8007668 <__sflush_r+0x74>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b903      	cbnz	r3, 800766a <__sflush_r+0x76>
 8007668:	6560      	str	r0, [r4, #84]	@ 0x54
 800766a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800766c:	602f      	str	r7, [r5, #0]
 800766e:	b1b9      	cbz	r1, 80076a0 <__sflush_r+0xac>
 8007670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007674:	4299      	cmp	r1, r3
 8007676:	d002      	beq.n	800767e <__sflush_r+0x8a>
 8007678:	4628      	mov	r0, r5
 800767a:	f7fe fa49 	bl	8005b10 <_free_r>
 800767e:	2300      	movs	r3, #0
 8007680:	6363      	str	r3, [r4, #52]	@ 0x34
 8007682:	e00d      	b.n	80076a0 <__sflush_r+0xac>
 8007684:	2301      	movs	r3, #1
 8007686:	4628      	mov	r0, r5
 8007688:	47b0      	blx	r6
 800768a:	4602      	mov	r2, r0
 800768c:	1c50      	adds	r0, r2, #1
 800768e:	d1c9      	bne.n	8007624 <__sflush_r+0x30>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0c6      	beq.n	8007624 <__sflush_r+0x30>
 8007696:	2b1d      	cmp	r3, #29
 8007698:	d001      	beq.n	800769e <__sflush_r+0xaa>
 800769a:	2b16      	cmp	r3, #22
 800769c:	d11d      	bne.n	80076da <__sflush_r+0xe6>
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	2000      	movs	r0, #0
 80076a2:	e021      	b.n	80076e8 <__sflush_r+0xf4>
 80076a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076a8:	b21b      	sxth	r3, r3
 80076aa:	e01a      	b.n	80076e2 <__sflush_r+0xee>
 80076ac:	690f      	ldr	r7, [r1, #16]
 80076ae:	2f00      	cmp	r7, #0
 80076b0:	d0f6      	beq.n	80076a0 <__sflush_r+0xac>
 80076b2:	0793      	lsls	r3, r2, #30
 80076b4:	bf18      	it	ne
 80076b6:	2300      	movne	r3, #0
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	1bf6      	subs	r6, r6, r7
 80076c0:	600f      	str	r7, [r1, #0]
 80076c2:	608b      	str	r3, [r1, #8]
 80076c4:	2e00      	cmp	r6, #0
 80076c6:	ddeb      	ble.n	80076a0 <__sflush_r+0xac>
 80076c8:	4633      	mov	r3, r6
 80076ca:	463a      	mov	r2, r7
 80076cc:	4628      	mov	r0, r5
 80076ce:	6a21      	ldr	r1, [r4, #32]
 80076d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80076d4:	47e0      	blx	ip
 80076d6:	2800      	cmp	r0, #0
 80076d8:	dc07      	bgt.n	80076ea <__sflush_r+0xf6>
 80076da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e2:	f04f 30ff 	mov.w	r0, #4294967295
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ea:	4407      	add	r7, r0
 80076ec:	1a36      	subs	r6, r6, r0
 80076ee:	e7e9      	b.n	80076c4 <__sflush_r+0xd0>
 80076f0:	20400001 	.word	0x20400001

080076f4 <_fflush_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	690b      	ldr	r3, [r1, #16]
 80076f8:	4605      	mov	r5, r0
 80076fa:	460c      	mov	r4, r1
 80076fc:	b913      	cbnz	r3, 8007704 <_fflush_r+0x10>
 80076fe:	2500      	movs	r5, #0
 8007700:	4628      	mov	r0, r5
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	b118      	cbz	r0, 800770e <_fflush_r+0x1a>
 8007706:	6a03      	ldr	r3, [r0, #32]
 8007708:	b90b      	cbnz	r3, 800770e <_fflush_r+0x1a>
 800770a:	f7fd fa67 	bl	8004bdc <__sinit>
 800770e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0f3      	beq.n	80076fe <_fflush_r+0xa>
 8007716:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007718:	07d0      	lsls	r0, r2, #31
 800771a:	d404      	bmi.n	8007726 <_fflush_r+0x32>
 800771c:	0599      	lsls	r1, r3, #22
 800771e:	d402      	bmi.n	8007726 <_fflush_r+0x32>
 8007720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007722:	f7fd fb74 	bl	8004e0e <__retarget_lock_acquire_recursive>
 8007726:	4628      	mov	r0, r5
 8007728:	4621      	mov	r1, r4
 800772a:	f7ff ff63 	bl	80075f4 <__sflush_r>
 800772e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007730:	4605      	mov	r5, r0
 8007732:	07da      	lsls	r2, r3, #31
 8007734:	d4e4      	bmi.n	8007700 <_fflush_r+0xc>
 8007736:	89a3      	ldrh	r3, [r4, #12]
 8007738:	059b      	lsls	r3, r3, #22
 800773a:	d4e1      	bmi.n	8007700 <_fflush_r+0xc>
 800773c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800773e:	f7fd fb67 	bl	8004e10 <__retarget_lock_release_recursive>
 8007742:	e7dd      	b.n	8007700 <_fflush_r+0xc>

08007744 <memmove>:
 8007744:	4288      	cmp	r0, r1
 8007746:	b510      	push	{r4, lr}
 8007748:	eb01 0402 	add.w	r4, r1, r2
 800774c:	d902      	bls.n	8007754 <memmove+0x10>
 800774e:	4284      	cmp	r4, r0
 8007750:	4623      	mov	r3, r4
 8007752:	d807      	bhi.n	8007764 <memmove+0x20>
 8007754:	1e43      	subs	r3, r0, #1
 8007756:	42a1      	cmp	r1, r4
 8007758:	d008      	beq.n	800776c <memmove+0x28>
 800775a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800775e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007762:	e7f8      	b.n	8007756 <memmove+0x12>
 8007764:	4601      	mov	r1, r0
 8007766:	4402      	add	r2, r0
 8007768:	428a      	cmp	r2, r1
 800776a:	d100      	bne.n	800776e <memmove+0x2a>
 800776c:	bd10      	pop	{r4, pc}
 800776e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007772:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007776:	e7f7      	b.n	8007768 <memmove+0x24>

08007778 <strncmp>:
 8007778:	b510      	push	{r4, lr}
 800777a:	b16a      	cbz	r2, 8007798 <strncmp+0x20>
 800777c:	3901      	subs	r1, #1
 800777e:	1884      	adds	r4, r0, r2
 8007780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007784:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007788:	429a      	cmp	r2, r3
 800778a:	d103      	bne.n	8007794 <strncmp+0x1c>
 800778c:	42a0      	cmp	r0, r4
 800778e:	d001      	beq.n	8007794 <strncmp+0x1c>
 8007790:	2a00      	cmp	r2, #0
 8007792:	d1f5      	bne.n	8007780 <strncmp+0x8>
 8007794:	1ad0      	subs	r0, r2, r3
 8007796:	bd10      	pop	{r4, pc}
 8007798:	4610      	mov	r0, r2
 800779a:	e7fc      	b.n	8007796 <strncmp+0x1e>

0800779c <_sbrk_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	2300      	movs	r3, #0
 80077a0:	4d05      	ldr	r5, [pc, #20]	@ (80077b8 <_sbrk_r+0x1c>)
 80077a2:	4604      	mov	r4, r0
 80077a4:	4608      	mov	r0, r1
 80077a6:	602b      	str	r3, [r5, #0]
 80077a8:	f7fa f8e6 	bl	8001978 <_sbrk>
 80077ac:	1c43      	adds	r3, r0, #1
 80077ae:	d102      	bne.n	80077b6 <_sbrk_r+0x1a>
 80077b0:	682b      	ldr	r3, [r5, #0]
 80077b2:	b103      	cbz	r3, 80077b6 <_sbrk_r+0x1a>
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	20000840 	.word	0x20000840

080077bc <nan>:
 80077bc:	2000      	movs	r0, #0
 80077be:	4901      	ldr	r1, [pc, #4]	@ (80077c4 <nan+0x8>)
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	7ff80000 	.word	0x7ff80000

080077c8 <__assert_func>:
 80077c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ca:	4614      	mov	r4, r2
 80077cc:	461a      	mov	r2, r3
 80077ce:	4b09      	ldr	r3, [pc, #36]	@ (80077f4 <__assert_func+0x2c>)
 80077d0:	4605      	mov	r5, r0
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68d8      	ldr	r0, [r3, #12]
 80077d6:	b14c      	cbz	r4, 80077ec <__assert_func+0x24>
 80077d8:	4b07      	ldr	r3, [pc, #28]	@ (80077f8 <__assert_func+0x30>)
 80077da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077de:	9100      	str	r1, [sp, #0]
 80077e0:	462b      	mov	r3, r5
 80077e2:	4906      	ldr	r1, [pc, #24]	@ (80077fc <__assert_func+0x34>)
 80077e4:	f000 fba8 	bl	8007f38 <fiprintf>
 80077e8:	f000 fbb8 	bl	8007f5c <abort>
 80077ec:	4b04      	ldr	r3, [pc, #16]	@ (8007800 <__assert_func+0x38>)
 80077ee:	461c      	mov	r4, r3
 80077f0:	e7f3      	b.n	80077da <__assert_func+0x12>
 80077f2:	bf00      	nop
 80077f4:	20000018 	.word	0x20000018
 80077f8:	08008c48 	.word	0x08008c48
 80077fc:	08008c55 	.word	0x08008c55
 8007800:	08008c83 	.word	0x08008c83

08007804 <_calloc_r>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	fba1 5402 	umull	r5, r4, r1, r2
 800780a:	b934      	cbnz	r4, 800781a <_calloc_r+0x16>
 800780c:	4629      	mov	r1, r5
 800780e:	f7fe f9f1 	bl	8005bf4 <_malloc_r>
 8007812:	4606      	mov	r6, r0
 8007814:	b928      	cbnz	r0, 8007822 <_calloc_r+0x1e>
 8007816:	4630      	mov	r0, r6
 8007818:	bd70      	pop	{r4, r5, r6, pc}
 800781a:	220c      	movs	r2, #12
 800781c:	2600      	movs	r6, #0
 800781e:	6002      	str	r2, [r0, #0]
 8007820:	e7f9      	b.n	8007816 <_calloc_r+0x12>
 8007822:	462a      	mov	r2, r5
 8007824:	4621      	mov	r1, r4
 8007826:	f7fd fa74 	bl	8004d12 <memset>
 800782a:	e7f4      	b.n	8007816 <_calloc_r+0x12>

0800782c <rshift>:
 800782c:	6903      	ldr	r3, [r0, #16]
 800782e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007832:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007836:	f100 0414 	add.w	r4, r0, #20
 800783a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800783e:	dd46      	ble.n	80078ce <rshift+0xa2>
 8007840:	f011 011f 	ands.w	r1, r1, #31
 8007844:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007848:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800784c:	d10c      	bne.n	8007868 <rshift+0x3c>
 800784e:	4629      	mov	r1, r5
 8007850:	f100 0710 	add.w	r7, r0, #16
 8007854:	42b1      	cmp	r1, r6
 8007856:	d335      	bcc.n	80078c4 <rshift+0x98>
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	1eea      	subs	r2, r5, #3
 800785e:	4296      	cmp	r6, r2
 8007860:	bf38      	it	cc
 8007862:	2300      	movcc	r3, #0
 8007864:	4423      	add	r3, r4
 8007866:	e015      	b.n	8007894 <rshift+0x68>
 8007868:	46a1      	mov	r9, r4
 800786a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800786e:	f1c1 0820 	rsb	r8, r1, #32
 8007872:	40cf      	lsrs	r7, r1
 8007874:	f105 0e04 	add.w	lr, r5, #4
 8007878:	4576      	cmp	r6, lr
 800787a:	46f4      	mov	ip, lr
 800787c:	d816      	bhi.n	80078ac <rshift+0x80>
 800787e:	1a9a      	subs	r2, r3, r2
 8007880:	0092      	lsls	r2, r2, #2
 8007882:	3a04      	subs	r2, #4
 8007884:	3501      	adds	r5, #1
 8007886:	42ae      	cmp	r6, r5
 8007888:	bf38      	it	cc
 800788a:	2200      	movcc	r2, #0
 800788c:	18a3      	adds	r3, r4, r2
 800788e:	50a7      	str	r7, [r4, r2]
 8007890:	b107      	cbz	r7, 8007894 <rshift+0x68>
 8007892:	3304      	adds	r3, #4
 8007894:	42a3      	cmp	r3, r4
 8007896:	eba3 0204 	sub.w	r2, r3, r4
 800789a:	bf08      	it	eq
 800789c:	2300      	moveq	r3, #0
 800789e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80078a2:	6102      	str	r2, [r0, #16]
 80078a4:	bf08      	it	eq
 80078a6:	6143      	streq	r3, [r0, #20]
 80078a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ac:	f8dc c000 	ldr.w	ip, [ip]
 80078b0:	fa0c fc08 	lsl.w	ip, ip, r8
 80078b4:	ea4c 0707 	orr.w	r7, ip, r7
 80078b8:	f849 7b04 	str.w	r7, [r9], #4
 80078bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078c0:	40cf      	lsrs	r7, r1
 80078c2:	e7d9      	b.n	8007878 <rshift+0x4c>
 80078c4:	f851 cb04 	ldr.w	ip, [r1], #4
 80078c8:	f847 cf04 	str.w	ip, [r7, #4]!
 80078cc:	e7c2      	b.n	8007854 <rshift+0x28>
 80078ce:	4623      	mov	r3, r4
 80078d0:	e7e0      	b.n	8007894 <rshift+0x68>

080078d2 <__hexdig_fun>:
 80078d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80078d6:	2b09      	cmp	r3, #9
 80078d8:	d802      	bhi.n	80078e0 <__hexdig_fun+0xe>
 80078da:	3820      	subs	r0, #32
 80078dc:	b2c0      	uxtb	r0, r0
 80078de:	4770      	bx	lr
 80078e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d801      	bhi.n	80078ec <__hexdig_fun+0x1a>
 80078e8:	3847      	subs	r0, #71	@ 0x47
 80078ea:	e7f7      	b.n	80078dc <__hexdig_fun+0xa>
 80078ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d801      	bhi.n	80078f8 <__hexdig_fun+0x26>
 80078f4:	3827      	subs	r0, #39	@ 0x27
 80078f6:	e7f1      	b.n	80078dc <__hexdig_fun+0xa>
 80078f8:	2000      	movs	r0, #0
 80078fa:	4770      	bx	lr

080078fc <__gethex>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	468a      	mov	sl, r1
 8007902:	4690      	mov	r8, r2
 8007904:	b085      	sub	sp, #20
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	680b      	ldr	r3, [r1, #0]
 800790a:	9001      	str	r0, [sp, #4]
 800790c:	1c9c      	adds	r4, r3, #2
 800790e:	46a1      	mov	r9, r4
 8007910:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007914:	2830      	cmp	r0, #48	@ 0x30
 8007916:	d0fa      	beq.n	800790e <__gethex+0x12>
 8007918:	eba9 0303 	sub.w	r3, r9, r3
 800791c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007920:	f7ff ffd7 	bl	80078d2 <__hexdig_fun>
 8007924:	4605      	mov	r5, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	d168      	bne.n	80079fc <__gethex+0x100>
 800792a:	2201      	movs	r2, #1
 800792c:	4648      	mov	r0, r9
 800792e:	499f      	ldr	r1, [pc, #636]	@ (8007bac <__gethex+0x2b0>)
 8007930:	f7ff ff22 	bl	8007778 <strncmp>
 8007934:	4607      	mov	r7, r0
 8007936:	2800      	cmp	r0, #0
 8007938:	d167      	bne.n	8007a0a <__gethex+0x10e>
 800793a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800793e:	4626      	mov	r6, r4
 8007940:	f7ff ffc7 	bl	80078d2 <__hexdig_fun>
 8007944:	2800      	cmp	r0, #0
 8007946:	d062      	beq.n	8007a0e <__gethex+0x112>
 8007948:	4623      	mov	r3, r4
 800794a:	7818      	ldrb	r0, [r3, #0]
 800794c:	4699      	mov	r9, r3
 800794e:	2830      	cmp	r0, #48	@ 0x30
 8007950:	f103 0301 	add.w	r3, r3, #1
 8007954:	d0f9      	beq.n	800794a <__gethex+0x4e>
 8007956:	f7ff ffbc 	bl	80078d2 <__hexdig_fun>
 800795a:	fab0 f580 	clz	r5, r0
 800795e:	f04f 0b01 	mov.w	fp, #1
 8007962:	096d      	lsrs	r5, r5, #5
 8007964:	464a      	mov	r2, r9
 8007966:	4616      	mov	r6, r2
 8007968:	7830      	ldrb	r0, [r6, #0]
 800796a:	3201      	adds	r2, #1
 800796c:	f7ff ffb1 	bl	80078d2 <__hexdig_fun>
 8007970:	2800      	cmp	r0, #0
 8007972:	d1f8      	bne.n	8007966 <__gethex+0x6a>
 8007974:	2201      	movs	r2, #1
 8007976:	4630      	mov	r0, r6
 8007978:	498c      	ldr	r1, [pc, #560]	@ (8007bac <__gethex+0x2b0>)
 800797a:	f7ff fefd 	bl	8007778 <strncmp>
 800797e:	2800      	cmp	r0, #0
 8007980:	d13f      	bne.n	8007a02 <__gethex+0x106>
 8007982:	b944      	cbnz	r4, 8007996 <__gethex+0x9a>
 8007984:	1c74      	adds	r4, r6, #1
 8007986:	4622      	mov	r2, r4
 8007988:	4616      	mov	r6, r2
 800798a:	7830      	ldrb	r0, [r6, #0]
 800798c:	3201      	adds	r2, #1
 800798e:	f7ff ffa0 	bl	80078d2 <__hexdig_fun>
 8007992:	2800      	cmp	r0, #0
 8007994:	d1f8      	bne.n	8007988 <__gethex+0x8c>
 8007996:	1ba4      	subs	r4, r4, r6
 8007998:	00a7      	lsls	r7, r4, #2
 800799a:	7833      	ldrb	r3, [r6, #0]
 800799c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80079a0:	2b50      	cmp	r3, #80	@ 0x50
 80079a2:	d13e      	bne.n	8007a22 <__gethex+0x126>
 80079a4:	7873      	ldrb	r3, [r6, #1]
 80079a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80079a8:	d033      	beq.n	8007a12 <__gethex+0x116>
 80079aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80079ac:	d034      	beq.n	8007a18 <__gethex+0x11c>
 80079ae:	2400      	movs	r4, #0
 80079b0:	1c71      	adds	r1, r6, #1
 80079b2:	7808      	ldrb	r0, [r1, #0]
 80079b4:	f7ff ff8d 	bl	80078d2 <__hexdig_fun>
 80079b8:	1e43      	subs	r3, r0, #1
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b18      	cmp	r3, #24
 80079be:	d830      	bhi.n	8007a22 <__gethex+0x126>
 80079c0:	f1a0 0210 	sub.w	r2, r0, #16
 80079c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80079c8:	f7ff ff83 	bl	80078d2 <__hexdig_fun>
 80079cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80079d0:	fa5f fc8c 	uxtb.w	ip, ip
 80079d4:	f1bc 0f18 	cmp.w	ip, #24
 80079d8:	f04f 030a 	mov.w	r3, #10
 80079dc:	d91e      	bls.n	8007a1c <__gethex+0x120>
 80079de:	b104      	cbz	r4, 80079e2 <__gethex+0xe6>
 80079e0:	4252      	negs	r2, r2
 80079e2:	4417      	add	r7, r2
 80079e4:	f8ca 1000 	str.w	r1, [sl]
 80079e8:	b1ed      	cbz	r5, 8007a26 <__gethex+0x12a>
 80079ea:	f1bb 0f00 	cmp.w	fp, #0
 80079ee:	bf0c      	ite	eq
 80079f0:	2506      	moveq	r5, #6
 80079f2:	2500      	movne	r5, #0
 80079f4:	4628      	mov	r0, r5
 80079f6:	b005      	add	sp, #20
 80079f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fc:	2500      	movs	r5, #0
 80079fe:	462c      	mov	r4, r5
 8007a00:	e7b0      	b.n	8007964 <__gethex+0x68>
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	d1c7      	bne.n	8007996 <__gethex+0x9a>
 8007a06:	4627      	mov	r7, r4
 8007a08:	e7c7      	b.n	800799a <__gethex+0x9e>
 8007a0a:	464e      	mov	r6, r9
 8007a0c:	462f      	mov	r7, r5
 8007a0e:	2501      	movs	r5, #1
 8007a10:	e7c3      	b.n	800799a <__gethex+0x9e>
 8007a12:	2400      	movs	r4, #0
 8007a14:	1cb1      	adds	r1, r6, #2
 8007a16:	e7cc      	b.n	80079b2 <__gethex+0xb6>
 8007a18:	2401      	movs	r4, #1
 8007a1a:	e7fb      	b.n	8007a14 <__gethex+0x118>
 8007a1c:	fb03 0002 	mla	r0, r3, r2, r0
 8007a20:	e7ce      	b.n	80079c0 <__gethex+0xc4>
 8007a22:	4631      	mov	r1, r6
 8007a24:	e7de      	b.n	80079e4 <__gethex+0xe8>
 8007a26:	4629      	mov	r1, r5
 8007a28:	eba6 0309 	sub.w	r3, r6, r9
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	2b07      	cmp	r3, #7
 8007a30:	dc0a      	bgt.n	8007a48 <__gethex+0x14c>
 8007a32:	9801      	ldr	r0, [sp, #4]
 8007a34:	f7fe f96a 	bl	8005d0c <_Balloc>
 8007a38:	4604      	mov	r4, r0
 8007a3a:	b940      	cbnz	r0, 8007a4e <__gethex+0x152>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	21e4      	movs	r1, #228	@ 0xe4
 8007a40:	4b5b      	ldr	r3, [pc, #364]	@ (8007bb0 <__gethex+0x2b4>)
 8007a42:	485c      	ldr	r0, [pc, #368]	@ (8007bb4 <__gethex+0x2b8>)
 8007a44:	f7ff fec0 	bl	80077c8 <__assert_func>
 8007a48:	3101      	adds	r1, #1
 8007a4a:	105b      	asrs	r3, r3, #1
 8007a4c:	e7ef      	b.n	8007a2e <__gethex+0x132>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f100 0a14 	add.w	sl, r0, #20
 8007a54:	4655      	mov	r5, sl
 8007a56:	469b      	mov	fp, r3
 8007a58:	45b1      	cmp	r9, r6
 8007a5a:	d337      	bcc.n	8007acc <__gethex+0x1d0>
 8007a5c:	f845 bb04 	str.w	fp, [r5], #4
 8007a60:	eba5 050a 	sub.w	r5, r5, sl
 8007a64:	10ad      	asrs	r5, r5, #2
 8007a66:	6125      	str	r5, [r4, #16]
 8007a68:	4658      	mov	r0, fp
 8007a6a:	f7fe fa41 	bl	8005ef0 <__hi0bits>
 8007a6e:	016d      	lsls	r5, r5, #5
 8007a70:	f8d8 6000 	ldr.w	r6, [r8]
 8007a74:	1a2d      	subs	r5, r5, r0
 8007a76:	42b5      	cmp	r5, r6
 8007a78:	dd54      	ble.n	8007b24 <__gethex+0x228>
 8007a7a:	1bad      	subs	r5, r5, r6
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7fe fdc3 	bl	800660a <__any_on>
 8007a84:	4681      	mov	r9, r0
 8007a86:	b178      	cbz	r0, 8007aa8 <__gethex+0x1ac>
 8007a88:	f04f 0901 	mov.w	r9, #1
 8007a8c:	1e6b      	subs	r3, r5, #1
 8007a8e:	1159      	asrs	r1, r3, #5
 8007a90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007a94:	f003 021f 	and.w	r2, r3, #31
 8007a98:	fa09 f202 	lsl.w	r2, r9, r2
 8007a9c:	420a      	tst	r2, r1
 8007a9e:	d003      	beq.n	8007aa8 <__gethex+0x1ac>
 8007aa0:	454b      	cmp	r3, r9
 8007aa2:	dc36      	bgt.n	8007b12 <__gethex+0x216>
 8007aa4:	f04f 0902 	mov.w	r9, #2
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f7ff febe 	bl	800782c <rshift>
 8007ab0:	442f      	add	r7, r5
 8007ab2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ab6:	42bb      	cmp	r3, r7
 8007ab8:	da42      	bge.n	8007b40 <__gethex+0x244>
 8007aba:	4621      	mov	r1, r4
 8007abc:	9801      	ldr	r0, [sp, #4]
 8007abe:	f7fe f965 	bl	8005d8c <_Bfree>
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ac6:	25a3      	movs	r5, #163	@ 0xa3
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e793      	b.n	80079f4 <__gethex+0xf8>
 8007acc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ad0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007ad2:	d012      	beq.n	8007afa <__gethex+0x1fe>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d104      	bne.n	8007ae2 <__gethex+0x1e6>
 8007ad8:	f845 bb04 	str.w	fp, [r5], #4
 8007adc:	f04f 0b00 	mov.w	fp, #0
 8007ae0:	465b      	mov	r3, fp
 8007ae2:	7830      	ldrb	r0, [r6, #0]
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	f7ff fef4 	bl	80078d2 <__hexdig_fun>
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	f000 000f 	and.w	r0, r0, #15
 8007af0:	4098      	lsls	r0, r3
 8007af2:	ea4b 0b00 	orr.w	fp, fp, r0
 8007af6:	3304      	adds	r3, #4
 8007af8:	e7ae      	b.n	8007a58 <__gethex+0x15c>
 8007afa:	45b1      	cmp	r9, r6
 8007afc:	d8ea      	bhi.n	8007ad4 <__gethex+0x1d8>
 8007afe:	2201      	movs	r2, #1
 8007b00:	4630      	mov	r0, r6
 8007b02:	492a      	ldr	r1, [pc, #168]	@ (8007bac <__gethex+0x2b0>)
 8007b04:	9303      	str	r3, [sp, #12]
 8007b06:	f7ff fe37 	bl	8007778 <strncmp>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d1e1      	bne.n	8007ad4 <__gethex+0x1d8>
 8007b10:	e7a2      	b.n	8007a58 <__gethex+0x15c>
 8007b12:	4620      	mov	r0, r4
 8007b14:	1ea9      	subs	r1, r5, #2
 8007b16:	f7fe fd78 	bl	800660a <__any_on>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d0c2      	beq.n	8007aa4 <__gethex+0x1a8>
 8007b1e:	f04f 0903 	mov.w	r9, #3
 8007b22:	e7c1      	b.n	8007aa8 <__gethex+0x1ac>
 8007b24:	da09      	bge.n	8007b3a <__gethex+0x23e>
 8007b26:	1b75      	subs	r5, r6, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	462a      	mov	r2, r5
 8007b2c:	9801      	ldr	r0, [sp, #4]
 8007b2e:	f7fe fb3d 	bl	80061ac <__lshift>
 8007b32:	4604      	mov	r4, r0
 8007b34:	1b7f      	subs	r7, r7, r5
 8007b36:	f100 0a14 	add.w	sl, r0, #20
 8007b3a:	f04f 0900 	mov.w	r9, #0
 8007b3e:	e7b8      	b.n	8007ab2 <__gethex+0x1b6>
 8007b40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b44:	42bd      	cmp	r5, r7
 8007b46:	dd6f      	ble.n	8007c28 <__gethex+0x32c>
 8007b48:	1bed      	subs	r5, r5, r7
 8007b4a:	42ae      	cmp	r6, r5
 8007b4c:	dc34      	bgt.n	8007bb8 <__gethex+0x2bc>
 8007b4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d022      	beq.n	8007b9c <__gethex+0x2a0>
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d024      	beq.n	8007ba4 <__gethex+0x2a8>
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d115      	bne.n	8007b8a <__gethex+0x28e>
 8007b5e:	42ae      	cmp	r6, r5
 8007b60:	d113      	bne.n	8007b8a <__gethex+0x28e>
 8007b62:	2e01      	cmp	r6, #1
 8007b64:	d10b      	bne.n	8007b7e <__gethex+0x282>
 8007b66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b6a:	9a02      	ldr	r2, [sp, #8]
 8007b6c:	2562      	movs	r5, #98	@ 0x62
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	2301      	movs	r3, #1
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	f8ca 3000 	str.w	r3, [sl]
 8007b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b7a:	601c      	str	r4, [r3, #0]
 8007b7c:	e73a      	b.n	80079f4 <__gethex+0xf8>
 8007b7e:	4620      	mov	r0, r4
 8007b80:	1e71      	subs	r1, r6, #1
 8007b82:	f7fe fd42 	bl	800660a <__any_on>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	d1ed      	bne.n	8007b66 <__gethex+0x26a>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	9801      	ldr	r0, [sp, #4]
 8007b8e:	f7fe f8fd 	bl	8005d8c <_Bfree>
 8007b92:	2300      	movs	r3, #0
 8007b94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b96:	2550      	movs	r5, #80	@ 0x50
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	e72b      	b.n	80079f4 <__gethex+0xf8>
 8007b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f3      	bne.n	8007b8a <__gethex+0x28e>
 8007ba2:	e7e0      	b.n	8007b66 <__gethex+0x26a>
 8007ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1dd      	bne.n	8007b66 <__gethex+0x26a>
 8007baa:	e7ee      	b.n	8007b8a <__gethex+0x28e>
 8007bac:	08008c2d 	.word	0x08008c2d
 8007bb0:	08008bc3 	.word	0x08008bc3
 8007bb4:	08008c84 	.word	0x08008c84
 8007bb8:	1e6f      	subs	r7, r5, #1
 8007bba:	f1b9 0f00 	cmp.w	r9, #0
 8007bbe:	d130      	bne.n	8007c22 <__gethex+0x326>
 8007bc0:	b127      	cbz	r7, 8007bcc <__gethex+0x2d0>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	f7fe fd20 	bl	800660a <__any_on>
 8007bca:	4681      	mov	r9, r0
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4629      	mov	r1, r5
 8007bd0:	1b76      	subs	r6, r6, r5
 8007bd2:	2502      	movs	r5, #2
 8007bd4:	117a      	asrs	r2, r7, #5
 8007bd6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007bda:	f007 071f 	and.w	r7, r7, #31
 8007bde:	40bb      	lsls	r3, r7
 8007be0:	4213      	tst	r3, r2
 8007be2:	4620      	mov	r0, r4
 8007be4:	bf18      	it	ne
 8007be6:	f049 0902 	orrne.w	r9, r9, #2
 8007bea:	f7ff fe1f 	bl	800782c <rshift>
 8007bee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	d047      	beq.n	8007c88 <__gethex+0x38c>
 8007bf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d015      	beq.n	8007c2c <__gethex+0x330>
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d017      	beq.n	8007c34 <__gethex+0x338>
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d109      	bne.n	8007c1c <__gethex+0x320>
 8007c08:	f019 0f02 	tst.w	r9, #2
 8007c0c:	d006      	beq.n	8007c1c <__gethex+0x320>
 8007c0e:	f8da 3000 	ldr.w	r3, [sl]
 8007c12:	ea49 0903 	orr.w	r9, r9, r3
 8007c16:	f019 0f01 	tst.w	r9, #1
 8007c1a:	d10e      	bne.n	8007c3a <__gethex+0x33e>
 8007c1c:	f045 0510 	orr.w	r5, r5, #16
 8007c20:	e032      	b.n	8007c88 <__gethex+0x38c>
 8007c22:	f04f 0901 	mov.w	r9, #1
 8007c26:	e7d1      	b.n	8007bcc <__gethex+0x2d0>
 8007c28:	2501      	movs	r5, #1
 8007c2a:	e7e2      	b.n	8007bf2 <__gethex+0x2f6>
 8007c2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c2e:	f1c3 0301 	rsb	r3, r3, #1
 8007c32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f0      	beq.n	8007c1c <__gethex+0x320>
 8007c3a:	f04f 0c00 	mov.w	ip, #0
 8007c3e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c42:	f104 0314 	add.w	r3, r4, #20
 8007c46:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c4a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c58:	d01b      	beq.n	8007c92 <__gethex+0x396>
 8007c5a:	3201      	adds	r2, #1
 8007c5c:	6002      	str	r2, [r0, #0]
 8007c5e:	2d02      	cmp	r5, #2
 8007c60:	f104 0314 	add.w	r3, r4, #20
 8007c64:	d13c      	bne.n	8007ce0 <__gethex+0x3e4>
 8007c66:	f8d8 2000 	ldr.w	r2, [r8]
 8007c6a:	3a01      	subs	r2, #1
 8007c6c:	42b2      	cmp	r2, r6
 8007c6e:	d109      	bne.n	8007c84 <__gethex+0x388>
 8007c70:	2201      	movs	r2, #1
 8007c72:	1171      	asrs	r1, r6, #5
 8007c74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c78:	f006 061f 	and.w	r6, r6, #31
 8007c7c:	fa02 f606 	lsl.w	r6, r2, r6
 8007c80:	421e      	tst	r6, r3
 8007c82:	d13a      	bne.n	8007cfa <__gethex+0x3fe>
 8007c84:	f045 0520 	orr.w	r5, r5, #32
 8007c88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c8a:	601c      	str	r4, [r3, #0]
 8007c8c:	9b02      	ldr	r3, [sp, #8]
 8007c8e:	601f      	str	r7, [r3, #0]
 8007c90:	e6b0      	b.n	80079f4 <__gethex+0xf8>
 8007c92:	4299      	cmp	r1, r3
 8007c94:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c98:	d8d9      	bhi.n	8007c4e <__gethex+0x352>
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	459b      	cmp	fp, r3
 8007c9e:	db17      	blt.n	8007cd0 <__gethex+0x3d4>
 8007ca0:	6861      	ldr	r1, [r4, #4]
 8007ca2:	9801      	ldr	r0, [sp, #4]
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	f7fe f831 	bl	8005d0c <_Balloc>
 8007caa:	4681      	mov	r9, r0
 8007cac:	b918      	cbnz	r0, 8007cb6 <__gethex+0x3ba>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	2184      	movs	r1, #132	@ 0x84
 8007cb2:	4b19      	ldr	r3, [pc, #100]	@ (8007d18 <__gethex+0x41c>)
 8007cb4:	e6c5      	b.n	8007a42 <__gethex+0x146>
 8007cb6:	6922      	ldr	r2, [r4, #16]
 8007cb8:	f104 010c 	add.w	r1, r4, #12
 8007cbc:	3202      	adds	r2, #2
 8007cbe:	0092      	lsls	r2, r2, #2
 8007cc0:	300c      	adds	r0, #12
 8007cc2:	f7fd f8b4 	bl	8004e2e <memcpy>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	9801      	ldr	r0, [sp, #4]
 8007cca:	f7fe f85f 	bl	8005d8c <_Bfree>
 8007cce:	464c      	mov	r4, r9
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	6122      	str	r2, [r4, #16]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cdc:	615a      	str	r2, [r3, #20]
 8007cde:	e7be      	b.n	8007c5e <__gethex+0x362>
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	455a      	cmp	r2, fp
 8007ce4:	dd0b      	ble.n	8007cfe <__gethex+0x402>
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f7ff fd9f 	bl	800782c <rshift>
 8007cee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cf2:	3701      	adds	r7, #1
 8007cf4:	42bb      	cmp	r3, r7
 8007cf6:	f6ff aee0 	blt.w	8007aba <__gethex+0x1be>
 8007cfa:	2501      	movs	r5, #1
 8007cfc:	e7c2      	b.n	8007c84 <__gethex+0x388>
 8007cfe:	f016 061f 	ands.w	r6, r6, #31
 8007d02:	d0fa      	beq.n	8007cfa <__gethex+0x3fe>
 8007d04:	4453      	add	r3, sl
 8007d06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007d0a:	f7fe f8f1 	bl	8005ef0 <__hi0bits>
 8007d0e:	f1c6 0620 	rsb	r6, r6, #32
 8007d12:	42b0      	cmp	r0, r6
 8007d14:	dbe7      	blt.n	8007ce6 <__gethex+0x3ea>
 8007d16:	e7f0      	b.n	8007cfa <__gethex+0x3fe>
 8007d18:	08008bc3 	.word	0x08008bc3

08007d1c <L_shift>:
 8007d1c:	f1c2 0208 	rsb	r2, r2, #8
 8007d20:	0092      	lsls	r2, r2, #2
 8007d22:	b570      	push	{r4, r5, r6, lr}
 8007d24:	f1c2 0620 	rsb	r6, r2, #32
 8007d28:	6843      	ldr	r3, [r0, #4]
 8007d2a:	6804      	ldr	r4, [r0, #0]
 8007d2c:	fa03 f506 	lsl.w	r5, r3, r6
 8007d30:	432c      	orrs	r4, r5
 8007d32:	40d3      	lsrs	r3, r2
 8007d34:	6004      	str	r4, [r0, #0]
 8007d36:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d3a:	4288      	cmp	r0, r1
 8007d3c:	d3f4      	bcc.n	8007d28 <L_shift+0xc>
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}

08007d40 <__match>:
 8007d40:	b530      	push	{r4, r5, lr}
 8007d42:	6803      	ldr	r3, [r0, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d4a:	b914      	cbnz	r4, 8007d52 <__match+0x12>
 8007d4c:	6003      	str	r3, [r0, #0]
 8007d4e:	2001      	movs	r0, #1
 8007d50:	bd30      	pop	{r4, r5, pc}
 8007d52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007d5a:	2d19      	cmp	r5, #25
 8007d5c:	bf98      	it	ls
 8007d5e:	3220      	addls	r2, #32
 8007d60:	42a2      	cmp	r2, r4
 8007d62:	d0f0      	beq.n	8007d46 <__match+0x6>
 8007d64:	2000      	movs	r0, #0
 8007d66:	e7f3      	b.n	8007d50 <__match+0x10>

08007d68 <__hexnan>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	2500      	movs	r5, #0
 8007d6e:	680b      	ldr	r3, [r1, #0]
 8007d70:	4682      	mov	sl, r0
 8007d72:	115e      	asrs	r6, r3, #5
 8007d74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d78:	f013 031f 	ands.w	r3, r3, #31
 8007d7c:	bf18      	it	ne
 8007d7e:	3604      	addne	r6, #4
 8007d80:	1f37      	subs	r7, r6, #4
 8007d82:	4690      	mov	r8, r2
 8007d84:	46b9      	mov	r9, r7
 8007d86:	463c      	mov	r4, r7
 8007d88:	46ab      	mov	fp, r5
 8007d8a:	b087      	sub	sp, #28
 8007d8c:	6801      	ldr	r1, [r0, #0]
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d94:	9502      	str	r5, [sp, #8]
 8007d96:	784a      	ldrb	r2, [r1, #1]
 8007d98:	1c4b      	adds	r3, r1, #1
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	b342      	cbz	r2, 8007df0 <__hexnan+0x88>
 8007d9e:	4610      	mov	r0, r2
 8007da0:	9105      	str	r1, [sp, #20]
 8007da2:	9204      	str	r2, [sp, #16]
 8007da4:	f7ff fd95 	bl	80078d2 <__hexdig_fun>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d151      	bne.n	8007e50 <__hexnan+0xe8>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	9905      	ldr	r1, [sp, #20]
 8007db0:	2a20      	cmp	r2, #32
 8007db2:	d818      	bhi.n	8007de6 <__hexnan+0x7e>
 8007db4:	9b02      	ldr	r3, [sp, #8]
 8007db6:	459b      	cmp	fp, r3
 8007db8:	dd13      	ble.n	8007de2 <__hexnan+0x7a>
 8007dba:	454c      	cmp	r4, r9
 8007dbc:	d206      	bcs.n	8007dcc <__hexnan+0x64>
 8007dbe:	2d07      	cmp	r5, #7
 8007dc0:	dc04      	bgt.n	8007dcc <__hexnan+0x64>
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f7ff ffa8 	bl	8007d1c <L_shift>
 8007dcc:	4544      	cmp	r4, r8
 8007dce:	d952      	bls.n	8007e76 <__hexnan+0x10e>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f1a4 0904 	sub.w	r9, r4, #4
 8007dd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dda:	461d      	mov	r5, r3
 8007ddc:	464c      	mov	r4, r9
 8007dde:	f8cd b008 	str.w	fp, [sp, #8]
 8007de2:	9903      	ldr	r1, [sp, #12]
 8007de4:	e7d7      	b.n	8007d96 <__hexnan+0x2e>
 8007de6:	2a29      	cmp	r2, #41	@ 0x29
 8007de8:	d157      	bne.n	8007e9a <__hexnan+0x132>
 8007dea:	3102      	adds	r1, #2
 8007dec:	f8ca 1000 	str.w	r1, [sl]
 8007df0:	f1bb 0f00 	cmp.w	fp, #0
 8007df4:	d051      	beq.n	8007e9a <__hexnan+0x132>
 8007df6:	454c      	cmp	r4, r9
 8007df8:	d206      	bcs.n	8007e08 <__hexnan+0xa0>
 8007dfa:	2d07      	cmp	r5, #7
 8007dfc:	dc04      	bgt.n	8007e08 <__hexnan+0xa0>
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4649      	mov	r1, r9
 8007e02:	4620      	mov	r0, r4
 8007e04:	f7ff ff8a 	bl	8007d1c <L_shift>
 8007e08:	4544      	cmp	r4, r8
 8007e0a:	d936      	bls.n	8007e7a <__hexnan+0x112>
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	f1a8 0204 	sub.w	r2, r8, #4
 8007e12:	f853 1b04 	ldr.w	r1, [r3], #4
 8007e16:	429f      	cmp	r7, r3
 8007e18:	f842 1f04 	str.w	r1, [r2, #4]!
 8007e1c:	d2f9      	bcs.n	8007e12 <__hexnan+0xaa>
 8007e1e:	1b3b      	subs	r3, r7, r4
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	3304      	adds	r3, #4
 8007e26:	3401      	adds	r4, #1
 8007e28:	3e03      	subs	r6, #3
 8007e2a:	42b4      	cmp	r4, r6
 8007e2c:	bf88      	it	hi
 8007e2e:	2304      	movhi	r3, #4
 8007e30:	2200      	movs	r2, #0
 8007e32:	4443      	add	r3, r8
 8007e34:	f843 2b04 	str.w	r2, [r3], #4
 8007e38:	429f      	cmp	r7, r3
 8007e3a:	d2fb      	bcs.n	8007e34 <__hexnan+0xcc>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	b91b      	cbnz	r3, 8007e48 <__hexnan+0xe0>
 8007e40:	4547      	cmp	r7, r8
 8007e42:	d128      	bne.n	8007e96 <__hexnan+0x12e>
 8007e44:	2301      	movs	r3, #1
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	2005      	movs	r0, #5
 8007e4a:	b007      	add	sp, #28
 8007e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e50:	3501      	adds	r5, #1
 8007e52:	2d08      	cmp	r5, #8
 8007e54:	f10b 0b01 	add.w	fp, fp, #1
 8007e58:	dd06      	ble.n	8007e68 <__hexnan+0x100>
 8007e5a:	4544      	cmp	r4, r8
 8007e5c:	d9c1      	bls.n	8007de2 <__hexnan+0x7a>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	2501      	movs	r5, #1
 8007e62:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e66:	3c04      	subs	r4, #4
 8007e68:	6822      	ldr	r2, [r4, #0]
 8007e6a:	f000 000f 	and.w	r0, r0, #15
 8007e6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007e72:	6020      	str	r0, [r4, #0]
 8007e74:	e7b5      	b.n	8007de2 <__hexnan+0x7a>
 8007e76:	2508      	movs	r5, #8
 8007e78:	e7b3      	b.n	8007de2 <__hexnan+0x7a>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d0dd      	beq.n	8007e3c <__hexnan+0xd4>
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	f1c3 0320 	rsb	r3, r3, #32
 8007e88:	40da      	lsrs	r2, r3
 8007e8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	f846 3c04 	str.w	r3, [r6, #-4]
 8007e94:	e7d2      	b.n	8007e3c <__hexnan+0xd4>
 8007e96:	3f04      	subs	r7, #4
 8007e98:	e7d0      	b.n	8007e3c <__hexnan+0xd4>
 8007e9a:	2004      	movs	r0, #4
 8007e9c:	e7d5      	b.n	8007e4a <__hexnan+0xe2>

08007e9e <__ascii_mbtowc>:
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	b901      	cbnz	r1, 8007ea4 <__ascii_mbtowc+0x6>
 8007ea2:	a901      	add	r1, sp, #4
 8007ea4:	b142      	cbz	r2, 8007eb8 <__ascii_mbtowc+0x1a>
 8007ea6:	b14b      	cbz	r3, 8007ebc <__ascii_mbtowc+0x1e>
 8007ea8:	7813      	ldrb	r3, [r2, #0]
 8007eaa:	600b      	str	r3, [r1, #0]
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	1e10      	subs	r0, r2, #0
 8007eb0:	bf18      	it	ne
 8007eb2:	2001      	movne	r0, #1
 8007eb4:	b002      	add	sp, #8
 8007eb6:	4770      	bx	lr
 8007eb8:	4610      	mov	r0, r2
 8007eba:	e7fb      	b.n	8007eb4 <__ascii_mbtowc+0x16>
 8007ebc:	f06f 0001 	mvn.w	r0, #1
 8007ec0:	e7f8      	b.n	8007eb4 <__ascii_mbtowc+0x16>

08007ec2 <_realloc_r>:
 8007ec2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	4614      	mov	r4, r2
 8007eca:	460d      	mov	r5, r1
 8007ecc:	b921      	cbnz	r1, 8007ed8 <_realloc_r+0x16>
 8007ece:	4611      	mov	r1, r2
 8007ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	f7fd be8e 	b.w	8005bf4 <_malloc_r>
 8007ed8:	b92a      	cbnz	r2, 8007ee6 <_realloc_r+0x24>
 8007eda:	f7fd fe19 	bl	8005b10 <_free_r>
 8007ede:	4625      	mov	r5, r4
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee6:	f000 f840 	bl	8007f6a <_malloc_usable_size_r>
 8007eea:	4284      	cmp	r4, r0
 8007eec:	4606      	mov	r6, r0
 8007eee:	d802      	bhi.n	8007ef6 <_realloc_r+0x34>
 8007ef0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ef4:	d8f4      	bhi.n	8007ee0 <_realloc_r+0x1e>
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7fd fe7b 	bl	8005bf4 <_malloc_r>
 8007efe:	4680      	mov	r8, r0
 8007f00:	b908      	cbnz	r0, 8007f06 <_realloc_r+0x44>
 8007f02:	4645      	mov	r5, r8
 8007f04:	e7ec      	b.n	8007ee0 <_realloc_r+0x1e>
 8007f06:	42b4      	cmp	r4, r6
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	bf28      	it	cs
 8007f0e:	4632      	movcs	r2, r6
 8007f10:	f7fc ff8d 	bl	8004e2e <memcpy>
 8007f14:	4629      	mov	r1, r5
 8007f16:	4638      	mov	r0, r7
 8007f18:	f7fd fdfa 	bl	8005b10 <_free_r>
 8007f1c:	e7f1      	b.n	8007f02 <_realloc_r+0x40>

08007f1e <__ascii_wctomb>:
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4608      	mov	r0, r1
 8007f22:	b141      	cbz	r1, 8007f36 <__ascii_wctomb+0x18>
 8007f24:	2aff      	cmp	r2, #255	@ 0xff
 8007f26:	d904      	bls.n	8007f32 <__ascii_wctomb+0x14>
 8007f28:	228a      	movs	r2, #138	@ 0x8a
 8007f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	4770      	bx	lr
 8007f32:	2001      	movs	r0, #1
 8007f34:	700a      	strb	r2, [r1, #0]
 8007f36:	4770      	bx	lr

08007f38 <fiprintf>:
 8007f38:	b40e      	push	{r1, r2, r3}
 8007f3a:	b503      	push	{r0, r1, lr}
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	ab03      	add	r3, sp, #12
 8007f40:	4805      	ldr	r0, [pc, #20]	@ (8007f58 <fiprintf+0x20>)
 8007f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f46:	6800      	ldr	r0, [r0, #0]
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	f000 f83d 	bl	8007fc8 <_vfiprintf_r>
 8007f4e:	b002      	add	sp, #8
 8007f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f54:	b003      	add	sp, #12
 8007f56:	4770      	bx	lr
 8007f58:	20000018 	.word	0x20000018

08007f5c <abort>:
 8007f5c:	2006      	movs	r0, #6
 8007f5e:	b508      	push	{r3, lr}
 8007f60:	f000 fa06 	bl	8008370 <raise>
 8007f64:	2001      	movs	r0, #1
 8007f66:	f7f9 fc92 	bl	800188e <_exit>

08007f6a <_malloc_usable_size_r>:
 8007f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6e:	1f18      	subs	r0, r3, #4
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bfbc      	itt	lt
 8007f74:	580b      	ldrlt	r3, [r1, r0]
 8007f76:	18c0      	addlt	r0, r0, r3
 8007f78:	4770      	bx	lr

08007f7a <__sfputc_r>:
 8007f7a:	6893      	ldr	r3, [r2, #8]
 8007f7c:	b410      	push	{r4}
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	6093      	str	r3, [r2, #8]
 8007f84:	da07      	bge.n	8007f96 <__sfputc_r+0x1c>
 8007f86:	6994      	ldr	r4, [r2, #24]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	db01      	blt.n	8007f90 <__sfputc_r+0x16>
 8007f8c:	290a      	cmp	r1, #10
 8007f8e:	d102      	bne.n	8007f96 <__sfputc_r+0x1c>
 8007f90:	bc10      	pop	{r4}
 8007f92:	f000 b931 	b.w	80081f8 <__swbuf_r>
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	1c58      	adds	r0, r3, #1
 8007f9a:	6010      	str	r0, [r2, #0]
 8007f9c:	7019      	strb	r1, [r3, #0]
 8007f9e:	4608      	mov	r0, r1
 8007fa0:	bc10      	pop	{r4}
 8007fa2:	4770      	bx	lr

08007fa4 <__sfputs_r>:
 8007fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460f      	mov	r7, r1
 8007faa:	4614      	mov	r4, r2
 8007fac:	18d5      	adds	r5, r2, r3
 8007fae:	42ac      	cmp	r4, r5
 8007fb0:	d101      	bne.n	8007fb6 <__sfputs_r+0x12>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e007      	b.n	8007fc6 <__sfputs_r+0x22>
 8007fb6:	463a      	mov	r2, r7
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	f7ff ffdc 	bl	8007f7a <__sfputc_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d1f3      	bne.n	8007fae <__sfputs_r+0xa>
 8007fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fc8 <_vfiprintf_r>:
 8007fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fcc:	460d      	mov	r5, r1
 8007fce:	4614      	mov	r4, r2
 8007fd0:	4698      	mov	r8, r3
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	b09d      	sub	sp, #116	@ 0x74
 8007fd6:	b118      	cbz	r0, 8007fe0 <_vfiprintf_r+0x18>
 8007fd8:	6a03      	ldr	r3, [r0, #32]
 8007fda:	b90b      	cbnz	r3, 8007fe0 <_vfiprintf_r+0x18>
 8007fdc:	f7fc fdfe 	bl	8004bdc <__sinit>
 8007fe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fe2:	07d9      	lsls	r1, r3, #31
 8007fe4:	d405      	bmi.n	8007ff2 <_vfiprintf_r+0x2a>
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	059a      	lsls	r2, r3, #22
 8007fea:	d402      	bmi.n	8007ff2 <_vfiprintf_r+0x2a>
 8007fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fee:	f7fc ff0e 	bl	8004e0e <__retarget_lock_acquire_recursive>
 8007ff2:	89ab      	ldrh	r3, [r5, #12]
 8007ff4:	071b      	lsls	r3, r3, #28
 8007ff6:	d501      	bpl.n	8007ffc <_vfiprintf_r+0x34>
 8007ff8:	692b      	ldr	r3, [r5, #16]
 8007ffa:	b99b      	cbnz	r3, 8008024 <_vfiprintf_r+0x5c>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 f938 	bl	8008274 <__swsetup_r>
 8008004:	b170      	cbz	r0, 8008024 <_vfiprintf_r+0x5c>
 8008006:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008008:	07dc      	lsls	r4, r3, #31
 800800a:	d504      	bpl.n	8008016 <_vfiprintf_r+0x4e>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295
 8008010:	b01d      	add	sp, #116	@ 0x74
 8008012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008016:	89ab      	ldrh	r3, [r5, #12]
 8008018:	0598      	lsls	r0, r3, #22
 800801a:	d4f7      	bmi.n	800800c <_vfiprintf_r+0x44>
 800801c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801e:	f7fc fef7 	bl	8004e10 <__retarget_lock_release_recursive>
 8008022:	e7f3      	b.n	800800c <_vfiprintf_r+0x44>
 8008024:	2300      	movs	r3, #0
 8008026:	9309      	str	r3, [sp, #36]	@ 0x24
 8008028:	2320      	movs	r3, #32
 800802a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800802e:	2330      	movs	r3, #48	@ 0x30
 8008030:	f04f 0901 	mov.w	r9, #1
 8008034:	f8cd 800c 	str.w	r8, [sp, #12]
 8008038:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80081e4 <_vfiprintf_r+0x21c>
 800803c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008040:	4623      	mov	r3, r4
 8008042:	469a      	mov	sl, r3
 8008044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008048:	b10a      	cbz	r2, 800804e <_vfiprintf_r+0x86>
 800804a:	2a25      	cmp	r2, #37	@ 0x25
 800804c:	d1f9      	bne.n	8008042 <_vfiprintf_r+0x7a>
 800804e:	ebba 0b04 	subs.w	fp, sl, r4
 8008052:	d00b      	beq.n	800806c <_vfiprintf_r+0xa4>
 8008054:	465b      	mov	r3, fp
 8008056:	4622      	mov	r2, r4
 8008058:	4629      	mov	r1, r5
 800805a:	4630      	mov	r0, r6
 800805c:	f7ff ffa2 	bl	8007fa4 <__sfputs_r>
 8008060:	3001      	adds	r0, #1
 8008062:	f000 80a7 	beq.w	80081b4 <_vfiprintf_r+0x1ec>
 8008066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008068:	445a      	add	r2, fp
 800806a:	9209      	str	r2, [sp, #36]	@ 0x24
 800806c:	f89a 3000 	ldrb.w	r3, [sl]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 809f 	beq.w	80081b4 <_vfiprintf_r+0x1ec>
 8008076:	2300      	movs	r3, #0
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008080:	f10a 0a01 	add.w	sl, sl, #1
 8008084:	9304      	str	r3, [sp, #16]
 8008086:	9307      	str	r3, [sp, #28]
 8008088:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800808c:	931a      	str	r3, [sp, #104]	@ 0x68
 800808e:	4654      	mov	r4, sl
 8008090:	2205      	movs	r2, #5
 8008092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008096:	4853      	ldr	r0, [pc, #332]	@ (80081e4 <_vfiprintf_r+0x21c>)
 8008098:	f7fc febb 	bl	8004e12 <memchr>
 800809c:	9a04      	ldr	r2, [sp, #16]
 800809e:	b9d8      	cbnz	r0, 80080d8 <_vfiprintf_r+0x110>
 80080a0:	06d1      	lsls	r1, r2, #27
 80080a2:	bf44      	itt	mi
 80080a4:	2320      	movmi	r3, #32
 80080a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080aa:	0713      	lsls	r3, r2, #28
 80080ac:	bf44      	itt	mi
 80080ae:	232b      	movmi	r3, #43	@ 0x2b
 80080b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b4:	f89a 3000 	ldrb.w	r3, [sl]
 80080b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ba:	d015      	beq.n	80080e8 <_vfiprintf_r+0x120>
 80080bc:	4654      	mov	r4, sl
 80080be:	2000      	movs	r0, #0
 80080c0:	f04f 0c0a 	mov.w	ip, #10
 80080c4:	9a07      	ldr	r2, [sp, #28]
 80080c6:	4621      	mov	r1, r4
 80080c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080cc:	3b30      	subs	r3, #48	@ 0x30
 80080ce:	2b09      	cmp	r3, #9
 80080d0:	d94b      	bls.n	800816a <_vfiprintf_r+0x1a2>
 80080d2:	b1b0      	cbz	r0, 8008102 <_vfiprintf_r+0x13a>
 80080d4:	9207      	str	r2, [sp, #28]
 80080d6:	e014      	b.n	8008102 <_vfiprintf_r+0x13a>
 80080d8:	eba0 0308 	sub.w	r3, r0, r8
 80080dc:	fa09 f303 	lsl.w	r3, r9, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	46a2      	mov	sl, r4
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	e7d2      	b.n	800808e <_vfiprintf_r+0xc6>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d19      	adds	r1, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9103      	str	r1, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfbb      	ittet	lt
 80080f4:	425b      	neglt	r3, r3
 80080f6:	f042 0202 	orrlt.w	r2, r2, #2
 80080fa:	9307      	strge	r3, [sp, #28]
 80080fc:	9307      	strlt	r3, [sp, #28]
 80080fe:	bfb8      	it	lt
 8008100:	9204      	strlt	r2, [sp, #16]
 8008102:	7823      	ldrb	r3, [r4, #0]
 8008104:	2b2e      	cmp	r3, #46	@ 0x2e
 8008106:	d10a      	bne.n	800811e <_vfiprintf_r+0x156>
 8008108:	7863      	ldrb	r3, [r4, #1]
 800810a:	2b2a      	cmp	r3, #42	@ 0x2a
 800810c:	d132      	bne.n	8008174 <_vfiprintf_r+0x1ac>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	3402      	adds	r4, #2
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	9203      	str	r2, [sp, #12]
 8008118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80081e8 <_vfiprintf_r+0x220>
 8008122:	2203      	movs	r2, #3
 8008124:	4650      	mov	r0, sl
 8008126:	7821      	ldrb	r1, [r4, #0]
 8008128:	f7fc fe73 	bl	8004e12 <memchr>
 800812c:	b138      	cbz	r0, 800813e <_vfiprintf_r+0x176>
 800812e:	2240      	movs	r2, #64	@ 0x40
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	eba0 000a 	sub.w	r0, r0, sl
 8008136:	4082      	lsls	r2, r0
 8008138:	4313      	orrs	r3, r2
 800813a:	3401      	adds	r4, #1
 800813c:	9304      	str	r3, [sp, #16]
 800813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008142:	2206      	movs	r2, #6
 8008144:	4829      	ldr	r0, [pc, #164]	@ (80081ec <_vfiprintf_r+0x224>)
 8008146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800814a:	f7fc fe62 	bl	8004e12 <memchr>
 800814e:	2800      	cmp	r0, #0
 8008150:	d03f      	beq.n	80081d2 <_vfiprintf_r+0x20a>
 8008152:	4b27      	ldr	r3, [pc, #156]	@ (80081f0 <_vfiprintf_r+0x228>)
 8008154:	bb1b      	cbnz	r3, 800819e <_vfiprintf_r+0x1d6>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	3307      	adds	r3, #7
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	3308      	adds	r3, #8
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	443b      	add	r3, r7
 8008166:	9309      	str	r3, [sp, #36]	@ 0x24
 8008168:	e76a      	b.n	8008040 <_vfiprintf_r+0x78>
 800816a:	460c      	mov	r4, r1
 800816c:	2001      	movs	r0, #1
 800816e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008172:	e7a8      	b.n	80080c6 <_vfiprintf_r+0xfe>
 8008174:	2300      	movs	r3, #0
 8008176:	f04f 0c0a 	mov.w	ip, #10
 800817a:	4619      	mov	r1, r3
 800817c:	3401      	adds	r4, #1
 800817e:	9305      	str	r3, [sp, #20]
 8008180:	4620      	mov	r0, r4
 8008182:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008186:	3a30      	subs	r2, #48	@ 0x30
 8008188:	2a09      	cmp	r2, #9
 800818a:	d903      	bls.n	8008194 <_vfiprintf_r+0x1cc>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0c6      	beq.n	800811e <_vfiprintf_r+0x156>
 8008190:	9105      	str	r1, [sp, #20]
 8008192:	e7c4      	b.n	800811e <_vfiprintf_r+0x156>
 8008194:	4604      	mov	r4, r0
 8008196:	2301      	movs	r3, #1
 8008198:	fb0c 2101 	mla	r1, ip, r1, r2
 800819c:	e7f0      	b.n	8008180 <_vfiprintf_r+0x1b8>
 800819e:	ab03      	add	r3, sp, #12
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	462a      	mov	r2, r5
 80081a4:	4630      	mov	r0, r6
 80081a6:	4b13      	ldr	r3, [pc, #76]	@ (80081f4 <_vfiprintf_r+0x22c>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	f7fb fec5 	bl	8003f38 <_printf_float>
 80081ae:	4607      	mov	r7, r0
 80081b0:	1c78      	adds	r0, r7, #1
 80081b2:	d1d6      	bne.n	8008162 <_vfiprintf_r+0x19a>
 80081b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b6:	07d9      	lsls	r1, r3, #31
 80081b8:	d405      	bmi.n	80081c6 <_vfiprintf_r+0x1fe>
 80081ba:	89ab      	ldrh	r3, [r5, #12]
 80081bc:	059a      	lsls	r2, r3, #22
 80081be:	d402      	bmi.n	80081c6 <_vfiprintf_r+0x1fe>
 80081c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081c2:	f7fc fe25 	bl	8004e10 <__retarget_lock_release_recursive>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	065b      	lsls	r3, r3, #25
 80081ca:	f53f af1f 	bmi.w	800800c <_vfiprintf_r+0x44>
 80081ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081d0:	e71e      	b.n	8008010 <_vfiprintf_r+0x48>
 80081d2:	ab03      	add	r3, sp, #12
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	462a      	mov	r2, r5
 80081d8:	4630      	mov	r0, r6
 80081da:	4b06      	ldr	r3, [pc, #24]	@ (80081f4 <_vfiprintf_r+0x22c>)
 80081dc:	a904      	add	r1, sp, #16
 80081de:	f7fc f949 	bl	8004474 <_printf_i>
 80081e2:	e7e4      	b.n	80081ae <_vfiprintf_r+0x1e6>
 80081e4:	08008c2f 	.word	0x08008c2f
 80081e8:	08008c35 	.word	0x08008c35
 80081ec:	08008c39 	.word	0x08008c39
 80081f0:	08003f39 	.word	0x08003f39
 80081f4:	08007fa5 	.word	0x08007fa5

080081f8 <__swbuf_r>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	460e      	mov	r6, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	4605      	mov	r5, r0
 8008200:	b118      	cbz	r0, 800820a <__swbuf_r+0x12>
 8008202:	6a03      	ldr	r3, [r0, #32]
 8008204:	b90b      	cbnz	r3, 800820a <__swbuf_r+0x12>
 8008206:	f7fc fce9 	bl	8004bdc <__sinit>
 800820a:	69a3      	ldr	r3, [r4, #24]
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	071a      	lsls	r2, r3, #28
 8008212:	d501      	bpl.n	8008218 <__swbuf_r+0x20>
 8008214:	6923      	ldr	r3, [r4, #16]
 8008216:	b943      	cbnz	r3, 800822a <__swbuf_r+0x32>
 8008218:	4621      	mov	r1, r4
 800821a:	4628      	mov	r0, r5
 800821c:	f000 f82a 	bl	8008274 <__swsetup_r>
 8008220:	b118      	cbz	r0, 800822a <__swbuf_r+0x32>
 8008222:	f04f 37ff 	mov.w	r7, #4294967295
 8008226:	4638      	mov	r0, r7
 8008228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	6922      	ldr	r2, [r4, #16]
 800822e:	b2f6      	uxtb	r6, r6
 8008230:	1a98      	subs	r0, r3, r2
 8008232:	6963      	ldr	r3, [r4, #20]
 8008234:	4637      	mov	r7, r6
 8008236:	4283      	cmp	r3, r0
 8008238:	dc05      	bgt.n	8008246 <__swbuf_r+0x4e>
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff fa59 	bl	80076f4 <_fflush_r>
 8008242:	2800      	cmp	r0, #0
 8008244:	d1ed      	bne.n	8008222 <__swbuf_r+0x2a>
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	3b01      	subs	r3, #1
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	6022      	str	r2, [r4, #0]
 8008252:	701e      	strb	r6, [r3, #0]
 8008254:	6962      	ldr	r2, [r4, #20]
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	429a      	cmp	r2, r3
 800825a:	d004      	beq.n	8008266 <__swbuf_r+0x6e>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	07db      	lsls	r3, r3, #31
 8008260:	d5e1      	bpl.n	8008226 <__swbuf_r+0x2e>
 8008262:	2e0a      	cmp	r6, #10
 8008264:	d1df      	bne.n	8008226 <__swbuf_r+0x2e>
 8008266:	4621      	mov	r1, r4
 8008268:	4628      	mov	r0, r5
 800826a:	f7ff fa43 	bl	80076f4 <_fflush_r>
 800826e:	2800      	cmp	r0, #0
 8008270:	d0d9      	beq.n	8008226 <__swbuf_r+0x2e>
 8008272:	e7d6      	b.n	8008222 <__swbuf_r+0x2a>

08008274 <__swsetup_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4b29      	ldr	r3, [pc, #164]	@ (800831c <__swsetup_r+0xa8>)
 8008278:	4605      	mov	r5, r0
 800827a:	6818      	ldr	r0, [r3, #0]
 800827c:	460c      	mov	r4, r1
 800827e:	b118      	cbz	r0, 8008288 <__swsetup_r+0x14>
 8008280:	6a03      	ldr	r3, [r0, #32]
 8008282:	b90b      	cbnz	r3, 8008288 <__swsetup_r+0x14>
 8008284:	f7fc fcaa 	bl	8004bdc <__sinit>
 8008288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828c:	0719      	lsls	r1, r3, #28
 800828e:	d422      	bmi.n	80082d6 <__swsetup_r+0x62>
 8008290:	06da      	lsls	r2, r3, #27
 8008292:	d407      	bmi.n	80082a4 <__swsetup_r+0x30>
 8008294:	2209      	movs	r2, #9
 8008296:	602a      	str	r2, [r5, #0]
 8008298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	81a3      	strh	r3, [r4, #12]
 80082a2:	e033      	b.n	800830c <__swsetup_r+0x98>
 80082a4:	0758      	lsls	r0, r3, #29
 80082a6:	d512      	bpl.n	80082ce <__swsetup_r+0x5a>
 80082a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082aa:	b141      	cbz	r1, 80082be <__swsetup_r+0x4a>
 80082ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d002      	beq.n	80082ba <__swsetup_r+0x46>
 80082b4:	4628      	mov	r0, r5
 80082b6:	f7fd fc2b 	bl	8005b10 <_free_r>
 80082ba:	2300      	movs	r3, #0
 80082bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	2300      	movs	r3, #0
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f043 0308 	orr.w	r3, r3, #8
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	b94b      	cbnz	r3, 80082ee <__swsetup_r+0x7a>
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082e4:	d003      	beq.n	80082ee <__swsetup_r+0x7a>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 f882 	bl	80083f2 <__smakebuf_r>
 80082ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082f2:	f013 0201 	ands.w	r2, r3, #1
 80082f6:	d00a      	beq.n	800830e <__swsetup_r+0x9a>
 80082f8:	2200      	movs	r2, #0
 80082fa:	60a2      	str	r2, [r4, #8]
 80082fc:	6962      	ldr	r2, [r4, #20]
 80082fe:	4252      	negs	r2, r2
 8008300:	61a2      	str	r2, [r4, #24]
 8008302:	6922      	ldr	r2, [r4, #16]
 8008304:	b942      	cbnz	r2, 8008318 <__swsetup_r+0xa4>
 8008306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800830a:	d1c5      	bne.n	8008298 <__swsetup_r+0x24>
 800830c:	bd38      	pop	{r3, r4, r5, pc}
 800830e:	0799      	lsls	r1, r3, #30
 8008310:	bf58      	it	pl
 8008312:	6962      	ldrpl	r2, [r4, #20]
 8008314:	60a2      	str	r2, [r4, #8]
 8008316:	e7f4      	b.n	8008302 <__swsetup_r+0x8e>
 8008318:	2000      	movs	r0, #0
 800831a:	e7f7      	b.n	800830c <__swsetup_r+0x98>
 800831c:	20000018 	.word	0x20000018

08008320 <_raise_r>:
 8008320:	291f      	cmp	r1, #31
 8008322:	b538      	push	{r3, r4, r5, lr}
 8008324:	4605      	mov	r5, r0
 8008326:	460c      	mov	r4, r1
 8008328:	d904      	bls.n	8008334 <_raise_r+0x14>
 800832a:	2316      	movs	r3, #22
 800832c:	6003      	str	r3, [r0, #0]
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008336:	b112      	cbz	r2, 800833e <_raise_r+0x1e>
 8008338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800833c:	b94b      	cbnz	r3, 8008352 <_raise_r+0x32>
 800833e:	4628      	mov	r0, r5
 8008340:	f000 f830 	bl	80083a4 <_getpid_r>
 8008344:	4622      	mov	r2, r4
 8008346:	4601      	mov	r1, r0
 8008348:	4628      	mov	r0, r5
 800834a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800834e:	f000 b817 	b.w	8008380 <_kill_r>
 8008352:	2b01      	cmp	r3, #1
 8008354:	d00a      	beq.n	800836c <_raise_r+0x4c>
 8008356:	1c59      	adds	r1, r3, #1
 8008358:	d103      	bne.n	8008362 <_raise_r+0x42>
 800835a:	2316      	movs	r3, #22
 800835c:	6003      	str	r3, [r0, #0]
 800835e:	2001      	movs	r0, #1
 8008360:	e7e7      	b.n	8008332 <_raise_r+0x12>
 8008362:	2100      	movs	r1, #0
 8008364:	4620      	mov	r0, r4
 8008366:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800836a:	4798      	blx	r3
 800836c:	2000      	movs	r0, #0
 800836e:	e7e0      	b.n	8008332 <_raise_r+0x12>

08008370 <raise>:
 8008370:	4b02      	ldr	r3, [pc, #8]	@ (800837c <raise+0xc>)
 8008372:	4601      	mov	r1, r0
 8008374:	6818      	ldr	r0, [r3, #0]
 8008376:	f7ff bfd3 	b.w	8008320 <_raise_r>
 800837a:	bf00      	nop
 800837c:	20000018 	.word	0x20000018

08008380 <_kill_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	2300      	movs	r3, #0
 8008384:	4d06      	ldr	r5, [pc, #24]	@ (80083a0 <_kill_r+0x20>)
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	4611      	mov	r1, r2
 800838c:	602b      	str	r3, [r5, #0]
 800838e:	f7f9 fa6e 	bl	800186e <_kill>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d102      	bne.n	800839c <_kill_r+0x1c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	b103      	cbz	r3, 800839c <_kill_r+0x1c>
 800839a:	6023      	str	r3, [r4, #0]
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	20000840 	.word	0x20000840

080083a4 <_getpid_r>:
 80083a4:	f7f9 ba5c 	b.w	8001860 <_getpid>

080083a8 <__swhatbuf_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460c      	mov	r4, r1
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	4615      	mov	r5, r2
 80083b2:	2900      	cmp	r1, #0
 80083b4:	461e      	mov	r6, r3
 80083b6:	b096      	sub	sp, #88	@ 0x58
 80083b8:	da0c      	bge.n	80083d4 <__swhatbuf_r+0x2c>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	2100      	movs	r1, #0
 80083be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083c2:	bf14      	ite	ne
 80083c4:	2340      	movne	r3, #64	@ 0x40
 80083c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083ca:	2000      	movs	r0, #0
 80083cc:	6031      	str	r1, [r6, #0]
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	b016      	add	sp, #88	@ 0x58
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	466a      	mov	r2, sp
 80083d6:	f000 f849 	bl	800846c <_fstat_r>
 80083da:	2800      	cmp	r0, #0
 80083dc:	dbed      	blt.n	80083ba <__swhatbuf_r+0x12>
 80083de:	9901      	ldr	r1, [sp, #4]
 80083e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083e8:	4259      	negs	r1, r3
 80083ea:	4159      	adcs	r1, r3
 80083ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083f0:	e7eb      	b.n	80083ca <__swhatbuf_r+0x22>

080083f2 <__smakebuf_r>:
 80083f2:	898b      	ldrh	r3, [r1, #12]
 80083f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083f6:	079d      	lsls	r5, r3, #30
 80083f8:	4606      	mov	r6, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	d507      	bpl.n	800840e <__smakebuf_r+0x1c>
 80083fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	2301      	movs	r3, #1
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	b003      	add	sp, #12
 800840c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800840e:	466a      	mov	r2, sp
 8008410:	ab01      	add	r3, sp, #4
 8008412:	f7ff ffc9 	bl	80083a8 <__swhatbuf_r>
 8008416:	9f00      	ldr	r7, [sp, #0]
 8008418:	4605      	mov	r5, r0
 800841a:	4639      	mov	r1, r7
 800841c:	4630      	mov	r0, r6
 800841e:	f7fd fbe9 	bl	8005bf4 <_malloc_r>
 8008422:	b948      	cbnz	r0, 8008438 <__smakebuf_r+0x46>
 8008424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d4ee      	bmi.n	800840a <__smakebuf_r+0x18>
 800842c:	f023 0303 	bic.w	r3, r3, #3
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	e7e2      	b.n	80083fe <__smakebuf_r+0xc>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800843e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	9b01      	ldr	r3, [sp, #4]
 8008446:	6020      	str	r0, [r4, #0]
 8008448:	b15b      	cbz	r3, 8008462 <__smakebuf_r+0x70>
 800844a:	4630      	mov	r0, r6
 800844c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008450:	f000 f81e 	bl	8008490 <_isatty_r>
 8008454:	b128      	cbz	r0, 8008462 <__smakebuf_r+0x70>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f023 0303 	bic.w	r3, r3, #3
 800845c:	f043 0301 	orr.w	r3, r3, #1
 8008460:	81a3      	strh	r3, [r4, #12]
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	431d      	orrs	r5, r3
 8008466:	81a5      	strh	r5, [r4, #12]
 8008468:	e7cf      	b.n	800840a <__smakebuf_r+0x18>
	...

0800846c <_fstat_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d06      	ldr	r5, [pc, #24]	@ (800848c <_fstat_r+0x20>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f9 fa57 	bl	800192c <_fstat>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_fstat_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_fstat_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	20000840 	.word	0x20000840

08008490 <_isatty_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	2300      	movs	r3, #0
 8008494:	4d05      	ldr	r5, [pc, #20]	@ (80084ac <_isatty_r+0x1c>)
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f9 fa55 	bl	800194a <_isatty>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_isatty_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_isatty_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20000840 	.word	0x20000840

080084b0 <_init>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	bf00      	nop
 80084b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b6:	bc08      	pop	{r3}
 80084b8:	469e      	mov	lr, r3
 80084ba:	4770      	bx	lr

080084bc <_fini>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	bf00      	nop
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr
