
STM32_ADC_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000927c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  08009390  08009390  0000a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a4c  08009a4c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009a4c  08009a4c  0000aa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a54  08009a54  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a54  08009a54  0000aa54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a58  08009a58  0000aa58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009a5c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001d4  08009c30  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  08009c30  0000b90c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a96f  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fa  00000000  00000000  00015b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  00018268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  00018da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001962a  00000000  00000000  00019626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010680  00000000  00000000  00032c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a015  00000000  00000000  000432d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd2e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000cd328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d1484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009374 	.word	0x08009374

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009374 	.word	0x08009374

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010a0:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <MX_ADC1_Init+0xd0>)
 80010a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010a6:	4b2d      	ldr	r3, [pc, #180]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ae:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b4:	4b29      	ldr	r3, [pc, #164]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b28      	ldr	r3, [pc, #160]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010bc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 80010c8:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010ca:	2204      	movs	r2, #4
 80010cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ce:	4823      	ldr	r0, [pc, #140]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010d0:	f001 f900 	bl	80022d4 <HAL_ADC_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010da:	f000 fa80 	bl	80015de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010de:	2304      	movs	r3, #4
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010e6:	2306      	movs	r3, #6
 80010e8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	4619      	mov	r1, r3
 80010ee:	481b      	ldr	r0, [pc, #108]	@ (800115c <MX_ADC1_Init+0xcc>)
 80010f0:	f001 fac2 	bl	8002678 <HAL_ADC_ConfigChannel>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010fa:	f000 fa70 	bl	80015de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010fe:	2305      	movs	r3, #5
 8001100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001102:	2302      	movs	r3, #2
 8001104:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	4619      	mov	r1, r3
 800110a:	4814      	ldr	r0, [pc, #80]	@ (800115c <MX_ADC1_Init+0xcc>)
 800110c:	f001 fab4 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001116:	f000 fa62 	bl	80015de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800111a:	2310      	movs	r3, #16
 800111c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800111e:	2303      	movs	r3, #3
 8001120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	@ (800115c <MX_ADC1_Init+0xcc>)
 8001128:	f001 faa6 	bl	8002678 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001132:	f000 fa54 	bl	80015de <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001136:	2311      	movs	r3, #17
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800113a:	2304      	movs	r3, #4
 800113c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	@ (800115c <MX_ADC1_Init+0xcc>)
 8001144:	f001 fa98 	bl	8002678 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800114e:	f000 fa46 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001f0 	.word	0x200001f0
 8001160:	40012400 	.word	0x40012400

08001164 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a29      	ldr	r2, [pc, #164]	@ (8001224 <HAL_ADC_MspInit+0xc0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d14a      	bne.n	800121a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001184:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	4a27      	ldr	r2, [pc, #156]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6193      	str	r3, [r2, #24]
 8001190:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119c:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a21      	ldr	r2, [pc, #132]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <HAL_ADC_MspInit+0xc4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011b4:	2330      	movs	r3, #48	@ 0x30
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b8:	2303      	movs	r3, #3
 80011ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	481a      	ldr	r0, [pc, #104]	@ (800122c <HAL_ADC_MspInit+0xc8>)
 80011c4:	f001 fffc 	bl	80031c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011c8:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <HAL_ADC_MspInit+0xd0>)
 80011cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011dc:	2280      	movs	r2, #128	@ 0x80
 80011de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011e0:	4b13      	ldr	r3, [pc, #76]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e8:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011f2:	2220      	movs	r2, #32
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 80011f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011fe:	480c      	ldr	r0, [pc, #48]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 8001200:	f001 fdf0 	bl	8002de4 <HAL_DMA_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800120a:	f000 f9e8 	bl	80015de <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a07      	ldr	r2, [pc, #28]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 8001212:	621a      	str	r2, [r3, #32]
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_ADC_MspInit+0xcc>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012400 	.word	0x40012400
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800
 8001230:	20000220 	.word	0x20000220
 8001234:	40020008 	.word	0x40020008

08001238 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800123e:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_DMA_Init+0x38>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <MX_DMA_Init+0x38>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6153      	str	r3, [r2, #20]
 800124a:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_DMA_Init+0x38>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	200b      	movs	r0, #11
 800125c:	f001 fd8b 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001260:	200b      	movs	r0, #11
 8001262:	f001 fda4 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_GPIO_Init+0x58>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a13      	ldr	r2, [pc, #76]	@ (80012cc <MX_GPIO_Init+0x58>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_GPIO_Init+0x58>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0320 	and.w	r3, r3, #32
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_GPIO_Init+0x58>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <MX_GPIO_Init+0x58>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <MX_GPIO_Init+0x58>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <MX_GPIO_Init+0x58>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <MX_GPIO_Init+0x58>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6193      	str	r3, [r2, #24]
 80012b6:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <MX_GPIO_Init+0x58>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]

}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	40021000 	.word	0x40021000

080012d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d4:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012d6:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <MX_I2C1_Init+0x54>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012dc:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <MX_I2C1_Init+0x58>)
 80012de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <MX_I2C1_Init+0x50>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001300:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800130c:	4804      	ldr	r0, [pc, #16]	@ (8001320 <MX_I2C1_Init+0x50>)
 800130e:	f002 f8db 	bl	80034c8 <HAL_I2C_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001318:	f000 f961 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000264 	.word	0x20000264
 8001324:	40005400 	.word	0x40005400
 8001328:	00061a80 	.word	0x00061a80

0800132c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <HAL_I2C_MspInit+0x70>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d123      	bne.n	8001394 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001364:	23c0      	movs	r3, #192	@ 0xc0
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <HAL_I2C_MspInit+0x78>)
 8001378:	f001 ff22 	bl	80031c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001386:	61d3      	str	r3, [r2, #28]
 8001388:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <HAL_I2C_MspInit+0x74>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40005400 	.word	0x40005400
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010c00 	.word	0x40010c00

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ae:	f000 ff0b 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b2:	f000 f8b9 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b6:	f7ff ff5d 	bl	8001274 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ba:	f7ff ff3d 	bl	8001238 <MX_DMA_Init>
  MX_ADC1_Init();
 80013be:	f7ff fe67 	bl	8001090 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013c2:	f7ff ff85 	bl	80012d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



    HAL_Delay(20);
 80013c6:	2014      	movs	r0, #20
 80013c8:	f000 ff60 	bl	800228c <HAL_Delay>
    OLED_Init();
 80013cc:	f000 f9c8 	bl	8001760 <OLED_Init>
    OLED_Startup();
 80013d0:	f000 fd7b 	bl	8001eca <OLED_Startup>

    HAL_ADCEx_Calibration_Start(&hadc1);
 80013d4:	484c      	ldr	r0, [pc, #304]	@ (8001508 <main+0x160>)
 80013d6:	f001 fb49 	bl	8002a6c <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(&hadc1,values,sizeof(values)/sizeof(uint32_t));
 80013da:	2204      	movs	r2, #4
 80013dc:	494b      	ldr	r1, [pc, #300]	@ (800150c <main+0x164>)
 80013de:	484a      	ldr	r0, [pc, #296]	@ (8001508 <main+0x160>)
 80013e0:	f001 f850 	bl	8002484 <HAL_ADC_Start_DMA>

    float NTC_R=0;
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
    float temperature=0;
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]

    float Vref=0;
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
    float voltage=0;
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      NTC_R= ADC2Resistance(values[0]);
 80013fc:	4b43      	ldr	r3, [pc, #268]	@ (800150c <main+0x164>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f8f3 	bl	80015ec <ADC2Resistance>
 8001406:	60f8      	str	r0, [r7, #12]
      temperature= resistance2Temperature(NTC_R);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f915 	bl	8001638 <resistance2Temperature>
 800140e:	60b8      	str	r0, [r7, #8]

      Vref=1.2*(4095.0/(float )values[3]);
 8001410:	4b3e      	ldr	r3, [pc, #248]	@ (800150c <main+0x164>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fc5d 	bl	8000cd4 <__aeabi_ui2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f803 	bl	8000428 <__aeabi_f2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	a134      	add	r1, pc, #208	@ (adr r1, 80014f8 <main+0x150>)
 8001428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800142c:	f7ff f97e 	bl	800072c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800143c:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <main+0x168>)
 800143e:	f7ff f84b 	bl	80004d8 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fb3d 	bl	8000ac8 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	607b      	str	r3, [r7, #4]
      voltage=(values[1]/4095.0)*3.3;
 8001452:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <main+0x164>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe ffc4 	bl	80003e4 <__aeabi_ui2d>
 800145c:	a326      	add	r3, pc, #152	@ (adr r3, 80014f8 <main+0x150>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f963 	bl	800072c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	a324      	add	r3, pc, #144	@ (adr r3, 8001500 <main+0x158>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f830 	bl	80004d8 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb22 	bl	8000ac8 <__aeabi_d2f>
 8001484:	4603      	mov	r3, r0
 8001486:	603b      	str	r3, [r7, #0]
      sprintf(message1,"NTC_R:%.2f,T:%.2f",NTC_R,temperature);
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7fe ffcd 	bl	8000428 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	68b8      	ldr	r0, [r7, #8]
 8001494:	f7fe ffc8 	bl	8000428 <__aeabi_f2d>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	e9cd 2300 	strd	r2, r3, [sp]
 80014a0:	4622      	mov	r2, r4
 80014a2:	462b      	mov	r3, r5
 80014a4:	491b      	ldr	r1, [pc, #108]	@ (8001514 <main+0x16c>)
 80014a6:	481c      	ldr	r0, [pc, #112]	@ (8001518 <main+0x170>)
 80014a8:	f004 fb36 	bl	8005b18 <siprintf>
      sprintf(message2,"ADC:%d,V:%.2f",values[1],voltage);
 80014ac:	4b17      	ldr	r3, [pc, #92]	@ (800150c <main+0x164>)
 80014ae:	685c      	ldr	r4, [r3, #4]
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f7fe ffb9 	bl	8000428 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	e9cd 2300 	strd	r2, r3, [sp]
 80014be:	4622      	mov	r2, r4
 80014c0:	4916      	ldr	r1, [pc, #88]	@ (800151c <main+0x174>)
 80014c2:	4817      	ldr	r0, [pc, #92]	@ (8001520 <main+0x178>)
 80014c4:	f004 fb28 	bl	8005b18 <siprintf>
      OLED_NewFrame();
 80014c8:	f000 f9a0 	bl	800180c <OLED_NewFrame>
      OLED_PrintASCIIString(0,0,message1,&afont8x6,OLED_COLOR_NORMAL);
 80014cc:	2300      	movs	r3, #0
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <main+0x17c>)
 80014d2:	4a11      	ldr	r2, [pc, #68]	@ (8001518 <main+0x170>)
 80014d4:	2100      	movs	r1, #0
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 fcd0 	bl	8001e7c <OLED_PrintASCIIString>
      OLED_PrintASCIIString(0,17,message2,&afont8x6,OLED_COLOR_NORMAL);
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <main+0x17c>)
 80014e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001520 <main+0x178>)
 80014e4:	2111      	movs	r1, #17
 80014e6:	2000      	movs	r0, #0
 80014e8:	f000 fcc8 	bl	8001e7c <OLED_PrintASCIIString>
      OLED_ShowFrame();
 80014ec:	f000 f99a 	bl	8001824 <OLED_ShowFrame>
      NTC_R= ADC2Resistance(values[0]);
 80014f0:	bf00      	nop
 80014f2:	e783      	b.n	80013fc <main+0x54>
 80014f4:	f3af 8000 	nop.w
 80014f8:	00000000 	.word	0x00000000
 80014fc:	40affe00 	.word	0x40affe00
 8001500:	66666666 	.word	0x66666666
 8001504:	400a6666 	.word	0x400a6666
 8001508:	200001f0 	.word	0x200001f0
 800150c:	200002b8 	.word	0x200002b8
 8001510:	3ff33333 	.word	0x3ff33333
 8001514:	08009390 	.word	0x08009390
 8001518:	200002c8 	.word	0x200002c8
 800151c:	080093a4 	.word	0x080093a4
 8001520:	200002fc 	.word	0x200002fc
 8001524:	080095dc 	.word	0x080095dc

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b094      	sub	sp, #80	@ 0x50
 800152c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001532:	2228      	movs	r2, #40	@ 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 fb53 	bl	8005be2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001558:	2301      	movs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800155c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001560:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001566:	2301      	movs	r3, #1
 8001568:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001574:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001578:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fc3e 	bl	8003e00 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800158a:	f000 f828 	bl	80015de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800159e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2102      	movs	r1, #2
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 feaa 	bl	8004304 <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80015b6:	f000 f812 	bl	80015de <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ba:	2302      	movs	r3, #2
 80015bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f82a 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015d2:	f000 f804 	bl	80015de <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	@ 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e2:	b672      	cpsid	i
}
 80015e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e6:	bf00      	nop
 80015e8:	e7fd      	b.n	80015e6 <Error_Handler+0x8>
	...

080015ec <ADC2Resistance>:
//
// Created by tKinsde on 2025/4/21.
//
#include "ntc.h"
float ADC2Resistance(uint32_t adc_value) {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    return (adc_value / (4095.0f - adc_value)) * 10000.0f;
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fb6d 	bl	8000cd4 <__aeabi_ui2f>
 80015fa:	4604      	mov	r4, r0
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fb69 	bl	8000cd4 <__aeabi_ui2f>
 8001602:	4603      	mov	r3, r0
 8001604:	4619      	mov	r1, r3
 8001606:	4809      	ldr	r0, [pc, #36]	@ (800162c <ADC2Resistance+0x40>)
 8001608:	f7ff fab2 	bl	8000b70 <__aeabi_fsub>
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	4620      	mov	r0, r4
 8001612:	f7ff fc6b 	bl	8000eec <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	4905      	ldr	r1, [pc, #20]	@ (8001630 <ADC2Resistance+0x44>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fbb2 	bl	8000d84 <__aeabi_fmul>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bd90      	pop	{r4, r7, pc}
 800162a:	bf00      	nop
 800162c:	457ff000 	.word	0x457ff000
 8001630:	461c4000 	.word	0x461c4000
 8001634:	00000000 	.word	0x00000000

08001638 <resistance2Temperature>:
float resistance2Temperature(float R1) {
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    float B = 3950.0f;
 8001640:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <resistance2Temperature+0xc8>)
 8001642:	617b      	str	r3, [r7, #20]
    float R2 = 10000.0f;
 8001644:	4b2f      	ldr	r3, [pc, #188]	@ (8001704 <resistance2Temperature+0xcc>)
 8001646:	613b      	str	r3, [r7, #16]
    float T2 = 25.0f;
 8001648:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <resistance2Temperature+0xd0>)
 800164a:	60fb      	str	r3, [r7, #12]
    return (1.0 / ((1.0 / B) * log(R1 / R2) + (1.0 / (T2 + 273.15))) - 273.15);
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7fe feeb 	bl	8000428 <__aeabi_f2d>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	f04f 0000 	mov.w	r0, #0
 800165a:	492c      	ldr	r1, [pc, #176]	@ (800170c <resistance2Temperature+0xd4>)
 800165c:	f7ff f866 	bl	800072c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fc3e 	bl	8000eec <__aeabi_fdiv>
 8001670:	4603      	mov	r3, r0
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fed8 	bl	8000428 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f003 f93a 	bl	80048f8 <log>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe ff24 	bl	80004d8 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7fe fec5 	bl	8000428 <__aeabi_f2d>
 800169e:	a316      	add	r3, pc, #88	@ (adr r3, 80016f8 <resistance2Temperature+0xc0>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe fd62 	bl	800016c <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	4916      	ldr	r1, [pc, #88]	@ (800170c <resistance2Temperature+0xd4>)
 80016b2:	f7ff f83b 	bl	800072c <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4620      	mov	r0, r4
 80016bc:	4629      	mov	r1, r5
 80016be:	f7fe fd55 	bl	800016c <__adddf3>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	f04f 0000 	mov.w	r0, #0
 80016ca:	4910      	ldr	r1, [pc, #64]	@ (800170c <resistance2Temperature+0xd4>)
 80016cc:	f7ff f82e 	bl	800072c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a307      	add	r3, pc, #28	@ (adr r3, 80016f8 <resistance2Temperature+0xc0>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe fd43 	bl	8000168 <__aeabi_dsub>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff f9ed 	bl	8000ac8 <__aeabi_d2f>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	66666666 	.word	0x66666666
 80016fc:	40711266 	.word	0x40711266
 8001700:	4576e000 	.word	0x4576e000
 8001704:	461c4000 	.word	0x461c4000
 8001708:	41c80000 	.word	0x41c80000
 800170c:	3ff00000 	.word	0x3ff00000

08001710 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af02      	add	r7, sp, #8
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	b29b      	uxth	r3, r3
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	9200      	str	r2, [sp, #0]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	217a      	movs	r1, #122	@ 0x7a
 800172a:	4803      	ldr	r0, [pc, #12]	@ (8001738 <OLED_Send+0x28>)
 800172c:	f002 f810 	bl	8003750 <HAL_I2C_Master_Transmit>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000264 	.word	0x20000264

0800173c <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8001746:	4a05      	ldr	r2, [pc, #20]	@ (800175c <OLED_SendCmd+0x20>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 800174c:	2102      	movs	r1, #2
 800174e:	4803      	ldr	r0, [pc, #12]	@ (800175c <OLED_SendCmd+0x20>)
 8001750:	f7ff ffde 	bl	8001710 <OLED_Send>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000730 	.word	0x20000730

08001760 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8001764:	20ae      	movs	r0, #174	@ 0xae
 8001766:	f7ff ffe9 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff ffe6 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8001770:	2010      	movs	r0, #16
 8001772:	f7ff ffe3 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 8001776:	2040      	movs	r0, #64	@ 0x40
 8001778:	f7ff ffe0 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 800177c:	20b0      	movs	r0, #176	@ 0xb0
 800177e:	f7ff ffdd 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 8001782:	2081      	movs	r0, #129	@ 0x81
 8001784:	f7ff ffda 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001788:	20cf      	movs	r0, #207	@ 0xcf
 800178a:	f7ff ffd7 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 800178e:	20a1      	movs	r0, #161	@ 0xa1
 8001790:	f7ff ffd4 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8001794:	20a6      	movs	r0, #166	@ 0xa6
 8001796:	f7ff ffd1 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 800179a:	20a8      	movs	r0, #168	@ 0xa8
 800179c:	f7ff ffce 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 80017a0:	203f      	movs	r0, #63	@ 0x3f
 80017a2:	f7ff ffcb 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 80017a6:	20ad      	movs	r0, #173	@ 0xad
 80017a8:	f7ff ffc8 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 80017ac:	208b      	movs	r0, #139	@ 0x8b
 80017ae:	f7ff ffc5 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 80017b2:	2033      	movs	r0, #51	@ 0x33
 80017b4:	f7ff ffc2 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 80017b8:	20c8      	movs	r0, #200	@ 0xc8
 80017ba:	f7ff ffbf 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 80017be:	20d3      	movs	r0, #211	@ 0xd3
 80017c0:	f7ff ffbc 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ffb9 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 80017ca:	20d5      	movs	r0, #213	@ 0xd5
 80017cc:	f7ff ffb6 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 80017d0:	20c0      	movs	r0, #192	@ 0xc0
 80017d2:	f7ff ffb3 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 80017d6:	20d9      	movs	r0, #217	@ 0xd9
 80017d8:	f7ff ffb0 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 80017dc:	201f      	movs	r0, #31
 80017de:	f7ff ffad 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 80017e2:	20da      	movs	r0, #218	@ 0xda
 80017e4:	f7ff ffaa 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80017e8:	2012      	movs	r0, #18
 80017ea:	f7ff ffa7 	bl	800173c <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 80017ee:	20db      	movs	r0, #219	@ 0xdb
 80017f0:	f7ff ffa4 	bl	800173c <OLED_SendCmd>
  OLED_SendCmd(0x40);
 80017f4:	2040      	movs	r0, #64	@ 0x40
 80017f6:	f7ff ffa1 	bl	800173c <OLED_SendCmd>

  OLED_NewFrame();
 80017fa:	f000 f807 	bl	800180c <OLED_NewFrame>
  OLED_ShowFrame();
 80017fe:	f000 f811 	bl	8001824 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001802:	20af      	movs	r0, #175	@ 0xaf
 8001804:	f7ff ff9a 	bl	800173c <OLED_SendCmd>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001810:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001814:	2100      	movs	r1, #0
 8001816:	4802      	ldr	r0, [pc, #8]	@ (8001820 <OLED_NewFrame+0x14>)
 8001818:	f004 f9e3 	bl	8005be2 <memset>
  
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000330 	.word	0x20000330

08001824 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <OLED_ShowFrame+0x5c>)
 800182c:	2240      	movs	r2, #64	@ 0x40
 800182e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	e01b      	b.n	800186e <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3b50      	subs	r3, #80	@ 0x50
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff7d 	bl	800173c <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 8001842:	2002      	movs	r0, #2
 8001844:	f7ff ff7a 	bl	800173c <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001848:	2010      	movs	r0, #16
 800184a:	f7ff ff77 	bl	800173c <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800184e:	480d      	ldr	r0, [pc, #52]	@ (8001884 <OLED_ShowFrame+0x60>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	01db      	lsls	r3, r3, #7
 8001854:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <OLED_ShowFrame+0x64>)
 8001856:	4413      	add	r3, r2
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	4619      	mov	r1, r3
 800185c:	f004 fa4f 	bl	8005cfe <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001860:	2181      	movs	r1, #129	@ 0x81
 8001862:	4807      	ldr	r0, [pc, #28]	@ (8001880 <OLED_ShowFrame+0x5c>)
 8001864:	f7ff ff54 	bl	8001710 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	3301      	adds	r3, #1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b07      	cmp	r3, #7
 8001872:	d9e0      	bls.n	8001836 <OLED_ShowFrame+0x12>
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000734 	.word	0x20000734
 8001884:	20000735 	.word	0x20000735
 8001888:	20000330 	.word	0x20000330

0800188c <OLED_Clean>:

//清屏
void OLED_Clean()
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8001890:	f7ff ffbc 	bl	800180c <OLED_NewFrame>
    OLED_ShowFrame();
 8001894:	f7ff ffc6 	bl	8001824 <OLED_ShowFrame>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
 80018a6:	460b      	mov	r3, r1
 80018a8:	71bb      	strb	r3, [r7, #6]
 80018aa:	4613      	mov	r3, r2
 80018ac:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db43      	blt.n	800193e <OLED_SetPixel+0xa2>
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80018ba:	d840      	bhi.n	800193e <OLED_SetPixel+0xa2>
  if (!color) {
 80018bc:	797b      	ldrb	r3, [r7, #5]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d11d      	bne.n	80018fe <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 80018c2:	79bb      	ldrb	r3, [r7, #6]
 80018c4:	08db      	lsrs	r3, r3, #3
 80018c6:	b2d8      	uxtb	r0, r3
 80018c8:	4602      	mov	r2, r0
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	491e      	ldr	r1, [pc, #120]	@ (8001948 <OLED_SetPixel+0xac>)
 80018ce:	01d2      	lsls	r2, r2, #7
 80018d0:	440a      	add	r2, r1
 80018d2:	4413      	add	r3, r2
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b259      	sxtb	r1, r3
 80018ea:	4602      	mov	r2, r0
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	b2c8      	uxtb	r0, r1
 80018f0:	4915      	ldr	r1, [pc, #84]	@ (8001948 <OLED_SetPixel+0xac>)
 80018f2:	01d2      	lsls	r2, r2, #7
 80018f4:	440a      	add	r2, r1
 80018f6:	4413      	add	r3, r2
 80018f8:	4602      	mov	r2, r0
 80018fa:	701a      	strb	r2, [r3, #0]
 80018fc:	e020      	b.n	8001940 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 80018fe:	79bb      	ldrb	r3, [r7, #6]
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	4602      	mov	r2, r0
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	490f      	ldr	r1, [pc, #60]	@ (8001948 <OLED_SetPixel+0xac>)
 800190a:	01d2      	lsls	r2, r2, #7
 800190c:	440a      	add	r2, r1
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b25a      	sxtb	r2, r3
 8001914:	79bb      	ldrb	r3, [r7, #6]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	2101      	movs	r1, #1
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	b25b      	sxtb	r3, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	b25b      	sxtb	r3, r3
 8001926:	4013      	ands	r3, r2
 8001928:	b259      	sxtb	r1, r3
 800192a:	4602      	mov	r2, r0
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	b2c8      	uxtb	r0, r1
 8001930:	4905      	ldr	r1, [pc, #20]	@ (8001948 <OLED_SetPixel+0xac>)
 8001932:	01d2      	lsls	r2, r2, #7
 8001934:	440a      	add	r2, r1
 8001936:	4413      	add	r3, r2
 8001938:	4602      	mov	r2, r0
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e000      	b.n	8001940 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 800193e:	bf00      	nop
  }
}
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000330 	.word	0x20000330

0800194c <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 800194c:	b490      	push	{r4, r7}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4623      	mov	r3, r4
 800195c:	71fb      	strb	r3, [r7, #7]
 800195e:	4603      	mov	r3, r0
 8001960:	71bb      	strb	r3, [r7, #6]
 8001962:	460b      	mov	r3, r1
 8001964:	717b      	strb	r3, [r7, #5]
 8001966:	4613      	mov	r3, r2
 8001968:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b07      	cmp	r3, #7
 800196e:	d85f      	bhi.n	8001a30 <OLED_SetByte_Fine+0xe4>
 8001970:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db5b      	blt.n	8001a30 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 8001978:	7d3b      	ldrb	r3, [r7, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d002      	beq.n	8001984 <OLED_SetByte_Fine+0x38>
 800197e:	797b      	ldrb	r3, [r7, #5]
 8001980:	43db      	mvns	r3, r3
 8001982:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8001984:	7c3b      	ldrb	r3, [r7, #16]
 8001986:	3301      	adds	r3, #1
 8001988:	22ff      	movs	r2, #255	@ 0xff
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	b25a      	sxtb	r2, r3
 8001990:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001994:	4313      	orrs	r3, r2
 8001996:	b25a      	sxtb	r2, r3
 8001998:	793b      	ldrb	r3, [r7, #4]
 800199a:	f1c3 0308 	rsb	r3, r3, #8
 800199e:	21ff      	movs	r1, #255	@ 0xff
 80019a0:	fa41 f303 	asr.w	r3, r1, r3
 80019a4:	b25b      	sxtb	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <OLED_SetByte_Fine+0xf0>)
 80019ae:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	79bb      	ldrb	r3, [r7, #6]
 80019b4:	4922      	ldr	r1, [pc, #136]	@ (8001a40 <OLED_SetByte_Fine+0xf4>)
 80019b6:	01d2      	lsls	r2, r2, #7
 80019b8:	440a      	add	r2, r1
 80019ba:	4413      	add	r3, r2
 80019bc:	7818      	ldrb	r0, [r3, #0]
 80019be:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <OLED_SetByte_Fine+0xf0>)
 80019c0:	7819      	ldrb	r1, [r3, #0]
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	79bb      	ldrb	r3, [r7, #6]
 80019c6:	4001      	ands	r1, r0
 80019c8:	b2c8      	uxtb	r0, r1
 80019ca:	491d      	ldr	r1, [pc, #116]	@ (8001a40 <OLED_SetByte_Fine+0xf4>)
 80019cc:	01d2      	lsls	r2, r2, #7
 80019ce:	440a      	add	r2, r1
 80019d0:	4413      	add	r3, r2
 80019d2:	4602      	mov	r2, r0
 80019d4:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80019d6:	7c3b      	ldrb	r3, [r7, #16]
 80019d8:	3301      	adds	r3, #1
 80019da:	22ff      	movs	r2, #255	@ 0xff
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	b25a      	sxtb	r2, r3
 80019e6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019ea:	4013      	ands	r3, r2
 80019ec:	b25a      	sxtb	r2, r3
 80019ee:	793b      	ldrb	r3, [r7, #4]
 80019f0:	f1c3 0308 	rsb	r3, r3, #8
 80019f4:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80019f8:	fa41 f303 	asr.w	r3, r1, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <OLED_SetByte_Fine+0xf0>)
 8001a06:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <OLED_SetByte_Fine+0xf4>)
 8001a0e:	01d2      	lsls	r2, r2, #7
 8001a10:	440a      	add	r2, r1
 8001a12:	4413      	add	r3, r2
 8001a14:	7818      	ldrb	r0, [r3, #0]
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <OLED_SetByte_Fine+0xf0>)
 8001a18:	7819      	ldrb	r1, [r3, #0]
 8001a1a:	79fa      	ldrb	r2, [r7, #7]
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	4301      	orrs	r1, r0
 8001a20:	b2c8      	uxtb	r0, r1
 8001a22:	4907      	ldr	r1, [pc, #28]	@ (8001a40 <OLED_SetByte_Fine+0xf4>)
 8001a24:	01d2      	lsls	r2, r2, #7
 8001a26:	440a      	add	r2, r1
 8001a28:	4413      	add	r3, r2
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	e000      	b.n	8001a32 <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 8001a30:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc90      	pop	{r4, r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	200007b5 	.word	0x200007b5
 8001a40:	20000330 	.word	0x20000330

08001a44 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4623      	mov	r3, r4
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	4603      	mov	r3, r0
 8001a58:	71bb      	strb	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	717b      	strb	r3, [r7, #5]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001a62:	79bb      	ldrb	r3, [r7, #6]
 8001a64:	08db      	lsrs	r3, r3, #3
 8001a66:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8001a70:	7bba      	ldrb	r2, [r7, #14]
 8001a72:	793b      	ldrb	r3, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	dd29      	ble.n	8001ace <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001a7a:	797a      	ldrb	r2, [r7, #5]
 8001a7c:	7bbb      	ldrb	r3, [r7, #14]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	7bbc      	ldrb	r4, [r7, #14]
 8001a86:	79f9      	ldrb	r1, [r7, #7]
 8001a88:	7bf8      	ldrb	r0, [r7, #15]
 8001a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2307      	movs	r3, #7
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4623      	mov	r3, r4
 8001a96:	f7ff ff59 	bl	800194c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b2d8      	uxtb	r0, r3
 8001aa0:	797a      	ldrb	r2, [r7, #5]
 8001aa2:	7bbb      	ldrb	r3, [r7, #14]
 8001aa4:	f1c3 0308 	rsb	r3, r3, #8
 8001aa8:	fa42 f303 	asr.w	r3, r2, r3
 8001aac:	b2dc      	uxtb	r4, r3
 8001aae:	793a      	ldrb	r2, [r7, #4]
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3b09      	subs	r3, #9
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	79f9      	ldrb	r1, [r7, #7]
 8001abc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001ac0:	9201      	str	r2, [sp, #4]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	f7ff ff40 	bl	800194c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001acc:	e015      	b.n	8001afa <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001ace:	797a      	ldrb	r2, [r7, #5]
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	b2dc      	uxtb	r4, r3
 8001ad8:	7bba      	ldrb	r2, [r7, #14]
 8001ada:	793b      	ldrb	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	7bbd      	ldrb	r5, [r7, #14]
 8001ae6:	79f9      	ldrb	r1, [r7, #7]
 8001ae8:	7bf8      	ldrb	r0, [r7, #15]
 8001aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aee:	9201      	str	r2, [sp, #4]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	462b      	mov	r3, r5
 8001af4:	4622      	mov	r2, r4
 8001af6:	f7ff ff29 	bl	800194c <OLED_SetByte_Fine>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdb0      	pop	{r4, r5, r7, pc}

08001b02 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b087      	sub	sp, #28
 8001b06:	af02      	add	r7, sp, #8
 8001b08:	4604      	mov	r4, r0
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4623      	mov	r3, r4
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4603      	mov	r3, r0
 8001b16:	71bb      	strb	r3, [r7, #6]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	717b      	strb	r3, [r7, #5]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001b20:	79bb      	ldrb	r3, [r7, #6]
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8001b2e:	797a      	ldrb	r2, [r7, #5]
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	7bbc      	ldrb	r4, [r7, #14]
 8001b3a:	79f9      	ldrb	r1, [r7, #7]
 8001b3c:	7bf8      	ldrb	r0, [r7, #15]
 8001b3e:	793b      	ldrb	r3, [r7, #4]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2307      	movs	r3, #7
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4623      	mov	r3, r4
 8001b48:	f7ff ff00 	bl	800194c <OLED_SetByte_Fine>
  if (bit) {
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d014      	beq.n	8001b7c <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2d8      	uxtb	r0, r3
 8001b58:	797a      	ldrb	r2, [r7, #5]
 8001b5a:	7bbb      	ldrb	r3, [r7, #14]
 8001b5c:	f1c3 0308 	rsb	r3, r3, #8
 8001b60:	fa42 f303 	asr.w	r3, r2, r3
 8001b64:	b2dc      	uxtb	r4, r3
 8001b66:	7bbb      	ldrb	r3, [r7, #14]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	79f9      	ldrb	r1, [r7, #7]
 8001b6e:	793a      	ldrb	r2, [r7, #4]
 8001b70:	9201      	str	r2, [sp, #4]
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	4622      	mov	r2, r4
 8001b78:	f7ff fee8 	bl	800194c <OLED_SetByte_Fine>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b087      	sub	sp, #28
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	603a      	str	r2, [r7, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	71bb      	strb	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001b9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b9e:	08db      	lsrs	r3, r3, #3
 8001ba0:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001ba2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e025      	b.n	8001bfe <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73bb      	strb	r3, [r7, #14]
 8001bb6:	e01b      	b.n	8001bf0 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	7bbb      	ldrb	r3, [r7, #14]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	79bb      	ldrb	r3, [r7, #6]
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2dc      	uxtb	r4, r3
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	7bbb      	ldrb	r3, [r7, #14]
 8001bd0:	7979      	ldrb	r1, [r7, #5]
 8001bd2:	fb01 f303 	mul.w	r3, r1, r3
 8001bd6:	4413      	add	r3, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001be4:	4621      	mov	r1, r4
 8001be6:	f7ff ff8c 	bl	8001b02 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001bea:	7bbb      	ldrb	r3, [r7, #14]
 8001bec:	3301      	adds	r3, #1
 8001bee:	73bb      	strb	r3, [r7, #14]
 8001bf0:	7bba      	ldrb	r2, [r7, #14]
 8001bf2:	7b3b      	ldrb	r3, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d3df      	bcc.n	8001bb8 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	797b      	ldrb	r3, [r7, #5]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3d5      	bcc.n	8001bb2 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 8001c06:	7afb      	ldrb	r3, [r7, #11]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d028      	beq.n	8001c5e <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001c0c:	797b      	ldrb	r3, [r7, #5]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	7b3a      	ldrb	r2, [r7, #12]
 8001c12:	b292      	uxth	r2, r2
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	737b      	strb	r3, [r7, #13]
 8001c1e:	e01a      	b.n	8001c56 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001c20:	79fa      	ldrb	r2, [r7, #7]
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	4413      	add	r3, r2
 8001c26:	b2d8      	uxtb	r0, r3
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	4413      	add	r3, r2
 8001c32:	b2d9      	uxtb	r1, r3
 8001c34:	893a      	ldrh	r2, [r7, #8]
 8001c36:	7b7b      	ldrb	r3, [r7, #13]
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	7afc      	ldrb	r4, [r7, #11]
 8001c44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	f7ff fefa 	bl	8001a44 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	3301      	adds	r3, #1
 8001c54:	737b      	strb	r3, [r7, #13]
 8001c56:	7b7a      	ldrb	r2, [r7, #13]
 8001c58:	797b      	ldrb	r3, [r7, #5]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3e0      	bcc.n	8001c20 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}

08001c66 <OLED_DrawCircle>:
 * @param y 圆心纵坐标
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color) {
 8001c66:	b590      	push	{r4, r7, lr}
 8001c68:	b085      	sub	sp, #20
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	4608      	mov	r0, r1
 8001c70:	4611      	mov	r1, r2
 8001c72:	461a      	mov	r2, r3
 8001c74:	4623      	mov	r3, r4
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	4603      	mov	r3, r0
 8001c7a:	71bb      	strb	r3, [r7, #6]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	717b      	strb	r3, [r7, #5]
 8001c80:	4613      	mov	r3, r2
 8001c82:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 8001c84:	2300      	movs	r3, #0
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	797b      	ldrb	r3, [r7, #5]
 8001c8a:	81bb      	strh	r3, [r7, #12]
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f1c3 0303 	rsb	r3, r3, #3
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	817b      	strh	r3, [r7, #10]
  while (a <= b) {
 8001c9c:	e0b3      	b.n	8001e06 <OLED_DrawCircle+0x1a0>
    OLED_SetPixel(x - b, y - a, color);
 8001c9e:	89bb      	ldrh	r3, [r7, #12]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	79ba      	ldrb	r2, [r7, #6]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	793a      	ldrb	r2, [r7, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7ff fdf1 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8001cba:	89bb      	ldrh	r3, [r7, #12]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b2d8      	uxtb	r0, r3
 8001cc4:	89fb      	ldrh	r3, [r7, #14]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	79ba      	ldrb	r2, [r7, #6]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	793a      	ldrb	r2, [r7, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f7ff fde3 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8001cd6:	89fb      	ldrh	r3, [r7, #14]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	79fa      	ldrb	r2, [r7, #7]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	b2d8      	uxtb	r0, r3
 8001ce0:	89bb      	ldrh	r3, [r7, #12]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	793a      	ldrb	r2, [r7, #4]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f7ff fdd5 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 8001cf2:	89bb      	ldrh	r3, [r7, #12]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	79fa      	ldrb	r2, [r7, #7]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b2d8      	uxtb	r0, r3
 8001cfc:	89fb      	ldrh	r3, [r7, #14]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	79ba      	ldrb	r2, [r7, #6]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	793a      	ldrb	r2, [r7, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7ff fdc7 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8001d0e:	89fb      	ldrh	r3, [r7, #14]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	79fa      	ldrb	r2, [r7, #7]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b2d8      	uxtb	r0, r3
 8001d18:	89bb      	ldrh	r3, [r7, #12]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	79ba      	ldrb	r2, [r7, #6]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	793a      	ldrb	r2, [r7, #4]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7ff fdb9 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 8001d2a:	89bb      	ldrh	r3, [r7, #12]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	4413      	add	r3, r2
 8001d32:	b2d8      	uxtb	r0, r3
 8001d34:	89fb      	ldrh	r3, [r7, #14]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	793a      	ldrb	r2, [r7, #4]
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7ff fdab 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 8001d46:	89fb      	ldrh	r3, [r7, #14]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2d8      	uxtb	r0, r3
 8001d50:	89bb      	ldrh	r3, [r7, #12]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	79ba      	ldrb	r2, [r7, #6]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	793a      	ldrb	r2, [r7, #4]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7ff fd9d 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 8001d62:	89fb      	ldrh	r3, [r7, #14]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	4413      	add	r3, r2
 8001d6a:	b2d8      	uxtb	r0, r3
 8001d6c:	89bb      	ldrh	r3, [r7, #12]
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	79bb      	ldrb	r3, [r7, #6]
 8001d72:	4413      	add	r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	793a      	ldrb	r2, [r7, #4]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7ff fd8f 	bl	800189c <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8001d7e:	89bb      	ldrh	r3, [r7, #12]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	b2d8      	uxtb	r0, r3
 8001d88:	89fb      	ldrh	r3, [r7, #14]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	793a      	ldrb	r2, [r7, #4]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7ff fd81 	bl	800189c <OLED_SetPixel>
    a++;
 8001d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	81fb      	strh	r3, [r7, #14]
    if (di < 0) {
 8001da6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	da09      	bge.n	8001dc2 <OLED_DrawCircle+0x15c>
      di += 4 * a + 6;
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	897b      	ldrh	r3, [r7, #10]
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3306      	adds	r3, #6
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	817b      	strh	r3, [r7, #10]
 8001dc0:	e013      	b.n	8001dea <OLED_DrawCircle+0x184>
    } else {
      di += 10 + 4 * (a - b);
 8001dc2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dc6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	897b      	ldrh	r3, [r7, #10]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	330a      	adds	r3, #10
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	817b      	strh	r3, [r7, #10]
      b--;
 8001dde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2d8      	uxtb	r0, r3
 8001df4:	89bb      	ldrh	r3, [r7, #12]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	79bb      	ldrb	r3, [r7, #6]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	793a      	ldrb	r2, [r7, #4]
 8001e00:	4619      	mov	r1, r3
 8001e02:	f7ff fd4b 	bl	800189c <OLED_SetPixel>
  while (a <= b) {
 8001e06:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001e0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	f77f af45 	ble.w	8001c9e <OLED_DrawCircle+0x38>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}

08001e1e <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8001e1e:	b5b0      	push	{r4, r5, r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af02      	add	r7, sp, #8
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	71bb      	strb	r3, [r7, #6]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	797b      	ldrb	r3, [r7, #5]
 8001e38:	f1a3 0120 	sub.w	r1, r3, #32
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	3307      	adds	r3, #7
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	da00      	bge.n	8001e48 <OLED_PrintASCIIChar+0x2a>
 8001e46:	3307      	adds	r3, #7
 8001e48:	10db      	asrs	r3, r3, #3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	785b      	ldrb	r3, [r3, #1]
 8001e50:	fb00 f303 	mul.w	r3, r0, r3
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	18d4      	adds	r4, r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	785d      	ldrb	r5, [r3, #1]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	79b9      	ldrb	r1, [r7, #6]
 8001e64:	79f8      	ldrb	r0, [r7, #7]
 8001e66:	7e3a      	ldrb	r2, [r7, #24]
 8001e68:	9201      	str	r2, [sp, #4]
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	462b      	mov	r3, r5
 8001e6e:	4622      	mov	r2, r4
 8001e70:	f7ff fe88 	bl	8001b84 <OLED_SetBlock>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}

08001e7c <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 8001e92:	e011      	b.n	8001eb8 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	7bb9      	ldrb	r1, [r7, #14]
 8001e9a:	7df8      	ldrb	r0, [r7, #23]
 8001e9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f7ff ffbb 	bl	8001e1e <OLED_PrintASCIIChar>
    x0 += font->w;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	785a      	ldrb	r2, [r3, #1]
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	4413      	add	r3, r2
 8001eb0:	75fb      	strb	r3, [r7, #23]
    str++;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1e9      	bne.n	8001e94 <OLED_PrintASCIIString+0x18>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <OLED_Startup>:
    }
  }
}

void OLED_Startup()
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; ++i) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	e01a      	b.n	8001f0c <OLED_Startup+0x42>

        OLED_Clean();
 8001ed6:	f7ff fcd9 	bl	800188c <OLED_Clean>
        OLED_DrawCircle(64,32,4*i,OLED_COLOR_NORMAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2120      	movs	r1, #32
 8001ee6:	2040      	movs	r0, #64	@ 0x40
 8001ee8:	f7ff febd 	bl	8001c66 <OLED_DrawCircle>
        OLED_DrawCircle(64,32,2*i,OLED_COLOR_NORMAL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	2040      	movs	r0, #64	@ 0x40
 8001efa:	f7ff feb4 	bl	8001c66 <OLED_DrawCircle>
        OLED_ShowFrame();
 8001efe:	f7ff fc91 	bl	8001824 <OLED_ShowFrame>
        //HAL_Delay(10);
        OLED_Clean();
 8001f02:	f7ff fcc3 	bl	800188c <OLED_Clean>
    for (int i = 0; i < 32; ++i) {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b1f      	cmp	r3, #31
 8001f10:	dde1      	ble.n	8001ed6 <OLED_Startup+0xc>
    }
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f22:	4b15      	ldr	r3, [pc, #84]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	6193      	str	r3, [r2, #24]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	61d3      	str	r3, [r2, #28]
 8001f46:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_MspInit+0x5c>)
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_MspInit+0x60>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <HAL_MspInit+0x60>)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40010000 	.word	0x40010000

08001f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <NMI_Handler+0x4>

08001f88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <MemManage_Handler+0x4>

08001f98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f000 f940 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <DMA1_Channel1_IRQHandler+0x10>)
 8001fde:	f000 ffbb 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000220 	.word	0x20000220

08001fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <_kill>:

int _kill(int pid, int sig)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002004:	f003 fe40 	bl	8005c88 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	2216      	movs	r2, #22
 800200c:	601a      	str	r2, [r3, #0]
  return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_exit>:

void _exit (int status)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002022:	f04f 31ff 	mov.w	r1, #4294967295
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffe7 	bl	8001ffa <_kill>
  while (1) {}    /* Make sure we hang here */
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <_exit+0x12>

08002030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e00a      	b.n	8002058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002042:	f3af 8000 	nop.w
 8002046:	4601      	mov	r1, r0
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf0      	blt.n	8002042 <_read+0x12>
  }

  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e009      	b.n	8002090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf1      	blt.n	800207c <_write+0x12>
  }
  return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_close>:

int _close(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f003 fda8 	bl	8005c88 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20005000 	.word	0x20005000
 8002164:	00000400 	.word	0x00000400
 8002168:	200007b8 	.word	0x200007b8
 800216c:	20000910 	.word	0x20000910

08002170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800217c:	f7ff fff8 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002182:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002184:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002198:	4c09      	ldr	r4, [pc, #36]	@ (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f003 fd75 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7ff f8fd 	bl	80013a8 <main>
  bx lr
 80021ae:	4770      	bx	lr
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80021b8:	08009a5c 	.word	0x08009a5c
  ldr r2, =_sbss
 80021bc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80021c0:	2000090c 	.word	0x2000090c

080021c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_Init+0x28>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_Init+0x28>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 fdc1 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	200f      	movs	r0, #15
 80021e0:	f000 f808 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fe9a 	bl	8001f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_InitTick+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_InitTick+0x58>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fdd9 	bl	8002dca <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f000 fda1 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	@ (8002250 <HAL_InitTick+0x5c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000000 	.word	0x20000000
 800224c:	20000008 	.word	0x20000008
 8002250:	20000004 	.word	0x20000004

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	@ (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	@ (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000008 	.word	0x20000008
 8002274:	200007bc 	.word	0x200007bc

08002278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	@ (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	200007bc 	.word	0x200007bc

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fff0 	bl	8002278 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffe0 	bl	8002278 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000008 	.word	0x20000008

080022d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0be      	b.n	8002474 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe ff26 	bl	8001164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 faff 	bl	800291c <ADC_ConversionStop_Disable>
 800231e:	4603      	mov	r3, r0
 8002320:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8099 	bne.w	8002462 <HAL_ADC_Init+0x18e>
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8095 	bne.w	8002462 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002354:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800235c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	4313      	orrs	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800236c:	d003      	beq.n	8002376 <HAL_ADC_Init+0xa2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_ADC_Init+0xa8>
 8002376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800237a:	e000      	b.n	800237e <HAL_ADC_Init+0xaa>
 800237c:	2300      	movs	r3, #0
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7d1b      	ldrb	r3, [r3, #20]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d119      	bne.n	80023c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	3b01      	subs	r3, #1
 800239a:	035a      	lsls	r2, r3, #13
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e00b      	b.n	80023c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b28      	ldr	r3, [pc, #160]	@ (800247c <HAL_ADC_Init+0x1a8>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f0:	d003      	beq.n	80023fa <HAL_ADC_Init+0x126>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d104      	bne.n	8002404 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	3b01      	subs	r3, #1
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <HAL_ADC_Init+0x1ac>)
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	429a      	cmp	r2, r3
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800243e:	e018      	b.n	8002472 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002444:	f023 0312 	bic.w	r3, r3, #18
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002460:	e007      	b.n	8002472 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffe1f7fd 	.word	0xffe1f7fd
 8002480:	ff1f0efe 	.word	0xff1f0efe

08002484 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a64      	ldr	r2, [pc, #400]	@ (800262c <HAL_ADC_Start_DMA+0x1a8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d004      	beq.n	80024a8 <HAL_ADC_Start_DMA+0x24>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a63      	ldr	r2, [pc, #396]	@ (8002630 <HAL_ADC_Start_DMA+0x1ac>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d106      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x32>
 80024a8:	4b60      	ldr	r3, [pc, #384]	@ (800262c <HAL_ADC_Start_DMA+0x1a8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f040 80b3 	bne.w	800261c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_Start_DMA+0x40>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0ae      	b.n	8002622 <HAL_ADC_Start_DMA+0x19e>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 f9cb 	bl	8002868 <ADC_Enable>
 80024d2:	4603      	mov	r3, r0
 80024d4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 809a 	bne.w	8002612 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024e6:	f023 0301 	bic.w	r3, r3, #1
 80024ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a4e      	ldr	r2, [pc, #312]	@ (8002630 <HAL_ADC_Start_DMA+0x1ac>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d105      	bne.n	8002508 <HAL_ADC_Start_DMA+0x84>
 80024fc:	4b4b      	ldr	r3, [pc, #300]	@ (800262c <HAL_ADC_Start_DMA+0x1a8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d115      	bne.n	8002534 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251e:	2b00      	cmp	r3, #0
 8002520:	d026      	beq.n	8002570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002526:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800252a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002532:	e01d      	b.n	8002570 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002538:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_ADC_Start_DMA+0x1a8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_ADC_Start_DMA+0xd0>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a38      	ldr	r2, [pc, #224]	@ (8002630 <HAL_ADC_Start_DMA+0x1ac>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d10d      	bne.n	8002570 <HAL_ADC_Start_DMA+0xec>
 8002554:	4b35      	ldr	r3, [pc, #212]	@ (800262c <HAL_ADC_Start_DMA+0x1a8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002568:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	f023 0206 	bic.w	r2, r3, #6
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002588:	e002      	b.n	8002590 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a25      	ldr	r2, [pc, #148]	@ (8002634 <HAL_ADC_Start_DMA+0x1b0>)
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a24      	ldr	r2, [pc, #144]	@ (8002638 <HAL_ADC_Start_DMA+0x1b4>)
 80025a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a23      	ldr	r2, [pc, #140]	@ (800263c <HAL_ADC_Start_DMA+0x1b8>)
 80025ae:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a18      	ldr	r0, [r3, #32]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	334c      	adds	r3, #76	@ 0x4c
 80025d4:	4619      	mov	r1, r3
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f000 fc5d 	bl	8002e98 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025e8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025ec:	d108      	bne.n	8002600 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025fe:	e00f      	b.n	8002620 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800260e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002610:	e006      	b.n	8002620 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800261a:	e001      	b.n	8002620 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002620:	7dfb      	ldrb	r3, [r7, #23]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40012400 	.word	0x40012400
 8002630:	40012800 	.word	0x40012800
 8002634:	0800299f 	.word	0x0800299f
 8002638:	08002a1b 	.word	0x08002a1b
 800263c:	08002a37 	.word	0x08002a37

08002640 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x20>
 8002694:	2302      	movs	r3, #2
 8002696:	e0dc      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1da>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d81c      	bhi.n	80026e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b05      	subs	r3, #5
 80026ba:	221f      	movs	r2, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	4019      	ands	r1, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b05      	subs	r3, #5
 80026d4:	fa00 f203 	lsl.w	r2, r0, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	@ 0x34
 80026e0:	e03c      	b.n	800275c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d81c      	bhi.n	8002724 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	3b23      	subs	r3, #35	@ 0x23
 80026fc:	221f      	movs	r2, #31
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	4019      	ands	r1, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b23      	subs	r3, #35	@ 0x23
 8002716:	fa00 f203 	lsl.w	r2, r0, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	430a      	orrs	r2, r1
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
 8002722:	e01b      	b.n	800275c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	3b41      	subs	r3, #65	@ 0x41
 8002736:	221f      	movs	r2, #31
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	4019      	ands	r1, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	3b41      	subs	r3, #65	@ 0x41
 8002750:	fa00 f203 	lsl.w	r2, r0, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b09      	cmp	r3, #9
 8002762:	d91c      	bls.n	800279e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68d9      	ldr	r1, [r3, #12]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	3b1e      	subs	r3, #30
 8002776:	2207      	movs	r2, #7
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	4019      	ands	r1, r3
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6898      	ldr	r0, [r3, #8]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	3b1e      	subs	r3, #30
 8002790:	fa00 f203 	lsl.w	r2, r0, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	e019      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	2207      	movs	r2, #7
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6898      	ldr	r0, [r3, #8]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	fa00 f203 	lsl.w	r2, r0, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027de:	2b11      	cmp	r3, #17
 80027e0:	d132      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1d      	ldr	r2, [pc, #116]	@ (800285c <HAL_ADC_ConfigChannel+0x1e4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d125      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d126      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002808:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b10      	cmp	r3, #16
 8002810:	d11a      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002812:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <HAL_ADC_ConfigChannel+0x1e8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <HAL_ADC_ConfigChannel+0x1ec>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	0c9a      	lsrs	r2, r3, #18
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002828:	e002      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3b01      	subs	r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f9      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1b2>
 8002836:	e007      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002850:	7bfb      	ldrb	r3, [r7, #15]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012400 	.word	0x40012400
 8002860:	20000000 	.word	0x20000000
 8002864:	431bde83 	.word	0x431bde83

08002868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d040      	beq.n	8002908 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0201 	orr.w	r2, r2, #1
 8002894:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002896:	4b1f      	ldr	r3, [pc, #124]	@ (8002914 <ADC_Enable+0xac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a1f      	ldr	r2, [pc, #124]	@ (8002918 <ADC_Enable+0xb0>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028a4:	e002      	b.n	80028ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f9      	bne.n	80028a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028b2:	f7ff fce1 	bl	8002278 <HAL_GetTick>
 80028b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028b8:	e01f      	b.n	80028fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ba:	f7ff fcdd 	bl	8002278 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d918      	bls.n	80028fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d011      	beq.n	80028fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028da:	f043 0210 	orr.w	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e007      	b.n	800290a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d1d8      	bne.n	80028ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000
 8002918:	431bde83 	.word	0x431bde83

0800291c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d12e      	bne.n	8002994 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002946:	f7ff fc97 	bl	8002278 <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800294c:	e01b      	b.n	8002986 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800294e:	f7ff fc93 	bl	8002278 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d914      	bls.n	8002986 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d10d      	bne.n	8002986 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d0dc      	beq.n	800294e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d127      	bne.n	8002a08 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80029ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80029d2:	d115      	bne.n	8002a00 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d105      	bne.n	8002a00 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fe1d 	bl	8002640 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a06:	e004      	b.n	8002a12 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fe12 	bl	8002652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f043 0204 	orr.w	r2, r3, #4
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fe01 	bl	8002664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e097      	b.n	8002bba <HAL_ADCEx_Calibration_Start+0x14e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ff42 	bl	800291c <ADC_ConversionStop_Disable>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fee3 	bl	8002868 <ADC_Enable>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 8081 	bne.w	8002bb0 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ab6:	f023 0302 	bic.w	r3, r3, #2
 8002aba:	f043 0202 	orr.w	r2, r3, #2
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002ac2:	4b40      	ldr	r3, [pc, #256]	@ (8002bc4 <HAL_ADCEx_Calibration_Start+0x158>)
 8002ac4:	681c      	ldr	r4, [r3, #0]
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f001 fe60 	bl	800478c <HAL_RCCEx_GetPeriphCLKFreq>
 8002acc:	4603      	mov	r3, r0
 8002ace:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002ad2:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002ad4:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002ad6:	e002      	b.n	8002ade <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002af4:	f7ff fbc0 	bl	8002278 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002afa:	e01b      	b.n	8002b34 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002afc:	f7ff fbbc 	bl	8002278 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b0a      	cmp	r3, #10
 8002b08:	d914      	bls.n	8002b34 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	f023 0312 	bic.w	r3, r3, #18
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e042      	b.n	8002bba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1dc      	bne.n	8002afc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0204 	orr.w	r2, r2, #4
 8002b50:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b52:	f7ff fb91 	bl	8002278 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b58:	e01b      	b.n	8002b92 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b5a:	f7ff fb8d 	bl	8002278 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b0a      	cmp	r3, #10
 8002b66:	d914      	bls.n	8002b92 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f023 0312 	bic.w	r3, r3, #18
 8002b7e:	f043 0210 	orr.w	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e013      	b.n	8002bba <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1dc      	bne.n	8002b5a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba4:	f023 0303 	bic.w	r3, r3, #3
 8002ba8:	f043 0201 	orr.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000

08002bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfa:	4a04      	ldr	r2, [pc, #16]	@ (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60d3      	str	r3, [r2, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c14:	4b04      	ldr	r3, [pc, #16]	@ (8002c28 <__NVIC_GetPriorityGrouping+0x18>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0307 	and.w	r3, r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4906      	ldr	r1, [pc, #24]	@ (8002c60 <__NVIC_EnableIRQ+0x34>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	@ (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	@ (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	@ (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff90 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	@ (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	@ (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff2d 	bl	8002bc8 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff42 	bl	8002c10 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff90 	bl	8002cb8 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5f 	bl	8002c64 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff35 	bl	8002c2c <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e043      	b.n	8002e82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b22      	ldr	r3, [pc, #136]	@ (8002e8c <HAL_DMA_Init+0xa8>)
 8002e02:	4413      	add	r3, r2
 8002e04:	4a22      	ldr	r2, [pc, #136]	@ (8002e90 <HAL_DMA_Init+0xac>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	009a      	lsls	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a1f      	ldr	r2, [pc, #124]	@ (8002e94 <HAL_DMA_Init+0xb0>)
 8002e16:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e2e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	bffdfff8 	.word	0xbffdfff8
 8002e90:	cccccccd 	.word	0xcccccccd
 8002e94:	40020000 	.word	0x40020000

08002e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA_Start_IT+0x20>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	e04b      	b.n	8002f50 <HAL_DMA_Start_IT+0xb8>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d13a      	bne.n	8002f42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 f937 	bl	8003164 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 020e 	orr.w	r2, r2, #14
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e00f      	b.n	8002f30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0204 	bic.w	r2, r2, #4
 8002f1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 020a 	orr.w	r2, r2, #10
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	e005      	b.n	8002f4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	2204      	movs	r2, #4
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d04f      	beq.n	8003020 <HAL_DMA_IRQHandler+0xc8>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d04a      	beq.n	8003020 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a66      	ldr	r2, [pc, #408]	@ (8003148 <HAL_DMA_IRQHandler+0x1f0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d029      	beq.n	8003006 <HAL_DMA_IRQHandler+0xae>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a65      	ldr	r2, [pc, #404]	@ (800314c <HAL_DMA_IRQHandler+0x1f4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0xaa>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a63      	ldr	r2, [pc, #396]	@ (8003150 <HAL_DMA_IRQHandler+0x1f8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01a      	beq.n	8002ffc <HAL_DMA_IRQHandler+0xa4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a62      	ldr	r2, [pc, #392]	@ (8003154 <HAL_DMA_IRQHandler+0x1fc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x9e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a60      	ldr	r2, [pc, #384]	@ (8003158 <HAL_DMA_IRQHandler+0x200>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x98>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5f      	ldr	r2, [pc, #380]	@ (800315c <HAL_DMA_IRQHandler+0x204>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d102      	bne.n	8002fea <HAL_DMA_IRQHandler+0x92>
 8002fe4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002fe8:	e00e      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8002fea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fee:	e00b      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8002ff0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ff4:	e008      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8002ff6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ffa:	e005      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8002ffc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003000:	e002      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8003002:	2340      	movs	r3, #64	@ 0x40
 8003004:	e000      	b.n	8003008 <HAL_DMA_IRQHandler+0xb0>
 8003006:	2304      	movs	r3, #4
 8003008:	4a55      	ldr	r2, [pc, #340]	@ (8003160 <HAL_DMA_IRQHandler+0x208>)
 800300a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8094 	beq.w	800313e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800301e:	e08e      	b.n	800313e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003024:	2202      	movs	r2, #2
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d056      	beq.n	80030de <HAL_DMA_IRQHandler+0x186>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d051      	beq.n	80030de <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10b      	bne.n	8003060 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 020a 	bic.w	r2, r2, #10
 8003056:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a38      	ldr	r2, [pc, #224]	@ (8003148 <HAL_DMA_IRQHandler+0x1f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d029      	beq.n	80030be <HAL_DMA_IRQHandler+0x166>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a37      	ldr	r2, [pc, #220]	@ (800314c <HAL_DMA_IRQHandler+0x1f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMA_IRQHandler+0x162>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <HAL_DMA_IRQHandler+0x1f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01a      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x15c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a34      	ldr	r2, [pc, #208]	@ (8003154 <HAL_DMA_IRQHandler+0x1fc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d012      	beq.n	80030ae <HAL_DMA_IRQHandler+0x156>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a32      	ldr	r2, [pc, #200]	@ (8003158 <HAL_DMA_IRQHandler+0x200>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x150>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a31      	ldr	r2, [pc, #196]	@ (800315c <HAL_DMA_IRQHandler+0x204>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x14a>
 800309c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80030a0:	e00e      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030a6:	e00b      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030ac:	e008      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030b2:	e005      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030b8:	e002      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030ba:	2320      	movs	r3, #32
 80030bc:	e000      	b.n	80030c0 <HAL_DMA_IRQHandler+0x168>
 80030be:	2302      	movs	r3, #2
 80030c0:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_DMA_IRQHandler+0x208>)
 80030c2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d034      	beq.n	800313e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80030dc:	e02f      	b.n	800313e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2208      	movs	r2, #8
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d028      	beq.n	8003140 <HAL_DMA_IRQHandler+0x1e8>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d023      	beq.n	8003140 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 020e 	bic.w	r2, r2, #14
 8003106:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003110:	2101      	movs	r1, #1
 8003112:	fa01 f202 	lsl.w	r2, r1, r2
 8003116:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	4798      	blx	r3
    }
  }
  return;
 800313e:	bf00      	nop
 8003140:	bf00      	nop
}
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40020008 	.word	0x40020008
 800314c:	4002001c 	.word	0x4002001c
 8003150:	40020030 	.word	0x40020030
 8003154:	40020044 	.word	0x40020044
 8003158:	40020058 	.word	0x40020058
 800315c:	4002006c 	.word	0x4002006c
 8003160:	40020000 	.word	0x40020000

08003164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
 8003170:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317a:	2101      	movs	r1, #1
 800317c:	fa01 f202 	lsl.w	r2, r1, r2
 8003180:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b10      	cmp	r3, #16
 8003190:	d108      	bne.n	80031a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031a2:	e007      	b.n	80031b4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b08b      	sub	sp, #44	@ 0x2c
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d2:	e169      	b.n	80034a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031d4:	2201      	movs	r2, #1
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69fa      	ldr	r2, [r7, #28]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f040 8158 	bne.w	80034a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003460 <HAL_GPIO_Init+0x2a0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d05e      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 80031fc:	4a98      	ldr	r2, [pc, #608]	@ (8003460 <HAL_GPIO_Init+0x2a0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d875      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003202:	4a98      	ldr	r2, [pc, #608]	@ (8003464 <HAL_GPIO_Init+0x2a4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d058      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003208:	4a96      	ldr	r2, [pc, #600]	@ (8003464 <HAL_GPIO_Init+0x2a4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d86f      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800320e:	4a96      	ldr	r2, [pc, #600]	@ (8003468 <HAL_GPIO_Init+0x2a8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d052      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003214:	4a94      	ldr	r2, [pc, #592]	@ (8003468 <HAL_GPIO_Init+0x2a8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d869      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800321a:	4a94      	ldr	r2, [pc, #592]	@ (800346c <HAL_GPIO_Init+0x2ac>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d04c      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 8003220:	4a92      	ldr	r2, [pc, #584]	@ (800346c <HAL_GPIO_Init+0x2ac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d863      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003226:	4a92      	ldr	r2, [pc, #584]	@ (8003470 <HAL_GPIO_Init+0x2b0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d046      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
 800322c:	4a90      	ldr	r2, [pc, #576]	@ (8003470 <HAL_GPIO_Init+0x2b0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d85d      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 8003232:	2b12      	cmp	r3, #18
 8003234:	d82a      	bhi.n	800328c <HAL_GPIO_Init+0xcc>
 8003236:	2b12      	cmp	r3, #18
 8003238:	d859      	bhi.n	80032ee <HAL_GPIO_Init+0x12e>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <HAL_GPIO_Init+0x80>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	080032bb 	.word	0x080032bb
 8003244:	08003295 	.word	0x08003295
 8003248:	080032a7 	.word	0x080032a7
 800324c:	080032e9 	.word	0x080032e9
 8003250:	080032ef 	.word	0x080032ef
 8003254:	080032ef 	.word	0x080032ef
 8003258:	080032ef 	.word	0x080032ef
 800325c:	080032ef 	.word	0x080032ef
 8003260:	080032ef 	.word	0x080032ef
 8003264:	080032ef 	.word	0x080032ef
 8003268:	080032ef 	.word	0x080032ef
 800326c:	080032ef 	.word	0x080032ef
 8003270:	080032ef 	.word	0x080032ef
 8003274:	080032ef 	.word	0x080032ef
 8003278:	080032ef 	.word	0x080032ef
 800327c:	080032ef 	.word	0x080032ef
 8003280:	080032ef 	.word	0x080032ef
 8003284:	0800329d 	.word	0x0800329d
 8003288:	080032b1 	.word	0x080032b1
 800328c:	4a79      	ldr	r2, [pc, #484]	@ (8003474 <HAL_GPIO_Init+0x2b4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003292:	e02c      	b.n	80032ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	623b      	str	r3, [r7, #32]
          break;
 800329a:	e029      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	3304      	adds	r3, #4
 80032a2:	623b      	str	r3, [r7, #32]
          break;
 80032a4:	e024      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	3308      	adds	r3, #8
 80032ac:	623b      	str	r3, [r7, #32]
          break;
 80032ae:	e01f      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	330c      	adds	r3, #12
 80032b6:	623b      	str	r3, [r7, #32]
          break;
 80032b8:	e01a      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032c2:	2304      	movs	r3, #4
 80032c4:	623b      	str	r3, [r7, #32]
          break;
 80032c6:	e013      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d0:	2308      	movs	r3, #8
 80032d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	611a      	str	r2, [r3, #16]
          break;
 80032da:	e009      	b.n	80032f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032dc:	2308      	movs	r3, #8
 80032de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	615a      	str	r2, [r3, #20]
          break;
 80032e6:	e003      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032e8:	2300      	movs	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
          break;
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x130>
          break;
 80032ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2bff      	cmp	r3, #255	@ 0xff
 80032f4:	d801      	bhi.n	80032fa <HAL_GPIO_Init+0x13a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	e001      	b.n	80032fe <HAL_GPIO_Init+0x13e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2bff      	cmp	r3, #255	@ 0xff
 8003304:	d802      	bhi.n	800330c <HAL_GPIO_Init+0x14c>
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	e002      	b.n	8003312 <HAL_GPIO_Init+0x152>
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	3b08      	subs	r3, #8
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	210f      	movs	r1, #15
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	fa01 f303 	lsl.w	r3, r1, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	401a      	ands	r2, r3
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	fa01 f303 	lsl.w	r3, r1, r3
 800332c:	431a      	orrs	r2, r3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80b1 	beq.w	80034a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003340:	4b4d      	ldr	r3, [pc, #308]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a4c      	ldr	r2, [pc, #304]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6193      	str	r3, [r2, #24]
 800334c:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_GPIO_Init+0x2b8>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003358:	4a48      	ldr	r2, [pc, #288]	@ (800347c <HAL_GPIO_Init+0x2bc>)
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	3302      	adds	r3, #2
 8003360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a40      	ldr	r2, [pc, #256]	@ (8003480 <HAL_GPIO_Init+0x2c0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_GPIO_Init+0x1ec>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3f      	ldr	r2, [pc, #252]	@ (8003484 <HAL_GPIO_Init+0x2c4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00d      	beq.n	80033a8 <HAL_GPIO_Init+0x1e8>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3e      	ldr	r2, [pc, #248]	@ (8003488 <HAL_GPIO_Init+0x2c8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <HAL_GPIO_Init+0x1e4>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	@ (800348c <HAL_GPIO_Init+0x2cc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_GPIO_Init+0x1e0>
 800339c:	2303      	movs	r3, #3
 800339e:	e006      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a0:	2304      	movs	r3, #4
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033ac:	2300      	movs	r3, #0
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033be:	492f      	ldr	r1, [pc, #188]	@ (800347c <HAL_GPIO_Init+0x2bc>)
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	492c      	ldr	r1, [pc, #176]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	608b      	str	r3, [r1, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4928      	ldr	r1, [pc, #160]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4922      	ldr	r1, [pc, #136]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
 800340c:	e006      	b.n	800341c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800340e:	4b20      	ldr	r3, [pc, #128]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	43db      	mvns	r3, r3
 8003416:	491e      	ldr	r1, [pc, #120]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003418:	4013      	ands	r3, r2
 800341a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003428:	4b19      	ldr	r3, [pc, #100]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4918      	ldr	r1, [pc, #96]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e006      	b.n	8003444 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003436:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	43db      	mvns	r3, r3
 800343e:	4914      	ldr	r1, [pc, #80]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003440:	4013      	ands	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d021      	beq.n	8003494 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	490e      	ldr	r1, [pc, #56]	@ (8003490 <HAL_GPIO_Init+0x2d0>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	600b      	str	r3, [r1, #0]
 800345c:	e021      	b.n	80034a2 <HAL_GPIO_Init+0x2e2>
 800345e:	bf00      	nop
 8003460:	10320000 	.word	0x10320000
 8003464:	10310000 	.word	0x10310000
 8003468:	10220000 	.word	0x10220000
 800346c:	10210000 	.word	0x10210000
 8003470:	10120000 	.word	0x10120000
 8003474:	10110000 	.word	0x10110000
 8003478:	40021000 	.word	0x40021000
 800347c:	40010000 	.word	0x40010000
 8003480:	40010800 	.word	0x40010800
 8003484:	40010c00 	.word	0x40010c00
 8003488:	40011000 	.word	0x40011000
 800348c:	40011400 	.word	0x40011400
 8003490:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	43db      	mvns	r3, r3
 800349c:	4909      	ldr	r1, [pc, #36]	@ (80034c4 <HAL_GPIO_Init+0x304>)
 800349e:	4013      	ands	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80034a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a4:	3301      	adds	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f47f ae8e 	bne.w	80031d4 <HAL_GPIO_Init+0x14>
  }
}
 80034b8:	bf00      	nop
 80034ba:	bf00      	nop
 80034bc:	372c      	adds	r7, #44	@ 0x2c
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	40010400 	.word	0x40010400

080034c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e12b      	b.n	8003732 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd ff1c 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2224      	movs	r2, #36	@ 0x24
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800351a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800352a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800352c:	f001 f832 	bl	8004594 <HAL_RCC_GetPCLK1Freq>
 8003530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a81      	ldr	r2, [pc, #516]	@ (800373c <HAL_I2C_Init+0x274>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d807      	bhi.n	800354c <HAL_I2C_Init+0x84>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a80      	ldr	r2, [pc, #512]	@ (8003740 <HAL_I2C_Init+0x278>)
 8003540:	4293      	cmp	r3, r2
 8003542:	bf94      	ite	ls
 8003544:	2301      	movls	r3, #1
 8003546:	2300      	movhi	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e006      	b.n	800355a <HAL_I2C_Init+0x92>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a7d      	ldr	r2, [pc, #500]	@ (8003744 <HAL_I2C_Init+0x27c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0e7      	b.n	8003732 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4a78      	ldr	r2, [pc, #480]	@ (8003748 <HAL_I2C_Init+0x280>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0c9b      	lsrs	r3, r3, #18
 800356c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a6a      	ldr	r2, [pc, #424]	@ (800373c <HAL_I2C_Init+0x274>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d802      	bhi.n	800359c <HAL_I2C_Init+0xd4>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	e009      	b.n	80035b0 <HAL_I2C_Init+0xe8>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a69      	ldr	r2, [pc, #420]	@ (800374c <HAL_I2C_Init+0x284>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	099b      	lsrs	r3, r3, #6
 80035ae:	3301      	adds	r3, #1
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	495c      	ldr	r1, [pc, #368]	@ (800373c <HAL_I2C_Init+0x274>)
 80035cc:	428b      	cmp	r3, r1
 80035ce:	d819      	bhi.n	8003604 <HAL_I2C_Init+0x13c>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e59      	subs	r1, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	fbb1 f3f3 	udiv	r3, r1, r3
 80035de:	1c59      	adds	r1, r3, #1
 80035e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035e4:	400b      	ands	r3, r1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00a      	beq.n	8003600 <HAL_I2C_Init+0x138>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1e59      	subs	r1, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035fe:	e051      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003600:	2304      	movs	r3, #4
 8003602:	e04f      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d111      	bne.n	8003630 <HAL_I2C_Init+0x168>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	440b      	add	r3, r1
 800361a:	fbb0 f3f3 	udiv	r3, r0, r3
 800361e:	3301      	adds	r3, #1
 8003620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003624:	2b00      	cmp	r3, #0
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e012      	b.n	8003656 <HAL_I2C_Init+0x18e>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1e58      	subs	r0, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	0099      	lsls	r1, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	fbb0 f3f3 	udiv	r3, r0, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b00      	cmp	r3, #0
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Init+0x196>
 800365a:	2301      	movs	r3, #1
 800365c:	e022      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10e      	bne.n	8003684 <HAL_I2C_Init+0x1bc>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1e58      	subs	r0, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	440b      	add	r3, r1
 8003674:	fbb0 f3f3 	udiv	r3, r0, r3
 8003678:	3301      	adds	r3, #1
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800367e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003682:	e00f      	b.n	80036a4 <HAL_I2C_Init+0x1dc>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e58      	subs	r0, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	0099      	lsls	r1, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	fbb0 f3f3 	udiv	r3, r0, r3
 800369a:	3301      	adds	r3, #1
 800369c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	6809      	ldr	r1, [r1, #0]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6911      	ldr	r1, [r2, #16]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68d2      	ldr	r2, [r2, #12]
 80036de:	4311      	orrs	r1, r2
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	000186a0 	.word	0x000186a0
 8003740:	001e847f 	.word	0x001e847f
 8003744:	003d08ff 	.word	0x003d08ff
 8003748:	431bde83 	.word	0x431bde83
 800374c:	10624dd3 	.word	0x10624dd3

08003750 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b088      	sub	sp, #32
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	817b      	strh	r3, [r7, #10]
 8003760:	4613      	mov	r3, r2
 8003762:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003764:	f7fe fd88 	bl	8002278 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b20      	cmp	r3, #32
 8003774:	f040 80e0 	bne.w	8003938 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2319      	movs	r3, #25
 800377e:	2201      	movs	r2, #1
 8003780:	4970      	ldr	r1, [pc, #448]	@ (8003944 <HAL_I2C_Master_Transmit+0x1f4>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f964 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	e0d3      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_I2C_Master_Transmit+0x50>
 800379c:	2302      	movs	r3, #2
 800379e:	e0cc      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d007      	beq.n	80037c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2221      	movs	r2, #33	@ 0x21
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2210      	movs	r2, #16
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	893a      	ldrh	r2, [r7, #8]
 80037f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a50      	ldr	r2, [pc, #320]	@ (8003948 <HAL_I2C_Master_Transmit+0x1f8>)
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003808:	8979      	ldrh	r1, [r7, #10]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f89c 	bl	800394c <I2C_MasterRequestWrite>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e08d      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003834:	e066      	b.n	8003904 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6a39      	ldr	r1, [r7, #32]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fa22 	bl	8003c84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	2b04      	cmp	r3, #4
 800384c:	d107      	bne.n	800385e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06b      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003866:	781a      	ldrb	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d11b      	bne.n	80038d8 <HAL_I2C_Master_Transmit+0x188>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d017      	beq.n	80038d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	6a39      	ldr	r1, [r7, #32]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fa19 	bl	8003d14 <I2C_WaitOnBTFFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d107      	bne.n	8003900 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e01a      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d194      	bne.n	8003836 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	e000      	b.n	800393a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003938:	2302      	movs	r3, #2
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	00100002 	.word	0x00100002
 8003948:	ffff0000 	.word	0xffff0000

0800394c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	460b      	mov	r3, r1
 800395a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d006      	beq.n	8003976 <I2C_MasterRequestWrite+0x2a>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d003      	beq.n	8003976 <I2C_MasterRequestWrite+0x2a>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003974:	d108      	bne.n	8003988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	e00b      	b.n	80039a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	2b12      	cmp	r3, #18
 800398e:	d107      	bne.n	80039a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800399e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f84f 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00d      	beq.n	80039d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c6:	d103      	bne.n	80039d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e035      	b.n	8003a40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039dc:	d108      	bne.n	80039f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039ec:	611a      	str	r2, [r3, #16]
 80039ee:	e01b      	b.n	8003a28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	11db      	asrs	r3, r3, #7
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0306 	and.w	r3, r3, #6
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f063 030f 	orn	r3, r3, #15
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	490e      	ldr	r1, [pc, #56]	@ (8003a48 <I2C_MasterRequestWrite+0xfc>)
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 f898 	bl	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e010      	b.n	8003a40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4907      	ldr	r1, [pc, #28]	@ (8003a4c <I2C_MasterRequestWrite+0x100>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f888 	bl	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	00010008 	.word	0x00010008
 8003a4c:	00010002 	.word	0x00010002

08003a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a60:	e048      	b.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d044      	beq.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fc05 	bl	8002278 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d139      	bne.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d10d      	bne.n	8003aa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	43da      	mvns	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	e00c      	b.n	8003ac0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d116      	bne.n	8003af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e023      	b.n	8003b3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d10d      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	e00c      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	43da      	mvns	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d093      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b52:	e071      	b.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b62:	d123      	bne.n	8003bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	f043 0204 	orr.w	r2, r3, #4
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e067      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb2:	d041      	beq.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb4:	f7fe fb60 	bl	8002278 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d302      	bcc.n	8003bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d136      	bne.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10c      	bne.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4013      	ands	r3, r2
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e00b      	b.n	8003c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf14      	ite	ne
 8003c00:	2301      	movne	r3, #1
 8003c02:	2300      	moveq	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e021      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10c      	bne.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	43da      	mvns	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e00b      	b.n	8003c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f47f af6d 	bne.w	8003b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c90:	e034      	b.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f886 	bl	8003da4 <I2C_IsAcknowledgeFailed>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e034      	b.n	8003d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca8:	d028      	beq.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fe fae5 	bl	8002278 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11d      	bne.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cca:	2b80      	cmp	r3, #128	@ 0x80
 8003ccc:	d016      	beq.n	8003cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e007      	b.n	8003d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b80      	cmp	r3, #128	@ 0x80
 8003d08:	d1c3      	bne.n	8003c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d20:	e034      	b.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f83e 	bl	8003da4 <I2C_IsAcknowledgeFailed>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e034      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d028      	beq.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe fa9d 	bl	8002278 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d11d      	bne.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f003 0304 	and.w	r3, r3, #4
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d016      	beq.n	8003d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e007      	b.n	8003d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d1c3      	bne.n	8003d22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d11b      	bne.n	8003df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0204 	orr.w	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e272      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 8087 	beq.w	8003f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e20:	4b92      	ldr	r3, [pc, #584]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 030c 	and.w	r3, r3, #12
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d00c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 030c 	and.w	r3, r3, #12
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d112      	bne.n	8003e5e <HAL_RCC_OscConfig+0x5e>
 8003e38:	4b8c      	ldr	r3, [pc, #560]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e44:	d10b      	bne.n	8003e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e46:	4b89      	ldr	r3, [pc, #548]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x12c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d168      	bne.n	8003f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e24c      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x76>
 8003e68:	4b80      	ldr	r3, [pc, #512]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a7f      	ldr	r2, [pc, #508]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e02e      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b7b      	ldr	r3, [pc, #492]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7a      	ldr	r2, [pc, #488]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b78      	ldr	r3, [pc, #480]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a77      	ldr	r2, [pc, #476]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd4>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCC_OscConfig+0xbc>
 8003ea2:	4b72      	ldr	r3, [pc, #456]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a71      	ldr	r2, [pc, #452]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b6f      	ldr	r3, [pc, #444]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	e00b      	b.n	8003ed4 <HAL_RCC_OscConfig+0xd4>
 8003ebc:	4b6b      	ldr	r3, [pc, #428]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	4b68      	ldr	r3, [pc, #416]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a67      	ldr	r2, [pc, #412]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d013      	beq.n	8003f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe f9cc 	bl	8002278 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee4:	f7fe f9c8 	bl	8002278 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b64      	cmp	r3, #100	@ 0x64
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e200      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0xe4>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fe f9b8 	bl	8002278 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f0c:	f7fe f9b4 	bl	8002278 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b64      	cmp	r3, #100	@ 0x64
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e1ec      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1f0      	bne.n	8003f0c <HAL_RCC_OscConfig+0x10c>
 8003f2a:	e000      	b.n	8003f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d063      	beq.n	8004002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f46:	4b49      	ldr	r3, [pc, #292]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d11c      	bne.n	8003f8c <HAL_RCC_OscConfig+0x18c>
 8003f52:	4b46      	ldr	r3, [pc, #280]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d116      	bne.n	8003f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_RCC_OscConfig+0x176>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e1c0      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f76:	4b3d      	ldr	r3, [pc, #244]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4939      	ldr	r1, [pc, #228]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	e03a      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d020      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f94:	4b36      	ldr	r3, [pc, #216]	@ (8004070 <HAL_RCC_OscConfig+0x270>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe f96d 	bl	8002278 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fe f969 	bl	8002278 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e1a1      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4927      	ldr	r1, [pc, #156]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	600b      	str	r3, [r1, #0]
 8003fd4:	e015      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd6:	4b26      	ldr	r3, [pc, #152]	@ (8004070 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f94c 	bl	8002278 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe4:	f7fe f948 	bl	8002278 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e180      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d03a      	beq.n	8004084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d019      	beq.n	800404a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 8004018:	2201      	movs	r2, #1
 800401a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fe f92c 	bl	8002278 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004024:	f7fe f928 	bl	8002278 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e160      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_RCC_OscConfig+0x26c>)
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004042:	2001      	movs	r0, #1
 8004044:	f000 face 	bl	80045e4 <RCC_Delay>
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_RCC_OscConfig+0x274>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004050:	f7fe f912 	bl	8002278 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004056:	e00f      	b.n	8004078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe f90e 	bl	8002278 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d908      	bls.n	8004078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e146      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	42420000 	.word	0x42420000
 8004074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	4b92      	ldr	r3, [pc, #584]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e9      	bne.n	8004058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 80a6 	beq.w	80041de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004096:	4b8b      	ldr	r3, [pc, #556]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b88      	ldr	r3, [pc, #544]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	4a87      	ldr	r2, [pc, #540]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	61d3      	str	r3, [r2, #28]
 80040ae:	4b85      	ldr	r3, [pc, #532]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	4b82      	ldr	r3, [pc, #520]	@ (80042c8 <HAL_RCC_OscConfig+0x4c8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d118      	bne.n	80040fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ca:	4b7f      	ldr	r3, [pc, #508]	@ (80042c8 <HAL_RCC_OscConfig+0x4c8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7e      	ldr	r2, [pc, #504]	@ (80042c8 <HAL_RCC_OscConfig+0x4c8>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d6:	f7fe f8cf 	bl	8002278 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040de:	f7fe f8cb 	bl	8002278 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b64      	cmp	r3, #100	@ 0x64
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e103      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f0:	4b75      	ldr	r3, [pc, #468]	@ (80042c8 <HAL_RCC_OscConfig+0x4c8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d106      	bne.n	8004112 <HAL_RCC_OscConfig+0x312>
 8004104:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	4a6e      	ldr	r2, [pc, #440]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6213      	str	r3, [r2, #32]
 8004110:	e02d      	b.n	800416e <HAL_RCC_OscConfig+0x36e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10c      	bne.n	8004134 <HAL_RCC_OscConfig+0x334>
 800411a:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	4a69      	ldr	r2, [pc, #420]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6213      	str	r3, [r2, #32]
 8004126:	4b67      	ldr	r3, [pc, #412]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	4a66      	ldr	r2, [pc, #408]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	6213      	str	r3, [r2, #32]
 8004132:	e01c      	b.n	800416e <HAL_RCC_OscConfig+0x36e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b05      	cmp	r3, #5
 800413a:	d10c      	bne.n	8004156 <HAL_RCC_OscConfig+0x356>
 800413c:	4b61      	ldr	r3, [pc, #388]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	4a60      	ldr	r2, [pc, #384]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	6213      	str	r3, [r2, #32]
 8004148:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4a5d      	ldr	r2, [pc, #372]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6213      	str	r3, [r2, #32]
 8004154:	e00b      	b.n	800416e <HAL_RCC_OscConfig+0x36e>
 8004156:	4b5b      	ldr	r3, [pc, #364]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a5a      	ldr	r2, [pc, #360]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 0301 	bic.w	r3, r3, #1
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	4b58      	ldr	r3, [pc, #352]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a57      	ldr	r2, [pc, #348]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004168:	f023 0304 	bic.w	r3, r3, #4
 800416c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d015      	beq.n	80041a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fe f87f 	bl	8002278 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417c:	e00a      	b.n	8004194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f7fe f87b 	bl	8002278 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0b1      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ee      	beq.n	800417e <HAL_RCC_OscConfig+0x37e>
 80041a0:	e014      	b.n	80041cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fe f869 	bl	8002278 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	e00a      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041aa:	f7fe f865 	bl	8002278 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e09b      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c0:	4b40      	ldr	r3, [pc, #256]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4a3b      	ldr	r2, [pc, #236]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8087 	beq.w	80042f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041e8:	4b36      	ldr	r3, [pc, #216]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 030c 	and.w	r3, r3, #12
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d061      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d146      	bne.n	800428a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <HAL_RCC_OscConfig+0x4cc>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fe f839 	bl	8002278 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420a:	f7fe f835 	bl	8002278 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e06d      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421c:	4b29      	ldr	r3, [pc, #164]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004230:	d108      	bne.n	8004244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4921      	ldr	r1, [pc, #132]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004244:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a19      	ldr	r1, [r3, #32]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	430b      	orrs	r3, r1
 8004256:	491b      	ldr	r1, [pc, #108]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800425c:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <HAL_RCC_OscConfig+0x4cc>)
 800425e:	2201      	movs	r2, #1
 8004260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004262:	f7fe f809 	bl	8002278 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426a:	f7fe f805 	bl	8002278 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e03d      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800427c:	4b11      	ldr	r3, [pc, #68]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x46a>
 8004288:	e035      	b.n	80042f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428a:	4b10      	ldr	r3, [pc, #64]	@ (80042cc <HAL_RCC_OscConfig+0x4cc>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fff2 	bl	8002278 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004298:	f7fd ffee 	bl	8002278 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e026      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <HAL_RCC_OscConfig+0x4c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x498>
 80042b6:	e01e      	b.n	80042f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e019      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
 80042cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <HAL_RCC_OscConfig+0x500>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d106      	bne.n	80042f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d001      	beq.n	80042f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000

08004304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0d0      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004318:	4b6a      	ldr	r3, [pc, #424]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d910      	bls.n	8004348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b67      	ldr	r3, [pc, #412]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 0207 	bic.w	r2, r3, #7
 800432e:	4965      	ldr	r1, [pc, #404]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004336:	4b63      	ldr	r3, [pc, #396]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d001      	beq.n	8004348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0b8      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d020      	beq.n	8004396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004360:	4b59      	ldr	r3, [pc, #356]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a58      	ldr	r2, [pc, #352]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004366:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800436a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004378:	4b53      	ldr	r3, [pc, #332]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4a52      	ldr	r2, [pc, #328]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b50      	ldr	r3, [pc, #320]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	494d      	ldr	r1, [pc, #308]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d040      	beq.n	8004424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043aa:	4b47      	ldr	r3, [pc, #284]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d115      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e07f      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d107      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	4b41      	ldr	r3, [pc, #260]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e073      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d2:	4b3d      	ldr	r3, [pc, #244]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e06b      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e2:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4936      	ldr	r1, [pc, #216]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f4:	f7fd ff40 	bl	8002278 <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fd ff3c 	bl	8002278 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e053      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004412:	4b2d      	ldr	r3, [pc, #180]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f003 020c 	and.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	429a      	cmp	r2, r3
 8004422:	d1eb      	bne.n	80043fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004424:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d210      	bcs.n	8004454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	4922      	ldr	r1, [pc, #136]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b20      	ldr	r3, [pc, #128]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e032      	b.n	80044ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	4916      	ldr	r1, [pc, #88]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	490e      	ldr	r1, [pc, #56]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 800448e:	4313      	orrs	r3, r2
 8004490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004492:	f000 f821 	bl	80044d8 <HAL_RCC_GetSysClockFreq>
 8004496:	4602      	mov	r2, r0
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 030f 	and.w	r3, r3, #15
 80044a2:	490a      	ldr	r1, [pc, #40]	@ (80044cc <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	5ccb      	ldrb	r3, [r1, r3]
 80044a6:	fa22 f303 	lsr.w	r3, r2, r3
 80044aa:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <HAL_RCC_ClockConfig+0x1cc>)
 80044ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044ae:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <HAL_RCC_ClockConfig+0x1d0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd fe9e 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40022000 	.word	0x40022000
 80044c8:	40021000 	.word	0x40021000
 80044cc:	080095e4 	.word	0x080095e4
 80044d0:	20000000 	.word	0x20000000
 80044d4:	20000004 	.word	0x20000004

080044d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	2300      	movs	r3, #0
 80044ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044f2:	4b1e      	ldr	r3, [pc, #120]	@ (800456c <HAL_RCC_GetSysClockFreq+0x94>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d002      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x30>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d003      	beq.n	800450e <HAL_RCC_GetSysClockFreq+0x36>
 8004506:	e027      	b.n	8004558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004508:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x98>)
 800450a:	613b      	str	r3, [r7, #16]
      break;
 800450c:	e027      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0c9b      	lsrs	r3, r3, #18
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	4a17      	ldr	r2, [pc, #92]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004518:	5cd3      	ldrb	r3, [r2, r3]
 800451a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d010      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004526:	4b11      	ldr	r3, [pc, #68]	@ (800456c <HAL_RCC_GetSysClockFreq+0x94>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	0c5b      	lsrs	r3, r3, #17
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	4a11      	ldr	r2, [pc, #68]	@ (8004578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004532:	5cd3      	ldrb	r3, [r2, r3]
 8004534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a0d      	ldr	r2, [pc, #52]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x98>)
 800453a:	fb03 f202 	mul.w	r2, r3, r2
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e004      	b.n	8004552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <HAL_RCC_GetSysClockFreq+0xa4>)
 800454c:	fb02 f303 	mul.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	613b      	str	r3, [r7, #16]
      break;
 8004556:	e002      	b.n	800455e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x98>)
 800455a:	613b      	str	r3, [r7, #16]
      break;
 800455c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800455e:	693b      	ldr	r3, [r7, #16]
}
 8004560:	4618      	mov	r0, r3
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	007a1200 	.word	0x007a1200
 8004574:	080095fc 	.word	0x080095fc
 8004578:	0800960c 	.word	0x0800960c
 800457c:	003d0900 	.word	0x003d0900

08004580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004584:	4b02      	ldr	r3, [pc, #8]	@ (8004590 <HAL_RCC_GetHCLKFreq+0x10>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr
 8004590:	20000000 	.word	0x20000000

08004594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004598:	f7ff fff2 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 800459c:	4602      	mov	r2, r0
 800459e:	4b05      	ldr	r3, [pc, #20]	@ (80045b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	4903      	ldr	r1, [pc, #12]	@ (80045b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045aa:	5ccb      	ldrb	r3, [r1, r3]
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	080095f4 	.word	0x080095f4

080045bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c0:	f7ff ffde 	bl	8004580 <HAL_RCC_GetHCLKFreq>
 80045c4:	4602      	mov	r2, r0
 80045c6:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	0adb      	lsrs	r3, r3, #11
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	4903      	ldr	r1, [pc, #12]	@ (80045e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045d2:	5ccb      	ldrb	r3, [r1, r3]
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	080095f4 	.word	0x080095f4

080045e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <RCC_Delay+0x34>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0a      	ldr	r2, [pc, #40]	@ (800461c <RCC_Delay+0x38>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	0a5b      	lsrs	r3, r3, #9
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004600:	bf00      	nop
  }
  while (Delay --);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e5a      	subs	r2, r3, #1
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f9      	bne.n	8004600 <RCC_Delay+0x1c>
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	20000000 	.word	0x20000000
 800461c:	10624dd3 	.word	0x10624dd3

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d07d      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800463c:	2300      	movs	r3, #0
 800463e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004640:	4b4f      	ldr	r3, [pc, #316]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10d      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464c:	4b4c      	ldr	r3, [pc, #304]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	4a4b      	ldr	r2, [pc, #300]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004656:	61d3      	str	r3, [r2, #28]
 8004658:	4b49      	ldr	r3, [pc, #292]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004660:	60bb      	str	r3, [r7, #8]
 8004662:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004664:	2301      	movs	r3, #1
 8004666:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004668:	4b46      	ldr	r3, [pc, #280]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004670:	2b00      	cmp	r3, #0
 8004672:	d118      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004674:	4b43      	ldr	r3, [pc, #268]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a42      	ldr	r2, [pc, #264]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800467e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004680:	f7fd fdfa 	bl	8002278 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004686:	e008      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004688:	f7fd fdf6 	bl	8002278 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b64      	cmp	r3, #100	@ 0x64
 8004694:	d901      	bls.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e06d      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b3a      	ldr	r3, [pc, #232]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046a6:	4b36      	ldr	r3, [pc, #216]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d02e      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d027      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046da:	4a29      	ldr	r2, [pc, #164]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fd fdc5 	bl	8002278 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	e00a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fd fdc1 	bl	8002278 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e036      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004708:	4b1d      	ldr	r3, [pc, #116]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ee      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004714:	4b1a      	ldr	r3, [pc, #104]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4917      	ldr	r1, [pc, #92]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004722:	4313      	orrs	r3, r2
 8004724:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004726:	7dfb      	ldrb	r3, [r7, #23]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d105      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472c:	4b14      	ldr	r3, [pc, #80]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	4a13      	ldr	r2, [pc, #76]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004736:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004744:	4b0e      	ldr	r3, [pc, #56]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	490b      	ldr	r1, [pc, #44]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004762:	4b07      	ldr	r3, [pc, #28]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4904      	ldr	r1, [pc, #16]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004770:	4313      	orrs	r3, r2
 8004772:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40021000 	.word	0x40021000
 8004784:	40007000 	.word	0x40007000
 8004788:	42420440 	.word	0x42420440

0800478c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b088      	sub	sp, #32
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	2300      	movs	r3, #0
 80047a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	f200 808a 	bhi.w	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d045      	beq.n	8004848 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d075      	beq.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80047c2:	e082      	b.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80047c4:	4b46      	ldr	r3, [pc, #280]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80047ca:	4b45      	ldr	r3, [pc, #276]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d07b      	beq.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	0c9b      	lsrs	r3, r3, #18
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	4a41      	ldr	r2, [pc, #260]	@ (80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80047e0:	5cd3      	ldrb	r3, [r2, r3]
 80047e2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d015      	beq.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ee:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	0c5b      	lsrs	r3, r3, #17
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	4a3b      	ldr	r2, [pc, #236]	@ (80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80047fa:	5cd3      	ldrb	r3, [r2, r3]
 80047fc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004808:	4a38      	ldr	r2, [pc, #224]	@ (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4a34      	ldr	r2, [pc, #208]	@ (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800481e:	fb02 f303 	mul.w	r3, r2, r3
 8004822:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004824:	4b2e      	ldr	r3, [pc, #184]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004830:	d102      	bne.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	61bb      	str	r3, [r7, #24]
      break;
 8004836:	e04a      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4a2d      	ldr	r2, [pc, #180]	@ (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	085b      	lsrs	r3, r3, #1
 8004844:	61bb      	str	r3, [r7, #24]
      break;
 8004846:	e042      	b.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004848:	4b25      	ldr	r3, [pc, #148]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004858:	d108      	bne.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e01f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004878:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004884:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e00f      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004892:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004896:	d11c      	bne.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004898:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d016      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80048a4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80048a8:	61bb      	str	r3, [r7, #24]
      break;
 80048aa:	e012      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80048ac:	e011      	b.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80048ae:	f7ff fe85 	bl	80045bc <HAL_RCC_GetPCLK2Freq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	0b9b      	lsrs	r3, r3, #14
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	3301      	adds	r3, #1
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	61bb      	str	r3, [r7, #24]
      break;
 80048c8:	e004      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80048d2:	bf00      	nop
    }
  }
  return (frequency);
 80048d4:	69bb      	ldr	r3, [r7, #24]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08009610 	.word	0x08009610
 80048e8:	08009620 	.word	0x08009620
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	003d0900 	.word	0x003d0900
 80048f4:	aaaaaaab 	.word	0xaaaaaaab

080048f8 <log>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	4604      	mov	r4, r0
 80048fc:	460d      	mov	r5, r1
 80048fe:	f000 f833 	bl	8004968 <__ieee754_log>
 8004902:	4622      	mov	r2, r4
 8004904:	4606      	mov	r6, r0
 8004906:	460f      	mov	r7, r1
 8004908:	462b      	mov	r3, r5
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fc f87d 	bl	8000a0c <__aeabi_dcmpun>
 8004912:	b998      	cbnz	r0, 800493c <log+0x44>
 8004914:	2200      	movs	r2, #0
 8004916:	2300      	movs	r3, #0
 8004918:	4620      	mov	r0, r4
 800491a:	4629      	mov	r1, r5
 800491c:	f7fc f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8004920:	b960      	cbnz	r0, 800493c <log+0x44>
 8004922:	2200      	movs	r2, #0
 8004924:	2300      	movs	r3, #0
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f7fc f83d 	bl	80009a8 <__aeabi_dcmpeq>
 800492e:	b140      	cbz	r0, 8004942 <log+0x4a>
 8004930:	f001 f9aa 	bl	8005c88 <__errno>
 8004934:	2322      	movs	r3, #34	@ 0x22
 8004936:	2600      	movs	r6, #0
 8004938:	4f06      	ldr	r7, [pc, #24]	@ (8004954 <log+0x5c>)
 800493a:	6003      	str	r3, [r0, #0]
 800493c:	4630      	mov	r0, r6
 800493e:	4639      	mov	r1, r7
 8004940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004942:	f001 f9a1 	bl	8005c88 <__errno>
 8004946:	2321      	movs	r3, #33	@ 0x21
 8004948:	6003      	str	r3, [r0, #0]
 800494a:	4803      	ldr	r0, [pc, #12]	@ (8004958 <log+0x60>)
 800494c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004950:	f000 b804 	b.w	800495c <nan>
 8004954:	fff00000 	.word	0xfff00000
 8004958:	08009797 	.word	0x08009797

0800495c <nan>:
 800495c:	2000      	movs	r0, #0
 800495e:	4901      	ldr	r1, [pc, #4]	@ (8004964 <nan+0x8>)
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	7ff80000 	.word	0x7ff80000

08004968 <__ieee754_log>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004970:	4602      	mov	r2, r0
 8004972:	460b      	mov	r3, r1
 8004974:	460d      	mov	r5, r1
 8004976:	b087      	sub	sp, #28
 8004978:	da24      	bge.n	80049c4 <__ieee754_log+0x5c>
 800497a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800497e:	4304      	orrs	r4, r0
 8004980:	d108      	bne.n	8004994 <__ieee754_log+0x2c>
 8004982:	2200      	movs	r2, #0
 8004984:	2300      	movs	r3, #0
 8004986:	2000      	movs	r0, #0
 8004988:	49cb      	ldr	r1, [pc, #812]	@ (8004cb8 <__ieee754_log+0x350>)
 800498a:	f7fb fecf 	bl	800072c <__aeabi_ddiv>
 800498e:	b007      	add	sp, #28
 8004990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004994:	2900      	cmp	r1, #0
 8004996:	da04      	bge.n	80049a2 <__ieee754_log+0x3a>
 8004998:	f7fb fbe6 	bl	8000168 <__aeabi_dsub>
 800499c:	2200      	movs	r2, #0
 800499e:	2300      	movs	r3, #0
 80049a0:	e7f3      	b.n	800498a <__ieee754_log+0x22>
 80049a2:	2200      	movs	r2, #0
 80049a4:	4bc5      	ldr	r3, [pc, #788]	@ (8004cbc <__ieee754_log+0x354>)
 80049a6:	f7fb fd97 	bl	80004d8 <__aeabi_dmul>
 80049aa:	460b      	mov	r3, r1
 80049ac:	460d      	mov	r5, r1
 80049ae:	4602      	mov	r2, r0
 80049b0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80049b4:	48c2      	ldr	r0, [pc, #776]	@ (8004cc0 <__ieee754_log+0x358>)
 80049b6:	4285      	cmp	r5, r0
 80049b8:	dd06      	ble.n	80049c8 <__ieee754_log+0x60>
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	f7fb fbd5 	bl	800016c <__adddf3>
 80049c2:	e7e4      	b.n	800498e <__ieee754_log+0x26>
 80049c4:	2100      	movs	r1, #0
 80049c6:	e7f5      	b.n	80049b4 <__ieee754_log+0x4c>
 80049c8:	152c      	asrs	r4, r5, #20
 80049ca:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80049ce:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80049d2:	440c      	add	r4, r1
 80049d4:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 80049d8:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 80049dc:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 80049e0:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 80049e4:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 80049e8:	ea41 0305 	orr.w	r3, r1, r5
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	2200      	movs	r2, #0
 80049f2:	4bb4      	ldr	r3, [pc, #720]	@ (8004cc4 <__ieee754_log+0x35c>)
 80049f4:	f7fb fbb8 	bl	8000168 <__aeabi_dsub>
 80049f8:	1cab      	adds	r3, r5, #2
 80049fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	4682      	mov	sl, r0
 8004a02:	468b      	mov	fp, r1
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8004a0c:	dc53      	bgt.n	8004ab6 <__ieee754_log+0x14e>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f7fb ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8004a14:	b1d0      	cbz	r0, 8004a4c <__ieee754_log+0xe4>
 8004a16:	2c00      	cmp	r4, #0
 8004a18:	f000 8120 	beq.w	8004c5c <__ieee754_log+0x2f4>
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f7fb fcf1 	bl	8000404 <__aeabi_i2d>
 8004a22:	a391      	add	r3, pc, #580	@ (adr r3, 8004c68 <__ieee754_log+0x300>)
 8004a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a28:	4606      	mov	r6, r0
 8004a2a:	460f      	mov	r7, r1
 8004a2c:	f7fb fd54 	bl	80004d8 <__aeabi_dmul>
 8004a30:	a38f      	add	r3, pc, #572	@ (adr r3, 8004c70 <__ieee754_log+0x308>)
 8004a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	4639      	mov	r1, r7
 8004a3e:	f7fb fd4b 	bl	80004d8 <__aeabi_dmul>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4620      	mov	r0, r4
 8004a48:	4629      	mov	r1, r5
 8004a4a:	e7b8      	b.n	80049be <__ieee754_log+0x56>
 8004a4c:	a38a      	add	r3, pc, #552	@ (adr r3, 8004c78 <__ieee754_log+0x310>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	4650      	mov	r0, sl
 8004a54:	4659      	mov	r1, fp
 8004a56:	f7fb fd3f 	bl	80004d8 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	2000      	movs	r0, #0
 8004a60:	4999      	ldr	r1, [pc, #612]	@ (8004cc8 <__ieee754_log+0x360>)
 8004a62:	f7fb fb81 	bl	8000168 <__aeabi_dsub>
 8004a66:	4652      	mov	r2, sl
 8004a68:	4606      	mov	r6, r0
 8004a6a:	460f      	mov	r7, r1
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	4650      	mov	r0, sl
 8004a70:	4659      	mov	r1, fp
 8004a72:	f7fb fd31 	bl	80004d8 <__aeabi_dmul>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	f7fb fd2b 	bl	80004d8 <__aeabi_dmul>
 8004a82:	4606      	mov	r6, r0
 8004a84:	460f      	mov	r7, r1
 8004a86:	b914      	cbnz	r4, 8004a8e <__ieee754_log+0x126>
 8004a88:	4632      	mov	r2, r6
 8004a8a:	463b      	mov	r3, r7
 8004a8c:	e0a0      	b.n	8004bd0 <__ieee754_log+0x268>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f7fb fcb8 	bl	8000404 <__aeabi_i2d>
 8004a94:	a374      	add	r3, pc, #464	@ (adr r3, 8004c68 <__ieee754_log+0x300>)
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	4680      	mov	r8, r0
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	f7fb fd1b 	bl	80004d8 <__aeabi_dmul>
 8004aa2:	a373      	add	r3, pc, #460	@ (adr r3, 8004c70 <__ieee754_log+0x308>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	4604      	mov	r4, r0
 8004aaa:	460d      	mov	r5, r1
 8004aac:	4640      	mov	r0, r8
 8004aae:	4649      	mov	r1, r9
 8004ab0:	f7fb fd12 	bl	80004d8 <__aeabi_dmul>
 8004ab4:	e0a5      	b.n	8004c02 <__ieee754_log+0x29a>
 8004ab6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004aba:	f7fb fb57 	bl	800016c <__adddf3>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	f7fb fe31 	bl	800072c <__aeabi_ddiv>
 8004aca:	e9cd 0100 	strd	r0, r1, [sp]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7fb fc98 	bl	8000404 <__aeabi_i2d>
 8004ad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004adc:	4610      	mov	r0, r2
 8004ade:	4619      	mov	r1, r3
 8004ae0:	f7fb fcfa 	bl	80004d8 <__aeabi_dmul>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004aec:	f7fb fcf4 	bl	80004d8 <__aeabi_dmul>
 8004af0:	a363      	add	r3, pc, #396	@ (adr r3, 8004c80 <__ieee754_log+0x318>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	4680      	mov	r8, r0
 8004af8:	4689      	mov	r9, r1
 8004afa:	f7fb fced 	bl	80004d8 <__aeabi_dmul>
 8004afe:	a362      	add	r3, pc, #392	@ (adr r3, 8004c88 <__ieee754_log+0x320>)
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f7fb fb32 	bl	800016c <__adddf3>
 8004b08:	4642      	mov	r2, r8
 8004b0a:	464b      	mov	r3, r9
 8004b0c:	f7fb fce4 	bl	80004d8 <__aeabi_dmul>
 8004b10:	a35f      	add	r3, pc, #380	@ (adr r3, 8004c90 <__ieee754_log+0x328>)
 8004b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b16:	f7fb fb29 	bl	800016c <__adddf3>
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	f7fb fcdb 	bl	80004d8 <__aeabi_dmul>
 8004b22:	a35d      	add	r3, pc, #372	@ (adr r3, 8004c98 <__ieee754_log+0x330>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	f7fb fb20 	bl	800016c <__adddf3>
 8004b2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b30:	f7fb fcd2 	bl	80004d8 <__aeabi_dmul>
 8004b34:	a35a      	add	r3, pc, #360	@ (adr r3, 8004ca0 <__ieee754_log+0x338>)
 8004b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b3e:	4640      	mov	r0, r8
 8004b40:	4649      	mov	r1, r9
 8004b42:	f7fb fcc9 	bl	80004d8 <__aeabi_dmul>
 8004b46:	a358      	add	r3, pc, #352	@ (adr r3, 8004ca8 <__ieee754_log+0x340>)
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fb0e 	bl	800016c <__adddf3>
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	f7fb fcc0 	bl	80004d8 <__aeabi_dmul>
 8004b58:	a355      	add	r3, pc, #340	@ (adr r3, 8004cb0 <__ieee754_log+0x348>)
 8004b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5e:	f7fb fb05 	bl	800016c <__adddf3>
 8004b62:	4642      	mov	r2, r8
 8004b64:	464b      	mov	r3, r9
 8004b66:	f7fb fcb7 	bl	80004d8 <__aeabi_dmul>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b72:	f7fb fafb 	bl	800016c <__adddf3>
 8004b76:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8004b7a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8004b7e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8004b82:	3551      	adds	r5, #81	@ 0x51
 8004b84:	4335      	orrs	r5, r6
 8004b86:	2d00      	cmp	r5, #0
 8004b88:	4680      	mov	r8, r0
 8004b8a:	4689      	mov	r9, r1
 8004b8c:	dd48      	ble.n	8004c20 <__ieee754_log+0x2b8>
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc8 <__ieee754_log+0x360>)
 8004b92:	4650      	mov	r0, sl
 8004b94:	4659      	mov	r1, fp
 8004b96:	f7fb fc9f 	bl	80004d8 <__aeabi_dmul>
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	f7fb fc9b 	bl	80004d8 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460f      	mov	r7, r1
 8004baa:	4640      	mov	r0, r8
 8004bac:	4649      	mov	r1, r9
 8004bae:	f7fb fadd 	bl	800016c <__adddf3>
 8004bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bb6:	f7fb fc8f 	bl	80004d8 <__aeabi_dmul>
 8004bba:	4680      	mov	r8, r0
 8004bbc:	4689      	mov	r9, r1
 8004bbe:	b964      	cbnz	r4, 8004bda <__ieee754_log+0x272>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	f7fb face 	bl	8000168 <__aeabi_dsub>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4650      	mov	r0, sl
 8004bd2:	4659      	mov	r1, fp
 8004bd4:	f7fb fac8 	bl	8000168 <__aeabi_dsub>
 8004bd8:	e6d9      	b.n	800498e <__ieee754_log+0x26>
 8004bda:	a323      	add	r3, pc, #140	@ (adr r3, 8004c68 <__ieee754_log+0x300>)
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be4:	f7fb fc78 	bl	80004d8 <__aeabi_dmul>
 8004be8:	a321      	add	r3, pc, #132	@ (adr r3, 8004c70 <__ieee754_log+0x308>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	4604      	mov	r4, r0
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bf6:	f7fb fc6f 	bl	80004d8 <__aeabi_dmul>
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	f7fb fab5 	bl	800016c <__adddf3>
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4630      	mov	r0, r6
 8004c08:	4639      	mov	r1, r7
 8004c0a:	f7fb faad 	bl	8000168 <__aeabi_dsub>
 8004c0e:	4652      	mov	r2, sl
 8004c10:	465b      	mov	r3, fp
 8004c12:	f7fb faa9 	bl	8000168 <__aeabi_dsub>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	e7d9      	b.n	8004bd4 <__ieee754_log+0x26c>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4650      	mov	r0, sl
 8004c26:	4659      	mov	r1, fp
 8004c28:	f7fb fa9e 	bl	8000168 <__aeabi_dsub>
 8004c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c30:	f7fb fc52 	bl	80004d8 <__aeabi_dmul>
 8004c34:	4606      	mov	r6, r0
 8004c36:	460f      	mov	r7, r1
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	f43f af25 	beq.w	8004a88 <__ieee754_log+0x120>
 8004c3e:	a30a      	add	r3, pc, #40	@ (adr r3, 8004c68 <__ieee754_log+0x300>)
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c48:	f7fb fc46 	bl	80004d8 <__aeabi_dmul>
 8004c4c:	a308      	add	r3, pc, #32	@ (adr r3, 8004c70 <__ieee754_log+0x308>)
 8004c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c52:	4604      	mov	r4, r0
 8004c54:	460d      	mov	r5, r1
 8004c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5a:	e729      	b.n	8004ab0 <__ieee754_log+0x148>
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	2100      	movs	r1, #0
 8004c60:	e695      	b.n	800498e <__ieee754_log+0x26>
 8004c62:	bf00      	nop
 8004c64:	f3af 8000 	nop.w
 8004c68:	fee00000 	.word	0xfee00000
 8004c6c:	3fe62e42 	.word	0x3fe62e42
 8004c70:	35793c76 	.word	0x35793c76
 8004c74:	3dea39ef 	.word	0x3dea39ef
 8004c78:	55555555 	.word	0x55555555
 8004c7c:	3fd55555 	.word	0x3fd55555
 8004c80:	df3e5244 	.word	0xdf3e5244
 8004c84:	3fc2f112 	.word	0x3fc2f112
 8004c88:	96cb03de 	.word	0x96cb03de
 8004c8c:	3fc74664 	.word	0x3fc74664
 8004c90:	94229359 	.word	0x94229359
 8004c94:	3fd24924 	.word	0x3fd24924
 8004c98:	55555593 	.word	0x55555593
 8004c9c:	3fe55555 	.word	0x3fe55555
 8004ca0:	d078c69f 	.word	0xd078c69f
 8004ca4:	3fc39a09 	.word	0x3fc39a09
 8004ca8:	1d8e78af 	.word	0x1d8e78af
 8004cac:	3fcc71c5 	.word	0x3fcc71c5
 8004cb0:	9997fa04 	.word	0x9997fa04
 8004cb4:	3fd99999 	.word	0x3fd99999
 8004cb8:	c3500000 	.word	0xc3500000
 8004cbc:	43500000 	.word	0x43500000
 8004cc0:	7fefffff 	.word	0x7fefffff
 8004cc4:	3ff00000 	.word	0x3ff00000
 8004cc8:	3fe00000 	.word	0x3fe00000

08004ccc <__cvt>:
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004cda:	461d      	movlt	r5, r3
 8004cdc:	2300      	movge	r3, #0
 8004cde:	232d      	movlt	r3, #45	@ 0x2d
 8004ce0:	b088      	sub	sp, #32
 8004ce2:	4614      	mov	r4, r2
 8004ce4:	bfb8      	it	lt
 8004ce6:	4614      	movlt	r4, r2
 8004ce8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004cea:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004cec:	7013      	strb	r3, [r2, #0]
 8004cee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004cf0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004cf4:	f023 0820 	bic.w	r8, r3, #32
 8004cf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004cfc:	d005      	beq.n	8004d0a <__cvt+0x3e>
 8004cfe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d02:	d100      	bne.n	8004d06 <__cvt+0x3a>
 8004d04:	3601      	adds	r6, #1
 8004d06:	2302      	movs	r3, #2
 8004d08:	e000      	b.n	8004d0c <__cvt+0x40>
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	aa07      	add	r2, sp, #28
 8004d0e:	9204      	str	r2, [sp, #16]
 8004d10:	aa06      	add	r2, sp, #24
 8004d12:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d16:	e9cd 3600 	strd	r3, r6, [sp]
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f001 f88b 	bl	8005e38 <_dtoa_r>
 8004d22:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d26:	4607      	mov	r7, r0
 8004d28:	d119      	bne.n	8004d5e <__cvt+0x92>
 8004d2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004d2c:	07db      	lsls	r3, r3, #31
 8004d2e:	d50e      	bpl.n	8004d4e <__cvt+0x82>
 8004d30:	eb00 0906 	add.w	r9, r0, r6
 8004d34:	2200      	movs	r2, #0
 8004d36:	2300      	movs	r3, #0
 8004d38:	4620      	mov	r0, r4
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	f7fb fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8004d40:	b108      	cbz	r0, 8004d46 <__cvt+0x7a>
 8004d42:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d46:	2230      	movs	r2, #48	@ 0x30
 8004d48:	9b07      	ldr	r3, [sp, #28]
 8004d4a:	454b      	cmp	r3, r9
 8004d4c:	d31e      	bcc.n	8004d8c <__cvt+0xc0>
 8004d4e:	4638      	mov	r0, r7
 8004d50:	9b07      	ldr	r3, [sp, #28]
 8004d52:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004d54:	1bdb      	subs	r3, r3, r7
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	b008      	add	sp, #32
 8004d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d62:	eb00 0906 	add.w	r9, r0, r6
 8004d66:	d1e5      	bne.n	8004d34 <__cvt+0x68>
 8004d68:	7803      	ldrb	r3, [r0, #0]
 8004d6a:	2b30      	cmp	r3, #48	@ 0x30
 8004d6c:	d10a      	bne.n	8004d84 <__cvt+0xb8>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb fe17 	bl	80009a8 <__aeabi_dcmpeq>
 8004d7a:	b918      	cbnz	r0, 8004d84 <__cvt+0xb8>
 8004d7c:	f1c6 0601 	rsb	r6, r6, #1
 8004d80:	f8ca 6000 	str.w	r6, [sl]
 8004d84:	f8da 3000 	ldr.w	r3, [sl]
 8004d88:	4499      	add	r9, r3
 8004d8a:	e7d3      	b.n	8004d34 <__cvt+0x68>
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	9107      	str	r1, [sp, #28]
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e7d9      	b.n	8004d48 <__cvt+0x7c>

08004d94 <__exponent>:
 8004d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d96:	2900      	cmp	r1, #0
 8004d98:	bfb6      	itet	lt
 8004d9a:	232d      	movlt	r3, #45	@ 0x2d
 8004d9c:	232b      	movge	r3, #43	@ 0x2b
 8004d9e:	4249      	neglt	r1, r1
 8004da0:	2909      	cmp	r1, #9
 8004da2:	7002      	strb	r2, [r0, #0]
 8004da4:	7043      	strb	r3, [r0, #1]
 8004da6:	dd29      	ble.n	8004dfc <__exponent+0x68>
 8004da8:	f10d 0307 	add.w	r3, sp, #7
 8004dac:	461d      	mov	r5, r3
 8004dae:	270a      	movs	r7, #10
 8004db0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004db4:	461a      	mov	r2, r3
 8004db6:	fb07 1416 	mls	r4, r7, r6, r1
 8004dba:	3430      	adds	r4, #48	@ 0x30
 8004dbc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	2c63      	cmp	r4, #99	@ 0x63
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dca:	dcf1      	bgt.n	8004db0 <__exponent+0x1c>
 8004dcc:	3130      	adds	r1, #48	@ 0x30
 8004dce:	1e94      	subs	r4, r2, #2
 8004dd0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	1c41      	adds	r1, r0, #1
 8004dd8:	42ab      	cmp	r3, r5
 8004dda:	d30a      	bcc.n	8004df2 <__exponent+0x5e>
 8004ddc:	f10d 0309 	add.w	r3, sp, #9
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	42ac      	cmp	r4, r5
 8004de4:	bf88      	it	hi
 8004de6:	2300      	movhi	r3, #0
 8004de8:	3302      	adds	r3, #2
 8004dea:	4403      	add	r3, r0
 8004dec:	1a18      	subs	r0, r3, r0
 8004dee:	b003      	add	sp, #12
 8004df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004df6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004dfa:	e7ed      	b.n	8004dd8 <__exponent+0x44>
 8004dfc:	2330      	movs	r3, #48	@ 0x30
 8004dfe:	3130      	adds	r1, #48	@ 0x30
 8004e00:	7083      	strb	r3, [r0, #2]
 8004e02:	70c1      	strb	r1, [r0, #3]
 8004e04:	1d03      	adds	r3, r0, #4
 8004e06:	e7f1      	b.n	8004dec <__exponent+0x58>

08004e08 <_printf_float>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	b091      	sub	sp, #68	@ 0x44
 8004e0e:	460c      	mov	r4, r1
 8004e10:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004e14:	4616      	mov	r6, r2
 8004e16:	461f      	mov	r7, r3
 8004e18:	4605      	mov	r5, r0
 8004e1a:	f000 feeb 	bl	8005bf4 <_localeconv_r>
 8004e1e:	6803      	ldr	r3, [r0, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	9308      	str	r3, [sp, #32]
 8004e24:	f7fb f994 	bl	8000150 <strlen>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e30:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e32:	3307      	adds	r3, #7
 8004e34:	f023 0307 	bic.w	r3, r3, #7
 8004e38:	f103 0208 	add.w	r2, r3, #8
 8004e3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e40:	f8d4 b000 	ldr.w	fp, [r4]
 8004e44:	f8c8 2000 	str.w	r2, [r8]
 8004e48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e52:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004e56:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e62:	4b9c      	ldr	r3, [pc, #624]	@ (80050d4 <_printf_float+0x2cc>)
 8004e64:	f7fb fdd2 	bl	8000a0c <__aeabi_dcmpun>
 8004e68:	bb70      	cbnz	r0, 8004ec8 <_printf_float+0xc0>
 8004e6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e72:	4b98      	ldr	r3, [pc, #608]	@ (80050d4 <_printf_float+0x2cc>)
 8004e74:	f7fb fdac 	bl	80009d0 <__aeabi_dcmple>
 8004e78:	bb30      	cbnz	r0, 8004ec8 <_printf_float+0xc0>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fd9b 	bl	80009bc <__aeabi_dcmplt>
 8004e86:	b110      	cbz	r0, 8004e8e <_printf_float+0x86>
 8004e88:	232d      	movs	r3, #45	@ 0x2d
 8004e8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e8e:	4a92      	ldr	r2, [pc, #584]	@ (80050d8 <_printf_float+0x2d0>)
 8004e90:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <_printf_float+0x2d4>)
 8004e92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e96:	bf8c      	ite	hi
 8004e98:	4690      	movhi	r8, r2
 8004e9a:	4698      	movls	r8, r3
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	f04f 0900 	mov.w	r9, #0
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	f02b 0304 	bic.w	r3, fp, #4
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	4633      	mov	r3, r6
 8004eac:	4621      	mov	r1, r4
 8004eae:	4628      	mov	r0, r5
 8004eb0:	9700      	str	r7, [sp, #0]
 8004eb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004eb4:	f000 f9d4 	bl	8005260 <_printf_common>
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f040 8090 	bne.w	8004fde <_printf_float+0x1d6>
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec2:	b011      	add	sp, #68	@ 0x44
 8004ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb fd9c 	bl	8000a0c <__aeabi_dcmpun>
 8004ed4:	b148      	cbz	r0, 8004eea <_printf_float+0xe2>
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bfb8      	it	lt
 8004edc:	232d      	movlt	r3, #45	@ 0x2d
 8004ede:	4a80      	ldr	r2, [pc, #512]	@ (80050e0 <_printf_float+0x2d8>)
 8004ee0:	bfb8      	it	lt
 8004ee2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80050e4 <_printf_float+0x2dc>)
 8004ee8:	e7d3      	b.n	8004e92 <_printf_float+0x8a>
 8004eea:	6863      	ldr	r3, [r4, #4]
 8004eec:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	d13f      	bne.n	8004f74 <_printf_float+0x16c>
 8004ef4:	2306      	movs	r3, #6
 8004ef6:	6063      	str	r3, [r4, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	9206      	str	r2, [sp, #24]
 8004f02:	aa0e      	add	r2, sp, #56	@ 0x38
 8004f04:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004f08:	aa0d      	add	r2, sp, #52	@ 0x34
 8004f0a:	9203      	str	r2, [sp, #12]
 8004f0c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004f10:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f14:	6863      	ldr	r3, [r4, #4]
 8004f16:	4642      	mov	r2, r8
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004f20:	f7ff fed4 	bl	8004ccc <__cvt>
 8004f24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f26:	4680      	mov	r8, r0
 8004f28:	2947      	cmp	r1, #71	@ 0x47
 8004f2a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004f2c:	d128      	bne.n	8004f80 <_printf_float+0x178>
 8004f2e:	1cc8      	adds	r0, r1, #3
 8004f30:	db02      	blt.n	8004f38 <_printf_float+0x130>
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	4299      	cmp	r1, r3
 8004f36:	dd40      	ble.n	8004fba <_printf_float+0x1b2>
 8004f38:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f40:	4652      	mov	r2, sl
 8004f42:	3901      	subs	r1, #1
 8004f44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f48:	910d      	str	r1, [sp, #52]	@ 0x34
 8004f4a:	f7ff ff23 	bl	8004d94 <__exponent>
 8004f4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f50:	4681      	mov	r9, r0
 8004f52:	1813      	adds	r3, r2, r0
 8004f54:	2a01      	cmp	r2, #1
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	dc02      	bgt.n	8004f60 <_printf_float+0x158>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	07d2      	lsls	r2, r2, #31
 8004f5e:	d501      	bpl.n	8004f64 <_printf_float+0x15c>
 8004f60:	3301      	adds	r3, #1
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d09e      	beq.n	8004eaa <_printf_float+0xa2>
 8004f6c:	232d      	movs	r3, #45	@ 0x2d
 8004f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f72:	e79a      	b.n	8004eaa <_printf_float+0xa2>
 8004f74:	2947      	cmp	r1, #71	@ 0x47
 8004f76:	d1bf      	bne.n	8004ef8 <_printf_float+0xf0>
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1bd      	bne.n	8004ef8 <_printf_float+0xf0>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e7ba      	b.n	8004ef6 <_printf_float+0xee>
 8004f80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f84:	d9dc      	bls.n	8004f40 <_printf_float+0x138>
 8004f86:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f8a:	d118      	bne.n	8004fbe <_printf_float+0x1b6>
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	dd0b      	ble.n	8004faa <_printf_float+0x1a2>
 8004f92:	6121      	str	r1, [r4, #16]
 8004f94:	b913      	cbnz	r3, 8004f9c <_printf_float+0x194>
 8004f96:	6822      	ldr	r2, [r4, #0]
 8004f98:	07d0      	lsls	r0, r2, #31
 8004f9a:	d502      	bpl.n	8004fa2 <_printf_float+0x19a>
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	440b      	add	r3, r1
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004fa8:	e7dc      	b.n	8004f64 <_printf_float+0x15c>
 8004faa:	b913      	cbnz	r3, 8004fb2 <_printf_float+0x1aa>
 8004fac:	6822      	ldr	r2, [r4, #0]
 8004fae:	07d2      	lsls	r2, r2, #31
 8004fb0:	d501      	bpl.n	8004fb6 <_printf_float+0x1ae>
 8004fb2:	3302      	adds	r3, #2
 8004fb4:	e7f4      	b.n	8004fa0 <_printf_float+0x198>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7f2      	b.n	8004fa0 <_printf_float+0x198>
 8004fba:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004fbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fc0:	4299      	cmp	r1, r3
 8004fc2:	db05      	blt.n	8004fd0 <_printf_float+0x1c8>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	6121      	str	r1, [r4, #16]
 8004fc8:	07d8      	lsls	r0, r3, #31
 8004fca:	d5ea      	bpl.n	8004fa2 <_printf_float+0x19a>
 8004fcc:	1c4b      	adds	r3, r1, #1
 8004fce:	e7e7      	b.n	8004fa0 <_printf_float+0x198>
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	bfcc      	ite	gt
 8004fd4:	2201      	movgt	r2, #1
 8004fd6:	f1c1 0202 	rsble	r2, r1, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	e7e0      	b.n	8004fa0 <_printf_float+0x198>
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	055a      	lsls	r2, r3, #21
 8004fe2:	d407      	bmi.n	8004ff4 <_printf_float+0x1ec>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	4642      	mov	r2, r8
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d12b      	bne.n	800504a <_printf_float+0x242>
 8004ff2:	e764      	b.n	8004ebe <_printf_float+0xb6>
 8004ff4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ff8:	f240 80dc 	bls.w	80051b4 <_printf_float+0x3ac>
 8004ffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005000:	2200      	movs	r2, #0
 8005002:	2300      	movs	r3, #0
 8005004:	f7fb fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8005008:	2800      	cmp	r0, #0
 800500a:	d033      	beq.n	8005074 <_printf_float+0x26c>
 800500c:	2301      	movs	r3, #1
 800500e:	4631      	mov	r1, r6
 8005010:	4628      	mov	r0, r5
 8005012:	4a35      	ldr	r2, [pc, #212]	@ (80050e8 <_printf_float+0x2e0>)
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	f43f af51 	beq.w	8004ebe <_printf_float+0xb6>
 800501c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005020:	4543      	cmp	r3, r8
 8005022:	db02      	blt.n	800502a <_printf_float+0x222>
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	07d8      	lsls	r0, r3, #31
 8005028:	d50f      	bpl.n	800504a <_printf_float+0x242>
 800502a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	f43f af42 	beq.w	8004ebe <_printf_float+0xb6>
 800503a:	f04f 0900 	mov.w	r9, #0
 800503e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005042:	f104 0a1a 	add.w	sl, r4, #26
 8005046:	45c8      	cmp	r8, r9
 8005048:	dc09      	bgt.n	800505e <_printf_float+0x256>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	079b      	lsls	r3, r3, #30
 800504e:	f100 8102 	bmi.w	8005256 <_printf_float+0x44e>
 8005052:	68e0      	ldr	r0, [r4, #12]
 8005054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005056:	4298      	cmp	r0, r3
 8005058:	bfb8      	it	lt
 800505a:	4618      	movlt	r0, r3
 800505c:	e731      	b.n	8004ec2 <_printf_float+0xba>
 800505e:	2301      	movs	r3, #1
 8005060:	4652      	mov	r2, sl
 8005062:	4631      	mov	r1, r6
 8005064:	4628      	mov	r0, r5
 8005066:	47b8      	blx	r7
 8005068:	3001      	adds	r0, #1
 800506a:	f43f af28 	beq.w	8004ebe <_printf_float+0xb6>
 800506e:	f109 0901 	add.w	r9, r9, #1
 8005072:	e7e8      	b.n	8005046 <_printf_float+0x23e>
 8005074:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005076:	2b00      	cmp	r3, #0
 8005078:	dc38      	bgt.n	80050ec <_printf_float+0x2e4>
 800507a:	2301      	movs	r3, #1
 800507c:	4631      	mov	r1, r6
 800507e:	4628      	mov	r0, r5
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <_printf_float+0x2e0>)
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f af1a 	beq.w	8004ebe <_printf_float+0xb6>
 800508a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800508e:	ea59 0303 	orrs.w	r3, r9, r3
 8005092:	d102      	bne.n	800509a <_printf_float+0x292>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	07d9      	lsls	r1, r3, #31
 8005098:	d5d7      	bpl.n	800504a <_printf_float+0x242>
 800509a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800509e:	4631      	mov	r1, r6
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b8      	blx	r7
 80050a4:	3001      	adds	r0, #1
 80050a6:	f43f af0a 	beq.w	8004ebe <_printf_float+0xb6>
 80050aa:	f04f 0a00 	mov.w	sl, #0
 80050ae:	f104 0b1a 	add.w	fp, r4, #26
 80050b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050b4:	425b      	negs	r3, r3
 80050b6:	4553      	cmp	r3, sl
 80050b8:	dc01      	bgt.n	80050be <_printf_float+0x2b6>
 80050ba:	464b      	mov	r3, r9
 80050bc:	e793      	b.n	8004fe6 <_printf_float+0x1de>
 80050be:	2301      	movs	r3, #1
 80050c0:	465a      	mov	r2, fp
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f aef8 	beq.w	8004ebe <_printf_float+0xb6>
 80050ce:	f10a 0a01 	add.w	sl, sl, #1
 80050d2:	e7ee      	b.n	80050b2 <_printf_float+0x2aa>
 80050d4:	7fefffff 	.word	0x7fefffff
 80050d8:	08009626 	.word	0x08009626
 80050dc:	08009622 	.word	0x08009622
 80050e0:	0800962e 	.word	0x0800962e
 80050e4:	0800962a 	.word	0x0800962a
 80050e8:	08009632 	.word	0x08009632
 80050ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050ee:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80050f2:	4553      	cmp	r3, sl
 80050f4:	bfa8      	it	ge
 80050f6:	4653      	movge	r3, sl
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	4699      	mov	r9, r3
 80050fc:	dc36      	bgt.n	800516c <_printf_float+0x364>
 80050fe:	f04f 0b00 	mov.w	fp, #0
 8005102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005106:	f104 021a 	add.w	r2, r4, #26
 800510a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800510c:	930a      	str	r3, [sp, #40]	@ 0x28
 800510e:	eba3 0309 	sub.w	r3, r3, r9
 8005112:	455b      	cmp	r3, fp
 8005114:	dc31      	bgt.n	800517a <_printf_float+0x372>
 8005116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005118:	459a      	cmp	sl, r3
 800511a:	dc3a      	bgt.n	8005192 <_printf_float+0x38a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07da      	lsls	r2, r3, #31
 8005120:	d437      	bmi.n	8005192 <_printf_float+0x38a>
 8005122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005124:	ebaa 0903 	sub.w	r9, sl, r3
 8005128:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800512a:	ebaa 0303 	sub.w	r3, sl, r3
 800512e:	4599      	cmp	r9, r3
 8005130:	bfa8      	it	ge
 8005132:	4699      	movge	r9, r3
 8005134:	f1b9 0f00 	cmp.w	r9, #0
 8005138:	dc33      	bgt.n	80051a2 <_printf_float+0x39a>
 800513a:	f04f 0800 	mov.w	r8, #0
 800513e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005142:	f104 0b1a 	add.w	fp, r4, #26
 8005146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005148:	ebaa 0303 	sub.w	r3, sl, r3
 800514c:	eba3 0309 	sub.w	r3, r3, r9
 8005150:	4543      	cmp	r3, r8
 8005152:	f77f af7a 	ble.w	800504a <_printf_float+0x242>
 8005156:	2301      	movs	r3, #1
 8005158:	465a      	mov	r2, fp
 800515a:	4631      	mov	r1, r6
 800515c:	4628      	mov	r0, r5
 800515e:	47b8      	blx	r7
 8005160:	3001      	adds	r0, #1
 8005162:	f43f aeac 	beq.w	8004ebe <_printf_float+0xb6>
 8005166:	f108 0801 	add.w	r8, r8, #1
 800516a:	e7ec      	b.n	8005146 <_printf_float+0x33e>
 800516c:	4642      	mov	r2, r8
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	d1c2      	bne.n	80050fe <_printf_float+0x2f6>
 8005178:	e6a1      	b.n	8004ebe <_printf_float+0xb6>
 800517a:	2301      	movs	r3, #1
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	920a      	str	r2, [sp, #40]	@ 0x28
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	f43f ae9a 	beq.w	8004ebe <_printf_float+0xb6>
 800518a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800518c:	f10b 0b01 	add.w	fp, fp, #1
 8005190:	e7bb      	b.n	800510a <_printf_float+0x302>
 8005192:	4631      	mov	r1, r6
 8005194:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005198:	4628      	mov	r0, r5
 800519a:	47b8      	blx	r7
 800519c:	3001      	adds	r0, #1
 800519e:	d1c0      	bne.n	8005122 <_printf_float+0x31a>
 80051a0:	e68d      	b.n	8004ebe <_printf_float+0xb6>
 80051a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051a4:	464b      	mov	r3, r9
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	4442      	add	r2, r8
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	d1c3      	bne.n	800513a <_printf_float+0x332>
 80051b2:	e684      	b.n	8004ebe <_printf_float+0xb6>
 80051b4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80051b8:	f1ba 0f01 	cmp.w	sl, #1
 80051bc:	dc01      	bgt.n	80051c2 <_printf_float+0x3ba>
 80051be:	07db      	lsls	r3, r3, #31
 80051c0:	d536      	bpl.n	8005230 <_printf_float+0x428>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4642      	mov	r2, r8
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f ae76 	beq.w	8004ebe <_printf_float+0xb6>
 80051d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051d6:	4631      	mov	r1, r6
 80051d8:	4628      	mov	r0, r5
 80051da:	47b8      	blx	r7
 80051dc:	3001      	adds	r0, #1
 80051de:	f43f ae6e 	beq.w	8004ebe <_printf_float+0xb6>
 80051e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051e6:	2200      	movs	r2, #0
 80051e8:	2300      	movs	r3, #0
 80051ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ee:	f7fb fbdb 	bl	80009a8 <__aeabi_dcmpeq>
 80051f2:	b9c0      	cbnz	r0, 8005226 <_printf_float+0x41e>
 80051f4:	4653      	mov	r3, sl
 80051f6:	f108 0201 	add.w	r2, r8, #1
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	d10c      	bne.n	800521e <_printf_float+0x416>
 8005204:	e65b      	b.n	8004ebe <_printf_float+0xb6>
 8005206:	2301      	movs	r3, #1
 8005208:	465a      	mov	r2, fp
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f ae54 	beq.w	8004ebe <_printf_float+0xb6>
 8005216:	f108 0801 	add.w	r8, r8, #1
 800521a:	45d0      	cmp	r8, sl
 800521c:	dbf3      	blt.n	8005206 <_printf_float+0x3fe>
 800521e:	464b      	mov	r3, r9
 8005220:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005224:	e6e0      	b.n	8004fe8 <_printf_float+0x1e0>
 8005226:	f04f 0800 	mov.w	r8, #0
 800522a:	f104 0b1a 	add.w	fp, r4, #26
 800522e:	e7f4      	b.n	800521a <_printf_float+0x412>
 8005230:	2301      	movs	r3, #1
 8005232:	4642      	mov	r2, r8
 8005234:	e7e1      	b.n	80051fa <_printf_float+0x3f2>
 8005236:	2301      	movs	r3, #1
 8005238:	464a      	mov	r2, r9
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	f43f ae3c 	beq.w	8004ebe <_printf_float+0xb6>
 8005246:	f108 0801 	add.w	r8, r8, #1
 800524a:	68e3      	ldr	r3, [r4, #12]
 800524c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	4543      	cmp	r3, r8
 8005252:	dcf0      	bgt.n	8005236 <_printf_float+0x42e>
 8005254:	e6fd      	b.n	8005052 <_printf_float+0x24a>
 8005256:	f04f 0800 	mov.w	r8, #0
 800525a:	f104 0919 	add.w	r9, r4, #25
 800525e:	e7f4      	b.n	800524a <_printf_float+0x442>

08005260 <_printf_common>:
 8005260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005264:	4616      	mov	r6, r2
 8005266:	4698      	mov	r8, r3
 8005268:	688a      	ldr	r2, [r1, #8]
 800526a:	690b      	ldr	r3, [r1, #16]
 800526c:	4607      	mov	r7, r0
 800526e:	4293      	cmp	r3, r2
 8005270:	bfb8      	it	lt
 8005272:	4613      	movlt	r3, r2
 8005274:	6033      	str	r3, [r6, #0]
 8005276:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800527a:	460c      	mov	r4, r1
 800527c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005280:	b10a      	cbz	r2, 8005286 <_printf_common+0x26>
 8005282:	3301      	adds	r3, #1
 8005284:	6033      	str	r3, [r6, #0]
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	0699      	lsls	r1, r3, #26
 800528a:	bf42      	ittt	mi
 800528c:	6833      	ldrmi	r3, [r6, #0]
 800528e:	3302      	addmi	r3, #2
 8005290:	6033      	strmi	r3, [r6, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	f015 0506 	ands.w	r5, r5, #6
 8005298:	d106      	bne.n	80052a8 <_printf_common+0x48>
 800529a:	f104 0a19 	add.w	sl, r4, #25
 800529e:	68e3      	ldr	r3, [r4, #12]
 80052a0:	6832      	ldr	r2, [r6, #0]
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	42ab      	cmp	r3, r5
 80052a6:	dc2b      	bgt.n	8005300 <_printf_common+0xa0>
 80052a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052ac:	6822      	ldr	r2, [r4, #0]
 80052ae:	3b00      	subs	r3, #0
 80052b0:	bf18      	it	ne
 80052b2:	2301      	movne	r3, #1
 80052b4:	0692      	lsls	r2, r2, #26
 80052b6:	d430      	bmi.n	800531a <_printf_common+0xba>
 80052b8:	4641      	mov	r1, r8
 80052ba:	4638      	mov	r0, r7
 80052bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052c0:	47c8      	blx	r9
 80052c2:	3001      	adds	r0, #1
 80052c4:	d023      	beq.n	800530e <_printf_common+0xae>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	6922      	ldr	r2, [r4, #16]
 80052ca:	f003 0306 	and.w	r3, r3, #6
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	bf14      	ite	ne
 80052d2:	2500      	movne	r5, #0
 80052d4:	6833      	ldreq	r3, [r6, #0]
 80052d6:	f04f 0600 	mov.w	r6, #0
 80052da:	bf08      	it	eq
 80052dc:	68e5      	ldreq	r5, [r4, #12]
 80052de:	f104 041a 	add.w	r4, r4, #26
 80052e2:	bf08      	it	eq
 80052e4:	1aed      	subeq	r5, r5, r3
 80052e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80052ea:	bf08      	it	eq
 80052ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052f0:	4293      	cmp	r3, r2
 80052f2:	bfc4      	itt	gt
 80052f4:	1a9b      	subgt	r3, r3, r2
 80052f6:	18ed      	addgt	r5, r5, r3
 80052f8:	42b5      	cmp	r5, r6
 80052fa:	d11a      	bne.n	8005332 <_printf_common+0xd2>
 80052fc:	2000      	movs	r0, #0
 80052fe:	e008      	b.n	8005312 <_printf_common+0xb2>
 8005300:	2301      	movs	r3, #1
 8005302:	4652      	mov	r2, sl
 8005304:	4641      	mov	r1, r8
 8005306:	4638      	mov	r0, r7
 8005308:	47c8      	blx	r9
 800530a:	3001      	adds	r0, #1
 800530c:	d103      	bne.n	8005316 <_printf_common+0xb6>
 800530e:	f04f 30ff 	mov.w	r0, #4294967295
 8005312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005316:	3501      	adds	r5, #1
 8005318:	e7c1      	b.n	800529e <_printf_common+0x3e>
 800531a:	2030      	movs	r0, #48	@ 0x30
 800531c:	18e1      	adds	r1, r4, r3
 800531e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005322:	1c5a      	adds	r2, r3, #1
 8005324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005328:	4422      	add	r2, r4
 800532a:	3302      	adds	r3, #2
 800532c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005330:	e7c2      	b.n	80052b8 <_printf_common+0x58>
 8005332:	2301      	movs	r3, #1
 8005334:	4622      	mov	r2, r4
 8005336:	4641      	mov	r1, r8
 8005338:	4638      	mov	r0, r7
 800533a:	47c8      	blx	r9
 800533c:	3001      	adds	r0, #1
 800533e:	d0e6      	beq.n	800530e <_printf_common+0xae>
 8005340:	3601      	adds	r6, #1
 8005342:	e7d9      	b.n	80052f8 <_printf_common+0x98>

08005344 <_printf_i>:
 8005344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005348:	7e0f      	ldrb	r7, [r1, #24]
 800534a:	4691      	mov	r9, r2
 800534c:	2f78      	cmp	r7, #120	@ 0x78
 800534e:	4680      	mov	r8, r0
 8005350:	460c      	mov	r4, r1
 8005352:	469a      	mov	sl, r3
 8005354:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800535a:	d807      	bhi.n	800536c <_printf_i+0x28>
 800535c:	2f62      	cmp	r7, #98	@ 0x62
 800535e:	d80a      	bhi.n	8005376 <_printf_i+0x32>
 8005360:	2f00      	cmp	r7, #0
 8005362:	f000 80d1 	beq.w	8005508 <_printf_i+0x1c4>
 8005366:	2f58      	cmp	r7, #88	@ 0x58
 8005368:	f000 80b8 	beq.w	80054dc <_printf_i+0x198>
 800536c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005374:	e03a      	b.n	80053ec <_printf_i+0xa8>
 8005376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800537a:	2b15      	cmp	r3, #21
 800537c:	d8f6      	bhi.n	800536c <_printf_i+0x28>
 800537e:	a101      	add	r1, pc, #4	@ (adr r1, 8005384 <_printf_i+0x40>)
 8005380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005384:	080053dd 	.word	0x080053dd
 8005388:	080053f1 	.word	0x080053f1
 800538c:	0800536d 	.word	0x0800536d
 8005390:	0800536d 	.word	0x0800536d
 8005394:	0800536d 	.word	0x0800536d
 8005398:	0800536d 	.word	0x0800536d
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	0800536d 	.word	0x0800536d
 80053a4:	0800536d 	.word	0x0800536d
 80053a8:	0800536d 	.word	0x0800536d
 80053ac:	0800536d 	.word	0x0800536d
 80053b0:	080054ef 	.word	0x080054ef
 80053b4:	0800541b 	.word	0x0800541b
 80053b8:	080054a9 	.word	0x080054a9
 80053bc:	0800536d 	.word	0x0800536d
 80053c0:	0800536d 	.word	0x0800536d
 80053c4:	08005511 	.word	0x08005511
 80053c8:	0800536d 	.word	0x0800536d
 80053cc:	0800541b 	.word	0x0800541b
 80053d0:	0800536d 	.word	0x0800536d
 80053d4:	0800536d 	.word	0x0800536d
 80053d8:	080054b1 	.word	0x080054b1
 80053dc:	6833      	ldr	r3, [r6, #0]
 80053de:	1d1a      	adds	r2, r3, #4
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6032      	str	r2, [r6, #0]
 80053e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053ec:	2301      	movs	r3, #1
 80053ee:	e09c      	b.n	800552a <_printf_i+0x1e6>
 80053f0:	6833      	ldr	r3, [r6, #0]
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	1d19      	adds	r1, r3, #4
 80053f6:	6031      	str	r1, [r6, #0]
 80053f8:	0606      	lsls	r6, r0, #24
 80053fa:	d501      	bpl.n	8005400 <_printf_i+0xbc>
 80053fc:	681d      	ldr	r5, [r3, #0]
 80053fe:	e003      	b.n	8005408 <_printf_i+0xc4>
 8005400:	0645      	lsls	r5, r0, #25
 8005402:	d5fb      	bpl.n	80053fc <_printf_i+0xb8>
 8005404:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005408:	2d00      	cmp	r5, #0
 800540a:	da03      	bge.n	8005414 <_printf_i+0xd0>
 800540c:	232d      	movs	r3, #45	@ 0x2d
 800540e:	426d      	negs	r5, r5
 8005410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005414:	230a      	movs	r3, #10
 8005416:	4858      	ldr	r0, [pc, #352]	@ (8005578 <_printf_i+0x234>)
 8005418:	e011      	b.n	800543e <_printf_i+0xfa>
 800541a:	6821      	ldr	r1, [r4, #0]
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	0608      	lsls	r0, r1, #24
 8005420:	f853 5b04 	ldr.w	r5, [r3], #4
 8005424:	d402      	bmi.n	800542c <_printf_i+0xe8>
 8005426:	0649      	lsls	r1, r1, #25
 8005428:	bf48      	it	mi
 800542a:	b2ad      	uxthmi	r5, r5
 800542c:	2f6f      	cmp	r7, #111	@ 0x6f
 800542e:	6033      	str	r3, [r6, #0]
 8005430:	bf14      	ite	ne
 8005432:	230a      	movne	r3, #10
 8005434:	2308      	moveq	r3, #8
 8005436:	4850      	ldr	r0, [pc, #320]	@ (8005578 <_printf_i+0x234>)
 8005438:	2100      	movs	r1, #0
 800543a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800543e:	6866      	ldr	r6, [r4, #4]
 8005440:	2e00      	cmp	r6, #0
 8005442:	60a6      	str	r6, [r4, #8]
 8005444:	db05      	blt.n	8005452 <_printf_i+0x10e>
 8005446:	6821      	ldr	r1, [r4, #0]
 8005448:	432e      	orrs	r6, r5
 800544a:	f021 0104 	bic.w	r1, r1, #4
 800544e:	6021      	str	r1, [r4, #0]
 8005450:	d04b      	beq.n	80054ea <_printf_i+0x1a6>
 8005452:	4616      	mov	r6, r2
 8005454:	fbb5 f1f3 	udiv	r1, r5, r3
 8005458:	fb03 5711 	mls	r7, r3, r1, r5
 800545c:	5dc7      	ldrb	r7, [r0, r7]
 800545e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005462:	462f      	mov	r7, r5
 8005464:	42bb      	cmp	r3, r7
 8005466:	460d      	mov	r5, r1
 8005468:	d9f4      	bls.n	8005454 <_printf_i+0x110>
 800546a:	2b08      	cmp	r3, #8
 800546c:	d10b      	bne.n	8005486 <_printf_i+0x142>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	07df      	lsls	r7, r3, #31
 8005472:	d508      	bpl.n	8005486 <_printf_i+0x142>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	6861      	ldr	r1, [r4, #4]
 8005478:	4299      	cmp	r1, r3
 800547a:	bfde      	ittt	le
 800547c:	2330      	movle	r3, #48	@ 0x30
 800547e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005482:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005486:	1b92      	subs	r2, r2, r6
 8005488:	6122      	str	r2, [r4, #16]
 800548a:	464b      	mov	r3, r9
 800548c:	4621      	mov	r1, r4
 800548e:	4640      	mov	r0, r8
 8005490:	f8cd a000 	str.w	sl, [sp]
 8005494:	aa03      	add	r2, sp, #12
 8005496:	f7ff fee3 	bl	8005260 <_printf_common>
 800549a:	3001      	adds	r0, #1
 800549c:	d14a      	bne.n	8005534 <_printf_i+0x1f0>
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	b004      	add	sp, #16
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f043 0320 	orr.w	r3, r3, #32
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	2778      	movs	r7, #120	@ 0x78
 80054b2:	4832      	ldr	r0, [pc, #200]	@ (800557c <_printf_i+0x238>)
 80054b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	6831      	ldr	r1, [r6, #0]
 80054bc:	061f      	lsls	r7, r3, #24
 80054be:	f851 5b04 	ldr.w	r5, [r1], #4
 80054c2:	d402      	bmi.n	80054ca <_printf_i+0x186>
 80054c4:	065f      	lsls	r7, r3, #25
 80054c6:	bf48      	it	mi
 80054c8:	b2ad      	uxthmi	r5, r5
 80054ca:	6031      	str	r1, [r6, #0]
 80054cc:	07d9      	lsls	r1, r3, #31
 80054ce:	bf44      	itt	mi
 80054d0:	f043 0320 	orrmi.w	r3, r3, #32
 80054d4:	6023      	strmi	r3, [r4, #0]
 80054d6:	b11d      	cbz	r5, 80054e0 <_printf_i+0x19c>
 80054d8:	2310      	movs	r3, #16
 80054da:	e7ad      	b.n	8005438 <_printf_i+0xf4>
 80054dc:	4826      	ldr	r0, [pc, #152]	@ (8005578 <_printf_i+0x234>)
 80054de:	e7e9      	b.n	80054b4 <_printf_i+0x170>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f023 0320 	bic.w	r3, r3, #32
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	e7f6      	b.n	80054d8 <_printf_i+0x194>
 80054ea:	4616      	mov	r6, r2
 80054ec:	e7bd      	b.n	800546a <_printf_i+0x126>
 80054ee:	6833      	ldr	r3, [r6, #0]
 80054f0:	6825      	ldr	r5, [r4, #0]
 80054f2:	1d18      	adds	r0, r3, #4
 80054f4:	6961      	ldr	r1, [r4, #20]
 80054f6:	6030      	str	r0, [r6, #0]
 80054f8:	062e      	lsls	r6, r5, #24
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	d501      	bpl.n	8005502 <_printf_i+0x1be>
 80054fe:	6019      	str	r1, [r3, #0]
 8005500:	e002      	b.n	8005508 <_printf_i+0x1c4>
 8005502:	0668      	lsls	r0, r5, #25
 8005504:	d5fb      	bpl.n	80054fe <_printf_i+0x1ba>
 8005506:	8019      	strh	r1, [r3, #0]
 8005508:	2300      	movs	r3, #0
 800550a:	4616      	mov	r6, r2
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	e7bc      	b.n	800548a <_printf_i+0x146>
 8005510:	6833      	ldr	r3, [r6, #0]
 8005512:	2100      	movs	r1, #0
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	6032      	str	r2, [r6, #0]
 8005518:	681e      	ldr	r6, [r3, #0]
 800551a:	6862      	ldr	r2, [r4, #4]
 800551c:	4630      	mov	r0, r6
 800551e:	f000 fbe0 	bl	8005ce2 <memchr>
 8005522:	b108      	cbz	r0, 8005528 <_printf_i+0x1e4>
 8005524:	1b80      	subs	r0, r0, r6
 8005526:	6060      	str	r0, [r4, #4]
 8005528:	6863      	ldr	r3, [r4, #4]
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	2300      	movs	r3, #0
 800552e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005532:	e7aa      	b.n	800548a <_printf_i+0x146>
 8005534:	4632      	mov	r2, r6
 8005536:	4649      	mov	r1, r9
 8005538:	4640      	mov	r0, r8
 800553a:	6923      	ldr	r3, [r4, #16]
 800553c:	47d0      	blx	sl
 800553e:	3001      	adds	r0, #1
 8005540:	d0ad      	beq.n	800549e <_printf_i+0x15a>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	079b      	lsls	r3, r3, #30
 8005546:	d413      	bmi.n	8005570 <_printf_i+0x22c>
 8005548:	68e0      	ldr	r0, [r4, #12]
 800554a:	9b03      	ldr	r3, [sp, #12]
 800554c:	4298      	cmp	r0, r3
 800554e:	bfb8      	it	lt
 8005550:	4618      	movlt	r0, r3
 8005552:	e7a6      	b.n	80054a2 <_printf_i+0x15e>
 8005554:	2301      	movs	r3, #1
 8005556:	4632      	mov	r2, r6
 8005558:	4649      	mov	r1, r9
 800555a:	4640      	mov	r0, r8
 800555c:	47d0      	blx	sl
 800555e:	3001      	adds	r0, #1
 8005560:	d09d      	beq.n	800549e <_printf_i+0x15a>
 8005562:	3501      	adds	r5, #1
 8005564:	68e3      	ldr	r3, [r4, #12]
 8005566:	9903      	ldr	r1, [sp, #12]
 8005568:	1a5b      	subs	r3, r3, r1
 800556a:	42ab      	cmp	r3, r5
 800556c:	dcf2      	bgt.n	8005554 <_printf_i+0x210>
 800556e:	e7eb      	b.n	8005548 <_printf_i+0x204>
 8005570:	2500      	movs	r5, #0
 8005572:	f104 0619 	add.w	r6, r4, #25
 8005576:	e7f5      	b.n	8005564 <_printf_i+0x220>
 8005578:	08009634 	.word	0x08009634
 800557c:	08009645 	.word	0x08009645

08005580 <_scanf_float>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b087      	sub	sp, #28
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	688b      	ldr	r3, [r1, #8]
 800558a:	4691      	mov	r9, r2
 800558c:	1e5a      	subs	r2, r3, #1
 800558e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005592:	bf82      	ittt	hi
 8005594:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005598:	eb03 0b05 	addhi.w	fp, r3, r5
 800559c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80055a0:	460a      	mov	r2, r1
 80055a2:	f04f 0500 	mov.w	r5, #0
 80055a6:	bf88      	it	hi
 80055a8:	608b      	strhi	r3, [r1, #8]
 80055aa:	680b      	ldr	r3, [r1, #0]
 80055ac:	4680      	mov	r8, r0
 80055ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80055b2:	f842 3b1c 	str.w	r3, [r2], #28
 80055b6:	460c      	mov	r4, r1
 80055b8:	bf98      	it	ls
 80055ba:	f04f 0b00 	movls.w	fp, #0
 80055be:	4616      	mov	r6, r2
 80055c0:	46aa      	mov	sl, r5
 80055c2:	462f      	mov	r7, r5
 80055c4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055c8:	9201      	str	r2, [sp, #4]
 80055ca:	9502      	str	r5, [sp, #8]
 80055cc:	68a2      	ldr	r2, [r4, #8]
 80055ce:	b15a      	cbz	r2, 80055e8 <_scanf_float+0x68>
 80055d0:	f8d9 3000 	ldr.w	r3, [r9]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80055d8:	d862      	bhi.n	80056a0 <_scanf_float+0x120>
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d83a      	bhi.n	8005654 <_scanf_float+0xd4>
 80055de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80055e2:	b2c8      	uxtb	r0, r1
 80055e4:	280e      	cmp	r0, #14
 80055e6:	d938      	bls.n	800565a <_scanf_float+0xda>
 80055e8:	b11f      	cbz	r7, 80055f2 <_scanf_float+0x72>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055f6:	f1ba 0f01 	cmp.w	sl, #1
 80055fa:	f200 8114 	bhi.w	8005826 <_scanf_float+0x2a6>
 80055fe:	9b01      	ldr	r3, [sp, #4]
 8005600:	429e      	cmp	r6, r3
 8005602:	f200 8105 	bhi.w	8005810 <_scanf_float+0x290>
 8005606:	2001      	movs	r0, #1
 8005608:	b007      	add	sp, #28
 800560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800560e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005612:	2a0d      	cmp	r2, #13
 8005614:	d8e8      	bhi.n	80055e8 <_scanf_float+0x68>
 8005616:	a101      	add	r1, pc, #4	@ (adr r1, 800561c <_scanf_float+0x9c>)
 8005618:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800561c:	08005765 	.word	0x08005765
 8005620:	080055e9 	.word	0x080055e9
 8005624:	080055e9 	.word	0x080055e9
 8005628:	080055e9 	.word	0x080055e9
 800562c:	080057c1 	.word	0x080057c1
 8005630:	0800579b 	.word	0x0800579b
 8005634:	080055e9 	.word	0x080055e9
 8005638:	080055e9 	.word	0x080055e9
 800563c:	08005773 	.word	0x08005773
 8005640:	080055e9 	.word	0x080055e9
 8005644:	080055e9 	.word	0x080055e9
 8005648:	080055e9 	.word	0x080055e9
 800564c:	080055e9 	.word	0x080055e9
 8005650:	0800572f 	.word	0x0800572f
 8005654:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005658:	e7db      	b.n	8005612 <_scanf_float+0x92>
 800565a:	290e      	cmp	r1, #14
 800565c:	d8c4      	bhi.n	80055e8 <_scanf_float+0x68>
 800565e:	a001      	add	r0, pc, #4	@ (adr r0, 8005664 <_scanf_float+0xe4>)
 8005660:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005664:	0800571f 	.word	0x0800571f
 8005668:	080055e9 	.word	0x080055e9
 800566c:	0800571f 	.word	0x0800571f
 8005670:	080057af 	.word	0x080057af
 8005674:	080055e9 	.word	0x080055e9
 8005678:	080056c1 	.word	0x080056c1
 800567c:	08005705 	.word	0x08005705
 8005680:	08005705 	.word	0x08005705
 8005684:	08005705 	.word	0x08005705
 8005688:	08005705 	.word	0x08005705
 800568c:	08005705 	.word	0x08005705
 8005690:	08005705 	.word	0x08005705
 8005694:	08005705 	.word	0x08005705
 8005698:	08005705 	.word	0x08005705
 800569c:	08005705 	.word	0x08005705
 80056a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80056a2:	d809      	bhi.n	80056b8 <_scanf_float+0x138>
 80056a4:	2b60      	cmp	r3, #96	@ 0x60
 80056a6:	d8b2      	bhi.n	800560e <_scanf_float+0x8e>
 80056a8:	2b54      	cmp	r3, #84	@ 0x54
 80056aa:	d07b      	beq.n	80057a4 <_scanf_float+0x224>
 80056ac:	2b59      	cmp	r3, #89	@ 0x59
 80056ae:	d19b      	bne.n	80055e8 <_scanf_float+0x68>
 80056b0:	2d07      	cmp	r5, #7
 80056b2:	d199      	bne.n	80055e8 <_scanf_float+0x68>
 80056b4:	2508      	movs	r5, #8
 80056b6:	e02f      	b.n	8005718 <_scanf_float+0x198>
 80056b8:	2b74      	cmp	r3, #116	@ 0x74
 80056ba:	d073      	beq.n	80057a4 <_scanf_float+0x224>
 80056bc:	2b79      	cmp	r3, #121	@ 0x79
 80056be:	e7f6      	b.n	80056ae <_scanf_float+0x12e>
 80056c0:	6821      	ldr	r1, [r4, #0]
 80056c2:	05c8      	lsls	r0, r1, #23
 80056c4:	d51e      	bpl.n	8005704 <_scanf_float+0x184>
 80056c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80056ca:	6021      	str	r1, [r4, #0]
 80056cc:	3701      	adds	r7, #1
 80056ce:	f1bb 0f00 	cmp.w	fp, #0
 80056d2:	d003      	beq.n	80056dc <_scanf_float+0x15c>
 80056d4:	3201      	adds	r2, #1
 80056d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056da:	60a2      	str	r2, [r4, #8]
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	3b01      	subs	r3, #1
 80056e0:	60a3      	str	r3, [r4, #8]
 80056e2:	6923      	ldr	r3, [r4, #16]
 80056e4:	3301      	adds	r3, #1
 80056e6:	6123      	str	r3, [r4, #16]
 80056e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80056ec:	3b01      	subs	r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f8c9 3004 	str.w	r3, [r9, #4]
 80056f4:	f340 8083 	ble.w	80057fe <_scanf_float+0x27e>
 80056f8:	f8d9 3000 	ldr.w	r3, [r9]
 80056fc:	3301      	adds	r3, #1
 80056fe:	f8c9 3000 	str.w	r3, [r9]
 8005702:	e763      	b.n	80055cc <_scanf_float+0x4c>
 8005704:	eb1a 0105 	adds.w	r1, sl, r5
 8005708:	f47f af6e 	bne.w	80055e8 <_scanf_float+0x68>
 800570c:	460d      	mov	r5, r1
 800570e:	468a      	mov	sl, r1
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005716:	6022      	str	r2, [r4, #0]
 8005718:	f806 3b01 	strb.w	r3, [r6], #1
 800571c:	e7de      	b.n	80056dc <_scanf_float+0x15c>
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	0610      	lsls	r0, r2, #24
 8005722:	f57f af61 	bpl.w	80055e8 <_scanf_float+0x68>
 8005726:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800572a:	6022      	str	r2, [r4, #0]
 800572c:	e7f4      	b.n	8005718 <_scanf_float+0x198>
 800572e:	f1ba 0f00 	cmp.w	sl, #0
 8005732:	d10c      	bne.n	800574e <_scanf_float+0x1ce>
 8005734:	b977      	cbnz	r7, 8005754 <_scanf_float+0x1d4>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800573c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005740:	d108      	bne.n	8005754 <_scanf_float+0x1d4>
 8005742:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005746:	f04f 0a01 	mov.w	sl, #1
 800574a:	6022      	str	r2, [r4, #0]
 800574c:	e7e4      	b.n	8005718 <_scanf_float+0x198>
 800574e:	f1ba 0f02 	cmp.w	sl, #2
 8005752:	d051      	beq.n	80057f8 <_scanf_float+0x278>
 8005754:	2d01      	cmp	r5, #1
 8005756:	d002      	beq.n	800575e <_scanf_float+0x1de>
 8005758:	2d04      	cmp	r5, #4
 800575a:	f47f af45 	bne.w	80055e8 <_scanf_float+0x68>
 800575e:	3501      	adds	r5, #1
 8005760:	b2ed      	uxtb	r5, r5
 8005762:	e7d9      	b.n	8005718 <_scanf_float+0x198>
 8005764:	f1ba 0f01 	cmp.w	sl, #1
 8005768:	f47f af3e 	bne.w	80055e8 <_scanf_float+0x68>
 800576c:	f04f 0a02 	mov.w	sl, #2
 8005770:	e7d2      	b.n	8005718 <_scanf_float+0x198>
 8005772:	b975      	cbnz	r5, 8005792 <_scanf_float+0x212>
 8005774:	2f00      	cmp	r7, #0
 8005776:	f47f af38 	bne.w	80055ea <_scanf_float+0x6a>
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005780:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005784:	f040 80ff 	bne.w	8005986 <_scanf_float+0x406>
 8005788:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800578c:	2501      	movs	r5, #1
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	e7c2      	b.n	8005718 <_scanf_float+0x198>
 8005792:	2d03      	cmp	r5, #3
 8005794:	d0e3      	beq.n	800575e <_scanf_float+0x1de>
 8005796:	2d05      	cmp	r5, #5
 8005798:	e7df      	b.n	800575a <_scanf_float+0x1da>
 800579a:	2d02      	cmp	r5, #2
 800579c:	f47f af24 	bne.w	80055e8 <_scanf_float+0x68>
 80057a0:	2503      	movs	r5, #3
 80057a2:	e7b9      	b.n	8005718 <_scanf_float+0x198>
 80057a4:	2d06      	cmp	r5, #6
 80057a6:	f47f af1f 	bne.w	80055e8 <_scanf_float+0x68>
 80057aa:	2507      	movs	r5, #7
 80057ac:	e7b4      	b.n	8005718 <_scanf_float+0x198>
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	0591      	lsls	r1, r2, #22
 80057b2:	f57f af19 	bpl.w	80055e8 <_scanf_float+0x68>
 80057b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80057ba:	6022      	str	r2, [r4, #0]
 80057bc:	9702      	str	r7, [sp, #8]
 80057be:	e7ab      	b.n	8005718 <_scanf_float+0x198>
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80057c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80057ca:	d005      	beq.n	80057d8 <_scanf_float+0x258>
 80057cc:	0550      	lsls	r0, r2, #21
 80057ce:	f57f af0b 	bpl.w	80055e8 <_scanf_float+0x68>
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	f000 80d7 	beq.w	8005986 <_scanf_float+0x406>
 80057d8:	0591      	lsls	r1, r2, #22
 80057da:	bf58      	it	pl
 80057dc:	9902      	ldrpl	r1, [sp, #8]
 80057de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057e2:	bf58      	it	pl
 80057e4:	1a79      	subpl	r1, r7, r1
 80057e6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80057ea:	f04f 0700 	mov.w	r7, #0
 80057ee:	bf58      	it	pl
 80057f0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057f4:	6022      	str	r2, [r4, #0]
 80057f6:	e78f      	b.n	8005718 <_scanf_float+0x198>
 80057f8:	f04f 0a03 	mov.w	sl, #3
 80057fc:	e78c      	b.n	8005718 <_scanf_float+0x198>
 80057fe:	4649      	mov	r1, r9
 8005800:	4640      	mov	r0, r8
 8005802:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005806:	4798      	blx	r3
 8005808:	2800      	cmp	r0, #0
 800580a:	f43f aedf 	beq.w	80055cc <_scanf_float+0x4c>
 800580e:	e6eb      	b.n	80055e8 <_scanf_float+0x68>
 8005810:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005814:	464a      	mov	r2, r9
 8005816:	4640      	mov	r0, r8
 8005818:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800581c:	4798      	blx	r3
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	3b01      	subs	r3, #1
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	e6eb      	b.n	80055fe <_scanf_float+0x7e>
 8005826:	1e6b      	subs	r3, r5, #1
 8005828:	2b06      	cmp	r3, #6
 800582a:	d824      	bhi.n	8005876 <_scanf_float+0x2f6>
 800582c:	2d02      	cmp	r5, #2
 800582e:	d836      	bhi.n	800589e <_scanf_float+0x31e>
 8005830:	9b01      	ldr	r3, [sp, #4]
 8005832:	429e      	cmp	r6, r3
 8005834:	f67f aee7 	bls.w	8005606 <_scanf_float+0x86>
 8005838:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800583c:	464a      	mov	r2, r9
 800583e:	4640      	mov	r0, r8
 8005840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005844:	4798      	blx	r3
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	3b01      	subs	r3, #1
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	e7f0      	b.n	8005830 <_scanf_float+0x2b0>
 800584e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005852:	464a      	mov	r2, r9
 8005854:	4640      	mov	r0, r8
 8005856:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800585a:	4798      	blx	r3
 800585c:	6923      	ldr	r3, [r4, #16]
 800585e:	3b01      	subs	r3, #1
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005866:	fa5f fa8a 	uxtb.w	sl, sl
 800586a:	f1ba 0f02 	cmp.w	sl, #2
 800586e:	d1ee      	bne.n	800584e <_scanf_float+0x2ce>
 8005870:	3d03      	subs	r5, #3
 8005872:	b2ed      	uxtb	r5, r5
 8005874:	1b76      	subs	r6, r6, r5
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	05da      	lsls	r2, r3, #23
 800587a:	d530      	bpl.n	80058de <_scanf_float+0x35e>
 800587c:	055b      	lsls	r3, r3, #21
 800587e:	d511      	bpl.n	80058a4 <_scanf_float+0x324>
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	429e      	cmp	r6, r3
 8005884:	f67f aebf 	bls.w	8005606 <_scanf_float+0x86>
 8005888:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800588c:	464a      	mov	r2, r9
 800588e:	4640      	mov	r0, r8
 8005890:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005894:	4798      	blx	r3
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	3b01      	subs	r3, #1
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	e7f0      	b.n	8005880 <_scanf_float+0x300>
 800589e:	46aa      	mov	sl, r5
 80058a0:	46b3      	mov	fp, r6
 80058a2:	e7de      	b.n	8005862 <_scanf_float+0x2e2>
 80058a4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	2965      	cmp	r1, #101	@ 0x65
 80058ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80058b0:	f106 35ff 	add.w	r5, r6, #4294967295
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	d00c      	beq.n	80058d2 <_scanf_float+0x352>
 80058b8:	2945      	cmp	r1, #69	@ 0x45
 80058ba:	d00a      	beq.n	80058d2 <_scanf_float+0x352>
 80058bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058c0:	464a      	mov	r2, r9
 80058c2:	4640      	mov	r0, r8
 80058c4:	4798      	blx	r3
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	1eb5      	subs	r5, r6, #2
 80058d0:	6123      	str	r3, [r4, #16]
 80058d2:	464a      	mov	r2, r9
 80058d4:	4640      	mov	r0, r8
 80058d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058da:	4798      	blx	r3
 80058dc:	462e      	mov	r6, r5
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	f012 0210 	ands.w	r2, r2, #16
 80058e4:	d001      	beq.n	80058ea <_scanf_float+0x36a>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e68e      	b.n	8005608 <_scanf_float+0x88>
 80058ea:	7032      	strb	r2, [r6, #0]
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f6:	d125      	bne.n	8005944 <_scanf_float+0x3c4>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	429f      	cmp	r7, r3
 80058fc:	d00a      	beq.n	8005914 <_scanf_float+0x394>
 80058fe:	1bda      	subs	r2, r3, r7
 8005900:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005904:	429e      	cmp	r6, r3
 8005906:	bf28      	it	cs
 8005908:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800590c:	4630      	mov	r0, r6
 800590e:	491f      	ldr	r1, [pc, #124]	@ (800598c <_scanf_float+0x40c>)
 8005910:	f000 f902 	bl	8005b18 <siprintf>
 8005914:	2200      	movs	r2, #0
 8005916:	4640      	mov	r0, r8
 8005918:	9901      	ldr	r1, [sp, #4]
 800591a:	f002 fbf9 	bl	8008110 <_strtod_r>
 800591e:	9b03      	ldr	r3, [sp, #12]
 8005920:	6825      	ldr	r5, [r4, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f015 0f02 	tst.w	r5, #2
 8005928:	4606      	mov	r6, r0
 800592a:	460f      	mov	r7, r1
 800592c:	f103 0204 	add.w	r2, r3, #4
 8005930:	d015      	beq.n	800595e <_scanf_float+0x3de>
 8005932:	9903      	ldr	r1, [sp, #12]
 8005934:	600a      	str	r2, [r1, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	e9c3 6700 	strd	r6, r7, [r3]
 800593c:	68e3      	ldr	r3, [r4, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	60e3      	str	r3, [r4, #12]
 8005942:	e7d0      	b.n	80058e6 <_scanf_float+0x366>
 8005944:	9b04      	ldr	r3, [sp, #16]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0e4      	beq.n	8005914 <_scanf_float+0x394>
 800594a:	9905      	ldr	r1, [sp, #20]
 800594c:	230a      	movs	r3, #10
 800594e:	4640      	mov	r0, r8
 8005950:	3101      	adds	r1, #1
 8005952:	f002 fc5d 	bl	8008210 <_strtol_r>
 8005956:	9b04      	ldr	r3, [sp, #16]
 8005958:	9e05      	ldr	r6, [sp, #20]
 800595a:	1ac2      	subs	r2, r0, r3
 800595c:	e7d0      	b.n	8005900 <_scanf_float+0x380>
 800595e:	076d      	lsls	r5, r5, #29
 8005960:	d4e7      	bmi.n	8005932 <_scanf_float+0x3b2>
 8005962:	9d03      	ldr	r5, [sp, #12]
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	681d      	ldr	r5, [r3, #0]
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	f7fb f84e 	bl	8000a0c <__aeabi_dcmpun>
 8005970:	b120      	cbz	r0, 800597c <_scanf_float+0x3fc>
 8005972:	4807      	ldr	r0, [pc, #28]	@ (8005990 <_scanf_float+0x410>)
 8005974:	f000 f9d2 	bl	8005d1c <nanf>
 8005978:	6028      	str	r0, [r5, #0]
 800597a:	e7df      	b.n	800593c <_scanf_float+0x3bc>
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fb f8a2 	bl	8000ac8 <__aeabi_d2f>
 8005984:	e7f8      	b.n	8005978 <_scanf_float+0x3f8>
 8005986:	2700      	movs	r7, #0
 8005988:	e633      	b.n	80055f2 <_scanf_float+0x72>
 800598a:	bf00      	nop
 800598c:	08009656 	.word	0x08009656
 8005990:	08009797 	.word	0x08009797

08005994 <std>:
 8005994:	2300      	movs	r3, #0
 8005996:	b510      	push	{r4, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	e9c0 3300 	strd	r3, r3, [r0]
 800599e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059a2:	6083      	str	r3, [r0, #8]
 80059a4:	8181      	strh	r1, [r0, #12]
 80059a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80059a8:	81c2      	strh	r2, [r0, #14]
 80059aa:	6183      	str	r3, [r0, #24]
 80059ac:	4619      	mov	r1, r3
 80059ae:	2208      	movs	r2, #8
 80059b0:	305c      	adds	r0, #92	@ 0x5c
 80059b2:	f000 f916 	bl	8005be2 <memset>
 80059b6:	4b0d      	ldr	r3, [pc, #52]	@ (80059ec <std+0x58>)
 80059b8:	6224      	str	r4, [r4, #32]
 80059ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80059bc:	4b0c      	ldr	r3, [pc, #48]	@ (80059f0 <std+0x5c>)
 80059be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <std+0x60>)
 80059c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059c4:	4b0c      	ldr	r3, [pc, #48]	@ (80059f8 <std+0x64>)
 80059c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <std+0x68>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d006      	beq.n	80059dc <std+0x48>
 80059ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059d2:	4294      	cmp	r4, r2
 80059d4:	d002      	beq.n	80059dc <std+0x48>
 80059d6:	33d0      	adds	r3, #208	@ 0xd0
 80059d8:	429c      	cmp	r4, r3
 80059da:	d105      	bne.n	80059e8 <std+0x54>
 80059dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e4:	f000 b97a 	b.w	8005cdc <__retarget_lock_init_recursive>
 80059e8:	bd10      	pop	{r4, pc}
 80059ea:	bf00      	nop
 80059ec:	08005b5d 	.word	0x08005b5d
 80059f0:	08005b7f 	.word	0x08005b7f
 80059f4:	08005bb7 	.word	0x08005bb7
 80059f8:	08005bdb 	.word	0x08005bdb
 80059fc:	200007c0 	.word	0x200007c0

08005a00 <stdio_exit_handler>:
 8005a00:	4a02      	ldr	r2, [pc, #8]	@ (8005a0c <stdio_exit_handler+0xc>)
 8005a02:	4903      	ldr	r1, [pc, #12]	@ (8005a10 <stdio_exit_handler+0x10>)
 8005a04:	4803      	ldr	r0, [pc, #12]	@ (8005a14 <stdio_exit_handler+0x14>)
 8005a06:	f000 b869 	b.w	8005adc <_fwalk_sglue>
 8005a0a:	bf00      	nop
 8005a0c:	2000000c 	.word	0x2000000c
 8005a10:	080085c5 	.word	0x080085c5
 8005a14:	2000001c 	.word	0x2000001c

08005a18 <cleanup_stdio>:
 8005a18:	6841      	ldr	r1, [r0, #4]
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a4c <cleanup_stdio+0x34>)
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	4299      	cmp	r1, r3
 8005a20:	4604      	mov	r4, r0
 8005a22:	d001      	beq.n	8005a28 <cleanup_stdio+0x10>
 8005a24:	f002 fdce 	bl	80085c4 <_fflush_r>
 8005a28:	68a1      	ldr	r1, [r4, #8]
 8005a2a:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <cleanup_stdio+0x38>)
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	d002      	beq.n	8005a36 <cleanup_stdio+0x1e>
 8005a30:	4620      	mov	r0, r4
 8005a32:	f002 fdc7 	bl	80085c4 <_fflush_r>
 8005a36:	68e1      	ldr	r1, [r4, #12]
 8005a38:	4b06      	ldr	r3, [pc, #24]	@ (8005a54 <cleanup_stdio+0x3c>)
 8005a3a:	4299      	cmp	r1, r3
 8005a3c:	d004      	beq.n	8005a48 <cleanup_stdio+0x30>
 8005a3e:	4620      	mov	r0, r4
 8005a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a44:	f002 bdbe 	b.w	80085c4 <_fflush_r>
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	200007c0 	.word	0x200007c0
 8005a50:	20000828 	.word	0x20000828
 8005a54:	20000890 	.word	0x20000890

08005a58 <global_stdio_init.part.0>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <global_stdio_init.part.0+0x30>)
 8005a5c:	4c0b      	ldr	r4, [pc, #44]	@ (8005a8c <global_stdio_init.part.0+0x34>)
 8005a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8005a90 <global_stdio_init.part.0+0x38>)
 8005a60:	4620      	mov	r0, r4
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	2104      	movs	r1, #4
 8005a66:	2200      	movs	r2, #0
 8005a68:	f7ff ff94 	bl	8005994 <std>
 8005a6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a70:	2201      	movs	r2, #1
 8005a72:	2109      	movs	r1, #9
 8005a74:	f7ff ff8e 	bl	8005994 <std>
 8005a78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a82:	2112      	movs	r1, #18
 8005a84:	f7ff bf86 	b.w	8005994 <std>
 8005a88:	200008f8 	.word	0x200008f8
 8005a8c:	200007c0 	.word	0x200007c0
 8005a90:	08005a01 	.word	0x08005a01

08005a94 <__sfp_lock_acquire>:
 8005a94:	4801      	ldr	r0, [pc, #4]	@ (8005a9c <__sfp_lock_acquire+0x8>)
 8005a96:	f000 b922 	b.w	8005cde <__retarget_lock_acquire_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	20000901 	.word	0x20000901

08005aa0 <__sfp_lock_release>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	@ (8005aa8 <__sfp_lock_release+0x8>)
 8005aa2:	f000 b91d 	b.w	8005ce0 <__retarget_lock_release_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	20000901 	.word	0x20000901

08005aac <__sinit>:
 8005aac:	b510      	push	{r4, lr}
 8005aae:	4604      	mov	r4, r0
 8005ab0:	f7ff fff0 	bl	8005a94 <__sfp_lock_acquire>
 8005ab4:	6a23      	ldr	r3, [r4, #32]
 8005ab6:	b11b      	cbz	r3, 8005ac0 <__sinit+0x14>
 8005ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005abc:	f7ff bff0 	b.w	8005aa0 <__sfp_lock_release>
 8005ac0:	4b04      	ldr	r3, [pc, #16]	@ (8005ad4 <__sinit+0x28>)
 8005ac2:	6223      	str	r3, [r4, #32]
 8005ac4:	4b04      	ldr	r3, [pc, #16]	@ (8005ad8 <__sinit+0x2c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1f5      	bne.n	8005ab8 <__sinit+0xc>
 8005acc:	f7ff ffc4 	bl	8005a58 <global_stdio_init.part.0>
 8005ad0:	e7f2      	b.n	8005ab8 <__sinit+0xc>
 8005ad2:	bf00      	nop
 8005ad4:	08005a19 	.word	0x08005a19
 8005ad8:	200008f8 	.word	0x200008f8

08005adc <_fwalk_sglue>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	4607      	mov	r7, r0
 8005ae2:	4688      	mov	r8, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	2600      	movs	r6, #0
 8005ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aec:	f1b9 0901 	subs.w	r9, r9, #1
 8005af0:	d505      	bpl.n	8005afe <_fwalk_sglue+0x22>
 8005af2:	6824      	ldr	r4, [r4, #0]
 8005af4:	2c00      	cmp	r4, #0
 8005af6:	d1f7      	bne.n	8005ae8 <_fwalk_sglue+0xc>
 8005af8:	4630      	mov	r0, r6
 8005afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005afe:	89ab      	ldrh	r3, [r5, #12]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d907      	bls.n	8005b14 <_fwalk_sglue+0x38>
 8005b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	d003      	beq.n	8005b14 <_fwalk_sglue+0x38>
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	4638      	mov	r0, r7
 8005b10:	47c0      	blx	r8
 8005b12:	4306      	orrs	r6, r0
 8005b14:	3568      	adds	r5, #104	@ 0x68
 8005b16:	e7e9      	b.n	8005aec <_fwalk_sglue+0x10>

08005b18 <siprintf>:
 8005b18:	b40e      	push	{r1, r2, r3}
 8005b1a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	2400      	movs	r4, #0
 8005b22:	b09d      	sub	sp, #116	@ 0x74
 8005b24:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005b26:	9002      	str	r0, [sp, #8]
 8005b28:	9006      	str	r0, [sp, #24]
 8005b2a:	9107      	str	r1, [sp, #28]
 8005b2c:	9104      	str	r1, [sp, #16]
 8005b2e:	4809      	ldr	r0, [pc, #36]	@ (8005b54 <siprintf+0x3c>)
 8005b30:	4909      	ldr	r1, [pc, #36]	@ (8005b58 <siprintf+0x40>)
 8005b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b36:	9105      	str	r1, [sp, #20]
 8005b38:	6800      	ldr	r0, [r0, #0]
 8005b3a:	a902      	add	r1, sp, #8
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005b40:	f002 fbc4 	bl	80082cc <_svfiprintf_r>
 8005b44:	9b02      	ldr	r3, [sp, #8]
 8005b46:	701c      	strb	r4, [r3, #0]
 8005b48:	b01d      	add	sp, #116	@ 0x74
 8005b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b4e:	b003      	add	sp, #12
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20000018 	.word	0x20000018
 8005b58:	ffff0208 	.word	0xffff0208

08005b5c <__sread>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	460c      	mov	r4, r1
 8005b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b64:	f000 f86c 	bl	8005c40 <_read_r>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	bfab      	itete	ge
 8005b6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005b70:	181b      	addge	r3, r3, r0
 8005b72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005b76:	bfac      	ite	ge
 8005b78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005b7a:	81a3      	strhlt	r3, [r4, #12]
 8005b7c:	bd10      	pop	{r4, pc}

08005b7e <__swrite>:
 8005b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b82:	461f      	mov	r7, r3
 8005b84:	898b      	ldrh	r3, [r1, #12]
 8005b86:	4605      	mov	r5, r0
 8005b88:	05db      	lsls	r3, r3, #23
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	4616      	mov	r6, r2
 8005b8e:	d505      	bpl.n	8005b9c <__swrite+0x1e>
 8005b90:	2302      	movs	r3, #2
 8005b92:	2200      	movs	r2, #0
 8005b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b98:	f000 f840 	bl	8005c1c <_lseek_r>
 8005b9c:	89a3      	ldrh	r3, [r4, #12]
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba4:	81a3      	strh	r3, [r4, #12]
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	463b      	mov	r3, r7
 8005baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bb2:	f000 b857 	b.w	8005c64 <_write_r>

08005bb6 <__sseek>:
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	460c      	mov	r4, r1
 8005bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbe:	f000 f82d 	bl	8005c1c <_lseek_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	89a3      	ldrh	r3, [r4, #12]
 8005bc6:	bf15      	itete	ne
 8005bc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bd2:	81a3      	strheq	r3, [r4, #12]
 8005bd4:	bf18      	it	ne
 8005bd6:	81a3      	strhne	r3, [r4, #12]
 8005bd8:	bd10      	pop	{r4, pc}

08005bda <__sclose>:
 8005bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bde:	f000 b80d 	b.w	8005bfc <_close_r>

08005be2 <memset>:
 8005be2:	4603      	mov	r3, r0
 8005be4:	4402      	add	r2, r0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d100      	bne.n	8005bec <memset+0xa>
 8005bea:	4770      	bx	lr
 8005bec:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf0:	e7f9      	b.n	8005be6 <memset+0x4>
	...

08005bf4 <_localeconv_r>:
 8005bf4:	4800      	ldr	r0, [pc, #0]	@ (8005bf8 <_localeconv_r+0x4>)
 8005bf6:	4770      	bx	lr
 8005bf8:	20000158 	.word	0x20000158

08005bfc <_close_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4d05      	ldr	r5, [pc, #20]	@ (8005c18 <_close_r+0x1c>)
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	602b      	str	r3, [r5, #0]
 8005c08:	f7fc fa4b 	bl	80020a2 <_close>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_close_r+0x1a>
 8005c10:	682b      	ldr	r3, [r5, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_close_r+0x1a>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	200008fc 	.word	0x200008fc

08005c1c <_lseek_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4604      	mov	r4, r0
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	2200      	movs	r2, #0
 8005c26:	4d05      	ldr	r5, [pc, #20]	@ (8005c3c <_lseek_r+0x20>)
 8005c28:	602a      	str	r2, [r5, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f7fc fa5d 	bl	80020ea <_lseek>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_lseek_r+0x1e>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_lseek_r+0x1e>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	200008fc 	.word	0x200008fc

08005c40 <_read_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4d05      	ldr	r5, [pc, #20]	@ (8005c60 <_read_r+0x20>)
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fc f9ee 	bl	8002030 <_read>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_read_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_read_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	200008fc 	.word	0x200008fc

08005c64 <_write_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4d05      	ldr	r5, [pc, #20]	@ (8005c84 <_write_r+0x20>)
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fc f9f9 	bl	800206a <_write>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_write_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_write_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	200008fc 	.word	0x200008fc

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	@ (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000018 	.word	0x20000018

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	2600      	movs	r6, #0
 8005c98:	4d0c      	ldr	r5, [pc, #48]	@ (8005ccc <__libc_init_array+0x38>)
 8005c9a:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd0 <__libc_init_array+0x3c>)
 8005c9c:	1b64      	subs	r4, r4, r5
 8005c9e:	10a4      	asrs	r4, r4, #2
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	f003 fb66 	bl	8009374 <_init>
 8005ca8:	2600      	movs	r6, #0
 8005caa:	4d0a      	ldr	r5, [pc, #40]	@ (8005cd4 <__libc_init_array+0x40>)
 8005cac:	4c0a      	ldr	r4, [pc, #40]	@ (8005cd8 <__libc_init_array+0x44>)
 8005cae:	1b64      	subs	r4, r4, r5
 8005cb0:	10a4      	asrs	r4, r4, #2
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08009a54 	.word	0x08009a54
 8005cd0:	08009a54 	.word	0x08009a54
 8005cd4:	08009a54 	.word	0x08009a54
 8005cd8:	08009a58 	.word	0x08009a58

08005cdc <__retarget_lock_init_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <__retarget_lock_acquire_recursive>:
 8005cde:	4770      	bx	lr

08005ce0 <__retarget_lock_release_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <memchr>:
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	b2c9      	uxtb	r1, r1
 8005ce8:	4402      	add	r2, r0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	d101      	bne.n	8005cf4 <memchr+0x12>
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e003      	b.n	8005cfc <memchr+0x1a>
 8005cf4:	7804      	ldrb	r4, [r0, #0]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	428c      	cmp	r4, r1
 8005cfa:	d1f6      	bne.n	8005cea <memchr+0x8>
 8005cfc:	bd10      	pop	{r4, pc}

08005cfe <memcpy>:
 8005cfe:	440a      	add	r2, r1
 8005d00:	4291      	cmp	r1, r2
 8005d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d06:	d100      	bne.n	8005d0a <memcpy+0xc>
 8005d08:	4770      	bx	lr
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d10:	4291      	cmp	r1, r2
 8005d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d16:	d1f9      	bne.n	8005d0c <memcpy+0xe>
 8005d18:	bd10      	pop	{r4, pc}
	...

08005d1c <nanf>:
 8005d1c:	4800      	ldr	r0, [pc, #0]	@ (8005d20 <nanf+0x4>)
 8005d1e:	4770      	bx	lr
 8005d20:	7fc00000 	.word	0x7fc00000

08005d24 <quorem>:
 8005d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	6903      	ldr	r3, [r0, #16]
 8005d2a:	690c      	ldr	r4, [r1, #16]
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	db7e      	blt.n	8005e30 <quorem+0x10c>
 8005d32:	3c01      	subs	r4, #1
 8005d34:	00a3      	lsls	r3, r4, #2
 8005d36:	f100 0514 	add.w	r5, r0, #20
 8005d3a:	f101 0814 	add.w	r8, r1, #20
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	429a      	cmp	r2, r3
 8005d52:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d56:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d5a:	d32e      	bcc.n	8005dba <quorem+0x96>
 8005d5c:	f04f 0a00 	mov.w	sl, #0
 8005d60:	46c4      	mov	ip, r8
 8005d62:	46ae      	mov	lr, r5
 8005d64:	46d3      	mov	fp, sl
 8005d66:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d6a:	b298      	uxth	r0, r3
 8005d6c:	fb06 a000 	mla	r0, r6, r0, sl
 8005d70:	0c1b      	lsrs	r3, r3, #16
 8005d72:	0c02      	lsrs	r2, r0, #16
 8005d74:	fb06 2303 	mla	r3, r6, r3, r2
 8005d78:	f8de 2000 	ldr.w	r2, [lr]
 8005d7c:	b280      	uxth	r0, r0
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	1a12      	subs	r2, r2, r0
 8005d82:	445a      	add	r2, fp
 8005d84:	f8de 0000 	ldr.w	r0, [lr]
 8005d88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d92:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d96:	b292      	uxth	r2, r2
 8005d98:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d9c:	45e1      	cmp	r9, ip
 8005d9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005da2:	f84e 2b04 	str.w	r2, [lr], #4
 8005da6:	d2de      	bcs.n	8005d66 <quorem+0x42>
 8005da8:	9b00      	ldr	r3, [sp, #0]
 8005daa:	58eb      	ldr	r3, [r5, r3]
 8005dac:	b92b      	cbnz	r3, 8005dba <quorem+0x96>
 8005dae:	9b01      	ldr	r3, [sp, #4]
 8005db0:	3b04      	subs	r3, #4
 8005db2:	429d      	cmp	r5, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	d32f      	bcc.n	8005e18 <quorem+0xf4>
 8005db8:	613c      	str	r4, [r7, #16]
 8005dba:	4638      	mov	r0, r7
 8005dbc:	f001 f9ca 	bl	8007154 <__mcmp>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	db25      	blt.n	8005e10 <quorem+0xec>
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dcc:	f8d1 c000 	ldr.w	ip, [r1]
 8005dd0:	fa1f fe82 	uxth.w	lr, r2
 8005dd4:	fa1f f38c 	uxth.w	r3, ip
 8005dd8:	eba3 030e 	sub.w	r3, r3, lr
 8005ddc:	4403      	add	r3, r0
 8005dde:	0c12      	lsrs	r2, r2, #16
 8005de0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005de4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dee:	45c1      	cmp	r9, r8
 8005df0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005df4:	f841 3b04 	str.w	r3, [r1], #4
 8005df8:	d2e6      	bcs.n	8005dc8 <quorem+0xa4>
 8005dfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e02:	b922      	cbnz	r2, 8005e0e <quorem+0xea>
 8005e04:	3b04      	subs	r3, #4
 8005e06:	429d      	cmp	r5, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	d30b      	bcc.n	8005e24 <quorem+0x100>
 8005e0c:	613c      	str	r4, [r7, #16]
 8005e0e:	3601      	adds	r6, #1
 8005e10:	4630      	mov	r0, r6
 8005e12:	b003      	add	sp, #12
 8005e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	3b04      	subs	r3, #4
 8005e1c:	2a00      	cmp	r2, #0
 8005e1e:	d1cb      	bne.n	8005db8 <quorem+0x94>
 8005e20:	3c01      	subs	r4, #1
 8005e22:	e7c6      	b.n	8005db2 <quorem+0x8e>
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	3b04      	subs	r3, #4
 8005e28:	2a00      	cmp	r2, #0
 8005e2a:	d1ef      	bne.n	8005e0c <quorem+0xe8>
 8005e2c:	3c01      	subs	r4, #1
 8005e2e:	e7ea      	b.n	8005e06 <quorem+0xe2>
 8005e30:	2000      	movs	r0, #0
 8005e32:	e7ee      	b.n	8005e12 <quorem+0xee>
 8005e34:	0000      	movs	r0, r0
	...

08005e38 <_dtoa_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	461d      	mov	r5, r3
 8005e40:	69c7      	ldr	r7, [r0, #28]
 8005e42:	b097      	sub	sp, #92	@ 0x5c
 8005e44:	4681      	mov	r9, r0
 8005e46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005e4a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005e4c:	b97f      	cbnz	r7, 8005e6e <_dtoa_r+0x36>
 8005e4e:	2010      	movs	r0, #16
 8005e50:	f000 fe0e 	bl	8006a70 <malloc>
 8005e54:	4602      	mov	r2, r0
 8005e56:	f8c9 001c 	str.w	r0, [r9, #28]
 8005e5a:	b920      	cbnz	r0, 8005e66 <_dtoa_r+0x2e>
 8005e5c:	21ef      	movs	r1, #239	@ 0xef
 8005e5e:	4bac      	ldr	r3, [pc, #688]	@ (8006110 <_dtoa_r+0x2d8>)
 8005e60:	48ac      	ldr	r0, [pc, #688]	@ (8006114 <_dtoa_r+0x2dc>)
 8005e62:	f002 fc13 	bl	800868c <__assert_func>
 8005e66:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e6a:	6007      	str	r7, [r0, #0]
 8005e6c:	60c7      	str	r7, [r0, #12]
 8005e6e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e72:	6819      	ldr	r1, [r3, #0]
 8005e74:	b159      	cbz	r1, 8005e8e <_dtoa_r+0x56>
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4093      	lsls	r3, r2
 8005e7c:	604a      	str	r2, [r1, #4]
 8005e7e:	608b      	str	r3, [r1, #8]
 8005e80:	4648      	mov	r0, r9
 8005e82:	f000 feeb 	bl	8006c5c <_Bfree>
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	1e2b      	subs	r3, r5, #0
 8005e90:	bfaf      	iteee	ge
 8005e92:	2300      	movge	r3, #0
 8005e94:	2201      	movlt	r2, #1
 8005e96:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e9a:	9307      	strlt	r3, [sp, #28]
 8005e9c:	bfa8      	it	ge
 8005e9e:	6033      	strge	r3, [r6, #0]
 8005ea0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8006118 <_dtoa_r+0x2e0>)
 8005ea6:	bfb8      	it	lt
 8005ea8:	6032      	strlt	r2, [r6, #0]
 8005eaa:	ea33 0308 	bics.w	r3, r3, r8
 8005eae:	d112      	bne.n	8005ed6 <_dtoa_r+0x9e>
 8005eb0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005eb4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005ebc:	4323      	orrs	r3, r4
 8005ebe:	f000 855e 	beq.w	800697e <_dtoa_r+0xb46>
 8005ec2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ec4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800611c <_dtoa_r+0x2e4>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8560 	beq.w	800698e <_dtoa_r+0xb56>
 8005ece:	f10a 0303 	add.w	r3, sl, #3
 8005ed2:	f000 bd5a 	b.w	800698a <_dtoa_r+0xb52>
 8005ed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005eda:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7fa fd5f 	bl	80009a8 <__aeabi_dcmpeq>
 8005eea:	4607      	mov	r7, r0
 8005eec:	b158      	cbz	r0, 8005f06 <_dtoa_r+0xce>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005ef2:	6013      	str	r3, [r2, #0]
 8005ef4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ef6:	b113      	cbz	r3, 8005efe <_dtoa_r+0xc6>
 8005ef8:	4b89      	ldr	r3, [pc, #548]	@ (8006120 <_dtoa_r+0x2e8>)
 8005efa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005efc:	6013      	str	r3, [r2, #0]
 8005efe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006124 <_dtoa_r+0x2ec>
 8005f02:	f000 bd44 	b.w	800698e <_dtoa_r+0xb56>
 8005f06:	ab14      	add	r3, sp, #80	@ 0x50
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	ab15      	add	r3, sp, #84	@ 0x54
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	4648      	mov	r0, r9
 8005f10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f14:	f001 fa36 	bl	8007384 <__d2b>
 8005f18:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005f1c:	9003      	str	r0, [sp, #12]
 8005f1e:	2e00      	cmp	r6, #0
 8005f20:	d078      	beq.n	8006014 <_dtoa_r+0x1dc>
 8005f22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f28:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f30:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f34:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f38:	9712      	str	r7, [sp, #72]	@ 0x48
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8006128 <_dtoa_r+0x2f0>)
 8005f40:	f7fa f912 	bl	8000168 <__aeabi_dsub>
 8005f44:	a36c      	add	r3, pc, #432	@ (adr r3, 80060f8 <_dtoa_r+0x2c0>)
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	f7fa fac5 	bl	80004d8 <__aeabi_dmul>
 8005f4e:	a36c      	add	r3, pc, #432	@ (adr r3, 8006100 <_dtoa_r+0x2c8>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa f90a 	bl	800016c <__adddf3>
 8005f58:	4604      	mov	r4, r0
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	f7fa fa51 	bl	8000404 <__aeabi_i2d>
 8005f62:	a369      	add	r3, pc, #420	@ (adr r3, 8006108 <_dtoa_r+0x2d0>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa fab6 	bl	80004d8 <__aeabi_dmul>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4620      	mov	r0, r4
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa f8fa 	bl	800016c <__adddf3>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	460d      	mov	r5, r1
 8005f7c:	f7fa fd5c 	bl	8000a38 <__aeabi_d2iz>
 8005f80:	2200      	movs	r2, #0
 8005f82:	4607      	mov	r7, r0
 8005f84:	2300      	movs	r3, #0
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa fd17 	bl	80009bc <__aeabi_dcmplt>
 8005f8e:	b140      	cbz	r0, 8005fa2 <_dtoa_r+0x16a>
 8005f90:	4638      	mov	r0, r7
 8005f92:	f7fa fa37 	bl	8000404 <__aeabi_i2d>
 8005f96:	4622      	mov	r2, r4
 8005f98:	462b      	mov	r3, r5
 8005f9a:	f7fa fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8005f9e:	b900      	cbnz	r0, 8005fa2 <_dtoa_r+0x16a>
 8005fa0:	3f01      	subs	r7, #1
 8005fa2:	2f16      	cmp	r7, #22
 8005fa4:	d854      	bhi.n	8006050 <_dtoa_r+0x218>
 8005fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005faa:	4b60      	ldr	r3, [pc, #384]	@ (800612c <_dtoa_r+0x2f4>)
 8005fac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fd02 	bl	80009bc <__aeabi_dcmplt>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d04b      	beq.n	8006054 <_dtoa_r+0x21c>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	3f01      	subs	r7, #1
 8005fc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005fc2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005fc4:	1b9b      	subs	r3, r3, r6
 8005fc6:	1e5a      	subs	r2, r3, #1
 8005fc8:	bf49      	itett	mi
 8005fca:	f1c3 0301 	rsbmi	r3, r3, #1
 8005fce:	2300      	movpl	r3, #0
 8005fd0:	9304      	strmi	r3, [sp, #16]
 8005fd2:	2300      	movmi	r3, #0
 8005fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fd6:	bf54      	ite	pl
 8005fd8:	9304      	strpl	r3, [sp, #16]
 8005fda:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005fdc:	2f00      	cmp	r7, #0
 8005fde:	db3b      	blt.n	8006058 <_dtoa_r+0x220>
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	970e      	str	r7, [sp, #56]	@ 0x38
 8005fe4:	443b      	add	r3, r7
 8005fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fe8:	2300      	movs	r3, #0
 8005fea:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fee:	2b09      	cmp	r3, #9
 8005ff0:	d865      	bhi.n	80060be <_dtoa_r+0x286>
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	bfc4      	itt	gt
 8005ff6:	3b04      	subgt	r3, #4
 8005ff8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ffa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ffc:	bfc8      	it	gt
 8005ffe:	2400      	movgt	r4, #0
 8006000:	f1a3 0302 	sub.w	r3, r3, #2
 8006004:	bfd8      	it	le
 8006006:	2401      	movle	r4, #1
 8006008:	2b03      	cmp	r3, #3
 800600a:	d864      	bhi.n	80060d6 <_dtoa_r+0x29e>
 800600c:	e8df f003 	tbb	[pc, r3]
 8006010:	2c385553 	.word	0x2c385553
 8006014:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006018:	441e      	add	r6, r3
 800601a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800601e:	2b20      	cmp	r3, #32
 8006020:	bfc1      	itttt	gt
 8006022:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006026:	fa08 f803 	lslgt.w	r8, r8, r3
 800602a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800602e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006032:	bfd6      	itet	le
 8006034:	f1c3 0320 	rsble	r3, r3, #32
 8006038:	ea48 0003 	orrgt.w	r0, r8, r3
 800603c:	fa04 f003 	lslle.w	r0, r4, r3
 8006040:	f7fa f9d0 	bl	80003e4 <__aeabi_ui2d>
 8006044:	2201      	movs	r2, #1
 8006046:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800604a:	3e01      	subs	r6, #1
 800604c:	9212      	str	r2, [sp, #72]	@ 0x48
 800604e:	e774      	b.n	8005f3a <_dtoa_r+0x102>
 8006050:	2301      	movs	r3, #1
 8006052:	e7b5      	b.n	8005fc0 <_dtoa_r+0x188>
 8006054:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006056:	e7b4      	b.n	8005fc2 <_dtoa_r+0x18a>
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	1bdb      	subs	r3, r3, r7
 800605c:	9304      	str	r3, [sp, #16]
 800605e:	427b      	negs	r3, r7
 8006060:	930a      	str	r3, [sp, #40]	@ 0x28
 8006062:	2300      	movs	r3, #0
 8006064:	930e      	str	r3, [sp, #56]	@ 0x38
 8006066:	e7c1      	b.n	8005fec <_dtoa_r+0x1b4>
 8006068:	2301      	movs	r3, #1
 800606a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800606c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800606e:	eb07 0b03 	add.w	fp, r7, r3
 8006072:	f10b 0301 	add.w	r3, fp, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	9308      	str	r3, [sp, #32]
 800607a:	bfb8      	it	lt
 800607c:	2301      	movlt	r3, #1
 800607e:	e006      	b.n	800608e <_dtoa_r+0x256>
 8006080:	2301      	movs	r3, #1
 8006082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006084:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006086:	2b00      	cmp	r3, #0
 8006088:	dd28      	ble.n	80060dc <_dtoa_r+0x2a4>
 800608a:	469b      	mov	fp, r3
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	2100      	movs	r1, #0
 8006090:	2204      	movs	r2, #4
 8006092:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006096:	f102 0514 	add.w	r5, r2, #20
 800609a:	429d      	cmp	r5, r3
 800609c:	d926      	bls.n	80060ec <_dtoa_r+0x2b4>
 800609e:	6041      	str	r1, [r0, #4]
 80060a0:	4648      	mov	r0, r9
 80060a2:	f000 fd9b 	bl	8006bdc <_Balloc>
 80060a6:	4682      	mov	sl, r0
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d143      	bne.n	8006134 <_dtoa_r+0x2fc>
 80060ac:	4602      	mov	r2, r0
 80060ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80060b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006130 <_dtoa_r+0x2f8>)
 80060b4:	e6d4      	b.n	8005e60 <_dtoa_r+0x28>
 80060b6:	2300      	movs	r3, #0
 80060b8:	e7e3      	b.n	8006082 <_dtoa_r+0x24a>
 80060ba:	2300      	movs	r3, #0
 80060bc:	e7d5      	b.n	800606a <_dtoa_r+0x232>
 80060be:	2401      	movs	r4, #1
 80060c0:	2300      	movs	r3, #0
 80060c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80060c6:	f04f 3bff 	mov.w	fp, #4294967295
 80060ca:	2200      	movs	r2, #0
 80060cc:	2312      	movs	r3, #18
 80060ce:	f8cd b020 	str.w	fp, [sp, #32]
 80060d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80060d4:	e7db      	b.n	800608e <_dtoa_r+0x256>
 80060d6:	2301      	movs	r3, #1
 80060d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060da:	e7f4      	b.n	80060c6 <_dtoa_r+0x28e>
 80060dc:	f04f 0b01 	mov.w	fp, #1
 80060e0:	465b      	mov	r3, fp
 80060e2:	f8cd b020 	str.w	fp, [sp, #32]
 80060e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80060ea:	e7d0      	b.n	800608e <_dtoa_r+0x256>
 80060ec:	3101      	adds	r1, #1
 80060ee:	0052      	lsls	r2, r2, #1
 80060f0:	e7d1      	b.n	8006096 <_dtoa_r+0x25e>
 80060f2:	bf00      	nop
 80060f4:	f3af 8000 	nop.w
 80060f8:	636f4361 	.word	0x636f4361
 80060fc:	3fd287a7 	.word	0x3fd287a7
 8006100:	8b60c8b3 	.word	0x8b60c8b3
 8006104:	3fc68a28 	.word	0x3fc68a28
 8006108:	509f79fb 	.word	0x509f79fb
 800610c:	3fd34413 	.word	0x3fd34413
 8006110:	08009668 	.word	0x08009668
 8006114:	0800967f 	.word	0x0800967f
 8006118:	7ff00000 	.word	0x7ff00000
 800611c:	08009664 	.word	0x08009664
 8006120:	08009633 	.word	0x08009633
 8006124:	08009632 	.word	0x08009632
 8006128:	3ff80000 	.word	0x3ff80000
 800612c:	08009830 	.word	0x08009830
 8006130:	080096d7 	.word	0x080096d7
 8006134:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006138:	6018      	str	r0, [r3, #0]
 800613a:	9b08      	ldr	r3, [sp, #32]
 800613c:	2b0e      	cmp	r3, #14
 800613e:	f200 80a1 	bhi.w	8006284 <_dtoa_r+0x44c>
 8006142:	2c00      	cmp	r4, #0
 8006144:	f000 809e 	beq.w	8006284 <_dtoa_r+0x44c>
 8006148:	2f00      	cmp	r7, #0
 800614a:	dd33      	ble.n	80061b4 <_dtoa_r+0x37c>
 800614c:	4b9c      	ldr	r3, [pc, #624]	@ (80063c0 <_dtoa_r+0x588>)
 800614e:	f007 020f 	and.w	r2, r7, #15
 8006152:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006156:	05f8      	lsls	r0, r7, #23
 8006158:	e9d3 3400 	ldrd	r3, r4, [r3]
 800615c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006160:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006164:	d516      	bpl.n	8006194 <_dtoa_r+0x35c>
 8006166:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800616a:	4b96      	ldr	r3, [pc, #600]	@ (80063c4 <_dtoa_r+0x58c>)
 800616c:	2603      	movs	r6, #3
 800616e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006172:	f7fa fadb 	bl	800072c <__aeabi_ddiv>
 8006176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800617a:	f004 040f 	and.w	r4, r4, #15
 800617e:	4d91      	ldr	r5, [pc, #580]	@ (80063c4 <_dtoa_r+0x58c>)
 8006180:	b954      	cbnz	r4, 8006198 <_dtoa_r+0x360>
 8006182:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618a:	f7fa facf 	bl	800072c <__aeabi_ddiv>
 800618e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006192:	e028      	b.n	80061e6 <_dtoa_r+0x3ae>
 8006194:	2602      	movs	r6, #2
 8006196:	e7f2      	b.n	800617e <_dtoa_r+0x346>
 8006198:	07e1      	lsls	r1, r4, #31
 800619a:	d508      	bpl.n	80061ae <_dtoa_r+0x376>
 800619c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061a4:	f7fa f998 	bl	80004d8 <__aeabi_dmul>
 80061a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ac:	3601      	adds	r6, #1
 80061ae:	1064      	asrs	r4, r4, #1
 80061b0:	3508      	adds	r5, #8
 80061b2:	e7e5      	b.n	8006180 <_dtoa_r+0x348>
 80061b4:	f000 80af 	beq.w	8006316 <_dtoa_r+0x4de>
 80061b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061bc:	427c      	negs	r4, r7
 80061be:	4b80      	ldr	r3, [pc, #512]	@ (80063c0 <_dtoa_r+0x588>)
 80061c0:	f004 020f 	and.w	r2, r4, #15
 80061c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f7fa f984 	bl	80004d8 <__aeabi_dmul>
 80061d0:	2602      	movs	r6, #2
 80061d2:	2300      	movs	r3, #0
 80061d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061d8:	4d7a      	ldr	r5, [pc, #488]	@ (80063c4 <_dtoa_r+0x58c>)
 80061da:	1124      	asrs	r4, r4, #4
 80061dc:	2c00      	cmp	r4, #0
 80061de:	f040 808f 	bne.w	8006300 <_dtoa_r+0x4c8>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1d3      	bne.n	800618e <_dtoa_r+0x356>
 80061e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80061ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8094 	beq.w	800631a <_dtoa_r+0x4e2>
 80061f2:	2200      	movs	r2, #0
 80061f4:	4620      	mov	r0, r4
 80061f6:	4629      	mov	r1, r5
 80061f8:	4b73      	ldr	r3, [pc, #460]	@ (80063c8 <_dtoa_r+0x590>)
 80061fa:	f7fa fbdf 	bl	80009bc <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	f000 808b 	beq.w	800631a <_dtoa_r+0x4e2>
 8006204:	9b08      	ldr	r3, [sp, #32]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8087 	beq.w	800631a <_dtoa_r+0x4e2>
 800620c:	f1bb 0f00 	cmp.w	fp, #0
 8006210:	dd34      	ble.n	800627c <_dtoa_r+0x444>
 8006212:	4620      	mov	r0, r4
 8006214:	2200      	movs	r2, #0
 8006216:	4629      	mov	r1, r5
 8006218:	4b6c      	ldr	r3, [pc, #432]	@ (80063cc <_dtoa_r+0x594>)
 800621a:	f7fa f95d 	bl	80004d8 <__aeabi_dmul>
 800621e:	465c      	mov	r4, fp
 8006220:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006224:	f107 38ff 	add.w	r8, r7, #4294967295
 8006228:	3601      	adds	r6, #1
 800622a:	4630      	mov	r0, r6
 800622c:	f7fa f8ea 	bl	8000404 <__aeabi_i2d>
 8006230:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006234:	f7fa f950 	bl	80004d8 <__aeabi_dmul>
 8006238:	2200      	movs	r2, #0
 800623a:	4b65      	ldr	r3, [pc, #404]	@ (80063d0 <_dtoa_r+0x598>)
 800623c:	f7f9 ff96 	bl	800016c <__adddf3>
 8006240:	4605      	mov	r5, r0
 8006242:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006246:	2c00      	cmp	r4, #0
 8006248:	d16a      	bne.n	8006320 <_dtoa_r+0x4e8>
 800624a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800624e:	2200      	movs	r2, #0
 8006250:	4b60      	ldr	r3, [pc, #384]	@ (80063d4 <_dtoa_r+0x59c>)
 8006252:	f7f9 ff89 	bl	8000168 <__aeabi_dsub>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800625e:	462a      	mov	r2, r5
 8006260:	4633      	mov	r3, r6
 8006262:	f7fa fbc9 	bl	80009f8 <__aeabi_dcmpgt>
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 8298 	bne.w	800679c <_dtoa_r+0x964>
 800626c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006270:	462a      	mov	r2, r5
 8006272:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006276:	f7fa fba1 	bl	80009bc <__aeabi_dcmplt>
 800627a:	bb38      	cbnz	r0, 80062cc <_dtoa_r+0x494>
 800627c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006280:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006284:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006286:	2b00      	cmp	r3, #0
 8006288:	f2c0 8157 	blt.w	800653a <_dtoa_r+0x702>
 800628c:	2f0e      	cmp	r7, #14
 800628e:	f300 8154 	bgt.w	800653a <_dtoa_r+0x702>
 8006292:	4b4b      	ldr	r3, [pc, #300]	@ (80063c0 <_dtoa_r+0x588>)
 8006294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006298:	e9d3 3400 	ldrd	r3, r4, [r3]
 800629c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f280 80e5 	bge.w	8006472 <_dtoa_r+0x63a>
 80062a8:	9b08      	ldr	r3, [sp, #32]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f300 80e1 	bgt.w	8006472 <_dtoa_r+0x63a>
 80062b0:	d10c      	bne.n	80062cc <_dtoa_r+0x494>
 80062b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062b6:	2200      	movs	r2, #0
 80062b8:	4b46      	ldr	r3, [pc, #280]	@ (80063d4 <_dtoa_r+0x59c>)
 80062ba:	f7fa f90d 	bl	80004d8 <__aeabi_dmul>
 80062be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80062c2:	f7fa fb8f 	bl	80009e4 <__aeabi_dcmpge>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f000 8266 	beq.w	8006798 <_dtoa_r+0x960>
 80062cc:	2400      	movs	r4, #0
 80062ce:	4625      	mov	r5, r4
 80062d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80062d2:	4656      	mov	r6, sl
 80062d4:	ea6f 0803 	mvn.w	r8, r3
 80062d8:	2700      	movs	r7, #0
 80062da:	4621      	mov	r1, r4
 80062dc:	4648      	mov	r0, r9
 80062de:	f000 fcbd 	bl	8006c5c <_Bfree>
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	f000 80bd 	beq.w	8006462 <_dtoa_r+0x62a>
 80062e8:	b12f      	cbz	r7, 80062f6 <_dtoa_r+0x4be>
 80062ea:	42af      	cmp	r7, r5
 80062ec:	d003      	beq.n	80062f6 <_dtoa_r+0x4be>
 80062ee:	4639      	mov	r1, r7
 80062f0:	4648      	mov	r0, r9
 80062f2:	f000 fcb3 	bl	8006c5c <_Bfree>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4648      	mov	r0, r9
 80062fa:	f000 fcaf 	bl	8006c5c <_Bfree>
 80062fe:	e0b0      	b.n	8006462 <_dtoa_r+0x62a>
 8006300:	07e2      	lsls	r2, r4, #31
 8006302:	d505      	bpl.n	8006310 <_dtoa_r+0x4d8>
 8006304:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	2301      	movs	r3, #1
 800630e:	3601      	adds	r6, #1
 8006310:	1064      	asrs	r4, r4, #1
 8006312:	3508      	adds	r5, #8
 8006314:	e762      	b.n	80061dc <_dtoa_r+0x3a4>
 8006316:	2602      	movs	r6, #2
 8006318:	e765      	b.n	80061e6 <_dtoa_r+0x3ae>
 800631a:	46b8      	mov	r8, r7
 800631c:	9c08      	ldr	r4, [sp, #32]
 800631e:	e784      	b.n	800622a <_dtoa_r+0x3f2>
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <_dtoa_r+0x588>)
 8006322:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006328:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800632c:	4454      	add	r4, sl
 800632e:	2900      	cmp	r1, #0
 8006330:	d054      	beq.n	80063dc <_dtoa_r+0x5a4>
 8006332:	2000      	movs	r0, #0
 8006334:	4928      	ldr	r1, [pc, #160]	@ (80063d8 <_dtoa_r+0x5a0>)
 8006336:	f7fa f9f9 	bl	800072c <__aeabi_ddiv>
 800633a:	4633      	mov	r3, r6
 800633c:	462a      	mov	r2, r5
 800633e:	f7f9 ff13 	bl	8000168 <__aeabi_dsub>
 8006342:	4656      	mov	r6, sl
 8006344:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800634c:	f7fa fb74 	bl	8000a38 <__aeabi_d2iz>
 8006350:	4605      	mov	r5, r0
 8006352:	f7fa f857 	bl	8000404 <__aeabi_i2d>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800635e:	f7f9 ff03 	bl	8000168 <__aeabi_dsub>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	3530      	adds	r5, #48	@ 0x30
 8006368:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800636c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006370:	f806 5b01 	strb.w	r5, [r6], #1
 8006374:	f7fa fb22 	bl	80009bc <__aeabi_dcmplt>
 8006378:	2800      	cmp	r0, #0
 800637a:	d172      	bne.n	8006462 <_dtoa_r+0x62a>
 800637c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006380:	2000      	movs	r0, #0
 8006382:	4911      	ldr	r1, [pc, #68]	@ (80063c8 <_dtoa_r+0x590>)
 8006384:	f7f9 fef0 	bl	8000168 <__aeabi_dsub>
 8006388:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800638c:	f7fa fb16 	bl	80009bc <__aeabi_dcmplt>
 8006390:	2800      	cmp	r0, #0
 8006392:	f040 80b4 	bne.w	80064fe <_dtoa_r+0x6c6>
 8006396:	42a6      	cmp	r6, r4
 8006398:	f43f af70 	beq.w	800627c <_dtoa_r+0x444>
 800639c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063a0:	2200      	movs	r2, #0
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <_dtoa_r+0x594>)
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	2200      	movs	r2, #0
 80063aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063b2:	4b06      	ldr	r3, [pc, #24]	@ (80063cc <_dtoa_r+0x594>)
 80063b4:	f7fa f890 	bl	80004d8 <__aeabi_dmul>
 80063b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80063bc:	e7c4      	b.n	8006348 <_dtoa_r+0x510>
 80063be:	bf00      	nop
 80063c0:	08009830 	.word	0x08009830
 80063c4:	08009808 	.word	0x08009808
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	40240000 	.word	0x40240000
 80063d0:	401c0000 	.word	0x401c0000
 80063d4:	40140000 	.word	0x40140000
 80063d8:	3fe00000 	.word	0x3fe00000
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	f7fa f87a 	bl	80004d8 <__aeabi_dmul>
 80063e4:	4656      	mov	r6, sl
 80063e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80063ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f0:	f7fa fb22 	bl	8000a38 <__aeabi_d2iz>
 80063f4:	4605      	mov	r5, r0
 80063f6:	f7fa f805 	bl	8000404 <__aeabi_i2d>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006402:	f7f9 feb1 	bl	8000168 <__aeabi_dsub>
 8006406:	4602      	mov	r2, r0
 8006408:	460b      	mov	r3, r1
 800640a:	3530      	adds	r5, #48	@ 0x30
 800640c:	f806 5b01 	strb.w	r5, [r6], #1
 8006410:	42a6      	cmp	r6, r4
 8006412:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006416:	f04f 0200 	mov.w	r2, #0
 800641a:	d124      	bne.n	8006466 <_dtoa_r+0x62e>
 800641c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006420:	4bae      	ldr	r3, [pc, #696]	@ (80066dc <_dtoa_r+0x8a4>)
 8006422:	f7f9 fea3 	bl	800016c <__adddf3>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800642e:	f7fa fae3 	bl	80009f8 <__aeabi_dcmpgt>
 8006432:	2800      	cmp	r0, #0
 8006434:	d163      	bne.n	80064fe <_dtoa_r+0x6c6>
 8006436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800643a:	2000      	movs	r0, #0
 800643c:	49a7      	ldr	r1, [pc, #668]	@ (80066dc <_dtoa_r+0x8a4>)
 800643e:	f7f9 fe93 	bl	8000168 <__aeabi_dsub>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800644a:	f7fa fab7 	bl	80009bc <__aeabi_dcmplt>
 800644e:	2800      	cmp	r0, #0
 8006450:	f43f af14 	beq.w	800627c <_dtoa_r+0x444>
 8006454:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006456:	1e73      	subs	r3, r6, #1
 8006458:	9313      	str	r3, [sp, #76]	@ 0x4c
 800645a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800645e:	2b30      	cmp	r3, #48	@ 0x30
 8006460:	d0f8      	beq.n	8006454 <_dtoa_r+0x61c>
 8006462:	4647      	mov	r7, r8
 8006464:	e03b      	b.n	80064de <_dtoa_r+0x6a6>
 8006466:	4b9e      	ldr	r3, [pc, #632]	@ (80066e0 <_dtoa_r+0x8a8>)
 8006468:	f7fa f836 	bl	80004d8 <__aeabi_dmul>
 800646c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006470:	e7bc      	b.n	80063ec <_dtoa_r+0x5b4>
 8006472:	4656      	mov	r6, sl
 8006474:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800647c:	4620      	mov	r0, r4
 800647e:	4629      	mov	r1, r5
 8006480:	f7fa f954 	bl	800072c <__aeabi_ddiv>
 8006484:	f7fa fad8 	bl	8000a38 <__aeabi_d2iz>
 8006488:	4680      	mov	r8, r0
 800648a:	f7f9 ffbb 	bl	8000404 <__aeabi_i2d>
 800648e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	4602      	mov	r2, r0
 8006498:	460b      	mov	r3, r1
 800649a:	4620      	mov	r0, r4
 800649c:	4629      	mov	r1, r5
 800649e:	f7f9 fe63 	bl	8000168 <__aeabi_dsub>
 80064a2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80064a6:	9d08      	ldr	r5, [sp, #32]
 80064a8:	f806 4b01 	strb.w	r4, [r6], #1
 80064ac:	eba6 040a 	sub.w	r4, r6, sl
 80064b0:	42a5      	cmp	r5, r4
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	d133      	bne.n	8006520 <_dtoa_r+0x6e8>
 80064b8:	f7f9 fe58 	bl	800016c <__adddf3>
 80064bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c0:	4604      	mov	r4, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	f7fa fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80064c8:	b9c0      	cbnz	r0, 80064fc <_dtoa_r+0x6c4>
 80064ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ce:	4620      	mov	r0, r4
 80064d0:	4629      	mov	r1, r5
 80064d2:	f7fa fa69 	bl	80009a8 <__aeabi_dcmpeq>
 80064d6:	b110      	cbz	r0, 80064de <_dtoa_r+0x6a6>
 80064d8:	f018 0f01 	tst.w	r8, #1
 80064dc:	d10e      	bne.n	80064fc <_dtoa_r+0x6c4>
 80064de:	4648      	mov	r0, r9
 80064e0:	9903      	ldr	r1, [sp, #12]
 80064e2:	f000 fbbb 	bl	8006c5c <_Bfree>
 80064e6:	2300      	movs	r3, #0
 80064e8:	7033      	strb	r3, [r6, #0]
 80064ea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80064ec:	3701      	adds	r7, #1
 80064ee:	601f      	str	r7, [r3, #0]
 80064f0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 824b 	beq.w	800698e <_dtoa_r+0xb56>
 80064f8:	601e      	str	r6, [r3, #0]
 80064fa:	e248      	b.n	800698e <_dtoa_r+0xb56>
 80064fc:	46b8      	mov	r8, r7
 80064fe:	4633      	mov	r3, r6
 8006500:	461e      	mov	r6, r3
 8006502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006506:	2a39      	cmp	r2, #57	@ 0x39
 8006508:	d106      	bne.n	8006518 <_dtoa_r+0x6e0>
 800650a:	459a      	cmp	sl, r3
 800650c:	d1f8      	bne.n	8006500 <_dtoa_r+0x6c8>
 800650e:	2230      	movs	r2, #48	@ 0x30
 8006510:	f108 0801 	add.w	r8, r8, #1
 8006514:	f88a 2000 	strb.w	r2, [sl]
 8006518:	781a      	ldrb	r2, [r3, #0]
 800651a:	3201      	adds	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e7a0      	b.n	8006462 <_dtoa_r+0x62a>
 8006520:	2200      	movs	r2, #0
 8006522:	4b6f      	ldr	r3, [pc, #444]	@ (80066e0 <_dtoa_r+0x8a8>)
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	4604      	mov	r4, r0
 800652e:	460d      	mov	r5, r1
 8006530:	f7fa fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006534:	2800      	cmp	r0, #0
 8006536:	d09f      	beq.n	8006478 <_dtoa_r+0x640>
 8006538:	e7d1      	b.n	80064de <_dtoa_r+0x6a6>
 800653a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800653c:	2a00      	cmp	r2, #0
 800653e:	f000 80ea 	beq.w	8006716 <_dtoa_r+0x8de>
 8006542:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006544:	2a01      	cmp	r2, #1
 8006546:	f300 80cd 	bgt.w	80066e4 <_dtoa_r+0x8ac>
 800654a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800654c:	2a00      	cmp	r2, #0
 800654e:	f000 80c1 	beq.w	80066d4 <_dtoa_r+0x89c>
 8006552:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006556:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006558:	9e04      	ldr	r6, [sp, #16]
 800655a:	9a04      	ldr	r2, [sp, #16]
 800655c:	2101      	movs	r1, #1
 800655e:	441a      	add	r2, r3
 8006560:	9204      	str	r2, [sp, #16]
 8006562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006564:	4648      	mov	r0, r9
 8006566:	441a      	add	r2, r3
 8006568:	9209      	str	r2, [sp, #36]	@ 0x24
 800656a:	f000 fc75 	bl	8006e58 <__i2b>
 800656e:	4605      	mov	r5, r0
 8006570:	b166      	cbz	r6, 800658c <_dtoa_r+0x754>
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd09      	ble.n	800658c <_dtoa_r+0x754>
 8006578:	42b3      	cmp	r3, r6
 800657a:	bfa8      	it	ge
 800657c:	4633      	movge	r3, r6
 800657e:	9a04      	ldr	r2, [sp, #16]
 8006580:	1af6      	subs	r6, r6, r3
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	9204      	str	r2, [sp, #16]
 8006586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	9309      	str	r3, [sp, #36]	@ 0x24
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	b30b      	cbz	r3, 80065d4 <_dtoa_r+0x79c>
 8006590:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 80c6 	beq.w	8006724 <_dtoa_r+0x8ec>
 8006598:	2c00      	cmp	r4, #0
 800659a:	f000 80c0 	beq.w	800671e <_dtoa_r+0x8e6>
 800659e:	4629      	mov	r1, r5
 80065a0:	4622      	mov	r2, r4
 80065a2:	4648      	mov	r0, r9
 80065a4:	f000 fd10 	bl	8006fc8 <__pow5mult>
 80065a8:	9a03      	ldr	r2, [sp, #12]
 80065aa:	4601      	mov	r1, r0
 80065ac:	4605      	mov	r5, r0
 80065ae:	4648      	mov	r0, r9
 80065b0:	f000 fc68 	bl	8006e84 <__multiply>
 80065b4:	9903      	ldr	r1, [sp, #12]
 80065b6:	4680      	mov	r8, r0
 80065b8:	4648      	mov	r0, r9
 80065ba:	f000 fb4f 	bl	8006c5c <_Bfree>
 80065be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065c0:	1b1b      	subs	r3, r3, r4
 80065c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c4:	f000 80b1 	beq.w	800672a <_dtoa_r+0x8f2>
 80065c8:	4641      	mov	r1, r8
 80065ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065cc:	4648      	mov	r0, r9
 80065ce:	f000 fcfb 	bl	8006fc8 <__pow5mult>
 80065d2:	9003      	str	r0, [sp, #12]
 80065d4:	2101      	movs	r1, #1
 80065d6:	4648      	mov	r0, r9
 80065d8:	f000 fc3e 	bl	8006e58 <__i2b>
 80065dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065de:	4604      	mov	r4, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 81d8 	beq.w	8006996 <_dtoa_r+0xb5e>
 80065e6:	461a      	mov	r2, r3
 80065e8:	4601      	mov	r1, r0
 80065ea:	4648      	mov	r0, r9
 80065ec:	f000 fcec 	bl	8006fc8 <__pow5mult>
 80065f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065f2:	4604      	mov	r4, r0
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f300 809f 	bgt.w	8006738 <_dtoa_r+0x900>
 80065fa:	9b06      	ldr	r3, [sp, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f040 8097 	bne.w	8006730 <_dtoa_r+0x8f8>
 8006602:	9b07      	ldr	r3, [sp, #28]
 8006604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006608:	2b00      	cmp	r3, #0
 800660a:	f040 8093 	bne.w	8006734 <_dtoa_r+0x8fc>
 800660e:	9b07      	ldr	r3, [sp, #28]
 8006610:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006614:	0d1b      	lsrs	r3, r3, #20
 8006616:	051b      	lsls	r3, r3, #20
 8006618:	b133      	cbz	r3, 8006628 <_dtoa_r+0x7f0>
 800661a:	9b04      	ldr	r3, [sp, #16]
 800661c:	3301      	adds	r3, #1
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006622:	3301      	adds	r3, #1
 8006624:	9309      	str	r3, [sp, #36]	@ 0x24
 8006626:	2301      	movs	r3, #1
 8006628:	930a      	str	r3, [sp, #40]	@ 0x28
 800662a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 81b8 	beq.w	80069a2 <_dtoa_r+0xb6a>
 8006632:	6923      	ldr	r3, [r4, #16]
 8006634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006638:	6918      	ldr	r0, [r3, #16]
 800663a:	f000 fbc1 	bl	8006dc0 <__hi0bits>
 800663e:	f1c0 0020 	rsb	r0, r0, #32
 8006642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006644:	4418      	add	r0, r3
 8006646:	f010 001f 	ands.w	r0, r0, #31
 800664a:	f000 8082 	beq.w	8006752 <_dtoa_r+0x91a>
 800664e:	f1c0 0320 	rsb	r3, r0, #32
 8006652:	2b04      	cmp	r3, #4
 8006654:	dd73      	ble.n	800673e <_dtoa_r+0x906>
 8006656:	9b04      	ldr	r3, [sp, #16]
 8006658:	f1c0 001c 	rsb	r0, r0, #28
 800665c:	4403      	add	r3, r0
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006662:	4406      	add	r6, r0
 8006664:	4403      	add	r3, r0
 8006666:	9309      	str	r3, [sp, #36]	@ 0x24
 8006668:	9b04      	ldr	r3, [sp, #16]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd05      	ble.n	800667a <_dtoa_r+0x842>
 800666e:	461a      	mov	r2, r3
 8006670:	4648      	mov	r0, r9
 8006672:	9903      	ldr	r1, [sp, #12]
 8006674:	f000 fd02 	bl	800707c <__lshift>
 8006678:	9003      	str	r0, [sp, #12]
 800667a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	dd05      	ble.n	800668c <_dtoa_r+0x854>
 8006680:	4621      	mov	r1, r4
 8006682:	461a      	mov	r2, r3
 8006684:	4648      	mov	r0, r9
 8006686:	f000 fcf9 	bl	800707c <__lshift>
 800668a:	4604      	mov	r4, r0
 800668c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d061      	beq.n	8006756 <_dtoa_r+0x91e>
 8006692:	4621      	mov	r1, r4
 8006694:	9803      	ldr	r0, [sp, #12]
 8006696:	f000 fd5d 	bl	8007154 <__mcmp>
 800669a:	2800      	cmp	r0, #0
 800669c:	da5b      	bge.n	8006756 <_dtoa_r+0x91e>
 800669e:	2300      	movs	r3, #0
 80066a0:	220a      	movs	r2, #10
 80066a2:	4648      	mov	r0, r9
 80066a4:	9903      	ldr	r1, [sp, #12]
 80066a6:	f000 fafb 	bl	8006ca0 <__multadd>
 80066aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066ac:	f107 38ff 	add.w	r8, r7, #4294967295
 80066b0:	9003      	str	r0, [sp, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8177 	beq.w	80069a6 <_dtoa_r+0xb6e>
 80066b8:	4629      	mov	r1, r5
 80066ba:	2300      	movs	r3, #0
 80066bc:	220a      	movs	r2, #10
 80066be:	4648      	mov	r0, r9
 80066c0:	f000 faee 	bl	8006ca0 <__multadd>
 80066c4:	f1bb 0f00 	cmp.w	fp, #0
 80066c8:	4605      	mov	r5, r0
 80066ca:	dc6f      	bgt.n	80067ac <_dtoa_r+0x974>
 80066cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	dc49      	bgt.n	8006766 <_dtoa_r+0x92e>
 80066d2:	e06b      	b.n	80067ac <_dtoa_r+0x974>
 80066d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066da:	e73c      	b.n	8006556 <_dtoa_r+0x71e>
 80066dc:	3fe00000 	.word	0x3fe00000
 80066e0:	40240000 	.word	0x40240000
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	1e5c      	subs	r4, r3, #1
 80066e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ea:	42a3      	cmp	r3, r4
 80066ec:	db09      	blt.n	8006702 <_dtoa_r+0x8ca>
 80066ee:	1b1c      	subs	r4, r3, r4
 80066f0:	9b08      	ldr	r3, [sp, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f6bf af30 	bge.w	8006558 <_dtoa_r+0x720>
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	9a08      	ldr	r2, [sp, #32]
 80066fc:	1a9e      	subs	r6, r3, r2
 80066fe:	2300      	movs	r3, #0
 8006700:	e72b      	b.n	800655a <_dtoa_r+0x722>
 8006702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006704:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006706:	1ae3      	subs	r3, r4, r3
 8006708:	441a      	add	r2, r3
 800670a:	940a      	str	r4, [sp, #40]	@ 0x28
 800670c:	9e04      	ldr	r6, [sp, #16]
 800670e:	2400      	movs	r4, #0
 8006710:	9b08      	ldr	r3, [sp, #32]
 8006712:	920e      	str	r2, [sp, #56]	@ 0x38
 8006714:	e721      	b.n	800655a <_dtoa_r+0x722>
 8006716:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006718:	9e04      	ldr	r6, [sp, #16]
 800671a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800671c:	e728      	b.n	8006570 <_dtoa_r+0x738>
 800671e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006722:	e751      	b.n	80065c8 <_dtoa_r+0x790>
 8006724:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006726:	9903      	ldr	r1, [sp, #12]
 8006728:	e750      	b.n	80065cc <_dtoa_r+0x794>
 800672a:	f8cd 800c 	str.w	r8, [sp, #12]
 800672e:	e751      	b.n	80065d4 <_dtoa_r+0x79c>
 8006730:	2300      	movs	r3, #0
 8006732:	e779      	b.n	8006628 <_dtoa_r+0x7f0>
 8006734:	9b06      	ldr	r3, [sp, #24]
 8006736:	e777      	b.n	8006628 <_dtoa_r+0x7f0>
 8006738:	2300      	movs	r3, #0
 800673a:	930a      	str	r3, [sp, #40]	@ 0x28
 800673c:	e779      	b.n	8006632 <_dtoa_r+0x7fa>
 800673e:	d093      	beq.n	8006668 <_dtoa_r+0x830>
 8006740:	9a04      	ldr	r2, [sp, #16]
 8006742:	331c      	adds	r3, #28
 8006744:	441a      	add	r2, r3
 8006746:	9204      	str	r2, [sp, #16]
 8006748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800674a:	441e      	add	r6, r3
 800674c:	441a      	add	r2, r3
 800674e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006750:	e78a      	b.n	8006668 <_dtoa_r+0x830>
 8006752:	4603      	mov	r3, r0
 8006754:	e7f4      	b.n	8006740 <_dtoa_r+0x908>
 8006756:	9b08      	ldr	r3, [sp, #32]
 8006758:	46b8      	mov	r8, r7
 800675a:	2b00      	cmp	r3, #0
 800675c:	dc20      	bgt.n	80067a0 <_dtoa_r+0x968>
 800675e:	469b      	mov	fp, r3
 8006760:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006762:	2b02      	cmp	r3, #2
 8006764:	dd1e      	ble.n	80067a4 <_dtoa_r+0x96c>
 8006766:	f1bb 0f00 	cmp.w	fp, #0
 800676a:	f47f adb1 	bne.w	80062d0 <_dtoa_r+0x498>
 800676e:	4621      	mov	r1, r4
 8006770:	465b      	mov	r3, fp
 8006772:	2205      	movs	r2, #5
 8006774:	4648      	mov	r0, r9
 8006776:	f000 fa93 	bl	8006ca0 <__multadd>
 800677a:	4601      	mov	r1, r0
 800677c:	4604      	mov	r4, r0
 800677e:	9803      	ldr	r0, [sp, #12]
 8006780:	f000 fce8 	bl	8007154 <__mcmp>
 8006784:	2800      	cmp	r0, #0
 8006786:	f77f ada3 	ble.w	80062d0 <_dtoa_r+0x498>
 800678a:	4656      	mov	r6, sl
 800678c:	2331      	movs	r3, #49	@ 0x31
 800678e:	f108 0801 	add.w	r8, r8, #1
 8006792:	f806 3b01 	strb.w	r3, [r6], #1
 8006796:	e59f      	b.n	80062d8 <_dtoa_r+0x4a0>
 8006798:	46b8      	mov	r8, r7
 800679a:	9c08      	ldr	r4, [sp, #32]
 800679c:	4625      	mov	r5, r4
 800679e:	e7f4      	b.n	800678a <_dtoa_r+0x952>
 80067a0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80067a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8101 	beq.w	80069ae <_dtoa_r+0xb76>
 80067ac:	2e00      	cmp	r6, #0
 80067ae:	dd05      	ble.n	80067bc <_dtoa_r+0x984>
 80067b0:	4629      	mov	r1, r5
 80067b2:	4632      	mov	r2, r6
 80067b4:	4648      	mov	r0, r9
 80067b6:	f000 fc61 	bl	800707c <__lshift>
 80067ba:	4605      	mov	r5, r0
 80067bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d05c      	beq.n	800687c <_dtoa_r+0xa44>
 80067c2:	4648      	mov	r0, r9
 80067c4:	6869      	ldr	r1, [r5, #4]
 80067c6:	f000 fa09 	bl	8006bdc <_Balloc>
 80067ca:	4606      	mov	r6, r0
 80067cc:	b928      	cbnz	r0, 80067da <_dtoa_r+0x9a2>
 80067ce:	4602      	mov	r2, r0
 80067d0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067d4:	4b80      	ldr	r3, [pc, #512]	@ (80069d8 <_dtoa_r+0xba0>)
 80067d6:	f7ff bb43 	b.w	8005e60 <_dtoa_r+0x28>
 80067da:	692a      	ldr	r2, [r5, #16]
 80067dc:	f105 010c 	add.w	r1, r5, #12
 80067e0:	3202      	adds	r2, #2
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	300c      	adds	r0, #12
 80067e6:	f7ff fa8a 	bl	8005cfe <memcpy>
 80067ea:	2201      	movs	r2, #1
 80067ec:	4631      	mov	r1, r6
 80067ee:	4648      	mov	r0, r9
 80067f0:	f000 fc44 	bl	800707c <__lshift>
 80067f4:	462f      	mov	r7, r5
 80067f6:	4605      	mov	r5, r0
 80067f8:	f10a 0301 	add.w	r3, sl, #1
 80067fc:	9304      	str	r3, [sp, #16]
 80067fe:	eb0a 030b 	add.w	r3, sl, fp
 8006802:	930a      	str	r3, [sp, #40]	@ 0x28
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	9309      	str	r3, [sp, #36]	@ 0x24
 800680c:	9b04      	ldr	r3, [sp, #16]
 800680e:	4621      	mov	r1, r4
 8006810:	9803      	ldr	r0, [sp, #12]
 8006812:	f103 3bff 	add.w	fp, r3, #4294967295
 8006816:	f7ff fa85 	bl	8005d24 <quorem>
 800681a:	4603      	mov	r3, r0
 800681c:	4639      	mov	r1, r7
 800681e:	3330      	adds	r3, #48	@ 0x30
 8006820:	9006      	str	r0, [sp, #24]
 8006822:	9803      	ldr	r0, [sp, #12]
 8006824:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006826:	f000 fc95 	bl	8007154 <__mcmp>
 800682a:	462a      	mov	r2, r5
 800682c:	9008      	str	r0, [sp, #32]
 800682e:	4621      	mov	r1, r4
 8006830:	4648      	mov	r0, r9
 8006832:	f000 fcab 	bl	800718c <__mdiff>
 8006836:	68c2      	ldr	r2, [r0, #12]
 8006838:	4606      	mov	r6, r0
 800683a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800683c:	bb02      	cbnz	r2, 8006880 <_dtoa_r+0xa48>
 800683e:	4601      	mov	r1, r0
 8006840:	9803      	ldr	r0, [sp, #12]
 8006842:	f000 fc87 	bl	8007154 <__mcmp>
 8006846:	4602      	mov	r2, r0
 8006848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800684a:	4631      	mov	r1, r6
 800684c:	4648      	mov	r0, r9
 800684e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006852:	f000 fa03 	bl	8006c5c <_Bfree>
 8006856:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006858:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800685a:	9e04      	ldr	r6, [sp, #16]
 800685c:	ea42 0103 	orr.w	r1, r2, r3
 8006860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006862:	4319      	orrs	r1, r3
 8006864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006866:	d10d      	bne.n	8006884 <_dtoa_r+0xa4c>
 8006868:	2b39      	cmp	r3, #57	@ 0x39
 800686a:	d027      	beq.n	80068bc <_dtoa_r+0xa84>
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	2a00      	cmp	r2, #0
 8006870:	dd01      	ble.n	8006876 <_dtoa_r+0xa3e>
 8006872:	9b06      	ldr	r3, [sp, #24]
 8006874:	3331      	adds	r3, #49	@ 0x31
 8006876:	f88b 3000 	strb.w	r3, [fp]
 800687a:	e52e      	b.n	80062da <_dtoa_r+0x4a2>
 800687c:	4628      	mov	r0, r5
 800687e:	e7b9      	b.n	80067f4 <_dtoa_r+0x9bc>
 8006880:	2201      	movs	r2, #1
 8006882:	e7e2      	b.n	800684a <_dtoa_r+0xa12>
 8006884:	9908      	ldr	r1, [sp, #32]
 8006886:	2900      	cmp	r1, #0
 8006888:	db04      	blt.n	8006894 <_dtoa_r+0xa5c>
 800688a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800688c:	4301      	orrs	r1, r0
 800688e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006890:	4301      	orrs	r1, r0
 8006892:	d120      	bne.n	80068d6 <_dtoa_r+0xa9e>
 8006894:	2a00      	cmp	r2, #0
 8006896:	ddee      	ble.n	8006876 <_dtoa_r+0xa3e>
 8006898:	2201      	movs	r2, #1
 800689a:	9903      	ldr	r1, [sp, #12]
 800689c:	4648      	mov	r0, r9
 800689e:	9304      	str	r3, [sp, #16]
 80068a0:	f000 fbec 	bl	800707c <__lshift>
 80068a4:	4621      	mov	r1, r4
 80068a6:	9003      	str	r0, [sp, #12]
 80068a8:	f000 fc54 	bl	8007154 <__mcmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	dc02      	bgt.n	80068b8 <_dtoa_r+0xa80>
 80068b2:	d1e0      	bne.n	8006876 <_dtoa_r+0xa3e>
 80068b4:	07da      	lsls	r2, r3, #31
 80068b6:	d5de      	bpl.n	8006876 <_dtoa_r+0xa3e>
 80068b8:	2b39      	cmp	r3, #57	@ 0x39
 80068ba:	d1da      	bne.n	8006872 <_dtoa_r+0xa3a>
 80068bc:	2339      	movs	r3, #57	@ 0x39
 80068be:	f88b 3000 	strb.w	r3, [fp]
 80068c2:	4633      	mov	r3, r6
 80068c4:	461e      	mov	r6, r3
 80068c6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	2a39      	cmp	r2, #57	@ 0x39
 80068ce:	d04e      	beq.n	800696e <_dtoa_r+0xb36>
 80068d0:	3201      	adds	r2, #1
 80068d2:	701a      	strb	r2, [r3, #0]
 80068d4:	e501      	b.n	80062da <_dtoa_r+0x4a2>
 80068d6:	2a00      	cmp	r2, #0
 80068d8:	dd03      	ble.n	80068e2 <_dtoa_r+0xaaa>
 80068da:	2b39      	cmp	r3, #57	@ 0x39
 80068dc:	d0ee      	beq.n	80068bc <_dtoa_r+0xa84>
 80068de:	3301      	adds	r3, #1
 80068e0:	e7c9      	b.n	8006876 <_dtoa_r+0xa3e>
 80068e2:	9a04      	ldr	r2, [sp, #16]
 80068e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80068e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80068ea:	428a      	cmp	r2, r1
 80068ec:	d028      	beq.n	8006940 <_dtoa_r+0xb08>
 80068ee:	2300      	movs	r3, #0
 80068f0:	220a      	movs	r2, #10
 80068f2:	9903      	ldr	r1, [sp, #12]
 80068f4:	4648      	mov	r0, r9
 80068f6:	f000 f9d3 	bl	8006ca0 <__multadd>
 80068fa:	42af      	cmp	r7, r5
 80068fc:	9003      	str	r0, [sp, #12]
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	f04f 020a 	mov.w	r2, #10
 8006906:	4639      	mov	r1, r7
 8006908:	4648      	mov	r0, r9
 800690a:	d107      	bne.n	800691c <_dtoa_r+0xae4>
 800690c:	f000 f9c8 	bl	8006ca0 <__multadd>
 8006910:	4607      	mov	r7, r0
 8006912:	4605      	mov	r5, r0
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	3301      	adds	r3, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	e777      	b.n	800680c <_dtoa_r+0x9d4>
 800691c:	f000 f9c0 	bl	8006ca0 <__multadd>
 8006920:	4629      	mov	r1, r5
 8006922:	4607      	mov	r7, r0
 8006924:	2300      	movs	r3, #0
 8006926:	220a      	movs	r2, #10
 8006928:	4648      	mov	r0, r9
 800692a:	f000 f9b9 	bl	8006ca0 <__multadd>
 800692e:	4605      	mov	r5, r0
 8006930:	e7f0      	b.n	8006914 <_dtoa_r+0xadc>
 8006932:	f1bb 0f00 	cmp.w	fp, #0
 8006936:	bfcc      	ite	gt
 8006938:	465e      	movgt	r6, fp
 800693a:	2601      	movle	r6, #1
 800693c:	2700      	movs	r7, #0
 800693e:	4456      	add	r6, sl
 8006940:	2201      	movs	r2, #1
 8006942:	9903      	ldr	r1, [sp, #12]
 8006944:	4648      	mov	r0, r9
 8006946:	9304      	str	r3, [sp, #16]
 8006948:	f000 fb98 	bl	800707c <__lshift>
 800694c:	4621      	mov	r1, r4
 800694e:	9003      	str	r0, [sp, #12]
 8006950:	f000 fc00 	bl	8007154 <__mcmp>
 8006954:	2800      	cmp	r0, #0
 8006956:	dcb4      	bgt.n	80068c2 <_dtoa_r+0xa8a>
 8006958:	d102      	bne.n	8006960 <_dtoa_r+0xb28>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	07db      	lsls	r3, r3, #31
 800695e:	d4b0      	bmi.n	80068c2 <_dtoa_r+0xa8a>
 8006960:	4633      	mov	r3, r6
 8006962:	461e      	mov	r6, r3
 8006964:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006968:	2a30      	cmp	r2, #48	@ 0x30
 800696a:	d0fa      	beq.n	8006962 <_dtoa_r+0xb2a>
 800696c:	e4b5      	b.n	80062da <_dtoa_r+0x4a2>
 800696e:	459a      	cmp	sl, r3
 8006970:	d1a8      	bne.n	80068c4 <_dtoa_r+0xa8c>
 8006972:	2331      	movs	r3, #49	@ 0x31
 8006974:	f108 0801 	add.w	r8, r8, #1
 8006978:	f88a 3000 	strb.w	r3, [sl]
 800697c:	e4ad      	b.n	80062da <_dtoa_r+0x4a2>
 800697e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006980:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80069dc <_dtoa_r+0xba4>
 8006984:	b11b      	cbz	r3, 800698e <_dtoa_r+0xb56>
 8006986:	f10a 0308 	add.w	r3, sl, #8
 800698a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	4650      	mov	r0, sl
 8006990:	b017      	add	sp, #92	@ 0x5c
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006998:	2b01      	cmp	r3, #1
 800699a:	f77f ae2e 	ble.w	80065fa <_dtoa_r+0x7c2>
 800699e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069a2:	2001      	movs	r0, #1
 80069a4:	e64d      	b.n	8006642 <_dtoa_r+0x80a>
 80069a6:	f1bb 0f00 	cmp.w	fp, #0
 80069aa:	f77f aed9 	ble.w	8006760 <_dtoa_r+0x928>
 80069ae:	4656      	mov	r6, sl
 80069b0:	4621      	mov	r1, r4
 80069b2:	9803      	ldr	r0, [sp, #12]
 80069b4:	f7ff f9b6 	bl	8005d24 <quorem>
 80069b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80069bc:	f806 3b01 	strb.w	r3, [r6], #1
 80069c0:	eba6 020a 	sub.w	r2, r6, sl
 80069c4:	4593      	cmp	fp, r2
 80069c6:	ddb4      	ble.n	8006932 <_dtoa_r+0xafa>
 80069c8:	2300      	movs	r3, #0
 80069ca:	220a      	movs	r2, #10
 80069cc:	4648      	mov	r0, r9
 80069ce:	9903      	ldr	r1, [sp, #12]
 80069d0:	f000 f966 	bl	8006ca0 <__multadd>
 80069d4:	9003      	str	r0, [sp, #12]
 80069d6:	e7eb      	b.n	80069b0 <_dtoa_r+0xb78>
 80069d8:	080096d7 	.word	0x080096d7
 80069dc:	0800965b 	.word	0x0800965b

080069e0 <_free_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4605      	mov	r5, r0
 80069e4:	2900      	cmp	r1, #0
 80069e6:	d040      	beq.n	8006a6a <_free_r+0x8a>
 80069e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ec:	1f0c      	subs	r4, r1, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bfb8      	it	lt
 80069f2:	18e4      	addlt	r4, r4, r3
 80069f4:	f000 f8e6 	bl	8006bc4 <__malloc_lock>
 80069f8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a6c <_free_r+0x8c>)
 80069fa:	6813      	ldr	r3, [r2, #0]
 80069fc:	b933      	cbnz	r3, 8006a0c <_free_r+0x2c>
 80069fe:	6063      	str	r3, [r4, #4]
 8006a00:	6014      	str	r4, [r2, #0]
 8006a02:	4628      	mov	r0, r5
 8006a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a08:	f000 b8e2 	b.w	8006bd0 <__malloc_unlock>
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	d908      	bls.n	8006a22 <_free_r+0x42>
 8006a10:	6820      	ldr	r0, [r4, #0]
 8006a12:	1821      	adds	r1, r4, r0
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf01      	itttt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	1809      	addeq	r1, r1, r0
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	e7ed      	b.n	80069fe <_free_r+0x1e>
 8006a22:	461a      	mov	r2, r3
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	b10b      	cbz	r3, 8006a2c <_free_r+0x4c>
 8006a28:	42a3      	cmp	r3, r4
 8006a2a:	d9fa      	bls.n	8006a22 <_free_r+0x42>
 8006a2c:	6811      	ldr	r1, [r2, #0]
 8006a2e:	1850      	adds	r0, r2, r1
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d10b      	bne.n	8006a4c <_free_r+0x6c>
 8006a34:	6820      	ldr	r0, [r4, #0]
 8006a36:	4401      	add	r1, r0
 8006a38:	1850      	adds	r0, r2, r1
 8006a3a:	4283      	cmp	r3, r0
 8006a3c:	6011      	str	r1, [r2, #0]
 8006a3e:	d1e0      	bne.n	8006a02 <_free_r+0x22>
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	4408      	add	r0, r1
 8006a46:	6010      	str	r0, [r2, #0]
 8006a48:	6053      	str	r3, [r2, #4]
 8006a4a:	e7da      	b.n	8006a02 <_free_r+0x22>
 8006a4c:	d902      	bls.n	8006a54 <_free_r+0x74>
 8006a4e:	230c      	movs	r3, #12
 8006a50:	602b      	str	r3, [r5, #0]
 8006a52:	e7d6      	b.n	8006a02 <_free_r+0x22>
 8006a54:	6820      	ldr	r0, [r4, #0]
 8006a56:	1821      	adds	r1, r4, r0
 8006a58:	428b      	cmp	r3, r1
 8006a5a:	bf01      	itttt	eq
 8006a5c:	6819      	ldreq	r1, [r3, #0]
 8006a5e:	685b      	ldreq	r3, [r3, #4]
 8006a60:	1809      	addeq	r1, r1, r0
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	6054      	str	r4, [r2, #4]
 8006a68:	e7cb      	b.n	8006a02 <_free_r+0x22>
 8006a6a:	bd38      	pop	{r3, r4, r5, pc}
 8006a6c:	20000908 	.word	0x20000908

08006a70 <malloc>:
 8006a70:	4b02      	ldr	r3, [pc, #8]	@ (8006a7c <malloc+0xc>)
 8006a72:	4601      	mov	r1, r0
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	f000 b825 	b.w	8006ac4 <_malloc_r>
 8006a7a:	bf00      	nop
 8006a7c:	20000018 	.word	0x20000018

08006a80 <sbrk_aligned>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4e0f      	ldr	r6, [pc, #60]	@ (8006ac0 <sbrk_aligned+0x40>)
 8006a84:	460c      	mov	r4, r1
 8006a86:	6831      	ldr	r1, [r6, #0]
 8006a88:	4605      	mov	r5, r0
 8006a8a:	b911      	cbnz	r1, 8006a92 <sbrk_aligned+0x12>
 8006a8c:	f001 fdee 	bl	800866c <_sbrk_r>
 8006a90:	6030      	str	r0, [r6, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	f001 fde9 	bl	800866c <_sbrk_r>
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d103      	bne.n	8006aa6 <sbrk_aligned+0x26>
 8006a9e:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	1cc4      	adds	r4, r0, #3
 8006aa8:	f024 0403 	bic.w	r4, r4, #3
 8006aac:	42a0      	cmp	r0, r4
 8006aae:	d0f8      	beq.n	8006aa2 <sbrk_aligned+0x22>
 8006ab0:	1a21      	subs	r1, r4, r0
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f001 fdda 	bl	800866c <_sbrk_r>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d1f2      	bne.n	8006aa2 <sbrk_aligned+0x22>
 8006abc:	e7ef      	b.n	8006a9e <sbrk_aligned+0x1e>
 8006abe:	bf00      	nop
 8006ac0:	20000904 	.word	0x20000904

08006ac4 <_malloc_r>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4606      	mov	r6, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d904      	bls.n	8006aea <_malloc_r+0x26>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bc0 <_malloc_r+0xfc>
 8006aee:	f000 f869 	bl	8006bc4 <__malloc_lock>
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	461c      	mov	r4, r3
 8006af8:	bb44      	cbnz	r4, 8006b4c <_malloc_r+0x88>
 8006afa:	4629      	mov	r1, r5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7ff ffbf 	bl	8006a80 <sbrk_aligned>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	4604      	mov	r4, r0
 8006b06:	d158      	bne.n	8006bba <_malloc_r+0xf6>
 8006b08:	f8d8 4000 	ldr.w	r4, [r8]
 8006b0c:	4627      	mov	r7, r4
 8006b0e:	2f00      	cmp	r7, #0
 8006b10:	d143      	bne.n	8006b9a <_malloc_r+0xd6>
 8006b12:	2c00      	cmp	r4, #0
 8006b14:	d04b      	beq.n	8006bae <_malloc_r+0xea>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	eb04 0903 	add.w	r9, r4, r3
 8006b20:	f001 fda4 	bl	800866c <_sbrk_r>
 8006b24:	4581      	cmp	r9, r0
 8006b26:	d142      	bne.n	8006bae <_malloc_r+0xea>
 8006b28:	6821      	ldr	r1, [r4, #0]
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	1a6d      	subs	r5, r5, r1
 8006b2e:	4629      	mov	r1, r5
 8006b30:	f7ff ffa6 	bl	8006a80 <sbrk_aligned>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d03a      	beq.n	8006bae <_malloc_r+0xea>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	442b      	add	r3, r5
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	bb62      	cbnz	r2, 8006ba0 <_malloc_r+0xdc>
 8006b46:	f8c8 7000 	str.w	r7, [r8]
 8006b4a:	e00f      	b.n	8006b6c <_malloc_r+0xa8>
 8006b4c:	6822      	ldr	r2, [r4, #0]
 8006b4e:	1b52      	subs	r2, r2, r5
 8006b50:	d420      	bmi.n	8006b94 <_malloc_r+0xd0>
 8006b52:	2a0b      	cmp	r2, #11
 8006b54:	d917      	bls.n	8006b86 <_malloc_r+0xc2>
 8006b56:	1961      	adds	r1, r4, r5
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	6025      	str	r5, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	6059      	strne	r1, [r3, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	bf08      	it	eq
 8006b64:	f8c8 1000 	streq.w	r1, [r8]
 8006b68:	5162      	str	r2, [r4, r5]
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f82f 	bl	8006bd0 <__malloc_unlock>
 8006b72:	f104 000b 	add.w	r0, r4, #11
 8006b76:	1d23      	adds	r3, r4, #4
 8006b78:	f020 0007 	bic.w	r0, r0, #7
 8006b7c:	1ac2      	subs	r2, r0, r3
 8006b7e:	bf1c      	itt	ne
 8006b80:	1a1b      	subne	r3, r3, r0
 8006b82:	50a3      	strne	r3, [r4, r2]
 8006b84:	e7af      	b.n	8006ae6 <_malloc_r+0x22>
 8006b86:	6862      	ldr	r2, [r4, #4]
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	bf0c      	ite	eq
 8006b8c:	f8c8 2000 	streq.w	r2, [r8]
 8006b90:	605a      	strne	r2, [r3, #4]
 8006b92:	e7eb      	b.n	8006b6c <_malloc_r+0xa8>
 8006b94:	4623      	mov	r3, r4
 8006b96:	6864      	ldr	r4, [r4, #4]
 8006b98:	e7ae      	b.n	8006af8 <_malloc_r+0x34>
 8006b9a:	463c      	mov	r4, r7
 8006b9c:	687f      	ldr	r7, [r7, #4]
 8006b9e:	e7b6      	b.n	8006b0e <_malloc_r+0x4a>
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d1fb      	bne.n	8006ba0 <_malloc_r+0xdc>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6053      	str	r3, [r2, #4]
 8006bac:	e7de      	b.n	8006b6c <_malloc_r+0xa8>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	6033      	str	r3, [r6, #0]
 8006bb4:	f000 f80c 	bl	8006bd0 <__malloc_unlock>
 8006bb8:	e794      	b.n	8006ae4 <_malloc_r+0x20>
 8006bba:	6005      	str	r5, [r0, #0]
 8006bbc:	e7d6      	b.n	8006b6c <_malloc_r+0xa8>
 8006bbe:	bf00      	nop
 8006bc0:	20000908 	.word	0x20000908

08006bc4 <__malloc_lock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	@ (8006bcc <__malloc_lock+0x8>)
 8006bc6:	f7ff b88a 	b.w	8005cde <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20000900 	.word	0x20000900

08006bd0 <__malloc_unlock>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	@ (8006bd8 <__malloc_unlock+0x8>)
 8006bd2:	f7ff b885 	b.w	8005ce0 <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	20000900 	.word	0x20000900

08006bdc <_Balloc>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	69c6      	ldr	r6, [r0, #28]
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	b976      	cbnz	r6, 8006c04 <_Balloc+0x28>
 8006be6:	2010      	movs	r0, #16
 8006be8:	f7ff ff42 	bl	8006a70 <malloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	61e0      	str	r0, [r4, #28]
 8006bf0:	b920      	cbnz	r0, 8006bfc <_Balloc+0x20>
 8006bf2:	216b      	movs	r1, #107	@ 0x6b
 8006bf4:	4b17      	ldr	r3, [pc, #92]	@ (8006c54 <_Balloc+0x78>)
 8006bf6:	4818      	ldr	r0, [pc, #96]	@ (8006c58 <_Balloc+0x7c>)
 8006bf8:	f001 fd48 	bl	800868c <__assert_func>
 8006bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c00:	6006      	str	r6, [r0, #0]
 8006c02:	60c6      	str	r6, [r0, #12]
 8006c04:	69e6      	ldr	r6, [r4, #28]
 8006c06:	68f3      	ldr	r3, [r6, #12]
 8006c08:	b183      	cbz	r3, 8006c2c <_Balloc+0x50>
 8006c0a:	69e3      	ldr	r3, [r4, #28]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c12:	b9b8      	cbnz	r0, 8006c44 <_Balloc+0x68>
 8006c14:	2101      	movs	r1, #1
 8006c16:	fa01 f605 	lsl.w	r6, r1, r5
 8006c1a:	1d72      	adds	r2, r6, #5
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	0092      	lsls	r2, r2, #2
 8006c20:	f001 fd52 	bl	80086c8 <_calloc_r>
 8006c24:	b160      	cbz	r0, 8006c40 <_Balloc+0x64>
 8006c26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c2a:	e00e      	b.n	8006c4a <_Balloc+0x6e>
 8006c2c:	2221      	movs	r2, #33	@ 0x21
 8006c2e:	2104      	movs	r1, #4
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 fd49 	bl	80086c8 <_calloc_r>
 8006c36:	69e3      	ldr	r3, [r4, #28]
 8006c38:	60f0      	str	r0, [r6, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <_Balloc+0x2e>
 8006c40:	2000      	movs	r0, #0
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	6802      	ldr	r2, [r0, #0]
 8006c46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c50:	e7f7      	b.n	8006c42 <_Balloc+0x66>
 8006c52:	bf00      	nop
 8006c54:	08009668 	.word	0x08009668
 8006c58:	080096e8 	.word	0x080096e8

08006c5c <_Bfree>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	69c6      	ldr	r6, [r0, #28]
 8006c60:	4605      	mov	r5, r0
 8006c62:	460c      	mov	r4, r1
 8006c64:	b976      	cbnz	r6, 8006c84 <_Bfree+0x28>
 8006c66:	2010      	movs	r0, #16
 8006c68:	f7ff ff02 	bl	8006a70 <malloc>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	61e8      	str	r0, [r5, #28]
 8006c70:	b920      	cbnz	r0, 8006c7c <_Bfree+0x20>
 8006c72:	218f      	movs	r1, #143	@ 0x8f
 8006c74:	4b08      	ldr	r3, [pc, #32]	@ (8006c98 <_Bfree+0x3c>)
 8006c76:	4809      	ldr	r0, [pc, #36]	@ (8006c9c <_Bfree+0x40>)
 8006c78:	f001 fd08 	bl	800868c <__assert_func>
 8006c7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c80:	6006      	str	r6, [r0, #0]
 8006c82:	60c6      	str	r6, [r0, #12]
 8006c84:	b13c      	cbz	r4, 8006c96 <_Bfree+0x3a>
 8006c86:	69eb      	ldr	r3, [r5, #28]
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c90:	6021      	str	r1, [r4, #0]
 8006c92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	08009668 	.word	0x08009668
 8006c9c:	080096e8 	.word	0x080096e8

08006ca0 <__multadd>:
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	461e      	mov	r6, r3
 8006caa:	2000      	movs	r0, #0
 8006cac:	690d      	ldr	r5, [r1, #16]
 8006cae:	f101 0c14 	add.w	ip, r1, #20
 8006cb2:	f8dc 3000 	ldr.w	r3, [ip]
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	b299      	uxth	r1, r3
 8006cba:	fb02 6101 	mla	r1, r2, r1, r6
 8006cbe:	0c1e      	lsrs	r6, r3, #16
 8006cc0:	0c0b      	lsrs	r3, r1, #16
 8006cc2:	fb02 3306 	mla	r3, r2, r6, r3
 8006cc6:	b289      	uxth	r1, r1
 8006cc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ccc:	4285      	cmp	r5, r0
 8006cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cd2:	f84c 1b04 	str.w	r1, [ip], #4
 8006cd6:	dcec      	bgt.n	8006cb2 <__multadd+0x12>
 8006cd8:	b30e      	cbz	r6, 8006d1e <__multadd+0x7e>
 8006cda:	68a3      	ldr	r3, [r4, #8]
 8006cdc:	42ab      	cmp	r3, r5
 8006cde:	dc19      	bgt.n	8006d14 <__multadd+0x74>
 8006ce0:	6861      	ldr	r1, [r4, #4]
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	3101      	adds	r1, #1
 8006ce6:	f7ff ff79 	bl	8006bdc <_Balloc>
 8006cea:	4680      	mov	r8, r0
 8006cec:	b928      	cbnz	r0, 8006cfa <__multadd+0x5a>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	21ba      	movs	r1, #186	@ 0xba
 8006cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d24 <__multadd+0x84>)
 8006cf4:	480c      	ldr	r0, [pc, #48]	@ (8006d28 <__multadd+0x88>)
 8006cf6:	f001 fcc9 	bl	800868c <__assert_func>
 8006cfa:	6922      	ldr	r2, [r4, #16]
 8006cfc:	f104 010c 	add.w	r1, r4, #12
 8006d00:	3202      	adds	r2, #2
 8006d02:	0092      	lsls	r2, r2, #2
 8006d04:	300c      	adds	r0, #12
 8006d06:	f7fe fffa 	bl	8005cfe <memcpy>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ffa5 	bl	8006c5c <_Bfree>
 8006d12:	4644      	mov	r4, r8
 8006d14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d18:	3501      	adds	r5, #1
 8006d1a:	615e      	str	r6, [r3, #20]
 8006d1c:	6125      	str	r5, [r4, #16]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d24:	080096d7 	.word	0x080096d7
 8006d28:	080096e8 	.word	0x080096e8

08006d2c <__s2b>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	4615      	mov	r5, r2
 8006d32:	2209      	movs	r2, #9
 8006d34:	461f      	mov	r7, r3
 8006d36:	3308      	adds	r3, #8
 8006d38:	460c      	mov	r4, r1
 8006d3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d3e:	4606      	mov	r6, r0
 8006d40:	2201      	movs	r2, #1
 8006d42:	2100      	movs	r1, #0
 8006d44:	429a      	cmp	r2, r3
 8006d46:	db09      	blt.n	8006d5c <__s2b+0x30>
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff ff47 	bl	8006bdc <_Balloc>
 8006d4e:	b940      	cbnz	r0, 8006d62 <__s2b+0x36>
 8006d50:	4602      	mov	r2, r0
 8006d52:	21d3      	movs	r1, #211	@ 0xd3
 8006d54:	4b18      	ldr	r3, [pc, #96]	@ (8006db8 <__s2b+0x8c>)
 8006d56:	4819      	ldr	r0, [pc, #100]	@ (8006dbc <__s2b+0x90>)
 8006d58:	f001 fc98 	bl	800868c <__assert_func>
 8006d5c:	0052      	lsls	r2, r2, #1
 8006d5e:	3101      	adds	r1, #1
 8006d60:	e7f0      	b.n	8006d44 <__s2b+0x18>
 8006d62:	9b08      	ldr	r3, [sp, #32]
 8006d64:	2d09      	cmp	r5, #9
 8006d66:	6143      	str	r3, [r0, #20]
 8006d68:	f04f 0301 	mov.w	r3, #1
 8006d6c:	6103      	str	r3, [r0, #16]
 8006d6e:	dd16      	ble.n	8006d9e <__s2b+0x72>
 8006d70:	f104 0909 	add.w	r9, r4, #9
 8006d74:	46c8      	mov	r8, r9
 8006d76:	442c      	add	r4, r5
 8006d78:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	220a      	movs	r2, #10
 8006d80:	4630      	mov	r0, r6
 8006d82:	3b30      	subs	r3, #48	@ 0x30
 8006d84:	f7ff ff8c 	bl	8006ca0 <__multadd>
 8006d88:	45a0      	cmp	r8, r4
 8006d8a:	d1f5      	bne.n	8006d78 <__s2b+0x4c>
 8006d8c:	f1a5 0408 	sub.w	r4, r5, #8
 8006d90:	444c      	add	r4, r9
 8006d92:	1b2d      	subs	r5, r5, r4
 8006d94:	1963      	adds	r3, r4, r5
 8006d96:	42bb      	cmp	r3, r7
 8006d98:	db04      	blt.n	8006da4 <__s2b+0x78>
 8006d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d9e:	2509      	movs	r5, #9
 8006da0:	340a      	adds	r4, #10
 8006da2:	e7f6      	b.n	8006d92 <__s2b+0x66>
 8006da4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006da8:	4601      	mov	r1, r0
 8006daa:	220a      	movs	r2, #10
 8006dac:	4630      	mov	r0, r6
 8006dae:	3b30      	subs	r3, #48	@ 0x30
 8006db0:	f7ff ff76 	bl	8006ca0 <__multadd>
 8006db4:	e7ee      	b.n	8006d94 <__s2b+0x68>
 8006db6:	bf00      	nop
 8006db8:	080096d7 	.word	0x080096d7
 8006dbc:	080096e8 	.word	0x080096e8

08006dc0 <__hi0bits>:
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006dc6:	bf3a      	itte	cc
 8006dc8:	0403      	lslcc	r3, r0, #16
 8006dca:	2010      	movcc	r0, #16
 8006dcc:	2000      	movcs	r0, #0
 8006dce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dd2:	bf3c      	itt	cc
 8006dd4:	021b      	lslcc	r3, r3, #8
 8006dd6:	3008      	addcc	r0, #8
 8006dd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ddc:	bf3c      	itt	cc
 8006dde:	011b      	lslcc	r3, r3, #4
 8006de0:	3004      	addcc	r0, #4
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	bf3c      	itt	cc
 8006de8:	009b      	lslcc	r3, r3, #2
 8006dea:	3002      	addcc	r0, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db05      	blt.n	8006dfc <__hi0bits+0x3c>
 8006df0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006df4:	f100 0001 	add.w	r0, r0, #1
 8006df8:	bf08      	it	eq
 8006dfa:	2020      	moveq	r0, #32
 8006dfc:	4770      	bx	lr

08006dfe <__lo0bits>:
 8006dfe:	6803      	ldr	r3, [r0, #0]
 8006e00:	4602      	mov	r2, r0
 8006e02:	f013 0007 	ands.w	r0, r3, #7
 8006e06:	d00b      	beq.n	8006e20 <__lo0bits+0x22>
 8006e08:	07d9      	lsls	r1, r3, #31
 8006e0a:	d421      	bmi.n	8006e50 <__lo0bits+0x52>
 8006e0c:	0798      	lsls	r0, r3, #30
 8006e0e:	bf49      	itett	mi
 8006e10:	085b      	lsrmi	r3, r3, #1
 8006e12:	089b      	lsrpl	r3, r3, #2
 8006e14:	2001      	movmi	r0, #1
 8006e16:	6013      	strmi	r3, [r2, #0]
 8006e18:	bf5c      	itt	pl
 8006e1a:	2002      	movpl	r0, #2
 8006e1c:	6013      	strpl	r3, [r2, #0]
 8006e1e:	4770      	bx	lr
 8006e20:	b299      	uxth	r1, r3
 8006e22:	b909      	cbnz	r1, 8006e28 <__lo0bits+0x2a>
 8006e24:	2010      	movs	r0, #16
 8006e26:	0c1b      	lsrs	r3, r3, #16
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	b909      	cbnz	r1, 8006e30 <__lo0bits+0x32>
 8006e2c:	3008      	adds	r0, #8
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	0719      	lsls	r1, r3, #28
 8006e32:	bf04      	itt	eq
 8006e34:	091b      	lsreq	r3, r3, #4
 8006e36:	3004      	addeq	r0, #4
 8006e38:	0799      	lsls	r1, r3, #30
 8006e3a:	bf04      	itt	eq
 8006e3c:	089b      	lsreq	r3, r3, #2
 8006e3e:	3002      	addeq	r0, #2
 8006e40:	07d9      	lsls	r1, r3, #31
 8006e42:	d403      	bmi.n	8006e4c <__lo0bits+0x4e>
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	f100 0001 	add.w	r0, r0, #1
 8006e4a:	d003      	beq.n	8006e54 <__lo0bits+0x56>
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	4770      	bx	lr
 8006e50:	2000      	movs	r0, #0
 8006e52:	4770      	bx	lr
 8006e54:	2020      	movs	r0, #32
 8006e56:	4770      	bx	lr

08006e58 <__i2b>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	f7ff febd 	bl	8006bdc <_Balloc>
 8006e62:	4602      	mov	r2, r0
 8006e64:	b928      	cbnz	r0, 8006e72 <__i2b+0x1a>
 8006e66:	f240 1145 	movw	r1, #325	@ 0x145
 8006e6a:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__i2b+0x24>)
 8006e6c:	4804      	ldr	r0, [pc, #16]	@ (8006e80 <__i2b+0x28>)
 8006e6e:	f001 fc0d 	bl	800868c <__assert_func>
 8006e72:	2301      	movs	r3, #1
 8006e74:	6144      	str	r4, [r0, #20]
 8006e76:	6103      	str	r3, [r0, #16]
 8006e78:	bd10      	pop	{r4, pc}
 8006e7a:	bf00      	nop
 8006e7c:	080096d7 	.word	0x080096d7
 8006e80:	080096e8 	.word	0x080096e8

08006e84 <__multiply>:
 8006e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	4617      	mov	r7, r2
 8006e8a:	690a      	ldr	r2, [r1, #16]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4689      	mov	r9, r1
 8006e90:	429a      	cmp	r2, r3
 8006e92:	bfa2      	ittt	ge
 8006e94:	463b      	movge	r3, r7
 8006e96:	460f      	movge	r7, r1
 8006e98:	4699      	movge	r9, r3
 8006e9a:	693d      	ldr	r5, [r7, #16]
 8006e9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	eb05 060a 	add.w	r6, r5, sl
 8006ea8:	42b3      	cmp	r3, r6
 8006eaa:	b085      	sub	sp, #20
 8006eac:	bfb8      	it	lt
 8006eae:	3101      	addlt	r1, #1
 8006eb0:	f7ff fe94 	bl	8006bdc <_Balloc>
 8006eb4:	b930      	cbnz	r0, 8006ec4 <__multiply+0x40>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ebc:	4b40      	ldr	r3, [pc, #256]	@ (8006fc0 <__multiply+0x13c>)
 8006ebe:	4841      	ldr	r0, [pc, #260]	@ (8006fc4 <__multiply+0x140>)
 8006ec0:	f001 fbe4 	bl	800868c <__assert_func>
 8006ec4:	f100 0414 	add.w	r4, r0, #20
 8006ec8:	4623      	mov	r3, r4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006ed0:	4573      	cmp	r3, lr
 8006ed2:	d320      	bcc.n	8006f16 <__multiply+0x92>
 8006ed4:	f107 0814 	add.w	r8, r7, #20
 8006ed8:	f109 0114 	add.w	r1, r9, #20
 8006edc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006ee0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006ee4:	9302      	str	r3, [sp, #8]
 8006ee6:	1beb      	subs	r3, r5, r7
 8006ee8:	3b15      	subs	r3, #21
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	3304      	adds	r3, #4
 8006ef0:	3715      	adds	r7, #21
 8006ef2:	42bd      	cmp	r5, r7
 8006ef4:	bf38      	it	cc
 8006ef6:	2304      	movcc	r3, #4
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	9103      	str	r1, [sp, #12]
 8006efe:	428b      	cmp	r3, r1
 8006f00:	d80c      	bhi.n	8006f1c <__multiply+0x98>
 8006f02:	2e00      	cmp	r6, #0
 8006f04:	dd03      	ble.n	8006f0e <__multiply+0x8a>
 8006f06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d055      	beq.n	8006fba <__multiply+0x136>
 8006f0e:	6106      	str	r6, [r0, #16]
 8006f10:	b005      	add	sp, #20
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	f843 2b04 	str.w	r2, [r3], #4
 8006f1a:	e7d9      	b.n	8006ed0 <__multiply+0x4c>
 8006f1c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	d01f      	beq.n	8006f66 <__multiply+0xe2>
 8006f26:	46c4      	mov	ip, r8
 8006f28:	46a1      	mov	r9, r4
 8006f2a:	2700      	movs	r7, #0
 8006f2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f30:	f8d9 3000 	ldr.w	r3, [r9]
 8006f34:	fa1f fb82 	uxth.w	fp, r2
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f3e:	443b      	add	r3, r7
 8006f40:	f8d9 7000 	ldr.w	r7, [r9]
 8006f44:	0c12      	lsrs	r2, r2, #16
 8006f46:	0c3f      	lsrs	r7, r7, #16
 8006f48:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f4c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f56:	4565      	cmp	r5, ip
 8006f58:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f5c:	f849 3b04 	str.w	r3, [r9], #4
 8006f60:	d8e4      	bhi.n	8006f2c <__multiply+0xa8>
 8006f62:	9b01      	ldr	r3, [sp, #4]
 8006f64:	50e7      	str	r7, [r4, r3]
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	3104      	adds	r1, #4
 8006f6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f6e:	f1b9 0f00 	cmp.w	r9, #0
 8006f72:	d020      	beq.n	8006fb6 <__multiply+0x132>
 8006f74:	4647      	mov	r7, r8
 8006f76:	46a4      	mov	ip, r4
 8006f78:	f04f 0a00 	mov.w	sl, #0
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f82:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	fb09 220b 	mla	r2, r9, fp, r2
 8006f8c:	4452      	add	r2, sl
 8006f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f92:	f84c 3b04 	str.w	r3, [ip], #4
 8006f96:	f857 3b04 	ldr.w	r3, [r7], #4
 8006f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f9e:	f8bc 3000 	ldrh.w	r3, [ip]
 8006fa2:	42bd      	cmp	r5, r7
 8006fa4:	fb09 330a 	mla	r3, r9, sl, r3
 8006fa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006fac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fb0:	d8e5      	bhi.n	8006f7e <__multiply+0xfa>
 8006fb2:	9a01      	ldr	r2, [sp, #4]
 8006fb4:	50a3      	str	r3, [r4, r2]
 8006fb6:	3404      	adds	r4, #4
 8006fb8:	e79f      	b.n	8006efa <__multiply+0x76>
 8006fba:	3e01      	subs	r6, #1
 8006fbc:	e7a1      	b.n	8006f02 <__multiply+0x7e>
 8006fbe:	bf00      	nop
 8006fc0:	080096d7 	.word	0x080096d7
 8006fc4:	080096e8 	.word	0x080096e8

08006fc8 <__pow5mult>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4615      	mov	r5, r2
 8006fce:	f012 0203 	ands.w	r2, r2, #3
 8006fd2:	4607      	mov	r7, r0
 8006fd4:	460e      	mov	r6, r1
 8006fd6:	d007      	beq.n	8006fe8 <__pow5mult+0x20>
 8006fd8:	4c25      	ldr	r4, [pc, #148]	@ (8007070 <__pow5mult+0xa8>)
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fe2:	f7ff fe5d 	bl	8006ca0 <__multadd>
 8006fe6:	4606      	mov	r6, r0
 8006fe8:	10ad      	asrs	r5, r5, #2
 8006fea:	d03d      	beq.n	8007068 <__pow5mult+0xa0>
 8006fec:	69fc      	ldr	r4, [r7, #28]
 8006fee:	b97c      	cbnz	r4, 8007010 <__pow5mult+0x48>
 8006ff0:	2010      	movs	r0, #16
 8006ff2:	f7ff fd3d 	bl	8006a70 <malloc>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	61f8      	str	r0, [r7, #28]
 8006ffa:	b928      	cbnz	r0, 8007008 <__pow5mult+0x40>
 8006ffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007000:	4b1c      	ldr	r3, [pc, #112]	@ (8007074 <__pow5mult+0xac>)
 8007002:	481d      	ldr	r0, [pc, #116]	@ (8007078 <__pow5mult+0xb0>)
 8007004:	f001 fb42 	bl	800868c <__assert_func>
 8007008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800700c:	6004      	str	r4, [r0, #0]
 800700e:	60c4      	str	r4, [r0, #12]
 8007010:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007018:	b94c      	cbnz	r4, 800702e <__pow5mult+0x66>
 800701a:	f240 2171 	movw	r1, #625	@ 0x271
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff1a 	bl	8006e58 <__i2b>
 8007024:	2300      	movs	r3, #0
 8007026:	4604      	mov	r4, r0
 8007028:	f8c8 0008 	str.w	r0, [r8, #8]
 800702c:	6003      	str	r3, [r0, #0]
 800702e:	f04f 0900 	mov.w	r9, #0
 8007032:	07eb      	lsls	r3, r5, #31
 8007034:	d50a      	bpl.n	800704c <__pow5mult+0x84>
 8007036:	4631      	mov	r1, r6
 8007038:	4622      	mov	r2, r4
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff ff22 	bl	8006e84 <__multiply>
 8007040:	4680      	mov	r8, r0
 8007042:	4631      	mov	r1, r6
 8007044:	4638      	mov	r0, r7
 8007046:	f7ff fe09 	bl	8006c5c <_Bfree>
 800704a:	4646      	mov	r6, r8
 800704c:	106d      	asrs	r5, r5, #1
 800704e:	d00b      	beq.n	8007068 <__pow5mult+0xa0>
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	b938      	cbnz	r0, 8007064 <__pow5mult+0x9c>
 8007054:	4622      	mov	r2, r4
 8007056:	4621      	mov	r1, r4
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff13 	bl	8006e84 <__multiply>
 800705e:	6020      	str	r0, [r4, #0]
 8007060:	f8c0 9000 	str.w	r9, [r0]
 8007064:	4604      	mov	r4, r0
 8007066:	e7e4      	b.n	8007032 <__pow5mult+0x6a>
 8007068:	4630      	mov	r0, r6
 800706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800706e:	bf00      	nop
 8007070:	080097f8 	.word	0x080097f8
 8007074:	08009668 	.word	0x08009668
 8007078:	080096e8 	.word	0x080096e8

0800707c <__lshift>:
 800707c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007080:	460c      	mov	r4, r1
 8007082:	4607      	mov	r7, r0
 8007084:	4691      	mov	r9, r2
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	6849      	ldr	r1, [r1, #4]
 800708a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007094:	f108 0601 	add.w	r6, r8, #1
 8007098:	42b3      	cmp	r3, r6
 800709a:	db0b      	blt.n	80070b4 <__lshift+0x38>
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff fd9d 	bl	8006bdc <_Balloc>
 80070a2:	4605      	mov	r5, r0
 80070a4:	b948      	cbnz	r0, 80070ba <__lshift+0x3e>
 80070a6:	4602      	mov	r2, r0
 80070a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070ac:	4b27      	ldr	r3, [pc, #156]	@ (800714c <__lshift+0xd0>)
 80070ae:	4828      	ldr	r0, [pc, #160]	@ (8007150 <__lshift+0xd4>)
 80070b0:	f001 faec 	bl	800868c <__assert_func>
 80070b4:	3101      	adds	r1, #1
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	e7ee      	b.n	8007098 <__lshift+0x1c>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f100 0114 	add.w	r1, r0, #20
 80070c0:	f100 0210 	add.w	r2, r0, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	4553      	cmp	r3, sl
 80070c8:	db33      	blt.n	8007132 <__lshift+0xb6>
 80070ca:	6920      	ldr	r0, [r4, #16]
 80070cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	f019 091f 	ands.w	r9, r9, #31
 80070d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070e0:	d02b      	beq.n	800713a <__lshift+0xbe>
 80070e2:	468a      	mov	sl, r1
 80070e4:	2200      	movs	r2, #0
 80070e6:	f1c9 0e20 	rsb	lr, r9, #32
 80070ea:	6818      	ldr	r0, [r3, #0]
 80070ec:	fa00 f009 	lsl.w	r0, r0, r9
 80070f0:	4310      	orrs	r0, r2
 80070f2:	f84a 0b04 	str.w	r0, [sl], #4
 80070f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fa:	459c      	cmp	ip, r3
 80070fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007100:	d8f3      	bhi.n	80070ea <__lshift+0x6e>
 8007102:	ebac 0304 	sub.w	r3, ip, r4
 8007106:	3b15      	subs	r3, #21
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	3304      	adds	r3, #4
 800710e:	f104 0015 	add.w	r0, r4, #21
 8007112:	4560      	cmp	r0, ip
 8007114:	bf88      	it	hi
 8007116:	2304      	movhi	r3, #4
 8007118:	50ca      	str	r2, [r1, r3]
 800711a:	b10a      	cbz	r2, 8007120 <__lshift+0xa4>
 800711c:	f108 0602 	add.w	r6, r8, #2
 8007120:	3e01      	subs	r6, #1
 8007122:	4638      	mov	r0, r7
 8007124:	4621      	mov	r1, r4
 8007126:	612e      	str	r6, [r5, #16]
 8007128:	f7ff fd98 	bl	8006c5c <_Bfree>
 800712c:	4628      	mov	r0, r5
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	f842 0f04 	str.w	r0, [r2, #4]!
 8007136:	3301      	adds	r3, #1
 8007138:	e7c5      	b.n	80070c6 <__lshift+0x4a>
 800713a:	3904      	subs	r1, #4
 800713c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007140:	459c      	cmp	ip, r3
 8007142:	f841 2f04 	str.w	r2, [r1, #4]!
 8007146:	d8f9      	bhi.n	800713c <__lshift+0xc0>
 8007148:	e7ea      	b.n	8007120 <__lshift+0xa4>
 800714a:	bf00      	nop
 800714c:	080096d7 	.word	0x080096d7
 8007150:	080096e8 	.word	0x080096e8

08007154 <__mcmp>:
 8007154:	4603      	mov	r3, r0
 8007156:	690a      	ldr	r2, [r1, #16]
 8007158:	6900      	ldr	r0, [r0, #16]
 800715a:	b530      	push	{r4, r5, lr}
 800715c:	1a80      	subs	r0, r0, r2
 800715e:	d10e      	bne.n	800717e <__mcmp+0x2a>
 8007160:	3314      	adds	r3, #20
 8007162:	3114      	adds	r1, #20
 8007164:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007168:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800716c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007170:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007174:	4295      	cmp	r5, r2
 8007176:	d003      	beq.n	8007180 <__mcmp+0x2c>
 8007178:	d205      	bcs.n	8007186 <__mcmp+0x32>
 800717a:	f04f 30ff 	mov.w	r0, #4294967295
 800717e:	bd30      	pop	{r4, r5, pc}
 8007180:	42a3      	cmp	r3, r4
 8007182:	d3f3      	bcc.n	800716c <__mcmp+0x18>
 8007184:	e7fb      	b.n	800717e <__mcmp+0x2a>
 8007186:	2001      	movs	r0, #1
 8007188:	e7f9      	b.n	800717e <__mcmp+0x2a>
	...

0800718c <__mdiff>:
 800718c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007190:	4689      	mov	r9, r1
 8007192:	4606      	mov	r6, r0
 8007194:	4611      	mov	r1, r2
 8007196:	4648      	mov	r0, r9
 8007198:	4614      	mov	r4, r2
 800719a:	f7ff ffdb 	bl	8007154 <__mcmp>
 800719e:	1e05      	subs	r5, r0, #0
 80071a0:	d112      	bne.n	80071c8 <__mdiff+0x3c>
 80071a2:	4629      	mov	r1, r5
 80071a4:	4630      	mov	r0, r6
 80071a6:	f7ff fd19 	bl	8006bdc <_Balloc>
 80071aa:	4602      	mov	r2, r0
 80071ac:	b928      	cbnz	r0, 80071ba <__mdiff+0x2e>
 80071ae:	f240 2137 	movw	r1, #567	@ 0x237
 80071b2:	4b3e      	ldr	r3, [pc, #248]	@ (80072ac <__mdiff+0x120>)
 80071b4:	483e      	ldr	r0, [pc, #248]	@ (80072b0 <__mdiff+0x124>)
 80071b6:	f001 fa69 	bl	800868c <__assert_func>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071c0:	4610      	mov	r0, r2
 80071c2:	b003      	add	sp, #12
 80071c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c8:	bfbc      	itt	lt
 80071ca:	464b      	movlt	r3, r9
 80071cc:	46a1      	movlt	r9, r4
 80071ce:	4630      	mov	r0, r6
 80071d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071d4:	bfba      	itte	lt
 80071d6:	461c      	movlt	r4, r3
 80071d8:	2501      	movlt	r5, #1
 80071da:	2500      	movge	r5, #0
 80071dc:	f7ff fcfe 	bl	8006bdc <_Balloc>
 80071e0:	4602      	mov	r2, r0
 80071e2:	b918      	cbnz	r0, 80071ec <__mdiff+0x60>
 80071e4:	f240 2145 	movw	r1, #581	@ 0x245
 80071e8:	4b30      	ldr	r3, [pc, #192]	@ (80072ac <__mdiff+0x120>)
 80071ea:	e7e3      	b.n	80071b4 <__mdiff+0x28>
 80071ec:	f100 0b14 	add.w	fp, r0, #20
 80071f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071f4:	f109 0310 	add.w	r3, r9, #16
 80071f8:	60c5      	str	r5, [r0, #12]
 80071fa:	f04f 0c00 	mov.w	ip, #0
 80071fe:	f109 0514 	add.w	r5, r9, #20
 8007202:	46d9      	mov	r9, fp
 8007204:	6926      	ldr	r6, [r4, #16]
 8007206:	f104 0e14 	add.w	lr, r4, #20
 800720a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800720e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	9b01      	ldr	r3, [sp, #4]
 8007216:	f85e 0b04 	ldr.w	r0, [lr], #4
 800721a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800721e:	b281      	uxth	r1, r0
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	fa1f f38a 	uxth.w	r3, sl
 8007226:	1a5b      	subs	r3, r3, r1
 8007228:	0c00      	lsrs	r0, r0, #16
 800722a:	4463      	add	r3, ip
 800722c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007230:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007234:	b29b      	uxth	r3, r3
 8007236:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800723a:	4576      	cmp	r6, lr
 800723c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007240:	f849 3b04 	str.w	r3, [r9], #4
 8007244:	d8e6      	bhi.n	8007214 <__mdiff+0x88>
 8007246:	1b33      	subs	r3, r6, r4
 8007248:	3b15      	subs	r3, #21
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	3415      	adds	r4, #21
 8007250:	3304      	adds	r3, #4
 8007252:	42a6      	cmp	r6, r4
 8007254:	bf38      	it	cc
 8007256:	2304      	movcc	r3, #4
 8007258:	441d      	add	r5, r3
 800725a:	445b      	add	r3, fp
 800725c:	461e      	mov	r6, r3
 800725e:	462c      	mov	r4, r5
 8007260:	4544      	cmp	r4, r8
 8007262:	d30e      	bcc.n	8007282 <__mdiff+0xf6>
 8007264:	f108 0103 	add.w	r1, r8, #3
 8007268:	1b49      	subs	r1, r1, r5
 800726a:	f021 0103 	bic.w	r1, r1, #3
 800726e:	3d03      	subs	r5, #3
 8007270:	45a8      	cmp	r8, r5
 8007272:	bf38      	it	cc
 8007274:	2100      	movcc	r1, #0
 8007276:	440b      	add	r3, r1
 8007278:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800727c:	b199      	cbz	r1, 80072a6 <__mdiff+0x11a>
 800727e:	6117      	str	r7, [r2, #16]
 8007280:	e79e      	b.n	80071c0 <__mdiff+0x34>
 8007282:	46e6      	mov	lr, ip
 8007284:	f854 1b04 	ldr.w	r1, [r4], #4
 8007288:	fa1f fc81 	uxth.w	ip, r1
 800728c:	44f4      	add	ip, lr
 800728e:	0c08      	lsrs	r0, r1, #16
 8007290:	4471      	add	r1, lr
 8007292:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007296:	b289      	uxth	r1, r1
 8007298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800729c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072a0:	f846 1b04 	str.w	r1, [r6], #4
 80072a4:	e7dc      	b.n	8007260 <__mdiff+0xd4>
 80072a6:	3f01      	subs	r7, #1
 80072a8:	e7e6      	b.n	8007278 <__mdiff+0xec>
 80072aa:	bf00      	nop
 80072ac:	080096d7 	.word	0x080096d7
 80072b0:	080096e8 	.word	0x080096e8

080072b4 <__ulp>:
 80072b4:	4b0e      	ldr	r3, [pc, #56]	@ (80072f0 <__ulp+0x3c>)
 80072b6:	400b      	ands	r3, r1
 80072b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc08      	bgt.n	80072d2 <__ulp+0x1e>
 80072c0:	425b      	negs	r3, r3
 80072c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80072c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072ca:	da04      	bge.n	80072d6 <__ulp+0x22>
 80072cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80072d0:	4113      	asrs	r3, r2
 80072d2:	2200      	movs	r2, #0
 80072d4:	e008      	b.n	80072e8 <__ulp+0x34>
 80072d6:	f1a2 0314 	sub.w	r3, r2, #20
 80072da:	2b1e      	cmp	r3, #30
 80072dc:	bfd6      	itet	le
 80072de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80072e2:	2201      	movgt	r2, #1
 80072e4:	40da      	lsrle	r2, r3
 80072e6:	2300      	movs	r3, #0
 80072e8:	4619      	mov	r1, r3
 80072ea:	4610      	mov	r0, r2
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	7ff00000 	.word	0x7ff00000

080072f4 <__b2d>:
 80072f4:	6902      	ldr	r2, [r0, #16]
 80072f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f8:	f100 0614 	add.w	r6, r0, #20
 80072fc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007300:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007304:	4f1e      	ldr	r7, [pc, #120]	@ (8007380 <__b2d+0x8c>)
 8007306:	4620      	mov	r0, r4
 8007308:	f7ff fd5a 	bl	8006dc0 <__hi0bits>
 800730c:	4603      	mov	r3, r0
 800730e:	f1c0 0020 	rsb	r0, r0, #32
 8007312:	2b0a      	cmp	r3, #10
 8007314:	f1a2 0504 	sub.w	r5, r2, #4
 8007318:	6008      	str	r0, [r1, #0]
 800731a:	dc12      	bgt.n	8007342 <__b2d+0x4e>
 800731c:	42ae      	cmp	r6, r5
 800731e:	bf2c      	ite	cs
 8007320:	2200      	movcs	r2, #0
 8007322:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007326:	f1c3 0c0b 	rsb	ip, r3, #11
 800732a:	3315      	adds	r3, #21
 800732c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007330:	fa04 f303 	lsl.w	r3, r4, r3
 8007334:	fa22 f20c 	lsr.w	r2, r2, ip
 8007338:	ea4e 0107 	orr.w	r1, lr, r7
 800733c:	431a      	orrs	r2, r3
 800733e:	4610      	mov	r0, r2
 8007340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007342:	42ae      	cmp	r6, r5
 8007344:	bf36      	itet	cc
 8007346:	f1a2 0508 	subcc.w	r5, r2, #8
 800734a:	2200      	movcs	r2, #0
 800734c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007350:	3b0b      	subs	r3, #11
 8007352:	d012      	beq.n	800737a <__b2d+0x86>
 8007354:	f1c3 0720 	rsb	r7, r3, #32
 8007358:	fa22 f107 	lsr.w	r1, r2, r7
 800735c:	409c      	lsls	r4, r3
 800735e:	430c      	orrs	r4, r1
 8007360:	42b5      	cmp	r5, r6
 8007362:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8007366:	bf94      	ite	ls
 8007368:	2400      	movls	r4, #0
 800736a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800736e:	409a      	lsls	r2, r3
 8007370:	40fc      	lsrs	r4, r7
 8007372:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007376:	4322      	orrs	r2, r4
 8007378:	e7e1      	b.n	800733e <__b2d+0x4a>
 800737a:	ea44 0107 	orr.w	r1, r4, r7
 800737e:	e7de      	b.n	800733e <__b2d+0x4a>
 8007380:	3ff00000 	.word	0x3ff00000

08007384 <__d2b>:
 8007384:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007388:	2101      	movs	r1, #1
 800738a:	4690      	mov	r8, r2
 800738c:	4699      	mov	r9, r3
 800738e:	9e08      	ldr	r6, [sp, #32]
 8007390:	f7ff fc24 	bl	8006bdc <_Balloc>
 8007394:	4604      	mov	r4, r0
 8007396:	b930      	cbnz	r0, 80073a6 <__d2b+0x22>
 8007398:	4602      	mov	r2, r0
 800739a:	f240 310f 	movw	r1, #783	@ 0x30f
 800739e:	4b23      	ldr	r3, [pc, #140]	@ (800742c <__d2b+0xa8>)
 80073a0:	4823      	ldr	r0, [pc, #140]	@ (8007430 <__d2b+0xac>)
 80073a2:	f001 f973 	bl	800868c <__assert_func>
 80073a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ae:	b10d      	cbz	r5, 80073b4 <__d2b+0x30>
 80073b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	f1b8 0300 	subs.w	r3, r8, #0
 80073ba:	d024      	beq.n	8007406 <__d2b+0x82>
 80073bc:	4668      	mov	r0, sp
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	f7ff fd1d 	bl	8006dfe <__lo0bits>
 80073c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80073c8:	b1d8      	cbz	r0, 8007402 <__d2b+0x7e>
 80073ca:	f1c0 0320 	rsb	r3, r0, #32
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	430b      	orrs	r3, r1
 80073d4:	40c2      	lsrs	r2, r0
 80073d6:	6163      	str	r3, [r4, #20]
 80073d8:	9201      	str	r2, [sp, #4]
 80073da:	9b01      	ldr	r3, [sp, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bf0c      	ite	eq
 80073e0:	2201      	moveq	r2, #1
 80073e2:	2202      	movne	r2, #2
 80073e4:	61a3      	str	r3, [r4, #24]
 80073e6:	6122      	str	r2, [r4, #16]
 80073e8:	b1ad      	cbz	r5, 8007416 <__d2b+0x92>
 80073ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80073ee:	4405      	add	r5, r0
 80073f0:	6035      	str	r5, [r6, #0]
 80073f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f8:	6018      	str	r0, [r3, #0]
 80073fa:	4620      	mov	r0, r4
 80073fc:	b002      	add	sp, #8
 80073fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007402:	6161      	str	r1, [r4, #20]
 8007404:	e7e9      	b.n	80073da <__d2b+0x56>
 8007406:	a801      	add	r0, sp, #4
 8007408:	f7ff fcf9 	bl	8006dfe <__lo0bits>
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	6163      	str	r3, [r4, #20]
 8007412:	3020      	adds	r0, #32
 8007414:	e7e7      	b.n	80073e6 <__d2b+0x62>
 8007416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800741a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800741e:	6030      	str	r0, [r6, #0]
 8007420:	6918      	ldr	r0, [r3, #16]
 8007422:	f7ff fccd 	bl	8006dc0 <__hi0bits>
 8007426:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800742a:	e7e4      	b.n	80073f6 <__d2b+0x72>
 800742c:	080096d7 	.word	0x080096d7
 8007430:	080096e8 	.word	0x080096e8

08007434 <__ratio>:
 8007434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	b085      	sub	sp, #20
 800743a:	e9cd 1000 	strd	r1, r0, [sp]
 800743e:	a902      	add	r1, sp, #8
 8007440:	f7ff ff58 	bl	80072f4 <__b2d>
 8007444:	468b      	mov	fp, r1
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	9800      	ldr	r0, [sp, #0]
 800744c:	a903      	add	r1, sp, #12
 800744e:	f7ff ff51 	bl	80072f4 <__b2d>
 8007452:	460d      	mov	r5, r1
 8007454:	9b01      	ldr	r3, [sp, #4]
 8007456:	4689      	mov	r9, r1
 8007458:	6919      	ldr	r1, [r3, #16]
 800745a:	9b00      	ldr	r3, [sp, #0]
 800745c:	4604      	mov	r4, r0
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	4630      	mov	r0, r6
 8007462:	1ac9      	subs	r1, r1, r3
 8007464:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007468:	1a9b      	subs	r3, r3, r2
 800746a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800746e:	2b00      	cmp	r3, #0
 8007470:	bfcd      	iteet	gt
 8007472:	463a      	movgt	r2, r7
 8007474:	462a      	movle	r2, r5
 8007476:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800747a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800747e:	bfd8      	it	le
 8007480:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007484:	464b      	mov	r3, r9
 8007486:	4622      	mov	r2, r4
 8007488:	4659      	mov	r1, fp
 800748a:	f7f9 f94f 	bl	800072c <__aeabi_ddiv>
 800748e:	b005      	add	sp, #20
 8007490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007494 <__copybits>:
 8007494:	3901      	subs	r1, #1
 8007496:	b570      	push	{r4, r5, r6, lr}
 8007498:	1149      	asrs	r1, r1, #5
 800749a:	6914      	ldr	r4, [r2, #16]
 800749c:	3101      	adds	r1, #1
 800749e:	f102 0314 	add.w	r3, r2, #20
 80074a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074aa:	1f05      	subs	r5, r0, #4
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	d30c      	bcc.n	80074ca <__copybits+0x36>
 80074b0:	1aa3      	subs	r3, r4, r2
 80074b2:	3b11      	subs	r3, #17
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	3211      	adds	r2, #17
 80074ba:	42a2      	cmp	r2, r4
 80074bc:	bf88      	it	hi
 80074be:	2300      	movhi	r3, #0
 80074c0:	4418      	add	r0, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	4288      	cmp	r0, r1
 80074c6:	d305      	bcc.n	80074d4 <__copybits+0x40>
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80074ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80074d2:	e7eb      	b.n	80074ac <__copybits+0x18>
 80074d4:	f840 3b04 	str.w	r3, [r0], #4
 80074d8:	e7f4      	b.n	80074c4 <__copybits+0x30>

080074da <__any_on>:
 80074da:	f100 0214 	add.w	r2, r0, #20
 80074de:	6900      	ldr	r0, [r0, #16]
 80074e0:	114b      	asrs	r3, r1, #5
 80074e2:	4298      	cmp	r0, r3
 80074e4:	b510      	push	{r4, lr}
 80074e6:	db11      	blt.n	800750c <__any_on+0x32>
 80074e8:	dd0a      	ble.n	8007500 <__any_on+0x26>
 80074ea:	f011 011f 	ands.w	r1, r1, #31
 80074ee:	d007      	beq.n	8007500 <__any_on+0x26>
 80074f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80074f4:	fa24 f001 	lsr.w	r0, r4, r1
 80074f8:	fa00 f101 	lsl.w	r1, r0, r1
 80074fc:	428c      	cmp	r4, r1
 80074fe:	d10b      	bne.n	8007518 <__any_on+0x3e>
 8007500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007504:	4293      	cmp	r3, r2
 8007506:	d803      	bhi.n	8007510 <__any_on+0x36>
 8007508:	2000      	movs	r0, #0
 800750a:	bd10      	pop	{r4, pc}
 800750c:	4603      	mov	r3, r0
 800750e:	e7f7      	b.n	8007500 <__any_on+0x26>
 8007510:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007514:	2900      	cmp	r1, #0
 8007516:	d0f5      	beq.n	8007504 <__any_on+0x2a>
 8007518:	2001      	movs	r0, #1
 800751a:	e7f6      	b.n	800750a <__any_on+0x30>

0800751c <sulp>:
 800751c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007520:	460f      	mov	r7, r1
 8007522:	4690      	mov	r8, r2
 8007524:	f7ff fec6 	bl	80072b4 <__ulp>
 8007528:	4604      	mov	r4, r0
 800752a:	460d      	mov	r5, r1
 800752c:	f1b8 0f00 	cmp.w	r8, #0
 8007530:	d011      	beq.n	8007556 <sulp+0x3a>
 8007532:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007536:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800753a:	2b00      	cmp	r3, #0
 800753c:	dd0b      	ble.n	8007556 <sulp+0x3a>
 800753e:	2400      	movs	r4, #0
 8007540:	051b      	lsls	r3, r3, #20
 8007542:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007546:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800754a:	4622      	mov	r2, r4
 800754c:	462b      	mov	r3, r5
 800754e:	f7f8 ffc3 	bl	80004d8 <__aeabi_dmul>
 8007552:	4604      	mov	r4, r0
 8007554:	460d      	mov	r5, r1
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007560 <_strtod_l>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	b09f      	sub	sp, #124	@ 0x7c
 8007566:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007568:	2200      	movs	r2, #0
 800756a:	460c      	mov	r4, r1
 800756c:	921a      	str	r2, [sp, #104]	@ 0x68
 800756e:	f04f 0a00 	mov.w	sl, #0
 8007572:	f04f 0b00 	mov.w	fp, #0
 8007576:	460a      	mov	r2, r1
 8007578:	9005      	str	r0, [sp, #20]
 800757a:	9219      	str	r2, [sp, #100]	@ 0x64
 800757c:	7811      	ldrb	r1, [r2, #0]
 800757e:	292b      	cmp	r1, #43	@ 0x2b
 8007580:	d048      	beq.n	8007614 <_strtod_l+0xb4>
 8007582:	d836      	bhi.n	80075f2 <_strtod_l+0x92>
 8007584:	290d      	cmp	r1, #13
 8007586:	d830      	bhi.n	80075ea <_strtod_l+0x8a>
 8007588:	2908      	cmp	r1, #8
 800758a:	d830      	bhi.n	80075ee <_strtod_l+0x8e>
 800758c:	2900      	cmp	r1, #0
 800758e:	d039      	beq.n	8007604 <_strtod_l+0xa4>
 8007590:	2200      	movs	r2, #0
 8007592:	920e      	str	r2, [sp, #56]	@ 0x38
 8007594:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007596:	782a      	ldrb	r2, [r5, #0]
 8007598:	2a30      	cmp	r2, #48	@ 0x30
 800759a:	f040 80b0 	bne.w	80076fe <_strtod_l+0x19e>
 800759e:	786a      	ldrb	r2, [r5, #1]
 80075a0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075a4:	2a58      	cmp	r2, #88	@ 0x58
 80075a6:	d16c      	bne.n	8007682 <_strtod_l+0x122>
 80075a8:	9302      	str	r3, [sp, #8]
 80075aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075ac:	4a8f      	ldr	r2, [pc, #572]	@ (80077ec <_strtod_l+0x28c>)
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	ab1a      	add	r3, sp, #104	@ 0x68
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	9805      	ldr	r0, [sp, #20]
 80075b6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075b8:	a919      	add	r1, sp, #100	@ 0x64
 80075ba:	f001 f901 	bl	80087c0 <__gethex>
 80075be:	f010 060f 	ands.w	r6, r0, #15
 80075c2:	4604      	mov	r4, r0
 80075c4:	d005      	beq.n	80075d2 <_strtod_l+0x72>
 80075c6:	2e06      	cmp	r6, #6
 80075c8:	d126      	bne.n	8007618 <_strtod_l+0xb8>
 80075ca:	2300      	movs	r3, #0
 80075cc:	3501      	adds	r5, #1
 80075ce:	9519      	str	r5, [sp, #100]	@ 0x64
 80075d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80075d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 8582 	bne.w	80080de <_strtod_l+0xb7e>
 80075da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075dc:	b1bb      	cbz	r3, 800760e <_strtod_l+0xae>
 80075de:	4650      	mov	r0, sl
 80075e0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80075e4:	b01f      	add	sp, #124	@ 0x7c
 80075e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ea:	2920      	cmp	r1, #32
 80075ec:	d1d0      	bne.n	8007590 <_strtod_l+0x30>
 80075ee:	3201      	adds	r2, #1
 80075f0:	e7c3      	b.n	800757a <_strtod_l+0x1a>
 80075f2:	292d      	cmp	r1, #45	@ 0x2d
 80075f4:	d1cc      	bne.n	8007590 <_strtod_l+0x30>
 80075f6:	2101      	movs	r1, #1
 80075f8:	910e      	str	r1, [sp, #56]	@ 0x38
 80075fa:	1c51      	adds	r1, r2, #1
 80075fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80075fe:	7852      	ldrb	r2, [r2, #1]
 8007600:	2a00      	cmp	r2, #0
 8007602:	d1c7      	bne.n	8007594 <_strtod_l+0x34>
 8007604:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007606:	9419      	str	r4, [sp, #100]	@ 0x64
 8007608:	2b00      	cmp	r3, #0
 800760a:	f040 8566 	bne.w	80080da <_strtod_l+0xb7a>
 800760e:	4650      	mov	r0, sl
 8007610:	4659      	mov	r1, fp
 8007612:	e7e7      	b.n	80075e4 <_strtod_l+0x84>
 8007614:	2100      	movs	r1, #0
 8007616:	e7ef      	b.n	80075f8 <_strtod_l+0x98>
 8007618:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800761a:	b13a      	cbz	r2, 800762c <_strtod_l+0xcc>
 800761c:	2135      	movs	r1, #53	@ 0x35
 800761e:	a81c      	add	r0, sp, #112	@ 0x70
 8007620:	f7ff ff38 	bl	8007494 <__copybits>
 8007624:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007626:	9805      	ldr	r0, [sp, #20]
 8007628:	f7ff fb18 	bl	8006c5c <_Bfree>
 800762c:	3e01      	subs	r6, #1
 800762e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007630:	2e04      	cmp	r6, #4
 8007632:	d806      	bhi.n	8007642 <_strtod_l+0xe2>
 8007634:	e8df f006 	tbb	[pc, r6]
 8007638:	201d0314 	.word	0x201d0314
 800763c:	14          	.byte	0x14
 800763d:	00          	.byte	0x00
 800763e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007642:	05e1      	lsls	r1, r4, #23
 8007644:	bf48      	it	mi
 8007646:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800764a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800764e:	0d1b      	lsrs	r3, r3, #20
 8007650:	051b      	lsls	r3, r3, #20
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1bd      	bne.n	80075d2 <_strtod_l+0x72>
 8007656:	f7fe fb17 	bl	8005c88 <__errno>
 800765a:	2322      	movs	r3, #34	@ 0x22
 800765c:	6003      	str	r3, [r0, #0]
 800765e:	e7b8      	b.n	80075d2 <_strtod_l+0x72>
 8007660:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007664:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007668:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800766c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007670:	e7e7      	b.n	8007642 <_strtod_l+0xe2>
 8007672:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80077f0 <_strtod_l+0x290>
 8007676:	e7e4      	b.n	8007642 <_strtod_l+0xe2>
 8007678:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800767c:	f04f 3aff 	mov.w	sl, #4294967295
 8007680:	e7df      	b.n	8007642 <_strtod_l+0xe2>
 8007682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	9219      	str	r2, [sp, #100]	@ 0x64
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b30      	cmp	r3, #48	@ 0x30
 800768c:	d0f9      	beq.n	8007682 <_strtod_l+0x122>
 800768e:	2b00      	cmp	r3, #0
 8007690:	d09f      	beq.n	80075d2 <_strtod_l+0x72>
 8007692:	2301      	movs	r3, #1
 8007694:	2700      	movs	r7, #0
 8007696:	220a      	movs	r2, #10
 8007698:	46b9      	mov	r9, r7
 800769a:	9308      	str	r3, [sp, #32]
 800769c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800769e:	970b      	str	r7, [sp, #44]	@ 0x2c
 80076a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80076a2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076a4:	7805      	ldrb	r5, [r0, #0]
 80076a6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076aa:	b2d9      	uxtb	r1, r3
 80076ac:	2909      	cmp	r1, #9
 80076ae:	d928      	bls.n	8007702 <_strtod_l+0x1a2>
 80076b0:	2201      	movs	r2, #1
 80076b2:	4950      	ldr	r1, [pc, #320]	@ (80077f4 <_strtod_l+0x294>)
 80076b4:	f000 ffc8 	bl	8008648 <strncmp>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d032      	beq.n	8007722 <_strtod_l+0x1c2>
 80076bc:	2000      	movs	r0, #0
 80076be:	462a      	mov	r2, r5
 80076c0:	4603      	mov	r3, r0
 80076c2:	464d      	mov	r5, r9
 80076c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80076c6:	2a65      	cmp	r2, #101	@ 0x65
 80076c8:	d001      	beq.n	80076ce <_strtod_l+0x16e>
 80076ca:	2a45      	cmp	r2, #69	@ 0x45
 80076cc:	d114      	bne.n	80076f8 <_strtod_l+0x198>
 80076ce:	b91d      	cbnz	r5, 80076d8 <_strtod_l+0x178>
 80076d0:	9a08      	ldr	r2, [sp, #32]
 80076d2:	4302      	orrs	r2, r0
 80076d4:	d096      	beq.n	8007604 <_strtod_l+0xa4>
 80076d6:	2500      	movs	r5, #0
 80076d8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80076da:	1c62      	adds	r2, r4, #1
 80076dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80076de:	7862      	ldrb	r2, [r4, #1]
 80076e0:	2a2b      	cmp	r2, #43	@ 0x2b
 80076e2:	d07a      	beq.n	80077da <_strtod_l+0x27a>
 80076e4:	2a2d      	cmp	r2, #45	@ 0x2d
 80076e6:	d07e      	beq.n	80077e6 <_strtod_l+0x286>
 80076e8:	f04f 0c00 	mov.w	ip, #0
 80076ec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80076f0:	2909      	cmp	r1, #9
 80076f2:	f240 8085 	bls.w	8007800 <_strtod_l+0x2a0>
 80076f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80076f8:	f04f 0800 	mov.w	r8, #0
 80076fc:	e0a5      	b.n	800784a <_strtod_l+0x2ea>
 80076fe:	2300      	movs	r3, #0
 8007700:	e7c8      	b.n	8007694 <_strtod_l+0x134>
 8007702:	f1b9 0f08 	cmp.w	r9, #8
 8007706:	bfd8      	it	le
 8007708:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	bfd6      	itet	le
 8007710:	fb02 3301 	mlale	r3, r2, r1, r3
 8007714:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007718:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800771a:	f109 0901 	add.w	r9, r9, #1
 800771e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007720:	e7bf      	b.n	80076a2 <_strtod_l+0x142>
 8007722:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	9219      	str	r2, [sp, #100]	@ 0x64
 8007728:	785a      	ldrb	r2, [r3, #1]
 800772a:	f1b9 0f00 	cmp.w	r9, #0
 800772e:	d03b      	beq.n	80077a8 <_strtod_l+0x248>
 8007730:	464d      	mov	r5, r9
 8007732:	900a      	str	r0, [sp, #40]	@ 0x28
 8007734:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007738:	2b09      	cmp	r3, #9
 800773a:	d912      	bls.n	8007762 <_strtod_l+0x202>
 800773c:	2301      	movs	r3, #1
 800773e:	e7c2      	b.n	80076c6 <_strtod_l+0x166>
 8007740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007742:	3001      	adds	r0, #1
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	9219      	str	r2, [sp, #100]	@ 0x64
 8007748:	785a      	ldrb	r2, [r3, #1]
 800774a:	2a30      	cmp	r2, #48	@ 0x30
 800774c:	d0f8      	beq.n	8007740 <_strtod_l+0x1e0>
 800774e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007752:	2b08      	cmp	r3, #8
 8007754:	f200 84c8 	bhi.w	80080e8 <_strtod_l+0xb88>
 8007758:	900a      	str	r0, [sp, #40]	@ 0x28
 800775a:	2000      	movs	r0, #0
 800775c:	4605      	mov	r5, r0
 800775e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007760:	930c      	str	r3, [sp, #48]	@ 0x30
 8007762:	3a30      	subs	r2, #48	@ 0x30
 8007764:	f100 0301 	add.w	r3, r0, #1
 8007768:	d018      	beq.n	800779c <_strtod_l+0x23c>
 800776a:	462e      	mov	r6, r5
 800776c:	f04f 0e0a 	mov.w	lr, #10
 8007770:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007772:	4419      	add	r1, r3
 8007774:	910a      	str	r1, [sp, #40]	@ 0x28
 8007776:	1c71      	adds	r1, r6, #1
 8007778:	eba1 0c05 	sub.w	ip, r1, r5
 800777c:	4563      	cmp	r3, ip
 800777e:	dc15      	bgt.n	80077ac <_strtod_l+0x24c>
 8007780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007784:	182b      	adds	r3, r5, r0
 8007786:	2b08      	cmp	r3, #8
 8007788:	f105 0501 	add.w	r5, r5, #1
 800778c:	4405      	add	r5, r0
 800778e:	dc1a      	bgt.n	80077c6 <_strtod_l+0x266>
 8007790:	230a      	movs	r3, #10
 8007792:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007794:	fb03 2301 	mla	r3, r3, r1, r2
 8007798:	930b      	str	r3, [sp, #44]	@ 0x2c
 800779a:	2300      	movs	r3, #0
 800779c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800779e:	4618      	mov	r0, r3
 80077a0:	1c51      	adds	r1, r2, #1
 80077a2:	9119      	str	r1, [sp, #100]	@ 0x64
 80077a4:	7852      	ldrb	r2, [r2, #1]
 80077a6:	e7c5      	b.n	8007734 <_strtod_l+0x1d4>
 80077a8:	4648      	mov	r0, r9
 80077aa:	e7ce      	b.n	800774a <_strtod_l+0x1ea>
 80077ac:	2e08      	cmp	r6, #8
 80077ae:	dc05      	bgt.n	80077bc <_strtod_l+0x25c>
 80077b0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80077b2:	fb0e f606 	mul.w	r6, lr, r6
 80077b6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80077b8:	460e      	mov	r6, r1
 80077ba:	e7dc      	b.n	8007776 <_strtod_l+0x216>
 80077bc:	2910      	cmp	r1, #16
 80077be:	bfd8      	it	le
 80077c0:	fb0e f707 	mulle.w	r7, lr, r7
 80077c4:	e7f8      	b.n	80077b8 <_strtod_l+0x258>
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	bfdc      	itt	le
 80077ca:	230a      	movle	r3, #10
 80077cc:	fb03 2707 	mlale	r7, r3, r7, r2
 80077d0:	e7e3      	b.n	800779a <_strtod_l+0x23a>
 80077d2:	2300      	movs	r3, #0
 80077d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80077d6:	2301      	movs	r3, #1
 80077d8:	e77a      	b.n	80076d0 <_strtod_l+0x170>
 80077da:	f04f 0c00 	mov.w	ip, #0
 80077de:	1ca2      	adds	r2, r4, #2
 80077e0:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e2:	78a2      	ldrb	r2, [r4, #2]
 80077e4:	e782      	b.n	80076ec <_strtod_l+0x18c>
 80077e6:	f04f 0c01 	mov.w	ip, #1
 80077ea:	e7f8      	b.n	80077de <_strtod_l+0x27e>
 80077ec:	0800990c 	.word	0x0800990c
 80077f0:	7ff00000 	.word	0x7ff00000
 80077f4:	08009741 	.word	0x08009741
 80077f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077fa:	1c51      	adds	r1, r2, #1
 80077fc:	9119      	str	r1, [sp, #100]	@ 0x64
 80077fe:	7852      	ldrb	r2, [r2, #1]
 8007800:	2a30      	cmp	r2, #48	@ 0x30
 8007802:	d0f9      	beq.n	80077f8 <_strtod_l+0x298>
 8007804:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007808:	2908      	cmp	r1, #8
 800780a:	f63f af75 	bhi.w	80076f8 <_strtod_l+0x198>
 800780e:	f04f 080a 	mov.w	r8, #10
 8007812:	3a30      	subs	r2, #48	@ 0x30
 8007814:	9209      	str	r2, [sp, #36]	@ 0x24
 8007816:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007818:	920f      	str	r2, [sp, #60]	@ 0x3c
 800781a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800781c:	1c56      	adds	r6, r2, #1
 800781e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007820:	7852      	ldrb	r2, [r2, #1]
 8007822:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007826:	f1be 0f09 	cmp.w	lr, #9
 800782a:	d939      	bls.n	80078a0 <_strtod_l+0x340>
 800782c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800782e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007832:	1a76      	subs	r6, r6, r1
 8007834:	2e08      	cmp	r6, #8
 8007836:	dc03      	bgt.n	8007840 <_strtod_l+0x2e0>
 8007838:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800783a:	4588      	cmp	r8, r1
 800783c:	bfa8      	it	ge
 800783e:	4688      	movge	r8, r1
 8007840:	f1bc 0f00 	cmp.w	ip, #0
 8007844:	d001      	beq.n	800784a <_strtod_l+0x2ea>
 8007846:	f1c8 0800 	rsb	r8, r8, #0
 800784a:	2d00      	cmp	r5, #0
 800784c:	d14e      	bne.n	80078ec <_strtod_l+0x38c>
 800784e:	9908      	ldr	r1, [sp, #32]
 8007850:	4308      	orrs	r0, r1
 8007852:	f47f aebe 	bne.w	80075d2 <_strtod_l+0x72>
 8007856:	2b00      	cmp	r3, #0
 8007858:	f47f aed4 	bne.w	8007604 <_strtod_l+0xa4>
 800785c:	2a69      	cmp	r2, #105	@ 0x69
 800785e:	d028      	beq.n	80078b2 <_strtod_l+0x352>
 8007860:	dc25      	bgt.n	80078ae <_strtod_l+0x34e>
 8007862:	2a49      	cmp	r2, #73	@ 0x49
 8007864:	d025      	beq.n	80078b2 <_strtod_l+0x352>
 8007866:	2a4e      	cmp	r2, #78	@ 0x4e
 8007868:	f47f aecc 	bne.w	8007604 <_strtod_l+0xa4>
 800786c:	4999      	ldr	r1, [pc, #612]	@ (8007ad4 <_strtod_l+0x574>)
 800786e:	a819      	add	r0, sp, #100	@ 0x64
 8007870:	f001 f9c8 	bl	8008c04 <__match>
 8007874:	2800      	cmp	r0, #0
 8007876:	f43f aec5 	beq.w	8007604 <_strtod_l+0xa4>
 800787a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	2b28      	cmp	r3, #40	@ 0x28
 8007880:	d12e      	bne.n	80078e0 <_strtod_l+0x380>
 8007882:	4995      	ldr	r1, [pc, #596]	@ (8007ad8 <_strtod_l+0x578>)
 8007884:	aa1c      	add	r2, sp, #112	@ 0x70
 8007886:	a819      	add	r0, sp, #100	@ 0x64
 8007888:	f001 f9d0 	bl	8008c2c <__hexnan>
 800788c:	2805      	cmp	r0, #5
 800788e:	d127      	bne.n	80078e0 <_strtod_l+0x380>
 8007890:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007892:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007896:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800789a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800789e:	e698      	b.n	80075d2 <_strtod_l+0x72>
 80078a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078a2:	fb08 2101 	mla	r1, r8, r1, r2
 80078a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ac:	e7b5      	b.n	800781a <_strtod_l+0x2ba>
 80078ae:	2a6e      	cmp	r2, #110	@ 0x6e
 80078b0:	e7da      	b.n	8007868 <_strtod_l+0x308>
 80078b2:	498a      	ldr	r1, [pc, #552]	@ (8007adc <_strtod_l+0x57c>)
 80078b4:	a819      	add	r0, sp, #100	@ 0x64
 80078b6:	f001 f9a5 	bl	8008c04 <__match>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	f43f aea2 	beq.w	8007604 <_strtod_l+0xa4>
 80078c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c2:	4987      	ldr	r1, [pc, #540]	@ (8007ae0 <_strtod_l+0x580>)
 80078c4:	3b01      	subs	r3, #1
 80078c6:	a819      	add	r0, sp, #100	@ 0x64
 80078c8:	9319      	str	r3, [sp, #100]	@ 0x64
 80078ca:	f001 f99b 	bl	8008c04 <__match>
 80078ce:	b910      	cbnz	r0, 80078d6 <_strtod_l+0x376>
 80078d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078d2:	3301      	adds	r3, #1
 80078d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80078d6:	f04f 0a00 	mov.w	sl, #0
 80078da:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007ae4 <_strtod_l+0x584>
 80078de:	e678      	b.n	80075d2 <_strtod_l+0x72>
 80078e0:	4881      	ldr	r0, [pc, #516]	@ (8007ae8 <_strtod_l+0x588>)
 80078e2:	f7fd f83b 	bl	800495c <nan>
 80078e6:	4682      	mov	sl, r0
 80078e8:	468b      	mov	fp, r1
 80078ea:	e672      	b.n	80075d2 <_strtod_l+0x72>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ee:	f1b9 0f00 	cmp.w	r9, #0
 80078f2:	bf08      	it	eq
 80078f4:	46a9      	moveq	r9, r5
 80078f6:	eba8 0303 	sub.w	r3, r8, r3
 80078fa:	2d10      	cmp	r5, #16
 80078fc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80078fe:	462c      	mov	r4, r5
 8007900:	9309      	str	r3, [sp, #36]	@ 0x24
 8007902:	bfa8      	it	ge
 8007904:	2410      	movge	r4, #16
 8007906:	f7f8 fd6d 	bl	80003e4 <__aeabi_ui2d>
 800790a:	2d09      	cmp	r5, #9
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	dc11      	bgt.n	8007936 <_strtod_l+0x3d6>
 8007912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	f43f ae5c 	beq.w	80075d2 <_strtod_l+0x72>
 800791a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791c:	dd76      	ble.n	8007a0c <_strtod_l+0x4ac>
 800791e:	2b16      	cmp	r3, #22
 8007920:	dc5d      	bgt.n	80079de <_strtod_l+0x47e>
 8007922:	4972      	ldr	r1, [pc, #456]	@ (8007aec <_strtod_l+0x58c>)
 8007924:	4652      	mov	r2, sl
 8007926:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800792a:	465b      	mov	r3, fp
 800792c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	e7d7      	b.n	80078e6 <_strtod_l+0x386>
 8007936:	4b6d      	ldr	r3, [pc, #436]	@ (8007aec <_strtod_l+0x58c>)
 8007938:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800793c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007940:	f7f8 fdca 	bl	80004d8 <__aeabi_dmul>
 8007944:	4682      	mov	sl, r0
 8007946:	4638      	mov	r0, r7
 8007948:	468b      	mov	fp, r1
 800794a:	f7f8 fd4b 	bl	80003e4 <__aeabi_ui2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4650      	mov	r0, sl
 8007954:	4659      	mov	r1, fp
 8007956:	f7f8 fc09 	bl	800016c <__adddf3>
 800795a:	2d0f      	cmp	r5, #15
 800795c:	4682      	mov	sl, r0
 800795e:	468b      	mov	fp, r1
 8007960:	ddd7      	ble.n	8007912 <_strtod_l+0x3b2>
 8007962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007964:	1b2c      	subs	r4, r5, r4
 8007966:	441c      	add	r4, r3
 8007968:	2c00      	cmp	r4, #0
 800796a:	f340 8093 	ble.w	8007a94 <_strtod_l+0x534>
 800796e:	f014 030f 	ands.w	r3, r4, #15
 8007972:	d00a      	beq.n	800798a <_strtod_l+0x42a>
 8007974:	495d      	ldr	r1, [pc, #372]	@ (8007aec <_strtod_l+0x58c>)
 8007976:	4652      	mov	r2, sl
 8007978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800797c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007980:	465b      	mov	r3, fp
 8007982:	f7f8 fda9 	bl	80004d8 <__aeabi_dmul>
 8007986:	4682      	mov	sl, r0
 8007988:	468b      	mov	fp, r1
 800798a:	f034 040f 	bics.w	r4, r4, #15
 800798e:	d073      	beq.n	8007a78 <_strtod_l+0x518>
 8007990:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007994:	dd49      	ble.n	8007a2a <_strtod_l+0x4ca>
 8007996:	2400      	movs	r4, #0
 8007998:	46a0      	mov	r8, r4
 800799a:	46a1      	mov	r9, r4
 800799c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800799e:	2322      	movs	r3, #34	@ 0x22
 80079a0:	f04f 0a00 	mov.w	sl, #0
 80079a4:	9a05      	ldr	r2, [sp, #20]
 80079a6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007ae4 <_strtod_l+0x584>
 80079aa:	6013      	str	r3, [r2, #0]
 80079ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f43f ae0f 	beq.w	80075d2 <_strtod_l+0x72>
 80079b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079b6:	9805      	ldr	r0, [sp, #20]
 80079b8:	f7ff f950 	bl	8006c5c <_Bfree>
 80079bc:	4649      	mov	r1, r9
 80079be:	9805      	ldr	r0, [sp, #20]
 80079c0:	f7ff f94c 	bl	8006c5c <_Bfree>
 80079c4:	4641      	mov	r1, r8
 80079c6:	9805      	ldr	r0, [sp, #20]
 80079c8:	f7ff f948 	bl	8006c5c <_Bfree>
 80079cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80079ce:	9805      	ldr	r0, [sp, #20]
 80079d0:	f7ff f944 	bl	8006c5c <_Bfree>
 80079d4:	4621      	mov	r1, r4
 80079d6:	9805      	ldr	r0, [sp, #20]
 80079d8:	f7ff f940 	bl	8006c5c <_Bfree>
 80079dc:	e5f9      	b.n	80075d2 <_strtod_l+0x72>
 80079de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80079e4:	4293      	cmp	r3, r2
 80079e6:	dbbc      	blt.n	8007962 <_strtod_l+0x402>
 80079e8:	4c40      	ldr	r4, [pc, #256]	@ (8007aec <_strtod_l+0x58c>)
 80079ea:	f1c5 050f 	rsb	r5, r5, #15
 80079ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80079f2:	4652      	mov	r2, sl
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	465b      	mov	r3, fp
 80079fa:	f7f8 fd6d 	bl	80004d8 <__aeabi_dmul>
 80079fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a00:	1b5d      	subs	r5, r3, r5
 8007a02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a0a:	e791      	b.n	8007930 <_strtod_l+0x3d0>
 8007a0c:	3316      	adds	r3, #22
 8007a0e:	dba8      	blt.n	8007962 <_strtod_l+0x402>
 8007a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a12:	4650      	mov	r0, sl
 8007a14:	eba3 0808 	sub.w	r8, r3, r8
 8007a18:	4b34      	ldr	r3, [pc, #208]	@ (8007aec <_strtod_l+0x58c>)
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a20:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a24:	f7f8 fe82 	bl	800072c <__aeabi_ddiv>
 8007a28:	e75d      	b.n	80078e6 <_strtod_l+0x386>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	4650      	mov	r0, sl
 8007a2e:	4659      	mov	r1, fp
 8007a30:	461e      	mov	r6, r3
 8007a32:	4f2f      	ldr	r7, [pc, #188]	@ (8007af0 <_strtod_l+0x590>)
 8007a34:	1124      	asrs	r4, r4, #4
 8007a36:	2c01      	cmp	r4, #1
 8007a38:	dc21      	bgt.n	8007a7e <_strtod_l+0x51e>
 8007a3a:	b10b      	cbz	r3, 8007a40 <_strtod_l+0x4e0>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	468b      	mov	fp, r1
 8007a40:	492b      	ldr	r1, [pc, #172]	@ (8007af0 <_strtod_l+0x590>)
 8007a42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a4a:	4652      	mov	r2, sl
 8007a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a50:	465b      	mov	r3, fp
 8007a52:	f7f8 fd41 	bl	80004d8 <__aeabi_dmul>
 8007a56:	4b23      	ldr	r3, [pc, #140]	@ (8007ae4 <_strtod_l+0x584>)
 8007a58:	460a      	mov	r2, r1
 8007a5a:	400b      	ands	r3, r1
 8007a5c:	4925      	ldr	r1, [pc, #148]	@ (8007af4 <_strtod_l+0x594>)
 8007a5e:	4682      	mov	sl, r0
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d898      	bhi.n	8007996 <_strtod_l+0x436>
 8007a64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	bf86      	itte	hi
 8007a6c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007a70:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007af8 <_strtod_l+0x598>
 8007a74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a78:	2300      	movs	r3, #0
 8007a7a:	9308      	str	r3, [sp, #32]
 8007a7c:	e076      	b.n	8007b6c <_strtod_l+0x60c>
 8007a7e:	07e2      	lsls	r2, r4, #31
 8007a80:	d504      	bpl.n	8007a8c <_strtod_l+0x52c>
 8007a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a86:	f7f8 fd27 	bl	80004d8 <__aeabi_dmul>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	1064      	asrs	r4, r4, #1
 8007a90:	3708      	adds	r7, #8
 8007a92:	e7d0      	b.n	8007a36 <_strtod_l+0x4d6>
 8007a94:	d0f0      	beq.n	8007a78 <_strtod_l+0x518>
 8007a96:	4264      	negs	r4, r4
 8007a98:	f014 020f 	ands.w	r2, r4, #15
 8007a9c:	d00a      	beq.n	8007ab4 <_strtod_l+0x554>
 8007a9e:	4b13      	ldr	r3, [pc, #76]	@ (8007aec <_strtod_l+0x58c>)
 8007aa0:	4650      	mov	r0, sl
 8007aa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa6:	4659      	mov	r1, fp
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fe3e 	bl	800072c <__aeabi_ddiv>
 8007ab0:	4682      	mov	sl, r0
 8007ab2:	468b      	mov	fp, r1
 8007ab4:	1124      	asrs	r4, r4, #4
 8007ab6:	d0df      	beq.n	8007a78 <_strtod_l+0x518>
 8007ab8:	2c1f      	cmp	r4, #31
 8007aba:	dd1f      	ble.n	8007afc <_strtod_l+0x59c>
 8007abc:	2400      	movs	r4, #0
 8007abe:	46a0      	mov	r8, r4
 8007ac0:	46a1      	mov	r9, r4
 8007ac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ac4:	2322      	movs	r3, #34	@ 0x22
 8007ac6:	9a05      	ldr	r2, [sp, #20]
 8007ac8:	f04f 0a00 	mov.w	sl, #0
 8007acc:	f04f 0b00 	mov.w	fp, #0
 8007ad0:	6013      	str	r3, [r2, #0]
 8007ad2:	e76b      	b.n	80079ac <_strtod_l+0x44c>
 8007ad4:	0800962f 	.word	0x0800962f
 8007ad8:	080098f8 	.word	0x080098f8
 8007adc:	08009627 	.word	0x08009627
 8007ae0:	0800965e 	.word	0x0800965e
 8007ae4:	7ff00000 	.word	0x7ff00000
 8007ae8:	08009797 	.word	0x08009797
 8007aec:	08009830 	.word	0x08009830
 8007af0:	08009808 	.word	0x08009808
 8007af4:	7ca00000 	.word	0x7ca00000
 8007af8:	7fefffff 	.word	0x7fefffff
 8007afc:	f014 0310 	ands.w	r3, r4, #16
 8007b00:	bf18      	it	ne
 8007b02:	236a      	movne	r3, #106	@ 0x6a
 8007b04:	4650      	mov	r0, sl
 8007b06:	9308      	str	r3, [sp, #32]
 8007b08:	4659      	mov	r1, fp
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	4e77      	ldr	r6, [pc, #476]	@ (8007cec <_strtod_l+0x78c>)
 8007b0e:	07e7      	lsls	r7, r4, #31
 8007b10:	d504      	bpl.n	8007b1c <_strtod_l+0x5bc>
 8007b12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b16:	f7f8 fcdf 	bl	80004d8 <__aeabi_dmul>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	1064      	asrs	r4, r4, #1
 8007b1e:	f106 0608 	add.w	r6, r6, #8
 8007b22:	d1f4      	bne.n	8007b0e <_strtod_l+0x5ae>
 8007b24:	b10b      	cbz	r3, 8007b2a <_strtod_l+0x5ca>
 8007b26:	4682      	mov	sl, r0
 8007b28:	468b      	mov	fp, r1
 8007b2a:	9b08      	ldr	r3, [sp, #32]
 8007b2c:	b1b3      	cbz	r3, 8007b5c <_strtod_l+0x5fc>
 8007b2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	4659      	mov	r1, fp
 8007b3a:	dd0f      	ble.n	8007b5c <_strtod_l+0x5fc>
 8007b3c:	2b1f      	cmp	r3, #31
 8007b3e:	dd58      	ble.n	8007bf2 <_strtod_l+0x692>
 8007b40:	2b34      	cmp	r3, #52	@ 0x34
 8007b42:	bfd8      	it	le
 8007b44:	f04f 33ff 	movle.w	r3, #4294967295
 8007b48:	f04f 0a00 	mov.w	sl, #0
 8007b4c:	bfcf      	iteee	gt
 8007b4e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b52:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b56:	4093      	lslle	r3, r2
 8007b58:	ea03 0b01 	andle.w	fp, r3, r1
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	4650      	mov	r0, sl
 8007b62:	4659      	mov	r1, fp
 8007b64:	f7f8 ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	d1a7      	bne.n	8007abc <_strtod_l+0x55c>
 8007b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b6e:	464a      	mov	r2, r9
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b74:	462b      	mov	r3, r5
 8007b76:	9805      	ldr	r0, [sp, #20]
 8007b78:	f7ff f8d8 	bl	8006d2c <__s2b>
 8007b7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f af09 	beq.w	8007996 <_strtod_l+0x436>
 8007b84:	2400      	movs	r4, #0
 8007b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b8a:	2a00      	cmp	r2, #0
 8007b8c:	eba3 0308 	sub.w	r3, r3, r8
 8007b90:	bfa8      	it	ge
 8007b92:	2300      	movge	r3, #0
 8007b94:	46a0      	mov	r8, r4
 8007b96:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b98:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007b9c:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba0:	9805      	ldr	r0, [sp, #20]
 8007ba2:	6859      	ldr	r1, [r3, #4]
 8007ba4:	f7ff f81a 	bl	8006bdc <_Balloc>
 8007ba8:	4681      	mov	r9, r0
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f43f aef7 	beq.w	800799e <_strtod_l+0x43e>
 8007bb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb2:	300c      	adds	r0, #12
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	f103 010c 	add.w	r1, r3, #12
 8007bba:	3202      	adds	r2, #2
 8007bbc:	0092      	lsls	r2, r2, #2
 8007bbe:	f7fe f89e 	bl	8005cfe <memcpy>
 8007bc2:	ab1c      	add	r3, sp, #112	@ 0x70
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	4652      	mov	r2, sl
 8007bcc:	465b      	mov	r3, fp
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007bd4:	f7ff fbd6 	bl	8007384 <__d2b>
 8007bd8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f aedf 	beq.w	800799e <_strtod_l+0x43e>
 8007be0:	2101      	movs	r1, #1
 8007be2:	9805      	ldr	r0, [sp, #20]
 8007be4:	f7ff f938 	bl	8006e58 <__i2b>
 8007be8:	4680      	mov	r8, r0
 8007bea:	b948      	cbnz	r0, 8007c00 <_strtod_l+0x6a0>
 8007bec:	f04f 0800 	mov.w	r8, #0
 8007bf0:	e6d5      	b.n	800799e <_strtod_l+0x43e>
 8007bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	ea03 0a0a 	and.w	sl, r3, sl
 8007bfe:	e7ad      	b.n	8007b5c <_strtod_l+0x5fc>
 8007c00:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c02:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c04:	2d00      	cmp	r5, #0
 8007c06:	bfab      	itete	ge
 8007c08:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c0a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c0c:	18ef      	addge	r7, r5, r3
 8007c0e:	1b5e      	sublt	r6, r3, r5
 8007c10:	9b08      	ldr	r3, [sp, #32]
 8007c12:	bfa8      	it	ge
 8007c14:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c16:	eba5 0503 	sub.w	r5, r5, r3
 8007c1a:	4415      	add	r5, r2
 8007c1c:	4b34      	ldr	r3, [pc, #208]	@ (8007cf0 <_strtod_l+0x790>)
 8007c1e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007c22:	bfb8      	it	lt
 8007c24:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c26:	429d      	cmp	r5, r3
 8007c28:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c2c:	da50      	bge.n	8007cd0 <_strtod_l+0x770>
 8007c2e:	1b5b      	subs	r3, r3, r5
 8007c30:	2b1f      	cmp	r3, #31
 8007c32:	f04f 0101 	mov.w	r1, #1
 8007c36:	eba2 0203 	sub.w	r2, r2, r3
 8007c3a:	dc3d      	bgt.n	8007cb8 <_strtod_l+0x758>
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c42:	2300      	movs	r3, #0
 8007c44:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c46:	18bd      	adds	r5, r7, r2
 8007c48:	9b08      	ldr	r3, [sp, #32]
 8007c4a:	42af      	cmp	r7, r5
 8007c4c:	4416      	add	r6, r2
 8007c4e:	441e      	add	r6, r3
 8007c50:	463b      	mov	r3, r7
 8007c52:	bfa8      	it	ge
 8007c54:	462b      	movge	r3, r5
 8007c56:	42b3      	cmp	r3, r6
 8007c58:	bfa8      	it	ge
 8007c5a:	4633      	movge	r3, r6
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfc2      	ittt	gt
 8007c60:	1aed      	subgt	r5, r5, r3
 8007c62:	1af6      	subgt	r6, r6, r3
 8007c64:	1aff      	subgt	r7, r7, r3
 8007c66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dd16      	ble.n	8007c9a <_strtod_l+0x73a>
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	461a      	mov	r2, r3
 8007c70:	9805      	ldr	r0, [sp, #20]
 8007c72:	f7ff f9a9 	bl	8006fc8 <__pow5mult>
 8007c76:	4680      	mov	r8, r0
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d0b7      	beq.n	8007bec <_strtod_l+0x68c>
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c80:	9805      	ldr	r0, [sp, #20]
 8007c82:	f7ff f8ff 	bl	8006e84 <__multiply>
 8007c86:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f43f ae88 	beq.w	800799e <_strtod_l+0x43e>
 8007c8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c90:	9805      	ldr	r0, [sp, #20]
 8007c92:	f7fe ffe3 	bl	8006c5c <_Bfree>
 8007c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	dc1d      	bgt.n	8007cda <_strtod_l+0x77a>
 8007c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	dd27      	ble.n	8007cf4 <_strtod_l+0x794>
 8007ca4:	4649      	mov	r1, r9
 8007ca6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007ca8:	9805      	ldr	r0, [sp, #20]
 8007caa:	f7ff f98d 	bl	8006fc8 <__pow5mult>
 8007cae:	4681      	mov	r9, r0
 8007cb0:	bb00      	cbnz	r0, 8007cf4 <_strtod_l+0x794>
 8007cb2:	f04f 0900 	mov.w	r9, #0
 8007cb6:	e672      	b.n	800799e <_strtod_l+0x43e>
 8007cb8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cbc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cc0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007cc4:	35e2      	adds	r5, #226	@ 0xe2
 8007cc6:	fa01 f305 	lsl.w	r3, r1, r5
 8007cca:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ccc:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007cce:	e7ba      	b.n	8007c46 <_strtod_l+0x6e6>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cd8:	e7b5      	b.n	8007c46 <_strtod_l+0x6e6>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cde:	9805      	ldr	r0, [sp, #20]
 8007ce0:	f7ff f9cc 	bl	800707c <__lshift>
 8007ce4:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d1d9      	bne.n	8007c9e <_strtod_l+0x73e>
 8007cea:	e658      	b.n	800799e <_strtod_l+0x43e>
 8007cec:	08009920 	.word	0x08009920
 8007cf0:	fffffc02 	.word	0xfffffc02
 8007cf4:	2e00      	cmp	r6, #0
 8007cf6:	dd07      	ble.n	8007d08 <_strtod_l+0x7a8>
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4632      	mov	r2, r6
 8007cfc:	9805      	ldr	r0, [sp, #20]
 8007cfe:	f7ff f9bd 	bl	800707c <__lshift>
 8007d02:	4681      	mov	r9, r0
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d0d4      	beq.n	8007cb2 <_strtod_l+0x752>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	dd08      	ble.n	8007d1e <_strtod_l+0x7be>
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	463a      	mov	r2, r7
 8007d10:	9805      	ldr	r0, [sp, #20]
 8007d12:	f7ff f9b3 	bl	800707c <__lshift>
 8007d16:	4680      	mov	r8, r0
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f43f ae40 	beq.w	800799e <_strtod_l+0x43e>
 8007d1e:	464a      	mov	r2, r9
 8007d20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	f7ff fa32 	bl	800718c <__mdiff>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	f43f ae37 	beq.w	800799e <_strtod_l+0x43e>
 8007d30:	68c3      	ldr	r3, [r0, #12]
 8007d32:	4641      	mov	r1, r8
 8007d34:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d36:	2300      	movs	r3, #0
 8007d38:	60c3      	str	r3, [r0, #12]
 8007d3a:	f7ff fa0b 	bl	8007154 <__mcmp>
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	da3d      	bge.n	8007dbe <_strtod_l+0x85e>
 8007d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d44:	ea53 030a 	orrs.w	r3, r3, sl
 8007d48:	d163      	bne.n	8007e12 <_strtod_l+0x8b2>
 8007d4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d15f      	bne.n	8007e12 <_strtod_l+0x8b2>
 8007d52:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d56:	0d1b      	lsrs	r3, r3, #20
 8007d58:	051b      	lsls	r3, r3, #20
 8007d5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d5e:	d958      	bls.n	8007e12 <_strtod_l+0x8b2>
 8007d60:	6963      	ldr	r3, [r4, #20]
 8007d62:	b913      	cbnz	r3, 8007d6a <_strtod_l+0x80a>
 8007d64:	6923      	ldr	r3, [r4, #16]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	dd53      	ble.n	8007e12 <_strtod_l+0x8b2>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	9805      	ldr	r0, [sp, #20]
 8007d70:	f7ff f984 	bl	800707c <__lshift>
 8007d74:	4641      	mov	r1, r8
 8007d76:	4604      	mov	r4, r0
 8007d78:	f7ff f9ec 	bl	8007154 <__mcmp>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	dd48      	ble.n	8007e12 <_strtod_l+0x8b2>
 8007d80:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d84:	9a08      	ldr	r2, [sp, #32]
 8007d86:	0d1b      	lsrs	r3, r3, #20
 8007d88:	051b      	lsls	r3, r3, #20
 8007d8a:	2a00      	cmp	r2, #0
 8007d8c:	d062      	beq.n	8007e54 <_strtod_l+0x8f4>
 8007d8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d92:	d85f      	bhi.n	8007e54 <_strtod_l+0x8f4>
 8007d94:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007d98:	f67f ae94 	bls.w	8007ac4 <_strtod_l+0x564>
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	4659      	mov	r1, fp
 8007da0:	4ba3      	ldr	r3, [pc, #652]	@ (8008030 <_strtod_l+0xad0>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	f7f8 fb98 	bl	80004d8 <__aeabi_dmul>
 8007da8:	4ba2      	ldr	r3, [pc, #648]	@ (8008034 <_strtod_l+0xad4>)
 8007daa:	4682      	mov	sl, r0
 8007dac:	400b      	ands	r3, r1
 8007dae:	468b      	mov	fp, r1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f adff 	bne.w	80079b4 <_strtod_l+0x454>
 8007db6:	2322      	movs	r3, #34	@ 0x22
 8007db8:	9a05      	ldr	r2, [sp, #20]
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e5fa      	b.n	80079b4 <_strtod_l+0x454>
 8007dbe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007dc2:	d165      	bne.n	8007e90 <_strtod_l+0x930>
 8007dc4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dca:	b35a      	cbz	r2, 8007e24 <_strtod_l+0x8c4>
 8007dcc:	4a9a      	ldr	r2, [pc, #616]	@ (8008038 <_strtod_l+0xad8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d12b      	bne.n	8007e2a <_strtod_l+0x8ca>
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	4651      	mov	r1, sl
 8007dd6:	b303      	cbz	r3, 8007e1a <_strtod_l+0x8ba>
 8007dd8:	465a      	mov	r2, fp
 8007dda:	4b96      	ldr	r3, [pc, #600]	@ (8008034 <_strtod_l+0xad4>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007de2:	f04f 32ff 	mov.w	r2, #4294967295
 8007de6:	d81b      	bhi.n	8007e20 <_strtod_l+0x8c0>
 8007de8:	0d1b      	lsrs	r3, r3, #20
 8007dea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d119      	bne.n	8007e2a <_strtod_l+0x8ca>
 8007df6:	4b91      	ldr	r3, [pc, #580]	@ (800803c <_strtod_l+0xadc>)
 8007df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d102      	bne.n	8007e04 <_strtod_l+0x8a4>
 8007dfe:	3101      	adds	r1, #1
 8007e00:	f43f adcd 	beq.w	800799e <_strtod_l+0x43e>
 8007e04:	f04f 0a00 	mov.w	sl, #0
 8007e08:	4b8a      	ldr	r3, [pc, #552]	@ (8008034 <_strtod_l+0xad4>)
 8007e0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e0c:	401a      	ands	r2, r3
 8007e0e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1c1      	bne.n	8007d9c <_strtod_l+0x83c>
 8007e18:	e5cc      	b.n	80079b4 <_strtod_l+0x454>
 8007e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1e:	e7e8      	b.n	8007df2 <_strtod_l+0x892>
 8007e20:	4613      	mov	r3, r2
 8007e22:	e7e6      	b.n	8007df2 <_strtod_l+0x892>
 8007e24:	ea53 030a 	orrs.w	r3, r3, sl
 8007e28:	d0aa      	beq.n	8007d80 <_strtod_l+0x820>
 8007e2a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e2c:	b1db      	cbz	r3, 8007e66 <_strtod_l+0x906>
 8007e2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e30:	4213      	tst	r3, r2
 8007e32:	d0ee      	beq.n	8007e12 <_strtod_l+0x8b2>
 8007e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e36:	4650      	mov	r0, sl
 8007e38:	4659      	mov	r1, fp
 8007e3a:	9a08      	ldr	r2, [sp, #32]
 8007e3c:	b1bb      	cbz	r3, 8007e6e <_strtod_l+0x90e>
 8007e3e:	f7ff fb6d 	bl	800751c <sulp>
 8007e42:	4602      	mov	r2, r0
 8007e44:	460b      	mov	r3, r1
 8007e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e4a:	f7f8 f98f 	bl	800016c <__adddf3>
 8007e4e:	4682      	mov	sl, r0
 8007e50:	468b      	mov	fp, r1
 8007e52:	e7de      	b.n	8007e12 <_strtod_l+0x8b2>
 8007e54:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e58:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e5c:	f04f 3aff 	mov.w	sl, #4294967295
 8007e60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e64:	e7d5      	b.n	8007e12 <_strtod_l+0x8b2>
 8007e66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e68:	ea13 0f0a 	tst.w	r3, sl
 8007e6c:	e7e1      	b.n	8007e32 <_strtod_l+0x8d2>
 8007e6e:	f7ff fb55 	bl	800751c <sulp>
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e7a:	f7f8 f975 	bl	8000168 <__aeabi_dsub>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	2300      	movs	r3, #0
 8007e82:	4682      	mov	sl, r0
 8007e84:	468b      	mov	fp, r1
 8007e86:	f7f8 fd8f 	bl	80009a8 <__aeabi_dcmpeq>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0c1      	beq.n	8007e12 <_strtod_l+0x8b2>
 8007e8e:	e619      	b.n	8007ac4 <_strtod_l+0x564>
 8007e90:	4641      	mov	r1, r8
 8007e92:	4620      	mov	r0, r4
 8007e94:	f7ff face 	bl	8007434 <__ratio>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	460f      	mov	r7, r1
 8007ea2:	f7f8 fd95 	bl	80009d0 <__aeabi_dcmple>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d06d      	beq.n	8007f86 <_strtod_l+0xa26>
 8007eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d178      	bne.n	8007fa2 <_strtod_l+0xa42>
 8007eb0:	f1ba 0f00 	cmp.w	sl, #0
 8007eb4:	d156      	bne.n	8007f64 <_strtod_l+0xa04>
 8007eb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d158      	bne.n	8007f72 <_strtod_l+0xa12>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8008040 <_strtod_l+0xae0>)
 8007ec8:	f7f8 fd78 	bl	80009bc <__aeabi_dcmplt>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d157      	bne.n	8007f80 <_strtod_l+0xa20>
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8008044 <_strtod_l+0xae4>)
 8007ed8:	f7f8 fafe 	bl	80004d8 <__aeabi_dmul>
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007ee4:	9606      	str	r6, [sp, #24]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eec:	4d51      	ldr	r5, [pc, #324]	@ (8008034 <_strtod_l+0xad4>)
 8007eee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ef2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef4:	401d      	ands	r5, r3
 8007ef6:	4b54      	ldr	r3, [pc, #336]	@ (8008048 <_strtod_l+0xae8>)
 8007ef8:	429d      	cmp	r5, r3
 8007efa:	f040 80ab 	bne.w	8008054 <_strtod_l+0xaf4>
 8007efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f00:	4650      	mov	r0, sl
 8007f02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f06:	4659      	mov	r1, fp
 8007f08:	f7ff f9d4 	bl	80072b4 <__ulp>
 8007f0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f10:	f7f8 fae2 	bl	80004d8 <__aeabi_dmul>
 8007f14:	4652      	mov	r2, sl
 8007f16:	465b      	mov	r3, fp
 8007f18:	f7f8 f928 	bl	800016c <__adddf3>
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	4945      	ldr	r1, [pc, #276]	@ (8008034 <_strtod_l+0xad4>)
 8007f20:	4a4a      	ldr	r2, [pc, #296]	@ (800804c <_strtod_l+0xaec>)
 8007f22:	4019      	ands	r1, r3
 8007f24:	4291      	cmp	r1, r2
 8007f26:	4682      	mov	sl, r0
 8007f28:	d942      	bls.n	8007fb0 <_strtod_l+0xa50>
 8007f2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f2c:	4b43      	ldr	r3, [pc, #268]	@ (800803c <_strtod_l+0xadc>)
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d103      	bne.n	8007f3a <_strtod_l+0x9da>
 8007f32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f34:	3301      	adds	r3, #1
 8007f36:	f43f ad32 	beq.w	800799e <_strtod_l+0x43e>
 8007f3a:	f04f 3aff 	mov.w	sl, #4294967295
 8007f3e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800803c <_strtod_l+0xadc>
 8007f42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f44:	9805      	ldr	r0, [sp, #20]
 8007f46:	f7fe fe89 	bl	8006c5c <_Bfree>
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	9805      	ldr	r0, [sp, #20]
 8007f4e:	f7fe fe85 	bl	8006c5c <_Bfree>
 8007f52:	4641      	mov	r1, r8
 8007f54:	9805      	ldr	r0, [sp, #20]
 8007f56:	f7fe fe81 	bl	8006c5c <_Bfree>
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	f7fe fe7d 	bl	8006c5c <_Bfree>
 8007f62:	e61c      	b.n	8007b9e <_strtod_l+0x63e>
 8007f64:	f1ba 0f01 	cmp.w	sl, #1
 8007f68:	d103      	bne.n	8007f72 <_strtod_l+0xa12>
 8007f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f43f ada9 	beq.w	8007ac4 <_strtod_l+0x564>
 8007f72:	2200      	movs	r2, #0
 8007f74:	4b36      	ldr	r3, [pc, #216]	@ (8008050 <_strtod_l+0xaf0>)
 8007f76:	2600      	movs	r6, #0
 8007f78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f7c:	4f30      	ldr	r7, [pc, #192]	@ (8008040 <_strtod_l+0xae0>)
 8007f7e:	e7b3      	b.n	8007ee8 <_strtod_l+0x988>
 8007f80:	2600      	movs	r6, #0
 8007f82:	4f30      	ldr	r7, [pc, #192]	@ (8008044 <_strtod_l+0xae4>)
 8007f84:	e7ac      	b.n	8007ee0 <_strtod_l+0x980>
 8007f86:	4630      	mov	r0, r6
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4b2e      	ldr	r3, [pc, #184]	@ (8008044 <_strtod_l+0xae4>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f7f8 faa3 	bl	80004d8 <__aeabi_dmul>
 8007f92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0a1      	beq.n	8007ee0 <_strtod_l+0x980>
 8007f9c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fa0:	e7a2      	b.n	8007ee8 <_strtod_l+0x988>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4b26      	ldr	r3, [pc, #152]	@ (8008040 <_strtod_l+0xae0>)
 8007fa6:	4616      	mov	r6, r2
 8007fa8:	461f      	mov	r7, r3
 8007faa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fae:	e79b      	b.n	8007ee8 <_strtod_l+0x988>
 8007fb0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007fb4:	9b08      	ldr	r3, [sp, #32]
 8007fb6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1c1      	bne.n	8007f42 <_strtod_l+0x9e2>
 8007fbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007fc2:	0d1b      	lsrs	r3, r3, #20
 8007fc4:	051b      	lsls	r3, r3, #20
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	d1bb      	bne.n	8007f42 <_strtod_l+0x9e2>
 8007fca:	4630      	mov	r0, r6
 8007fcc:	4639      	mov	r1, r7
 8007fce:	f7f9 f829 	bl	8001024 <__aeabi_d2lz>
 8007fd2:	f7f8 fa53 	bl	800047c <__aeabi_l2d>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7f8 f8c3 	bl	8000168 <__aeabi_dsub>
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007fea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007fee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ff0:	ea46 060a 	orr.w	r6, r6, sl
 8007ff4:	431e      	orrs	r6, r3
 8007ff6:	d06a      	beq.n	80080ce <_strtod_l+0xb6e>
 8007ff8:	a309      	add	r3, pc, #36	@ (adr r3, 8008020 <_strtod_l+0xac0>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 fcdd 	bl	80009bc <__aeabi_dcmplt>
 8008002:	2800      	cmp	r0, #0
 8008004:	f47f acd6 	bne.w	80079b4 <_strtod_l+0x454>
 8008008:	a307      	add	r3, pc, #28	@ (adr r3, 8008028 <_strtod_l+0xac8>)
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008012:	f7f8 fcf1 	bl	80009f8 <__aeabi_dcmpgt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d093      	beq.n	8007f42 <_strtod_l+0x9e2>
 800801a:	e4cb      	b.n	80079b4 <_strtod_l+0x454>
 800801c:	f3af 8000 	nop.w
 8008020:	94a03595 	.word	0x94a03595
 8008024:	3fdfffff 	.word	0x3fdfffff
 8008028:	35afe535 	.word	0x35afe535
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	39500000 	.word	0x39500000
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	000fffff 	.word	0x000fffff
 800803c:	7fefffff 	.word	0x7fefffff
 8008040:	3ff00000 	.word	0x3ff00000
 8008044:	3fe00000 	.word	0x3fe00000
 8008048:	7fe00000 	.word	0x7fe00000
 800804c:	7c9fffff 	.word	0x7c9fffff
 8008050:	bff00000 	.word	0xbff00000
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	b323      	cbz	r3, 80080a2 <_strtod_l+0xb42>
 8008058:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800805c:	d821      	bhi.n	80080a2 <_strtod_l+0xb42>
 800805e:	a328      	add	r3, pc, #160	@ (adr r3, 8008100 <_strtod_l+0xba0>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	4630      	mov	r0, r6
 8008066:	4639      	mov	r1, r7
 8008068:	f7f8 fcb2 	bl	80009d0 <__aeabi_dcmple>
 800806c:	b1a0      	cbz	r0, 8008098 <_strtod_l+0xb38>
 800806e:	4639      	mov	r1, r7
 8008070:	4630      	mov	r0, r6
 8008072:	f7f8 fd09 	bl	8000a88 <__aeabi_d2uiz>
 8008076:	2801      	cmp	r0, #1
 8008078:	bf38      	it	cc
 800807a:	2001      	movcc	r0, #1
 800807c:	f7f8 f9b2 	bl	80003e4 <__aeabi_ui2d>
 8008080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008082:	4606      	mov	r6, r0
 8008084:	460f      	mov	r7, r1
 8008086:	b9fb      	cbnz	r3, 80080c8 <_strtod_l+0xb68>
 8008088:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800808c:	9014      	str	r0, [sp, #80]	@ 0x50
 800808e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008090:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008094:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800809a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800809e:	1b5b      	subs	r3, r3, r5
 80080a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80080a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80080aa:	f7ff f903 	bl	80072b4 <__ulp>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	4650      	mov	r0, sl
 80080b4:	4659      	mov	r1, fp
 80080b6:	f7f8 fa0f 	bl	80004d8 <__aeabi_dmul>
 80080ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080be:	f7f8 f855 	bl	800016c <__adddf3>
 80080c2:	4682      	mov	sl, r0
 80080c4:	468b      	mov	fp, r1
 80080c6:	e775      	b.n	8007fb4 <_strtod_l+0xa54>
 80080c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80080cc:	e7e0      	b.n	8008090 <_strtod_l+0xb30>
 80080ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8008108 <_strtod_l+0xba8>)
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f7f8 fc72 	bl	80009bc <__aeabi_dcmplt>
 80080d8:	e79d      	b.n	8008016 <_strtod_l+0xab6>
 80080da:	2300      	movs	r3, #0
 80080dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80080de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	f7ff ba79 	b.w	80075da <_strtod_l+0x7a>
 80080e8:	2a65      	cmp	r2, #101	@ 0x65
 80080ea:	f43f ab72 	beq.w	80077d2 <_strtod_l+0x272>
 80080ee:	2a45      	cmp	r2, #69	@ 0x45
 80080f0:	f43f ab6f 	beq.w	80077d2 <_strtod_l+0x272>
 80080f4:	2301      	movs	r3, #1
 80080f6:	f7ff bbaa 	b.w	800784e <_strtod_l+0x2ee>
 80080fa:	bf00      	nop
 80080fc:	f3af 8000 	nop.w
 8008100:	ffc00000 	.word	0xffc00000
 8008104:	41dfffff 	.word	0x41dfffff
 8008108:	94a03595 	.word	0x94a03595
 800810c:	3fcfffff 	.word	0x3fcfffff

08008110 <_strtod_r>:
 8008110:	4b01      	ldr	r3, [pc, #4]	@ (8008118 <_strtod_r+0x8>)
 8008112:	f7ff ba25 	b.w	8007560 <_strtod_l>
 8008116:	bf00      	nop
 8008118:	20000068 	.word	0x20000068

0800811c <_strtol_l.isra.0>:
 800811c:	2b24      	cmp	r3, #36	@ 0x24
 800811e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008122:	4686      	mov	lr, r0
 8008124:	4690      	mov	r8, r2
 8008126:	d801      	bhi.n	800812c <_strtol_l.isra.0+0x10>
 8008128:	2b01      	cmp	r3, #1
 800812a:	d106      	bne.n	800813a <_strtol_l.isra.0+0x1e>
 800812c:	f7fd fdac 	bl	8005c88 <__errno>
 8008130:	2316      	movs	r3, #22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813a:	460d      	mov	r5, r1
 800813c:	4833      	ldr	r0, [pc, #204]	@ (800820c <_strtol_l.isra.0+0xf0>)
 800813e:	462a      	mov	r2, r5
 8008140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008144:	5d06      	ldrb	r6, [r0, r4]
 8008146:	f016 0608 	ands.w	r6, r6, #8
 800814a:	d1f8      	bne.n	800813e <_strtol_l.isra.0+0x22>
 800814c:	2c2d      	cmp	r4, #45	@ 0x2d
 800814e:	d110      	bne.n	8008172 <_strtol_l.isra.0+0x56>
 8008150:	2601      	movs	r6, #1
 8008152:	782c      	ldrb	r4, [r5, #0]
 8008154:	1c95      	adds	r5, r2, #2
 8008156:	f033 0210 	bics.w	r2, r3, #16
 800815a:	d115      	bne.n	8008188 <_strtol_l.isra.0+0x6c>
 800815c:	2c30      	cmp	r4, #48	@ 0x30
 800815e:	d10d      	bne.n	800817c <_strtol_l.isra.0+0x60>
 8008160:	782a      	ldrb	r2, [r5, #0]
 8008162:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008166:	2a58      	cmp	r2, #88	@ 0x58
 8008168:	d108      	bne.n	800817c <_strtol_l.isra.0+0x60>
 800816a:	786c      	ldrb	r4, [r5, #1]
 800816c:	3502      	adds	r5, #2
 800816e:	2310      	movs	r3, #16
 8008170:	e00a      	b.n	8008188 <_strtol_l.isra.0+0x6c>
 8008172:	2c2b      	cmp	r4, #43	@ 0x2b
 8008174:	bf04      	itt	eq
 8008176:	782c      	ldrbeq	r4, [r5, #0]
 8008178:	1c95      	addeq	r5, r2, #2
 800817a:	e7ec      	b.n	8008156 <_strtol_l.isra.0+0x3a>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1f6      	bne.n	800816e <_strtol_l.isra.0+0x52>
 8008180:	2c30      	cmp	r4, #48	@ 0x30
 8008182:	bf14      	ite	ne
 8008184:	230a      	movne	r3, #10
 8008186:	2308      	moveq	r3, #8
 8008188:	2200      	movs	r2, #0
 800818a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800818e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008192:	fbbc f9f3 	udiv	r9, ip, r3
 8008196:	4610      	mov	r0, r2
 8008198:	fb03 ca19 	mls	sl, r3, r9, ip
 800819c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081a0:	2f09      	cmp	r7, #9
 80081a2:	d80f      	bhi.n	80081c4 <_strtol_l.isra.0+0xa8>
 80081a4:	463c      	mov	r4, r7
 80081a6:	42a3      	cmp	r3, r4
 80081a8:	dd1b      	ble.n	80081e2 <_strtol_l.isra.0+0xc6>
 80081aa:	1c57      	adds	r7, r2, #1
 80081ac:	d007      	beq.n	80081be <_strtol_l.isra.0+0xa2>
 80081ae:	4581      	cmp	r9, r0
 80081b0:	d314      	bcc.n	80081dc <_strtol_l.isra.0+0xc0>
 80081b2:	d101      	bne.n	80081b8 <_strtol_l.isra.0+0x9c>
 80081b4:	45a2      	cmp	sl, r4
 80081b6:	db11      	blt.n	80081dc <_strtol_l.isra.0+0xc0>
 80081b8:	2201      	movs	r2, #1
 80081ba:	fb00 4003 	mla	r0, r0, r3, r4
 80081be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081c2:	e7eb      	b.n	800819c <_strtol_l.isra.0+0x80>
 80081c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80081c8:	2f19      	cmp	r7, #25
 80081ca:	d801      	bhi.n	80081d0 <_strtol_l.isra.0+0xb4>
 80081cc:	3c37      	subs	r4, #55	@ 0x37
 80081ce:	e7ea      	b.n	80081a6 <_strtol_l.isra.0+0x8a>
 80081d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081d4:	2f19      	cmp	r7, #25
 80081d6:	d804      	bhi.n	80081e2 <_strtol_l.isra.0+0xc6>
 80081d8:	3c57      	subs	r4, #87	@ 0x57
 80081da:	e7e4      	b.n	80081a6 <_strtol_l.isra.0+0x8a>
 80081dc:	f04f 32ff 	mov.w	r2, #4294967295
 80081e0:	e7ed      	b.n	80081be <_strtol_l.isra.0+0xa2>
 80081e2:	1c53      	adds	r3, r2, #1
 80081e4:	d108      	bne.n	80081f8 <_strtol_l.isra.0+0xdc>
 80081e6:	2322      	movs	r3, #34	@ 0x22
 80081e8:	4660      	mov	r0, ip
 80081ea:	f8ce 3000 	str.w	r3, [lr]
 80081ee:	f1b8 0f00 	cmp.w	r8, #0
 80081f2:	d0a0      	beq.n	8008136 <_strtol_l.isra.0+0x1a>
 80081f4:	1e69      	subs	r1, r5, #1
 80081f6:	e006      	b.n	8008206 <_strtol_l.isra.0+0xea>
 80081f8:	b106      	cbz	r6, 80081fc <_strtol_l.isra.0+0xe0>
 80081fa:	4240      	negs	r0, r0
 80081fc:	f1b8 0f00 	cmp.w	r8, #0
 8008200:	d099      	beq.n	8008136 <_strtol_l.isra.0+0x1a>
 8008202:	2a00      	cmp	r2, #0
 8008204:	d1f6      	bne.n	80081f4 <_strtol_l.isra.0+0xd8>
 8008206:	f8c8 1000 	str.w	r1, [r8]
 800820a:	e794      	b.n	8008136 <_strtol_l.isra.0+0x1a>
 800820c:	08009949 	.word	0x08009949

08008210 <_strtol_r>:
 8008210:	f7ff bf84 	b.w	800811c <_strtol_l.isra.0>

08008214 <__ssputs_r>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	461f      	mov	r7, r3
 800821a:	688e      	ldr	r6, [r1, #8]
 800821c:	4682      	mov	sl, r0
 800821e:	42be      	cmp	r6, r7
 8008220:	460c      	mov	r4, r1
 8008222:	4690      	mov	r8, r2
 8008224:	680b      	ldr	r3, [r1, #0]
 8008226:	d82d      	bhi.n	8008284 <__ssputs_r+0x70>
 8008228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800822c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008230:	d026      	beq.n	8008280 <__ssputs_r+0x6c>
 8008232:	6965      	ldr	r5, [r4, #20]
 8008234:	6909      	ldr	r1, [r1, #16]
 8008236:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800823a:	eba3 0901 	sub.w	r9, r3, r1
 800823e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008242:	1c7b      	adds	r3, r7, #1
 8008244:	444b      	add	r3, r9
 8008246:	106d      	asrs	r5, r5, #1
 8008248:	429d      	cmp	r5, r3
 800824a:	bf38      	it	cc
 800824c:	461d      	movcc	r5, r3
 800824e:	0553      	lsls	r3, r2, #21
 8008250:	d527      	bpl.n	80082a2 <__ssputs_r+0x8e>
 8008252:	4629      	mov	r1, r5
 8008254:	f7fe fc36 	bl	8006ac4 <_malloc_r>
 8008258:	4606      	mov	r6, r0
 800825a:	b360      	cbz	r0, 80082b6 <__ssputs_r+0xa2>
 800825c:	464a      	mov	r2, r9
 800825e:	6921      	ldr	r1, [r4, #16]
 8008260:	f7fd fd4d 	bl	8005cfe <memcpy>
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800826a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800826e:	81a3      	strh	r3, [r4, #12]
 8008270:	6126      	str	r6, [r4, #16]
 8008272:	444e      	add	r6, r9
 8008274:	6026      	str	r6, [r4, #0]
 8008276:	463e      	mov	r6, r7
 8008278:	6165      	str	r5, [r4, #20]
 800827a:	eba5 0509 	sub.w	r5, r5, r9
 800827e:	60a5      	str	r5, [r4, #8]
 8008280:	42be      	cmp	r6, r7
 8008282:	d900      	bls.n	8008286 <__ssputs_r+0x72>
 8008284:	463e      	mov	r6, r7
 8008286:	4632      	mov	r2, r6
 8008288:	4641      	mov	r1, r8
 800828a:	6820      	ldr	r0, [r4, #0]
 800828c:	f000 f9c2 	bl	8008614 <memmove>
 8008290:	2000      	movs	r0, #0
 8008292:	68a3      	ldr	r3, [r4, #8]
 8008294:	1b9b      	subs	r3, r3, r6
 8008296:	60a3      	str	r3, [r4, #8]
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	4433      	add	r3, r6
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a2:	462a      	mov	r2, r5
 80082a4:	f000 fd6f 	bl	8008d86 <_realloc_r>
 80082a8:	4606      	mov	r6, r0
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d1e0      	bne.n	8008270 <__ssputs_r+0x5c>
 80082ae:	4650      	mov	r0, sl
 80082b0:	6921      	ldr	r1, [r4, #16]
 80082b2:	f7fe fb95 	bl	80069e0 <_free_r>
 80082b6:	230c      	movs	r3, #12
 80082b8:	f8ca 3000 	str.w	r3, [sl]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f04f 30ff 	mov.w	r0, #4294967295
 80082c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	e7e9      	b.n	800829e <__ssputs_r+0x8a>
	...

080082cc <_svfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4698      	mov	r8, r3
 80082d2:	898b      	ldrh	r3, [r1, #12]
 80082d4:	4607      	mov	r7, r0
 80082d6:	061b      	lsls	r3, r3, #24
 80082d8:	460d      	mov	r5, r1
 80082da:	4614      	mov	r4, r2
 80082dc:	b09d      	sub	sp, #116	@ 0x74
 80082de:	d510      	bpl.n	8008302 <_svfiprintf_r+0x36>
 80082e0:	690b      	ldr	r3, [r1, #16]
 80082e2:	b973      	cbnz	r3, 8008302 <_svfiprintf_r+0x36>
 80082e4:	2140      	movs	r1, #64	@ 0x40
 80082e6:	f7fe fbed 	bl	8006ac4 <_malloc_r>
 80082ea:	6028      	str	r0, [r5, #0]
 80082ec:	6128      	str	r0, [r5, #16]
 80082ee:	b930      	cbnz	r0, 80082fe <_svfiprintf_r+0x32>
 80082f0:	230c      	movs	r3, #12
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	b01d      	add	sp, #116	@ 0x74
 80082fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fe:	2340      	movs	r3, #64	@ 0x40
 8008300:	616b      	str	r3, [r5, #20]
 8008302:	2300      	movs	r3, #0
 8008304:	9309      	str	r3, [sp, #36]	@ 0x24
 8008306:	2320      	movs	r3, #32
 8008308:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800830c:	2330      	movs	r3, #48	@ 0x30
 800830e:	f04f 0901 	mov.w	r9, #1
 8008312:	f8cd 800c 	str.w	r8, [sp, #12]
 8008316:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80084b0 <_svfiprintf_r+0x1e4>
 800831a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800831e:	4623      	mov	r3, r4
 8008320:	469a      	mov	sl, r3
 8008322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008326:	b10a      	cbz	r2, 800832c <_svfiprintf_r+0x60>
 8008328:	2a25      	cmp	r2, #37	@ 0x25
 800832a:	d1f9      	bne.n	8008320 <_svfiprintf_r+0x54>
 800832c:	ebba 0b04 	subs.w	fp, sl, r4
 8008330:	d00b      	beq.n	800834a <_svfiprintf_r+0x7e>
 8008332:	465b      	mov	r3, fp
 8008334:	4622      	mov	r2, r4
 8008336:	4629      	mov	r1, r5
 8008338:	4638      	mov	r0, r7
 800833a:	f7ff ff6b 	bl	8008214 <__ssputs_r>
 800833e:	3001      	adds	r0, #1
 8008340:	f000 80a7 	beq.w	8008492 <_svfiprintf_r+0x1c6>
 8008344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008346:	445a      	add	r2, fp
 8008348:	9209      	str	r2, [sp, #36]	@ 0x24
 800834a:	f89a 3000 	ldrb.w	r3, [sl]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 809f 	beq.w	8008492 <_svfiprintf_r+0x1c6>
 8008354:	2300      	movs	r3, #0
 8008356:	f04f 32ff 	mov.w	r2, #4294967295
 800835a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835e:	f10a 0a01 	add.w	sl, sl, #1
 8008362:	9304      	str	r3, [sp, #16]
 8008364:	9307      	str	r3, [sp, #28]
 8008366:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800836a:	931a      	str	r3, [sp, #104]	@ 0x68
 800836c:	4654      	mov	r4, sl
 800836e:	2205      	movs	r2, #5
 8008370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008374:	484e      	ldr	r0, [pc, #312]	@ (80084b0 <_svfiprintf_r+0x1e4>)
 8008376:	f7fd fcb4 	bl	8005ce2 <memchr>
 800837a:	9a04      	ldr	r2, [sp, #16]
 800837c:	b9d8      	cbnz	r0, 80083b6 <_svfiprintf_r+0xea>
 800837e:	06d0      	lsls	r0, r2, #27
 8008380:	bf44      	itt	mi
 8008382:	2320      	movmi	r3, #32
 8008384:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008388:	0711      	lsls	r1, r2, #28
 800838a:	bf44      	itt	mi
 800838c:	232b      	movmi	r3, #43	@ 0x2b
 800838e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008392:	f89a 3000 	ldrb.w	r3, [sl]
 8008396:	2b2a      	cmp	r3, #42	@ 0x2a
 8008398:	d015      	beq.n	80083c6 <_svfiprintf_r+0xfa>
 800839a:	4654      	mov	r4, sl
 800839c:	2000      	movs	r0, #0
 800839e:	f04f 0c0a 	mov.w	ip, #10
 80083a2:	9a07      	ldr	r2, [sp, #28]
 80083a4:	4621      	mov	r1, r4
 80083a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083aa:	3b30      	subs	r3, #48	@ 0x30
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d94b      	bls.n	8008448 <_svfiprintf_r+0x17c>
 80083b0:	b1b0      	cbz	r0, 80083e0 <_svfiprintf_r+0x114>
 80083b2:	9207      	str	r2, [sp, #28]
 80083b4:	e014      	b.n	80083e0 <_svfiprintf_r+0x114>
 80083b6:	eba0 0308 	sub.w	r3, r0, r8
 80083ba:	fa09 f303 	lsl.w	r3, r9, r3
 80083be:	4313      	orrs	r3, r2
 80083c0:	46a2      	mov	sl, r4
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	e7d2      	b.n	800836c <_svfiprintf_r+0xa0>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	1d19      	adds	r1, r3, #4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	9103      	str	r1, [sp, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	bfbb      	ittet	lt
 80083d2:	425b      	neglt	r3, r3
 80083d4:	f042 0202 	orrlt.w	r2, r2, #2
 80083d8:	9307      	strge	r3, [sp, #28]
 80083da:	9307      	strlt	r3, [sp, #28]
 80083dc:	bfb8      	it	lt
 80083de:	9204      	strlt	r2, [sp, #16]
 80083e0:	7823      	ldrb	r3, [r4, #0]
 80083e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80083e4:	d10a      	bne.n	80083fc <_svfiprintf_r+0x130>
 80083e6:	7863      	ldrb	r3, [r4, #1]
 80083e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ea:	d132      	bne.n	8008452 <_svfiprintf_r+0x186>
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	3402      	adds	r4, #2
 80083f0:	1d1a      	adds	r2, r3, #4
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	9203      	str	r2, [sp, #12]
 80083f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80084b4 <_svfiprintf_r+0x1e8>
 8008400:	2203      	movs	r2, #3
 8008402:	4650      	mov	r0, sl
 8008404:	7821      	ldrb	r1, [r4, #0]
 8008406:	f7fd fc6c 	bl	8005ce2 <memchr>
 800840a:	b138      	cbz	r0, 800841c <_svfiprintf_r+0x150>
 800840c:	2240      	movs	r2, #64	@ 0x40
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	eba0 000a 	sub.w	r0, r0, sl
 8008414:	4082      	lsls	r2, r0
 8008416:	4313      	orrs	r3, r2
 8008418:	3401      	adds	r4, #1
 800841a:	9304      	str	r3, [sp, #16]
 800841c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008420:	2206      	movs	r2, #6
 8008422:	4825      	ldr	r0, [pc, #148]	@ (80084b8 <_svfiprintf_r+0x1ec>)
 8008424:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008428:	f7fd fc5b 	bl	8005ce2 <memchr>
 800842c:	2800      	cmp	r0, #0
 800842e:	d036      	beq.n	800849e <_svfiprintf_r+0x1d2>
 8008430:	4b22      	ldr	r3, [pc, #136]	@ (80084bc <_svfiprintf_r+0x1f0>)
 8008432:	bb1b      	cbnz	r3, 800847c <_svfiprintf_r+0x1b0>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	3307      	adds	r3, #7
 8008438:	f023 0307 	bic.w	r3, r3, #7
 800843c:	3308      	adds	r3, #8
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008442:	4433      	add	r3, r6
 8008444:	9309      	str	r3, [sp, #36]	@ 0x24
 8008446:	e76a      	b.n	800831e <_svfiprintf_r+0x52>
 8008448:	460c      	mov	r4, r1
 800844a:	2001      	movs	r0, #1
 800844c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008450:	e7a8      	b.n	80083a4 <_svfiprintf_r+0xd8>
 8008452:	2300      	movs	r3, #0
 8008454:	f04f 0c0a 	mov.w	ip, #10
 8008458:	4619      	mov	r1, r3
 800845a:	3401      	adds	r4, #1
 800845c:	9305      	str	r3, [sp, #20]
 800845e:	4620      	mov	r0, r4
 8008460:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008464:	3a30      	subs	r2, #48	@ 0x30
 8008466:	2a09      	cmp	r2, #9
 8008468:	d903      	bls.n	8008472 <_svfiprintf_r+0x1a6>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0c6      	beq.n	80083fc <_svfiprintf_r+0x130>
 800846e:	9105      	str	r1, [sp, #20]
 8008470:	e7c4      	b.n	80083fc <_svfiprintf_r+0x130>
 8008472:	4604      	mov	r4, r0
 8008474:	2301      	movs	r3, #1
 8008476:	fb0c 2101 	mla	r1, ip, r1, r2
 800847a:	e7f0      	b.n	800845e <_svfiprintf_r+0x192>
 800847c:	ab03      	add	r3, sp, #12
 800847e:	9300      	str	r3, [sp, #0]
 8008480:	462a      	mov	r2, r5
 8008482:	4638      	mov	r0, r7
 8008484:	4b0e      	ldr	r3, [pc, #56]	@ (80084c0 <_svfiprintf_r+0x1f4>)
 8008486:	a904      	add	r1, sp, #16
 8008488:	f7fc fcbe 	bl	8004e08 <_printf_float>
 800848c:	1c42      	adds	r2, r0, #1
 800848e:	4606      	mov	r6, r0
 8008490:	d1d6      	bne.n	8008440 <_svfiprintf_r+0x174>
 8008492:	89ab      	ldrh	r3, [r5, #12]
 8008494:	065b      	lsls	r3, r3, #25
 8008496:	f53f af2d 	bmi.w	80082f4 <_svfiprintf_r+0x28>
 800849a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800849c:	e72c      	b.n	80082f8 <_svfiprintf_r+0x2c>
 800849e:	ab03      	add	r3, sp, #12
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	462a      	mov	r2, r5
 80084a4:	4638      	mov	r0, r7
 80084a6:	4b06      	ldr	r3, [pc, #24]	@ (80084c0 <_svfiprintf_r+0x1f4>)
 80084a8:	a904      	add	r1, sp, #16
 80084aa:	f7fc ff4b 	bl	8005344 <_printf_i>
 80084ae:	e7ed      	b.n	800848c <_svfiprintf_r+0x1c0>
 80084b0:	08009743 	.word	0x08009743
 80084b4:	08009749 	.word	0x08009749
 80084b8:	0800974d 	.word	0x0800974d
 80084bc:	08004e09 	.word	0x08004e09
 80084c0:	08008215 	.word	0x08008215

080084c4 <__sflush_r>:
 80084c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	0716      	lsls	r6, r2, #28
 80084cc:	4605      	mov	r5, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	d454      	bmi.n	800857c <__sflush_r+0xb8>
 80084d2:	684b      	ldr	r3, [r1, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc02      	bgt.n	80084de <__sflush_r+0x1a>
 80084d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	dd48      	ble.n	8008570 <__sflush_r+0xac>
 80084de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084e0:	2e00      	cmp	r6, #0
 80084e2:	d045      	beq.n	8008570 <__sflush_r+0xac>
 80084e4:	2300      	movs	r3, #0
 80084e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084ea:	682f      	ldr	r7, [r5, #0]
 80084ec:	6a21      	ldr	r1, [r4, #32]
 80084ee:	602b      	str	r3, [r5, #0]
 80084f0:	d030      	beq.n	8008554 <__sflush_r+0x90>
 80084f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	0759      	lsls	r1, r3, #29
 80084f8:	d505      	bpl.n	8008506 <__sflush_r+0x42>
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	1ad2      	subs	r2, r2, r3
 80084fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008500:	b10b      	cbz	r3, 8008506 <__sflush_r+0x42>
 8008502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008504:	1ad2      	subs	r2, r2, r3
 8008506:	2300      	movs	r3, #0
 8008508:	4628      	mov	r0, r5
 800850a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800850c:	6a21      	ldr	r1, [r4, #32]
 800850e:	47b0      	blx	r6
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	d106      	bne.n	8008524 <__sflush_r+0x60>
 8008516:	6829      	ldr	r1, [r5, #0]
 8008518:	291d      	cmp	r1, #29
 800851a:	d82b      	bhi.n	8008574 <__sflush_r+0xb0>
 800851c:	4a28      	ldr	r2, [pc, #160]	@ (80085c0 <__sflush_r+0xfc>)
 800851e:	40ca      	lsrs	r2, r1
 8008520:	07d6      	lsls	r6, r2, #31
 8008522:	d527      	bpl.n	8008574 <__sflush_r+0xb0>
 8008524:	2200      	movs	r2, #0
 8008526:	6062      	str	r2, [r4, #4]
 8008528:	6922      	ldr	r2, [r4, #16]
 800852a:	04d9      	lsls	r1, r3, #19
 800852c:	6022      	str	r2, [r4, #0]
 800852e:	d504      	bpl.n	800853a <__sflush_r+0x76>
 8008530:	1c42      	adds	r2, r0, #1
 8008532:	d101      	bne.n	8008538 <__sflush_r+0x74>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b903      	cbnz	r3, 800853a <__sflush_r+0x76>
 8008538:	6560      	str	r0, [r4, #84]	@ 0x54
 800853a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800853c:	602f      	str	r7, [r5, #0]
 800853e:	b1b9      	cbz	r1, 8008570 <__sflush_r+0xac>
 8008540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <__sflush_r+0x8a>
 8008548:	4628      	mov	r0, r5
 800854a:	f7fe fa49 	bl	80069e0 <_free_r>
 800854e:	2300      	movs	r3, #0
 8008550:	6363      	str	r3, [r4, #52]	@ 0x34
 8008552:	e00d      	b.n	8008570 <__sflush_r+0xac>
 8008554:	2301      	movs	r3, #1
 8008556:	4628      	mov	r0, r5
 8008558:	47b0      	blx	r6
 800855a:	4602      	mov	r2, r0
 800855c:	1c50      	adds	r0, r2, #1
 800855e:	d1c9      	bne.n	80084f4 <__sflush_r+0x30>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0c6      	beq.n	80084f4 <__sflush_r+0x30>
 8008566:	2b1d      	cmp	r3, #29
 8008568:	d001      	beq.n	800856e <__sflush_r+0xaa>
 800856a:	2b16      	cmp	r3, #22
 800856c:	d11d      	bne.n	80085aa <__sflush_r+0xe6>
 800856e:	602f      	str	r7, [r5, #0]
 8008570:	2000      	movs	r0, #0
 8008572:	e021      	b.n	80085b8 <__sflush_r+0xf4>
 8008574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008578:	b21b      	sxth	r3, r3
 800857a:	e01a      	b.n	80085b2 <__sflush_r+0xee>
 800857c:	690f      	ldr	r7, [r1, #16]
 800857e:	2f00      	cmp	r7, #0
 8008580:	d0f6      	beq.n	8008570 <__sflush_r+0xac>
 8008582:	0793      	lsls	r3, r2, #30
 8008584:	bf18      	it	ne
 8008586:	2300      	movne	r3, #0
 8008588:	680e      	ldr	r6, [r1, #0]
 800858a:	bf08      	it	eq
 800858c:	694b      	ldreq	r3, [r1, #20]
 800858e:	1bf6      	subs	r6, r6, r7
 8008590:	600f      	str	r7, [r1, #0]
 8008592:	608b      	str	r3, [r1, #8]
 8008594:	2e00      	cmp	r6, #0
 8008596:	ddeb      	ble.n	8008570 <__sflush_r+0xac>
 8008598:	4633      	mov	r3, r6
 800859a:	463a      	mov	r2, r7
 800859c:	4628      	mov	r0, r5
 800859e:	6a21      	ldr	r1, [r4, #32]
 80085a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085a4:	47e0      	blx	ip
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dc07      	bgt.n	80085ba <__sflush_r+0xf6>
 80085aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ba:	4407      	add	r7, r0
 80085bc:	1a36      	subs	r6, r6, r0
 80085be:	e7e9      	b.n	8008594 <__sflush_r+0xd0>
 80085c0:	20400001 	.word	0x20400001

080085c4 <_fflush_r>:
 80085c4:	b538      	push	{r3, r4, r5, lr}
 80085c6:	690b      	ldr	r3, [r1, #16]
 80085c8:	4605      	mov	r5, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	b913      	cbnz	r3, 80085d4 <_fflush_r+0x10>
 80085ce:	2500      	movs	r5, #0
 80085d0:	4628      	mov	r0, r5
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	b118      	cbz	r0, 80085de <_fflush_r+0x1a>
 80085d6:	6a03      	ldr	r3, [r0, #32]
 80085d8:	b90b      	cbnz	r3, 80085de <_fflush_r+0x1a>
 80085da:	f7fd fa67 	bl	8005aac <__sinit>
 80085de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f3      	beq.n	80085ce <_fflush_r+0xa>
 80085e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085e8:	07d0      	lsls	r0, r2, #31
 80085ea:	d404      	bmi.n	80085f6 <_fflush_r+0x32>
 80085ec:	0599      	lsls	r1, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_fflush_r+0x32>
 80085f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085f2:	f7fd fb74 	bl	8005cde <__retarget_lock_acquire_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	4621      	mov	r1, r4
 80085fa:	f7ff ff63 	bl	80084c4 <__sflush_r>
 80085fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008600:	4605      	mov	r5, r0
 8008602:	07da      	lsls	r2, r3, #31
 8008604:	d4e4      	bmi.n	80085d0 <_fflush_r+0xc>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	059b      	lsls	r3, r3, #22
 800860a:	d4e1      	bmi.n	80085d0 <_fflush_r+0xc>
 800860c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800860e:	f7fd fb67 	bl	8005ce0 <__retarget_lock_release_recursive>
 8008612:	e7dd      	b.n	80085d0 <_fflush_r+0xc>

08008614 <memmove>:
 8008614:	4288      	cmp	r0, r1
 8008616:	b510      	push	{r4, lr}
 8008618:	eb01 0402 	add.w	r4, r1, r2
 800861c:	d902      	bls.n	8008624 <memmove+0x10>
 800861e:	4284      	cmp	r4, r0
 8008620:	4623      	mov	r3, r4
 8008622:	d807      	bhi.n	8008634 <memmove+0x20>
 8008624:	1e43      	subs	r3, r0, #1
 8008626:	42a1      	cmp	r1, r4
 8008628:	d008      	beq.n	800863c <memmove+0x28>
 800862a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008632:	e7f8      	b.n	8008626 <memmove+0x12>
 8008634:	4601      	mov	r1, r0
 8008636:	4402      	add	r2, r0
 8008638:	428a      	cmp	r2, r1
 800863a:	d100      	bne.n	800863e <memmove+0x2a>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008646:	e7f7      	b.n	8008638 <memmove+0x24>

08008648 <strncmp>:
 8008648:	b510      	push	{r4, lr}
 800864a:	b16a      	cbz	r2, 8008668 <strncmp+0x20>
 800864c:	3901      	subs	r1, #1
 800864e:	1884      	adds	r4, r0, r2
 8008650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008654:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008658:	429a      	cmp	r2, r3
 800865a:	d103      	bne.n	8008664 <strncmp+0x1c>
 800865c:	42a0      	cmp	r0, r4
 800865e:	d001      	beq.n	8008664 <strncmp+0x1c>
 8008660:	2a00      	cmp	r2, #0
 8008662:	d1f5      	bne.n	8008650 <strncmp+0x8>
 8008664:	1ad0      	subs	r0, r2, r3
 8008666:	bd10      	pop	{r4, pc}
 8008668:	4610      	mov	r0, r2
 800866a:	e7fc      	b.n	8008666 <strncmp+0x1e>

0800866c <_sbrk_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	2300      	movs	r3, #0
 8008670:	4d05      	ldr	r5, [pc, #20]	@ (8008688 <_sbrk_r+0x1c>)
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f9 fd44 	bl	8002104 <_sbrk>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_sbrk_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_sbrk_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200008fc 	.word	0x200008fc

0800868c <__assert_func>:
 800868c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800868e:	4614      	mov	r4, r2
 8008690:	461a      	mov	r2, r3
 8008692:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <__assert_func+0x2c>)
 8008694:	4605      	mov	r5, r0
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68d8      	ldr	r0, [r3, #12]
 800869a:	b14c      	cbz	r4, 80086b0 <__assert_func+0x24>
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <__assert_func+0x30>)
 800869e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086a2:	9100      	str	r1, [sp, #0]
 80086a4:	462b      	mov	r3, r5
 80086a6:	4906      	ldr	r1, [pc, #24]	@ (80086c0 <__assert_func+0x34>)
 80086a8:	f000 fba8 	bl	8008dfc <fiprintf>
 80086ac:	f000 fbb8 	bl	8008e20 <abort>
 80086b0:	4b04      	ldr	r3, [pc, #16]	@ (80086c4 <__assert_func+0x38>)
 80086b2:	461c      	mov	r4, r3
 80086b4:	e7f3      	b.n	800869e <__assert_func+0x12>
 80086b6:	bf00      	nop
 80086b8:	20000018 	.word	0x20000018
 80086bc:	0800975c 	.word	0x0800975c
 80086c0:	08009769 	.word	0x08009769
 80086c4:	08009797 	.word	0x08009797

080086c8 <_calloc_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	fba1 5402 	umull	r5, r4, r1, r2
 80086ce:	b934      	cbnz	r4, 80086de <_calloc_r+0x16>
 80086d0:	4629      	mov	r1, r5
 80086d2:	f7fe f9f7 	bl	8006ac4 <_malloc_r>
 80086d6:	4606      	mov	r6, r0
 80086d8:	b928      	cbnz	r0, 80086e6 <_calloc_r+0x1e>
 80086da:	4630      	mov	r0, r6
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	220c      	movs	r2, #12
 80086e0:	2600      	movs	r6, #0
 80086e2:	6002      	str	r2, [r0, #0]
 80086e4:	e7f9      	b.n	80086da <_calloc_r+0x12>
 80086e6:	462a      	mov	r2, r5
 80086e8:	4621      	mov	r1, r4
 80086ea:	f7fd fa7a 	bl	8005be2 <memset>
 80086ee:	e7f4      	b.n	80086da <_calloc_r+0x12>

080086f0 <rshift>:
 80086f0:	6903      	ldr	r3, [r0, #16]
 80086f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086fa:	f100 0414 	add.w	r4, r0, #20
 80086fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008702:	dd46      	ble.n	8008792 <rshift+0xa2>
 8008704:	f011 011f 	ands.w	r1, r1, #31
 8008708:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800870c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008710:	d10c      	bne.n	800872c <rshift+0x3c>
 8008712:	4629      	mov	r1, r5
 8008714:	f100 0710 	add.w	r7, r0, #16
 8008718:	42b1      	cmp	r1, r6
 800871a:	d335      	bcc.n	8008788 <rshift+0x98>
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	1eea      	subs	r2, r5, #3
 8008722:	4296      	cmp	r6, r2
 8008724:	bf38      	it	cc
 8008726:	2300      	movcc	r3, #0
 8008728:	4423      	add	r3, r4
 800872a:	e015      	b.n	8008758 <rshift+0x68>
 800872c:	46a1      	mov	r9, r4
 800872e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008732:	f1c1 0820 	rsb	r8, r1, #32
 8008736:	40cf      	lsrs	r7, r1
 8008738:	f105 0e04 	add.w	lr, r5, #4
 800873c:	4576      	cmp	r6, lr
 800873e:	46f4      	mov	ip, lr
 8008740:	d816      	bhi.n	8008770 <rshift+0x80>
 8008742:	1a9a      	subs	r2, r3, r2
 8008744:	0092      	lsls	r2, r2, #2
 8008746:	3a04      	subs	r2, #4
 8008748:	3501      	adds	r5, #1
 800874a:	42ae      	cmp	r6, r5
 800874c:	bf38      	it	cc
 800874e:	2200      	movcc	r2, #0
 8008750:	18a3      	adds	r3, r4, r2
 8008752:	50a7      	str	r7, [r4, r2]
 8008754:	b107      	cbz	r7, 8008758 <rshift+0x68>
 8008756:	3304      	adds	r3, #4
 8008758:	42a3      	cmp	r3, r4
 800875a:	eba3 0204 	sub.w	r2, r3, r4
 800875e:	bf08      	it	eq
 8008760:	2300      	moveq	r3, #0
 8008762:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008766:	6102      	str	r2, [r0, #16]
 8008768:	bf08      	it	eq
 800876a:	6143      	streq	r3, [r0, #20]
 800876c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008770:	f8dc c000 	ldr.w	ip, [ip]
 8008774:	fa0c fc08 	lsl.w	ip, ip, r8
 8008778:	ea4c 0707 	orr.w	r7, ip, r7
 800877c:	f849 7b04 	str.w	r7, [r9], #4
 8008780:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008784:	40cf      	lsrs	r7, r1
 8008786:	e7d9      	b.n	800873c <rshift+0x4c>
 8008788:	f851 cb04 	ldr.w	ip, [r1], #4
 800878c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008790:	e7c2      	b.n	8008718 <rshift+0x28>
 8008792:	4623      	mov	r3, r4
 8008794:	e7e0      	b.n	8008758 <rshift+0x68>

08008796 <__hexdig_fun>:
 8008796:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800879a:	2b09      	cmp	r3, #9
 800879c:	d802      	bhi.n	80087a4 <__hexdig_fun+0xe>
 800879e:	3820      	subs	r0, #32
 80087a0:	b2c0      	uxtb	r0, r0
 80087a2:	4770      	bx	lr
 80087a4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d801      	bhi.n	80087b0 <__hexdig_fun+0x1a>
 80087ac:	3847      	subs	r0, #71	@ 0x47
 80087ae:	e7f7      	b.n	80087a0 <__hexdig_fun+0xa>
 80087b0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80087b4:	2b05      	cmp	r3, #5
 80087b6:	d801      	bhi.n	80087bc <__hexdig_fun+0x26>
 80087b8:	3827      	subs	r0, #39	@ 0x27
 80087ba:	e7f1      	b.n	80087a0 <__hexdig_fun+0xa>
 80087bc:	2000      	movs	r0, #0
 80087be:	4770      	bx	lr

080087c0 <__gethex>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	468a      	mov	sl, r1
 80087c6:	4690      	mov	r8, r2
 80087c8:	b085      	sub	sp, #20
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	9001      	str	r0, [sp, #4]
 80087d0:	1c9c      	adds	r4, r3, #2
 80087d2:	46a1      	mov	r9, r4
 80087d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80087d8:	2830      	cmp	r0, #48	@ 0x30
 80087da:	d0fa      	beq.n	80087d2 <__gethex+0x12>
 80087dc:	eba9 0303 	sub.w	r3, r9, r3
 80087e0:	f1a3 0b02 	sub.w	fp, r3, #2
 80087e4:	f7ff ffd7 	bl	8008796 <__hexdig_fun>
 80087e8:	4605      	mov	r5, r0
 80087ea:	2800      	cmp	r0, #0
 80087ec:	d168      	bne.n	80088c0 <__gethex+0x100>
 80087ee:	2201      	movs	r2, #1
 80087f0:	4648      	mov	r0, r9
 80087f2:	499f      	ldr	r1, [pc, #636]	@ (8008a70 <__gethex+0x2b0>)
 80087f4:	f7ff ff28 	bl	8008648 <strncmp>
 80087f8:	4607      	mov	r7, r0
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d167      	bne.n	80088ce <__gethex+0x10e>
 80087fe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008802:	4626      	mov	r6, r4
 8008804:	f7ff ffc7 	bl	8008796 <__hexdig_fun>
 8008808:	2800      	cmp	r0, #0
 800880a:	d062      	beq.n	80088d2 <__gethex+0x112>
 800880c:	4623      	mov	r3, r4
 800880e:	7818      	ldrb	r0, [r3, #0]
 8008810:	4699      	mov	r9, r3
 8008812:	2830      	cmp	r0, #48	@ 0x30
 8008814:	f103 0301 	add.w	r3, r3, #1
 8008818:	d0f9      	beq.n	800880e <__gethex+0x4e>
 800881a:	f7ff ffbc 	bl	8008796 <__hexdig_fun>
 800881e:	fab0 f580 	clz	r5, r0
 8008822:	f04f 0b01 	mov.w	fp, #1
 8008826:	096d      	lsrs	r5, r5, #5
 8008828:	464a      	mov	r2, r9
 800882a:	4616      	mov	r6, r2
 800882c:	7830      	ldrb	r0, [r6, #0]
 800882e:	3201      	adds	r2, #1
 8008830:	f7ff ffb1 	bl	8008796 <__hexdig_fun>
 8008834:	2800      	cmp	r0, #0
 8008836:	d1f8      	bne.n	800882a <__gethex+0x6a>
 8008838:	2201      	movs	r2, #1
 800883a:	4630      	mov	r0, r6
 800883c:	498c      	ldr	r1, [pc, #560]	@ (8008a70 <__gethex+0x2b0>)
 800883e:	f7ff ff03 	bl	8008648 <strncmp>
 8008842:	2800      	cmp	r0, #0
 8008844:	d13f      	bne.n	80088c6 <__gethex+0x106>
 8008846:	b944      	cbnz	r4, 800885a <__gethex+0x9a>
 8008848:	1c74      	adds	r4, r6, #1
 800884a:	4622      	mov	r2, r4
 800884c:	4616      	mov	r6, r2
 800884e:	7830      	ldrb	r0, [r6, #0]
 8008850:	3201      	adds	r2, #1
 8008852:	f7ff ffa0 	bl	8008796 <__hexdig_fun>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1f8      	bne.n	800884c <__gethex+0x8c>
 800885a:	1ba4      	subs	r4, r4, r6
 800885c:	00a7      	lsls	r7, r4, #2
 800885e:	7833      	ldrb	r3, [r6, #0]
 8008860:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008864:	2b50      	cmp	r3, #80	@ 0x50
 8008866:	d13e      	bne.n	80088e6 <__gethex+0x126>
 8008868:	7873      	ldrb	r3, [r6, #1]
 800886a:	2b2b      	cmp	r3, #43	@ 0x2b
 800886c:	d033      	beq.n	80088d6 <__gethex+0x116>
 800886e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008870:	d034      	beq.n	80088dc <__gethex+0x11c>
 8008872:	2400      	movs	r4, #0
 8008874:	1c71      	adds	r1, r6, #1
 8008876:	7808      	ldrb	r0, [r1, #0]
 8008878:	f7ff ff8d 	bl	8008796 <__hexdig_fun>
 800887c:	1e43      	subs	r3, r0, #1
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b18      	cmp	r3, #24
 8008882:	d830      	bhi.n	80088e6 <__gethex+0x126>
 8008884:	f1a0 0210 	sub.w	r2, r0, #16
 8008888:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800888c:	f7ff ff83 	bl	8008796 <__hexdig_fun>
 8008890:	f100 3cff 	add.w	ip, r0, #4294967295
 8008894:	fa5f fc8c 	uxtb.w	ip, ip
 8008898:	f1bc 0f18 	cmp.w	ip, #24
 800889c:	f04f 030a 	mov.w	r3, #10
 80088a0:	d91e      	bls.n	80088e0 <__gethex+0x120>
 80088a2:	b104      	cbz	r4, 80088a6 <__gethex+0xe6>
 80088a4:	4252      	negs	r2, r2
 80088a6:	4417      	add	r7, r2
 80088a8:	f8ca 1000 	str.w	r1, [sl]
 80088ac:	b1ed      	cbz	r5, 80088ea <__gethex+0x12a>
 80088ae:	f1bb 0f00 	cmp.w	fp, #0
 80088b2:	bf0c      	ite	eq
 80088b4:	2506      	moveq	r5, #6
 80088b6:	2500      	movne	r5, #0
 80088b8:	4628      	mov	r0, r5
 80088ba:	b005      	add	sp, #20
 80088bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	2500      	movs	r5, #0
 80088c2:	462c      	mov	r4, r5
 80088c4:	e7b0      	b.n	8008828 <__gethex+0x68>
 80088c6:	2c00      	cmp	r4, #0
 80088c8:	d1c7      	bne.n	800885a <__gethex+0x9a>
 80088ca:	4627      	mov	r7, r4
 80088cc:	e7c7      	b.n	800885e <__gethex+0x9e>
 80088ce:	464e      	mov	r6, r9
 80088d0:	462f      	mov	r7, r5
 80088d2:	2501      	movs	r5, #1
 80088d4:	e7c3      	b.n	800885e <__gethex+0x9e>
 80088d6:	2400      	movs	r4, #0
 80088d8:	1cb1      	adds	r1, r6, #2
 80088da:	e7cc      	b.n	8008876 <__gethex+0xb6>
 80088dc:	2401      	movs	r4, #1
 80088de:	e7fb      	b.n	80088d8 <__gethex+0x118>
 80088e0:	fb03 0002 	mla	r0, r3, r2, r0
 80088e4:	e7ce      	b.n	8008884 <__gethex+0xc4>
 80088e6:	4631      	mov	r1, r6
 80088e8:	e7de      	b.n	80088a8 <__gethex+0xe8>
 80088ea:	4629      	mov	r1, r5
 80088ec:	eba6 0309 	sub.w	r3, r6, r9
 80088f0:	3b01      	subs	r3, #1
 80088f2:	2b07      	cmp	r3, #7
 80088f4:	dc0a      	bgt.n	800890c <__gethex+0x14c>
 80088f6:	9801      	ldr	r0, [sp, #4]
 80088f8:	f7fe f970 	bl	8006bdc <_Balloc>
 80088fc:	4604      	mov	r4, r0
 80088fe:	b940      	cbnz	r0, 8008912 <__gethex+0x152>
 8008900:	4602      	mov	r2, r0
 8008902:	21e4      	movs	r1, #228	@ 0xe4
 8008904:	4b5b      	ldr	r3, [pc, #364]	@ (8008a74 <__gethex+0x2b4>)
 8008906:	485c      	ldr	r0, [pc, #368]	@ (8008a78 <__gethex+0x2b8>)
 8008908:	f7ff fec0 	bl	800868c <__assert_func>
 800890c:	3101      	adds	r1, #1
 800890e:	105b      	asrs	r3, r3, #1
 8008910:	e7ef      	b.n	80088f2 <__gethex+0x132>
 8008912:	2300      	movs	r3, #0
 8008914:	f100 0a14 	add.w	sl, r0, #20
 8008918:	4655      	mov	r5, sl
 800891a:	469b      	mov	fp, r3
 800891c:	45b1      	cmp	r9, r6
 800891e:	d337      	bcc.n	8008990 <__gethex+0x1d0>
 8008920:	f845 bb04 	str.w	fp, [r5], #4
 8008924:	eba5 050a 	sub.w	r5, r5, sl
 8008928:	10ad      	asrs	r5, r5, #2
 800892a:	6125      	str	r5, [r4, #16]
 800892c:	4658      	mov	r0, fp
 800892e:	f7fe fa47 	bl	8006dc0 <__hi0bits>
 8008932:	016d      	lsls	r5, r5, #5
 8008934:	f8d8 6000 	ldr.w	r6, [r8]
 8008938:	1a2d      	subs	r5, r5, r0
 800893a:	42b5      	cmp	r5, r6
 800893c:	dd54      	ble.n	80089e8 <__gethex+0x228>
 800893e:	1bad      	subs	r5, r5, r6
 8008940:	4629      	mov	r1, r5
 8008942:	4620      	mov	r0, r4
 8008944:	f7fe fdc9 	bl	80074da <__any_on>
 8008948:	4681      	mov	r9, r0
 800894a:	b178      	cbz	r0, 800896c <__gethex+0x1ac>
 800894c:	f04f 0901 	mov.w	r9, #1
 8008950:	1e6b      	subs	r3, r5, #1
 8008952:	1159      	asrs	r1, r3, #5
 8008954:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008958:	f003 021f 	and.w	r2, r3, #31
 800895c:	fa09 f202 	lsl.w	r2, r9, r2
 8008960:	420a      	tst	r2, r1
 8008962:	d003      	beq.n	800896c <__gethex+0x1ac>
 8008964:	454b      	cmp	r3, r9
 8008966:	dc36      	bgt.n	80089d6 <__gethex+0x216>
 8008968:	f04f 0902 	mov.w	r9, #2
 800896c:	4629      	mov	r1, r5
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff febe 	bl	80086f0 <rshift>
 8008974:	442f      	add	r7, r5
 8008976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800897a:	42bb      	cmp	r3, r7
 800897c:	da42      	bge.n	8008a04 <__gethex+0x244>
 800897e:	4621      	mov	r1, r4
 8008980:	9801      	ldr	r0, [sp, #4]
 8008982:	f7fe f96b 	bl	8006c5c <_Bfree>
 8008986:	2300      	movs	r3, #0
 8008988:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800898a:	25a3      	movs	r5, #163	@ 0xa3
 800898c:	6013      	str	r3, [r2, #0]
 800898e:	e793      	b.n	80088b8 <__gethex+0xf8>
 8008990:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008994:	2a2e      	cmp	r2, #46	@ 0x2e
 8008996:	d012      	beq.n	80089be <__gethex+0x1fe>
 8008998:	2b20      	cmp	r3, #32
 800899a:	d104      	bne.n	80089a6 <__gethex+0x1e6>
 800899c:	f845 bb04 	str.w	fp, [r5], #4
 80089a0:	f04f 0b00 	mov.w	fp, #0
 80089a4:	465b      	mov	r3, fp
 80089a6:	7830      	ldrb	r0, [r6, #0]
 80089a8:	9303      	str	r3, [sp, #12]
 80089aa:	f7ff fef4 	bl	8008796 <__hexdig_fun>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	f000 000f 	and.w	r0, r0, #15
 80089b4:	4098      	lsls	r0, r3
 80089b6:	ea4b 0b00 	orr.w	fp, fp, r0
 80089ba:	3304      	adds	r3, #4
 80089bc:	e7ae      	b.n	800891c <__gethex+0x15c>
 80089be:	45b1      	cmp	r9, r6
 80089c0:	d8ea      	bhi.n	8008998 <__gethex+0x1d8>
 80089c2:	2201      	movs	r2, #1
 80089c4:	4630      	mov	r0, r6
 80089c6:	492a      	ldr	r1, [pc, #168]	@ (8008a70 <__gethex+0x2b0>)
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	f7ff fe3d 	bl	8008648 <strncmp>
 80089ce:	9b03      	ldr	r3, [sp, #12]
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d1e1      	bne.n	8008998 <__gethex+0x1d8>
 80089d4:	e7a2      	b.n	800891c <__gethex+0x15c>
 80089d6:	4620      	mov	r0, r4
 80089d8:	1ea9      	subs	r1, r5, #2
 80089da:	f7fe fd7e 	bl	80074da <__any_on>
 80089de:	2800      	cmp	r0, #0
 80089e0:	d0c2      	beq.n	8008968 <__gethex+0x1a8>
 80089e2:	f04f 0903 	mov.w	r9, #3
 80089e6:	e7c1      	b.n	800896c <__gethex+0x1ac>
 80089e8:	da09      	bge.n	80089fe <__gethex+0x23e>
 80089ea:	1b75      	subs	r5, r6, r5
 80089ec:	4621      	mov	r1, r4
 80089ee:	462a      	mov	r2, r5
 80089f0:	9801      	ldr	r0, [sp, #4]
 80089f2:	f7fe fb43 	bl	800707c <__lshift>
 80089f6:	4604      	mov	r4, r0
 80089f8:	1b7f      	subs	r7, r7, r5
 80089fa:	f100 0a14 	add.w	sl, r0, #20
 80089fe:	f04f 0900 	mov.w	r9, #0
 8008a02:	e7b8      	b.n	8008976 <__gethex+0x1b6>
 8008a04:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a08:	42bd      	cmp	r5, r7
 8008a0a:	dd6f      	ble.n	8008aec <__gethex+0x32c>
 8008a0c:	1bed      	subs	r5, r5, r7
 8008a0e:	42ae      	cmp	r6, r5
 8008a10:	dc34      	bgt.n	8008a7c <__gethex+0x2bc>
 8008a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d022      	beq.n	8008a60 <__gethex+0x2a0>
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d024      	beq.n	8008a68 <__gethex+0x2a8>
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d115      	bne.n	8008a4e <__gethex+0x28e>
 8008a22:	42ae      	cmp	r6, r5
 8008a24:	d113      	bne.n	8008a4e <__gethex+0x28e>
 8008a26:	2e01      	cmp	r6, #1
 8008a28:	d10b      	bne.n	8008a42 <__gethex+0x282>
 8008a2a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a2e:	9a02      	ldr	r2, [sp, #8]
 8008a30:	2562      	movs	r5, #98	@ 0x62
 8008a32:	6013      	str	r3, [r2, #0]
 8008a34:	2301      	movs	r3, #1
 8008a36:	6123      	str	r3, [r4, #16]
 8008a38:	f8ca 3000 	str.w	r3, [sl]
 8008a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3e:	601c      	str	r4, [r3, #0]
 8008a40:	e73a      	b.n	80088b8 <__gethex+0xf8>
 8008a42:	4620      	mov	r0, r4
 8008a44:	1e71      	subs	r1, r6, #1
 8008a46:	f7fe fd48 	bl	80074da <__any_on>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d1ed      	bne.n	8008a2a <__gethex+0x26a>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	9801      	ldr	r0, [sp, #4]
 8008a52:	f7fe f903 	bl	8006c5c <_Bfree>
 8008a56:	2300      	movs	r3, #0
 8008a58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a5a:	2550      	movs	r5, #80	@ 0x50
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e72b      	b.n	80088b8 <__gethex+0xf8>
 8008a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1f3      	bne.n	8008a4e <__gethex+0x28e>
 8008a66:	e7e0      	b.n	8008a2a <__gethex+0x26a>
 8008a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1dd      	bne.n	8008a2a <__gethex+0x26a>
 8008a6e:	e7ee      	b.n	8008a4e <__gethex+0x28e>
 8008a70:	08009741 	.word	0x08009741
 8008a74:	080096d7 	.word	0x080096d7
 8008a78:	08009798 	.word	0x08009798
 8008a7c:	1e6f      	subs	r7, r5, #1
 8008a7e:	f1b9 0f00 	cmp.w	r9, #0
 8008a82:	d130      	bne.n	8008ae6 <__gethex+0x326>
 8008a84:	b127      	cbz	r7, 8008a90 <__gethex+0x2d0>
 8008a86:	4639      	mov	r1, r7
 8008a88:	4620      	mov	r0, r4
 8008a8a:	f7fe fd26 	bl	80074da <__any_on>
 8008a8e:	4681      	mov	r9, r0
 8008a90:	2301      	movs	r3, #1
 8008a92:	4629      	mov	r1, r5
 8008a94:	1b76      	subs	r6, r6, r5
 8008a96:	2502      	movs	r5, #2
 8008a98:	117a      	asrs	r2, r7, #5
 8008a9a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a9e:	f007 071f 	and.w	r7, r7, #31
 8008aa2:	40bb      	lsls	r3, r7
 8008aa4:	4213      	tst	r3, r2
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	bf18      	it	ne
 8008aaa:	f049 0902 	orrne.w	r9, r9, #2
 8008aae:	f7ff fe1f 	bl	80086f0 <rshift>
 8008ab2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008ab6:	f1b9 0f00 	cmp.w	r9, #0
 8008aba:	d047      	beq.n	8008b4c <__gethex+0x38c>
 8008abc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d015      	beq.n	8008af0 <__gethex+0x330>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d017      	beq.n	8008af8 <__gethex+0x338>
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d109      	bne.n	8008ae0 <__gethex+0x320>
 8008acc:	f019 0f02 	tst.w	r9, #2
 8008ad0:	d006      	beq.n	8008ae0 <__gethex+0x320>
 8008ad2:	f8da 3000 	ldr.w	r3, [sl]
 8008ad6:	ea49 0903 	orr.w	r9, r9, r3
 8008ada:	f019 0f01 	tst.w	r9, #1
 8008ade:	d10e      	bne.n	8008afe <__gethex+0x33e>
 8008ae0:	f045 0510 	orr.w	r5, r5, #16
 8008ae4:	e032      	b.n	8008b4c <__gethex+0x38c>
 8008ae6:	f04f 0901 	mov.w	r9, #1
 8008aea:	e7d1      	b.n	8008a90 <__gethex+0x2d0>
 8008aec:	2501      	movs	r5, #1
 8008aee:	e7e2      	b.n	8008ab6 <__gethex+0x2f6>
 8008af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008af2:	f1c3 0301 	rsb	r3, r3, #1
 8008af6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f0      	beq.n	8008ae0 <__gethex+0x320>
 8008afe:	f04f 0c00 	mov.w	ip, #0
 8008b02:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b06:	f104 0314 	add.w	r3, r4, #20
 8008b0a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b0e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b12:	4618      	mov	r0, r3
 8008b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b1c:	d01b      	beq.n	8008b56 <__gethex+0x396>
 8008b1e:	3201      	adds	r2, #1
 8008b20:	6002      	str	r2, [r0, #0]
 8008b22:	2d02      	cmp	r5, #2
 8008b24:	f104 0314 	add.w	r3, r4, #20
 8008b28:	d13c      	bne.n	8008ba4 <__gethex+0x3e4>
 8008b2a:	f8d8 2000 	ldr.w	r2, [r8]
 8008b2e:	3a01      	subs	r2, #1
 8008b30:	42b2      	cmp	r2, r6
 8008b32:	d109      	bne.n	8008b48 <__gethex+0x388>
 8008b34:	2201      	movs	r2, #1
 8008b36:	1171      	asrs	r1, r6, #5
 8008b38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b3c:	f006 061f 	and.w	r6, r6, #31
 8008b40:	fa02 f606 	lsl.w	r6, r2, r6
 8008b44:	421e      	tst	r6, r3
 8008b46:	d13a      	bne.n	8008bbe <__gethex+0x3fe>
 8008b48:	f045 0520 	orr.w	r5, r5, #32
 8008b4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b4e:	601c      	str	r4, [r3, #0]
 8008b50:	9b02      	ldr	r3, [sp, #8]
 8008b52:	601f      	str	r7, [r3, #0]
 8008b54:	e6b0      	b.n	80088b8 <__gethex+0xf8>
 8008b56:	4299      	cmp	r1, r3
 8008b58:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b5c:	d8d9      	bhi.n	8008b12 <__gethex+0x352>
 8008b5e:	68a3      	ldr	r3, [r4, #8]
 8008b60:	459b      	cmp	fp, r3
 8008b62:	db17      	blt.n	8008b94 <__gethex+0x3d4>
 8008b64:	6861      	ldr	r1, [r4, #4]
 8008b66:	9801      	ldr	r0, [sp, #4]
 8008b68:	3101      	adds	r1, #1
 8008b6a:	f7fe f837 	bl	8006bdc <_Balloc>
 8008b6e:	4681      	mov	r9, r0
 8008b70:	b918      	cbnz	r0, 8008b7a <__gethex+0x3ba>
 8008b72:	4602      	mov	r2, r0
 8008b74:	2184      	movs	r1, #132	@ 0x84
 8008b76:	4b19      	ldr	r3, [pc, #100]	@ (8008bdc <__gethex+0x41c>)
 8008b78:	e6c5      	b.n	8008906 <__gethex+0x146>
 8008b7a:	6922      	ldr	r2, [r4, #16]
 8008b7c:	f104 010c 	add.w	r1, r4, #12
 8008b80:	3202      	adds	r2, #2
 8008b82:	0092      	lsls	r2, r2, #2
 8008b84:	300c      	adds	r0, #12
 8008b86:	f7fd f8ba 	bl	8005cfe <memcpy>
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	9801      	ldr	r0, [sp, #4]
 8008b8e:	f7fe f865 	bl	8006c5c <_Bfree>
 8008b92:	464c      	mov	r4, r9
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	6122      	str	r2, [r4, #16]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ba0:	615a      	str	r2, [r3, #20]
 8008ba2:	e7be      	b.n	8008b22 <__gethex+0x362>
 8008ba4:	6922      	ldr	r2, [r4, #16]
 8008ba6:	455a      	cmp	r2, fp
 8008ba8:	dd0b      	ble.n	8008bc2 <__gethex+0x402>
 8008baa:	2101      	movs	r1, #1
 8008bac:	4620      	mov	r0, r4
 8008bae:	f7ff fd9f 	bl	80086f0 <rshift>
 8008bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bb6:	3701      	adds	r7, #1
 8008bb8:	42bb      	cmp	r3, r7
 8008bba:	f6ff aee0 	blt.w	800897e <__gethex+0x1be>
 8008bbe:	2501      	movs	r5, #1
 8008bc0:	e7c2      	b.n	8008b48 <__gethex+0x388>
 8008bc2:	f016 061f 	ands.w	r6, r6, #31
 8008bc6:	d0fa      	beq.n	8008bbe <__gethex+0x3fe>
 8008bc8:	4453      	add	r3, sl
 8008bca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bce:	f7fe f8f7 	bl	8006dc0 <__hi0bits>
 8008bd2:	f1c6 0620 	rsb	r6, r6, #32
 8008bd6:	42b0      	cmp	r0, r6
 8008bd8:	dbe7      	blt.n	8008baa <__gethex+0x3ea>
 8008bda:	e7f0      	b.n	8008bbe <__gethex+0x3fe>
 8008bdc:	080096d7 	.word	0x080096d7

08008be0 <L_shift>:
 8008be0:	f1c2 0208 	rsb	r2, r2, #8
 8008be4:	0092      	lsls	r2, r2, #2
 8008be6:	b570      	push	{r4, r5, r6, lr}
 8008be8:	f1c2 0620 	rsb	r6, r2, #32
 8008bec:	6843      	ldr	r3, [r0, #4]
 8008bee:	6804      	ldr	r4, [r0, #0]
 8008bf0:	fa03 f506 	lsl.w	r5, r3, r6
 8008bf4:	432c      	orrs	r4, r5
 8008bf6:	40d3      	lsrs	r3, r2
 8008bf8:	6004      	str	r4, [r0, #0]
 8008bfa:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bfe:	4288      	cmp	r0, r1
 8008c00:	d3f4      	bcc.n	8008bec <L_shift+0xc>
 8008c02:	bd70      	pop	{r4, r5, r6, pc}

08008c04 <__match>:
 8008c04:	b530      	push	{r4, r5, lr}
 8008c06:	6803      	ldr	r3, [r0, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0e:	b914      	cbnz	r4, 8008c16 <__match+0x12>
 8008c10:	6003      	str	r3, [r0, #0]
 8008c12:	2001      	movs	r0, #1
 8008c14:	bd30      	pop	{r4, r5, pc}
 8008c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c1a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008c1e:	2d19      	cmp	r5, #25
 8008c20:	bf98      	it	ls
 8008c22:	3220      	addls	r2, #32
 8008c24:	42a2      	cmp	r2, r4
 8008c26:	d0f0      	beq.n	8008c0a <__match+0x6>
 8008c28:	2000      	movs	r0, #0
 8008c2a:	e7f3      	b.n	8008c14 <__match+0x10>

08008c2c <__hexnan>:
 8008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c30:	2500      	movs	r5, #0
 8008c32:	680b      	ldr	r3, [r1, #0]
 8008c34:	4682      	mov	sl, r0
 8008c36:	115e      	asrs	r6, r3, #5
 8008c38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c3c:	f013 031f 	ands.w	r3, r3, #31
 8008c40:	bf18      	it	ne
 8008c42:	3604      	addne	r6, #4
 8008c44:	1f37      	subs	r7, r6, #4
 8008c46:	4690      	mov	r8, r2
 8008c48:	46b9      	mov	r9, r7
 8008c4a:	463c      	mov	r4, r7
 8008c4c:	46ab      	mov	fp, r5
 8008c4e:	b087      	sub	sp, #28
 8008c50:	6801      	ldr	r1, [r0, #0]
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c58:	9502      	str	r5, [sp, #8]
 8008c5a:	784a      	ldrb	r2, [r1, #1]
 8008c5c:	1c4b      	adds	r3, r1, #1
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	b342      	cbz	r2, 8008cb4 <__hexnan+0x88>
 8008c62:	4610      	mov	r0, r2
 8008c64:	9105      	str	r1, [sp, #20]
 8008c66:	9204      	str	r2, [sp, #16]
 8008c68:	f7ff fd95 	bl	8008796 <__hexdig_fun>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d151      	bne.n	8008d14 <__hexnan+0xe8>
 8008c70:	9a04      	ldr	r2, [sp, #16]
 8008c72:	9905      	ldr	r1, [sp, #20]
 8008c74:	2a20      	cmp	r2, #32
 8008c76:	d818      	bhi.n	8008caa <__hexnan+0x7e>
 8008c78:	9b02      	ldr	r3, [sp, #8]
 8008c7a:	459b      	cmp	fp, r3
 8008c7c:	dd13      	ble.n	8008ca6 <__hexnan+0x7a>
 8008c7e:	454c      	cmp	r4, r9
 8008c80:	d206      	bcs.n	8008c90 <__hexnan+0x64>
 8008c82:	2d07      	cmp	r5, #7
 8008c84:	dc04      	bgt.n	8008c90 <__hexnan+0x64>
 8008c86:	462a      	mov	r2, r5
 8008c88:	4649      	mov	r1, r9
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff ffa8 	bl	8008be0 <L_shift>
 8008c90:	4544      	cmp	r4, r8
 8008c92:	d952      	bls.n	8008d3a <__hexnan+0x10e>
 8008c94:	2300      	movs	r3, #0
 8008c96:	f1a4 0904 	sub.w	r9, r4, #4
 8008c9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	464c      	mov	r4, r9
 8008ca2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ca6:	9903      	ldr	r1, [sp, #12]
 8008ca8:	e7d7      	b.n	8008c5a <__hexnan+0x2e>
 8008caa:	2a29      	cmp	r2, #41	@ 0x29
 8008cac:	d157      	bne.n	8008d5e <__hexnan+0x132>
 8008cae:	3102      	adds	r1, #2
 8008cb0:	f8ca 1000 	str.w	r1, [sl]
 8008cb4:	f1bb 0f00 	cmp.w	fp, #0
 8008cb8:	d051      	beq.n	8008d5e <__hexnan+0x132>
 8008cba:	454c      	cmp	r4, r9
 8008cbc:	d206      	bcs.n	8008ccc <__hexnan+0xa0>
 8008cbe:	2d07      	cmp	r5, #7
 8008cc0:	dc04      	bgt.n	8008ccc <__hexnan+0xa0>
 8008cc2:	462a      	mov	r2, r5
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff ff8a 	bl	8008be0 <L_shift>
 8008ccc:	4544      	cmp	r4, r8
 8008cce:	d936      	bls.n	8008d3e <__hexnan+0x112>
 8008cd0:	4623      	mov	r3, r4
 8008cd2:	f1a8 0204 	sub.w	r2, r8, #4
 8008cd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8008cda:	429f      	cmp	r7, r3
 8008cdc:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ce0:	d2f9      	bcs.n	8008cd6 <__hexnan+0xaa>
 8008ce2:	1b3b      	subs	r3, r7, r4
 8008ce4:	f023 0303 	bic.w	r3, r3, #3
 8008ce8:	3304      	adds	r3, #4
 8008cea:	3401      	adds	r4, #1
 8008cec:	3e03      	subs	r6, #3
 8008cee:	42b4      	cmp	r4, r6
 8008cf0:	bf88      	it	hi
 8008cf2:	2304      	movhi	r3, #4
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4443      	add	r3, r8
 8008cf8:	f843 2b04 	str.w	r2, [r3], #4
 8008cfc:	429f      	cmp	r7, r3
 8008cfe:	d2fb      	bcs.n	8008cf8 <__hexnan+0xcc>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	b91b      	cbnz	r3, 8008d0c <__hexnan+0xe0>
 8008d04:	4547      	cmp	r7, r8
 8008d06:	d128      	bne.n	8008d5a <__hexnan+0x12e>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	2005      	movs	r0, #5
 8008d0e:	b007      	add	sp, #28
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d14:	3501      	adds	r5, #1
 8008d16:	2d08      	cmp	r5, #8
 8008d18:	f10b 0b01 	add.w	fp, fp, #1
 8008d1c:	dd06      	ble.n	8008d2c <__hexnan+0x100>
 8008d1e:	4544      	cmp	r4, r8
 8008d20:	d9c1      	bls.n	8008ca6 <__hexnan+0x7a>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2501      	movs	r5, #1
 8008d26:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d2a:	3c04      	subs	r4, #4
 8008d2c:	6822      	ldr	r2, [r4, #0]
 8008d2e:	f000 000f 	and.w	r0, r0, #15
 8008d32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008d36:	6020      	str	r0, [r4, #0]
 8008d38:	e7b5      	b.n	8008ca6 <__hexnan+0x7a>
 8008d3a:	2508      	movs	r5, #8
 8008d3c:	e7b3      	b.n	8008ca6 <__hexnan+0x7a>
 8008d3e:	9b01      	ldr	r3, [sp, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0dd      	beq.n	8008d00 <__hexnan+0xd4>
 8008d44:	f04f 32ff 	mov.w	r2, #4294967295
 8008d48:	f1c3 0320 	rsb	r3, r3, #32
 8008d4c:	40da      	lsrs	r2, r3
 8008d4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008d52:	4013      	ands	r3, r2
 8008d54:	f846 3c04 	str.w	r3, [r6, #-4]
 8008d58:	e7d2      	b.n	8008d00 <__hexnan+0xd4>
 8008d5a:	3f04      	subs	r7, #4
 8008d5c:	e7d0      	b.n	8008d00 <__hexnan+0xd4>
 8008d5e:	2004      	movs	r0, #4
 8008d60:	e7d5      	b.n	8008d0e <__hexnan+0xe2>

08008d62 <__ascii_mbtowc>:
 8008d62:	b082      	sub	sp, #8
 8008d64:	b901      	cbnz	r1, 8008d68 <__ascii_mbtowc+0x6>
 8008d66:	a901      	add	r1, sp, #4
 8008d68:	b142      	cbz	r2, 8008d7c <__ascii_mbtowc+0x1a>
 8008d6a:	b14b      	cbz	r3, 8008d80 <__ascii_mbtowc+0x1e>
 8008d6c:	7813      	ldrb	r3, [r2, #0]
 8008d6e:	600b      	str	r3, [r1, #0]
 8008d70:	7812      	ldrb	r2, [r2, #0]
 8008d72:	1e10      	subs	r0, r2, #0
 8008d74:	bf18      	it	ne
 8008d76:	2001      	movne	r0, #1
 8008d78:	b002      	add	sp, #8
 8008d7a:	4770      	bx	lr
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	e7fb      	b.n	8008d78 <__ascii_mbtowc+0x16>
 8008d80:	f06f 0001 	mvn.w	r0, #1
 8008d84:	e7f8      	b.n	8008d78 <__ascii_mbtowc+0x16>

08008d86 <_realloc_r>:
 8008d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	460d      	mov	r5, r1
 8008d90:	b921      	cbnz	r1, 8008d9c <_realloc_r+0x16>
 8008d92:	4611      	mov	r1, r2
 8008d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d98:	f7fd be94 	b.w	8006ac4 <_malloc_r>
 8008d9c:	b92a      	cbnz	r2, 8008daa <_realloc_r+0x24>
 8008d9e:	f7fd fe1f 	bl	80069e0 <_free_r>
 8008da2:	4625      	mov	r5, r4
 8008da4:	4628      	mov	r0, r5
 8008da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008daa:	f000 f840 	bl	8008e2e <_malloc_usable_size_r>
 8008dae:	4284      	cmp	r4, r0
 8008db0:	4606      	mov	r6, r0
 8008db2:	d802      	bhi.n	8008dba <_realloc_r+0x34>
 8008db4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008db8:	d8f4      	bhi.n	8008da4 <_realloc_r+0x1e>
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7fd fe81 	bl	8006ac4 <_malloc_r>
 8008dc2:	4680      	mov	r8, r0
 8008dc4:	b908      	cbnz	r0, 8008dca <_realloc_r+0x44>
 8008dc6:	4645      	mov	r5, r8
 8008dc8:	e7ec      	b.n	8008da4 <_realloc_r+0x1e>
 8008dca:	42b4      	cmp	r4, r6
 8008dcc:	4622      	mov	r2, r4
 8008dce:	4629      	mov	r1, r5
 8008dd0:	bf28      	it	cs
 8008dd2:	4632      	movcs	r2, r6
 8008dd4:	f7fc ff93 	bl	8005cfe <memcpy>
 8008dd8:	4629      	mov	r1, r5
 8008dda:	4638      	mov	r0, r7
 8008ddc:	f7fd fe00 	bl	80069e0 <_free_r>
 8008de0:	e7f1      	b.n	8008dc6 <_realloc_r+0x40>

08008de2 <__ascii_wctomb>:
 8008de2:	4603      	mov	r3, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	b141      	cbz	r1, 8008dfa <__ascii_wctomb+0x18>
 8008de8:	2aff      	cmp	r2, #255	@ 0xff
 8008dea:	d904      	bls.n	8008df6 <__ascii_wctomb+0x14>
 8008dec:	228a      	movs	r2, #138	@ 0x8a
 8008dee:	f04f 30ff 	mov.w	r0, #4294967295
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	4770      	bx	lr
 8008df6:	2001      	movs	r0, #1
 8008df8:	700a      	strb	r2, [r1, #0]
 8008dfa:	4770      	bx	lr

08008dfc <fiprintf>:
 8008dfc:	b40e      	push	{r1, r2, r3}
 8008dfe:	b503      	push	{r0, r1, lr}
 8008e00:	4601      	mov	r1, r0
 8008e02:	ab03      	add	r3, sp, #12
 8008e04:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <fiprintf+0x20>)
 8008e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	9301      	str	r3, [sp, #4]
 8008e0e:	f000 f83d 	bl	8008e8c <_vfiprintf_r>
 8008e12:	b002      	add	sp, #8
 8008e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e18:	b003      	add	sp, #12
 8008e1a:	4770      	bx	lr
 8008e1c:	20000018 	.word	0x20000018

08008e20 <abort>:
 8008e20:	2006      	movs	r0, #6
 8008e22:	b508      	push	{r3, lr}
 8008e24:	f000 fa06 	bl	8009234 <raise>
 8008e28:	2001      	movs	r0, #1
 8008e2a:	f7f9 f8f6 	bl	800201a <_exit>

08008e2e <_malloc_usable_size_r>:
 8008e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e32:	1f18      	subs	r0, r3, #4
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	bfbc      	itt	lt
 8008e38:	580b      	ldrlt	r3, [r1, r0]
 8008e3a:	18c0      	addlt	r0, r0, r3
 8008e3c:	4770      	bx	lr

08008e3e <__sfputc_r>:
 8008e3e:	6893      	ldr	r3, [r2, #8]
 8008e40:	b410      	push	{r4}
 8008e42:	3b01      	subs	r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	da07      	bge.n	8008e5a <__sfputc_r+0x1c>
 8008e4a:	6994      	ldr	r4, [r2, #24]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	db01      	blt.n	8008e54 <__sfputc_r+0x16>
 8008e50:	290a      	cmp	r1, #10
 8008e52:	d102      	bne.n	8008e5a <__sfputc_r+0x1c>
 8008e54:	bc10      	pop	{r4}
 8008e56:	f000 b931 	b.w	80090bc <__swbuf_r>
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	1c58      	adds	r0, r3, #1
 8008e5e:	6010      	str	r0, [r2, #0]
 8008e60:	7019      	strb	r1, [r3, #0]
 8008e62:	4608      	mov	r0, r1
 8008e64:	bc10      	pop	{r4}
 8008e66:	4770      	bx	lr

08008e68 <__sfputs_r>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	4606      	mov	r6, r0
 8008e6c:	460f      	mov	r7, r1
 8008e6e:	4614      	mov	r4, r2
 8008e70:	18d5      	adds	r5, r2, r3
 8008e72:	42ac      	cmp	r4, r5
 8008e74:	d101      	bne.n	8008e7a <__sfputs_r+0x12>
 8008e76:	2000      	movs	r0, #0
 8008e78:	e007      	b.n	8008e8a <__sfputs_r+0x22>
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4630      	mov	r0, r6
 8008e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e82:	f7ff ffdc 	bl	8008e3e <__sfputc_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	d1f3      	bne.n	8008e72 <__sfputs_r+0xa>
 8008e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e8c <_vfiprintf_r>:
 8008e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e90:	460d      	mov	r5, r1
 8008e92:	4614      	mov	r4, r2
 8008e94:	4698      	mov	r8, r3
 8008e96:	4606      	mov	r6, r0
 8008e98:	b09d      	sub	sp, #116	@ 0x74
 8008e9a:	b118      	cbz	r0, 8008ea4 <_vfiprintf_r+0x18>
 8008e9c:	6a03      	ldr	r3, [r0, #32]
 8008e9e:	b90b      	cbnz	r3, 8008ea4 <_vfiprintf_r+0x18>
 8008ea0:	f7fc fe04 	bl	8005aac <__sinit>
 8008ea4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ea6:	07d9      	lsls	r1, r3, #31
 8008ea8:	d405      	bmi.n	8008eb6 <_vfiprintf_r+0x2a>
 8008eaa:	89ab      	ldrh	r3, [r5, #12]
 8008eac:	059a      	lsls	r2, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_vfiprintf_r+0x2a>
 8008eb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eb2:	f7fc ff14 	bl	8005cde <__retarget_lock_acquire_recursive>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	071b      	lsls	r3, r3, #28
 8008eba:	d501      	bpl.n	8008ec0 <_vfiprintf_r+0x34>
 8008ebc:	692b      	ldr	r3, [r5, #16]
 8008ebe:	b99b      	cbnz	r3, 8008ee8 <_vfiprintf_r+0x5c>
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f000 f938 	bl	8009138 <__swsetup_r>
 8008ec8:	b170      	cbz	r0, 8008ee8 <_vfiprintf_r+0x5c>
 8008eca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ecc:	07dc      	lsls	r4, r3, #31
 8008ece:	d504      	bpl.n	8008eda <_vfiprintf_r+0x4e>
 8008ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed4:	b01d      	add	sp, #116	@ 0x74
 8008ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	0598      	lsls	r0, r3, #22
 8008ede:	d4f7      	bmi.n	8008ed0 <_vfiprintf_r+0x44>
 8008ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ee2:	f7fc fefd 	bl	8005ce0 <__retarget_lock_release_recursive>
 8008ee6:	e7f3      	b.n	8008ed0 <_vfiprintf_r+0x44>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eec:	2320      	movs	r3, #32
 8008eee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ef2:	2330      	movs	r3, #48	@ 0x30
 8008ef4:	f04f 0901 	mov.w	r9, #1
 8008ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008efc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80090a8 <_vfiprintf_r+0x21c>
 8008f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f04:	4623      	mov	r3, r4
 8008f06:	469a      	mov	sl, r3
 8008f08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f0c:	b10a      	cbz	r2, 8008f12 <_vfiprintf_r+0x86>
 8008f0e:	2a25      	cmp	r2, #37	@ 0x25
 8008f10:	d1f9      	bne.n	8008f06 <_vfiprintf_r+0x7a>
 8008f12:	ebba 0b04 	subs.w	fp, sl, r4
 8008f16:	d00b      	beq.n	8008f30 <_vfiprintf_r+0xa4>
 8008f18:	465b      	mov	r3, fp
 8008f1a:	4622      	mov	r2, r4
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f7ff ffa2 	bl	8008e68 <__sfputs_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	f000 80a7 	beq.w	8009078 <_vfiprintf_r+0x1ec>
 8008f2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f2c:	445a      	add	r2, fp
 8008f2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f30:	f89a 3000 	ldrb.w	r3, [sl]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 809f 	beq.w	8009078 <_vfiprintf_r+0x1ec>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f44:	f10a 0a01 	add.w	sl, sl, #1
 8008f48:	9304      	str	r3, [sp, #16]
 8008f4a:	9307      	str	r3, [sp, #28]
 8008f4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f50:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f52:	4654      	mov	r4, sl
 8008f54:	2205      	movs	r2, #5
 8008f56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5a:	4853      	ldr	r0, [pc, #332]	@ (80090a8 <_vfiprintf_r+0x21c>)
 8008f5c:	f7fc fec1 	bl	8005ce2 <memchr>
 8008f60:	9a04      	ldr	r2, [sp, #16]
 8008f62:	b9d8      	cbnz	r0, 8008f9c <_vfiprintf_r+0x110>
 8008f64:	06d1      	lsls	r1, r2, #27
 8008f66:	bf44      	itt	mi
 8008f68:	2320      	movmi	r3, #32
 8008f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f6e:	0713      	lsls	r3, r2, #28
 8008f70:	bf44      	itt	mi
 8008f72:	232b      	movmi	r3, #43	@ 0x2b
 8008f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f78:	f89a 3000 	ldrb.w	r3, [sl]
 8008f7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f7e:	d015      	beq.n	8008fac <_vfiprintf_r+0x120>
 8008f80:	4654      	mov	r4, sl
 8008f82:	2000      	movs	r0, #0
 8008f84:	f04f 0c0a 	mov.w	ip, #10
 8008f88:	9a07      	ldr	r2, [sp, #28]
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f90:	3b30      	subs	r3, #48	@ 0x30
 8008f92:	2b09      	cmp	r3, #9
 8008f94:	d94b      	bls.n	800902e <_vfiprintf_r+0x1a2>
 8008f96:	b1b0      	cbz	r0, 8008fc6 <_vfiprintf_r+0x13a>
 8008f98:	9207      	str	r2, [sp, #28]
 8008f9a:	e014      	b.n	8008fc6 <_vfiprintf_r+0x13a>
 8008f9c:	eba0 0308 	sub.w	r3, r0, r8
 8008fa0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	46a2      	mov	sl, r4
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	e7d2      	b.n	8008f52 <_vfiprintf_r+0xc6>
 8008fac:	9b03      	ldr	r3, [sp, #12]
 8008fae:	1d19      	adds	r1, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	9103      	str	r1, [sp, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfbb      	ittet	lt
 8008fb8:	425b      	neglt	r3, r3
 8008fba:	f042 0202 	orrlt.w	r2, r2, #2
 8008fbe:	9307      	strge	r3, [sp, #28]
 8008fc0:	9307      	strlt	r3, [sp, #28]
 8008fc2:	bfb8      	it	lt
 8008fc4:	9204      	strlt	r2, [sp, #16]
 8008fc6:	7823      	ldrb	r3, [r4, #0]
 8008fc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fca:	d10a      	bne.n	8008fe2 <_vfiprintf_r+0x156>
 8008fcc:	7863      	ldrb	r3, [r4, #1]
 8008fce:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fd0:	d132      	bne.n	8009038 <_vfiprintf_r+0x1ac>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	3402      	adds	r4, #2
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	9203      	str	r2, [sp, #12]
 8008fdc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fe0:	9305      	str	r3, [sp, #20]
 8008fe2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80090ac <_vfiprintf_r+0x220>
 8008fe6:	2203      	movs	r2, #3
 8008fe8:	4650      	mov	r0, sl
 8008fea:	7821      	ldrb	r1, [r4, #0]
 8008fec:	f7fc fe79 	bl	8005ce2 <memchr>
 8008ff0:	b138      	cbz	r0, 8009002 <_vfiprintf_r+0x176>
 8008ff2:	2240      	movs	r2, #64	@ 0x40
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	eba0 000a 	sub.w	r0, r0, sl
 8008ffa:	4082      	lsls	r2, r0
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	3401      	adds	r4, #1
 8009000:	9304      	str	r3, [sp, #16]
 8009002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009006:	2206      	movs	r2, #6
 8009008:	4829      	ldr	r0, [pc, #164]	@ (80090b0 <_vfiprintf_r+0x224>)
 800900a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800900e:	f7fc fe68 	bl	8005ce2 <memchr>
 8009012:	2800      	cmp	r0, #0
 8009014:	d03f      	beq.n	8009096 <_vfiprintf_r+0x20a>
 8009016:	4b27      	ldr	r3, [pc, #156]	@ (80090b4 <_vfiprintf_r+0x228>)
 8009018:	bb1b      	cbnz	r3, 8009062 <_vfiprintf_r+0x1d6>
 800901a:	9b03      	ldr	r3, [sp, #12]
 800901c:	3307      	adds	r3, #7
 800901e:	f023 0307 	bic.w	r3, r3, #7
 8009022:	3308      	adds	r3, #8
 8009024:	9303      	str	r3, [sp, #12]
 8009026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009028:	443b      	add	r3, r7
 800902a:	9309      	str	r3, [sp, #36]	@ 0x24
 800902c:	e76a      	b.n	8008f04 <_vfiprintf_r+0x78>
 800902e:	460c      	mov	r4, r1
 8009030:	2001      	movs	r0, #1
 8009032:	fb0c 3202 	mla	r2, ip, r2, r3
 8009036:	e7a8      	b.n	8008f8a <_vfiprintf_r+0xfe>
 8009038:	2300      	movs	r3, #0
 800903a:	f04f 0c0a 	mov.w	ip, #10
 800903e:	4619      	mov	r1, r3
 8009040:	3401      	adds	r4, #1
 8009042:	9305      	str	r3, [sp, #20]
 8009044:	4620      	mov	r0, r4
 8009046:	f810 2b01 	ldrb.w	r2, [r0], #1
 800904a:	3a30      	subs	r2, #48	@ 0x30
 800904c:	2a09      	cmp	r2, #9
 800904e:	d903      	bls.n	8009058 <_vfiprintf_r+0x1cc>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d0c6      	beq.n	8008fe2 <_vfiprintf_r+0x156>
 8009054:	9105      	str	r1, [sp, #20]
 8009056:	e7c4      	b.n	8008fe2 <_vfiprintf_r+0x156>
 8009058:	4604      	mov	r4, r0
 800905a:	2301      	movs	r3, #1
 800905c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009060:	e7f0      	b.n	8009044 <_vfiprintf_r+0x1b8>
 8009062:	ab03      	add	r3, sp, #12
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	462a      	mov	r2, r5
 8009068:	4630      	mov	r0, r6
 800906a:	4b13      	ldr	r3, [pc, #76]	@ (80090b8 <_vfiprintf_r+0x22c>)
 800906c:	a904      	add	r1, sp, #16
 800906e:	f7fb fecb 	bl	8004e08 <_printf_float>
 8009072:	4607      	mov	r7, r0
 8009074:	1c78      	adds	r0, r7, #1
 8009076:	d1d6      	bne.n	8009026 <_vfiprintf_r+0x19a>
 8009078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800907a:	07d9      	lsls	r1, r3, #31
 800907c:	d405      	bmi.n	800908a <_vfiprintf_r+0x1fe>
 800907e:	89ab      	ldrh	r3, [r5, #12]
 8009080:	059a      	lsls	r2, r3, #22
 8009082:	d402      	bmi.n	800908a <_vfiprintf_r+0x1fe>
 8009084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009086:	f7fc fe2b 	bl	8005ce0 <__retarget_lock_release_recursive>
 800908a:	89ab      	ldrh	r3, [r5, #12]
 800908c:	065b      	lsls	r3, r3, #25
 800908e:	f53f af1f 	bmi.w	8008ed0 <_vfiprintf_r+0x44>
 8009092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009094:	e71e      	b.n	8008ed4 <_vfiprintf_r+0x48>
 8009096:	ab03      	add	r3, sp, #12
 8009098:	9300      	str	r3, [sp, #0]
 800909a:	462a      	mov	r2, r5
 800909c:	4630      	mov	r0, r6
 800909e:	4b06      	ldr	r3, [pc, #24]	@ (80090b8 <_vfiprintf_r+0x22c>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	f7fc f94f 	bl	8005344 <_printf_i>
 80090a6:	e7e4      	b.n	8009072 <_vfiprintf_r+0x1e6>
 80090a8:	08009743 	.word	0x08009743
 80090ac:	08009749 	.word	0x08009749
 80090b0:	0800974d 	.word	0x0800974d
 80090b4:	08004e09 	.word	0x08004e09
 80090b8:	08008e69 	.word	0x08008e69

080090bc <__swbuf_r>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	460e      	mov	r6, r1
 80090c0:	4614      	mov	r4, r2
 80090c2:	4605      	mov	r5, r0
 80090c4:	b118      	cbz	r0, 80090ce <__swbuf_r+0x12>
 80090c6:	6a03      	ldr	r3, [r0, #32]
 80090c8:	b90b      	cbnz	r3, 80090ce <__swbuf_r+0x12>
 80090ca:	f7fc fcef 	bl	8005aac <__sinit>
 80090ce:	69a3      	ldr	r3, [r4, #24]
 80090d0:	60a3      	str	r3, [r4, #8]
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	071a      	lsls	r2, r3, #28
 80090d6:	d501      	bpl.n	80090dc <__swbuf_r+0x20>
 80090d8:	6923      	ldr	r3, [r4, #16]
 80090da:	b943      	cbnz	r3, 80090ee <__swbuf_r+0x32>
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f82a 	bl	8009138 <__swsetup_r>
 80090e4:	b118      	cbz	r0, 80090ee <__swbuf_r+0x32>
 80090e6:	f04f 37ff 	mov.w	r7, #4294967295
 80090ea:	4638      	mov	r0, r7
 80090ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	b2f6      	uxtb	r6, r6
 80090f4:	1a98      	subs	r0, r3, r2
 80090f6:	6963      	ldr	r3, [r4, #20]
 80090f8:	4637      	mov	r7, r6
 80090fa:	4283      	cmp	r3, r0
 80090fc:	dc05      	bgt.n	800910a <__swbuf_r+0x4e>
 80090fe:	4621      	mov	r1, r4
 8009100:	4628      	mov	r0, r5
 8009102:	f7ff fa5f 	bl	80085c4 <_fflush_r>
 8009106:	2800      	cmp	r0, #0
 8009108:	d1ed      	bne.n	80090e6 <__swbuf_r+0x2a>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	3b01      	subs	r3, #1
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	701e      	strb	r6, [r3, #0]
 8009118:	6962      	ldr	r2, [r4, #20]
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	429a      	cmp	r2, r3
 800911e:	d004      	beq.n	800912a <__swbuf_r+0x6e>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	07db      	lsls	r3, r3, #31
 8009124:	d5e1      	bpl.n	80090ea <__swbuf_r+0x2e>
 8009126:	2e0a      	cmp	r6, #10
 8009128:	d1df      	bne.n	80090ea <__swbuf_r+0x2e>
 800912a:	4621      	mov	r1, r4
 800912c:	4628      	mov	r0, r5
 800912e:	f7ff fa49 	bl	80085c4 <_fflush_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d0d9      	beq.n	80090ea <__swbuf_r+0x2e>
 8009136:	e7d6      	b.n	80090e6 <__swbuf_r+0x2a>

08009138 <__swsetup_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4b29      	ldr	r3, [pc, #164]	@ (80091e0 <__swsetup_r+0xa8>)
 800913c:	4605      	mov	r5, r0
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	460c      	mov	r4, r1
 8009142:	b118      	cbz	r0, 800914c <__swsetup_r+0x14>
 8009144:	6a03      	ldr	r3, [r0, #32]
 8009146:	b90b      	cbnz	r3, 800914c <__swsetup_r+0x14>
 8009148:	f7fc fcb0 	bl	8005aac <__sinit>
 800914c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009150:	0719      	lsls	r1, r3, #28
 8009152:	d422      	bmi.n	800919a <__swsetup_r+0x62>
 8009154:	06da      	lsls	r2, r3, #27
 8009156:	d407      	bmi.n	8009168 <__swsetup_r+0x30>
 8009158:	2209      	movs	r2, #9
 800915a:	602a      	str	r2, [r5, #0]
 800915c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	e033      	b.n	80091d0 <__swsetup_r+0x98>
 8009168:	0758      	lsls	r0, r3, #29
 800916a:	d512      	bpl.n	8009192 <__swsetup_r+0x5a>
 800916c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800916e:	b141      	cbz	r1, 8009182 <__swsetup_r+0x4a>
 8009170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009174:	4299      	cmp	r1, r3
 8009176:	d002      	beq.n	800917e <__swsetup_r+0x46>
 8009178:	4628      	mov	r0, r5
 800917a:	f7fd fc31 	bl	80069e0 <_free_r>
 800917e:	2300      	movs	r3, #0
 8009180:	6363      	str	r3, [r4, #52]	@ 0x34
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	2300      	movs	r3, #0
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0308 	orr.w	r3, r3, #8
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	b94b      	cbnz	r3, 80091b2 <__swsetup_r+0x7a>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a8:	d003      	beq.n	80091b2 <__swsetup_r+0x7a>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f000 f882 	bl	80092b6 <__smakebuf_r>
 80091b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b6:	f013 0201 	ands.w	r2, r3, #1
 80091ba:	d00a      	beq.n	80091d2 <__swsetup_r+0x9a>
 80091bc:	2200      	movs	r2, #0
 80091be:	60a2      	str	r2, [r4, #8]
 80091c0:	6962      	ldr	r2, [r4, #20]
 80091c2:	4252      	negs	r2, r2
 80091c4:	61a2      	str	r2, [r4, #24]
 80091c6:	6922      	ldr	r2, [r4, #16]
 80091c8:	b942      	cbnz	r2, 80091dc <__swsetup_r+0xa4>
 80091ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ce:	d1c5      	bne.n	800915c <__swsetup_r+0x24>
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	0799      	lsls	r1, r3, #30
 80091d4:	bf58      	it	pl
 80091d6:	6962      	ldrpl	r2, [r4, #20]
 80091d8:	60a2      	str	r2, [r4, #8]
 80091da:	e7f4      	b.n	80091c6 <__swsetup_r+0x8e>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7f7      	b.n	80091d0 <__swsetup_r+0x98>
 80091e0:	20000018 	.word	0x20000018

080091e4 <_raise_r>:
 80091e4:	291f      	cmp	r1, #31
 80091e6:	b538      	push	{r3, r4, r5, lr}
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	d904      	bls.n	80091f8 <_raise_r+0x14>
 80091ee:	2316      	movs	r3, #22
 80091f0:	6003      	str	r3, [r0, #0]
 80091f2:	f04f 30ff 	mov.w	r0, #4294967295
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091fa:	b112      	cbz	r2, 8009202 <_raise_r+0x1e>
 80091fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009200:	b94b      	cbnz	r3, 8009216 <_raise_r+0x32>
 8009202:	4628      	mov	r0, r5
 8009204:	f000 f830 	bl	8009268 <_getpid_r>
 8009208:	4622      	mov	r2, r4
 800920a:	4601      	mov	r1, r0
 800920c:	4628      	mov	r0, r5
 800920e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009212:	f000 b817 	b.w	8009244 <_kill_r>
 8009216:	2b01      	cmp	r3, #1
 8009218:	d00a      	beq.n	8009230 <_raise_r+0x4c>
 800921a:	1c59      	adds	r1, r3, #1
 800921c:	d103      	bne.n	8009226 <_raise_r+0x42>
 800921e:	2316      	movs	r3, #22
 8009220:	6003      	str	r3, [r0, #0]
 8009222:	2001      	movs	r0, #1
 8009224:	e7e7      	b.n	80091f6 <_raise_r+0x12>
 8009226:	2100      	movs	r1, #0
 8009228:	4620      	mov	r0, r4
 800922a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800922e:	4798      	blx	r3
 8009230:	2000      	movs	r0, #0
 8009232:	e7e0      	b.n	80091f6 <_raise_r+0x12>

08009234 <raise>:
 8009234:	4b02      	ldr	r3, [pc, #8]	@ (8009240 <raise+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f7ff bfd3 	b.w	80091e4 <_raise_r>
 800923e:	bf00      	nop
 8009240:	20000018 	.word	0x20000018

08009244 <_kill_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	4d06      	ldr	r5, [pc, #24]	@ (8009264 <_kill_r+0x20>)
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	f7f8 fed2 	bl	8001ffa <_kill>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d102      	bne.n	8009260 <_kill_r+0x1c>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b103      	cbz	r3, 8009260 <_kill_r+0x1c>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	200008fc 	.word	0x200008fc

08009268 <_getpid_r>:
 8009268:	f7f8 bec0 	b.w	8001fec <_getpid>

0800926c <__swhatbuf_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	4615      	mov	r5, r2
 8009276:	2900      	cmp	r1, #0
 8009278:	461e      	mov	r6, r3
 800927a:	b096      	sub	sp, #88	@ 0x58
 800927c:	da0c      	bge.n	8009298 <__swhatbuf_r+0x2c>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	2100      	movs	r1, #0
 8009282:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009286:	bf14      	ite	ne
 8009288:	2340      	movne	r3, #64	@ 0x40
 800928a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800928e:	2000      	movs	r0, #0
 8009290:	6031      	str	r1, [r6, #0]
 8009292:	602b      	str	r3, [r5, #0]
 8009294:	b016      	add	sp, #88	@ 0x58
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	466a      	mov	r2, sp
 800929a:	f000 f849 	bl	8009330 <_fstat_r>
 800929e:	2800      	cmp	r0, #0
 80092a0:	dbed      	blt.n	800927e <__swhatbuf_r+0x12>
 80092a2:	9901      	ldr	r1, [sp, #4]
 80092a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092ac:	4259      	negs	r1, r3
 80092ae:	4159      	adcs	r1, r3
 80092b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b4:	e7eb      	b.n	800928e <__swhatbuf_r+0x22>

080092b6 <__smakebuf_r>:
 80092b6:	898b      	ldrh	r3, [r1, #12]
 80092b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ba:	079d      	lsls	r5, r3, #30
 80092bc:	4606      	mov	r6, r0
 80092be:	460c      	mov	r4, r1
 80092c0:	d507      	bpl.n	80092d2 <__smakebuf_r+0x1c>
 80092c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	6123      	str	r3, [r4, #16]
 80092ca:	2301      	movs	r3, #1
 80092cc:	6163      	str	r3, [r4, #20]
 80092ce:	b003      	add	sp, #12
 80092d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d2:	466a      	mov	r2, sp
 80092d4:	ab01      	add	r3, sp, #4
 80092d6:	f7ff ffc9 	bl	800926c <__swhatbuf_r>
 80092da:	9f00      	ldr	r7, [sp, #0]
 80092dc:	4605      	mov	r5, r0
 80092de:	4639      	mov	r1, r7
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7fd fbef 	bl	8006ac4 <_malloc_r>
 80092e6:	b948      	cbnz	r0, 80092fc <__smakebuf_r+0x46>
 80092e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ec:	059a      	lsls	r2, r3, #22
 80092ee:	d4ee      	bmi.n	80092ce <__smakebuf_r+0x18>
 80092f0:	f023 0303 	bic.w	r3, r3, #3
 80092f4:	f043 0302 	orr.w	r3, r3, #2
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	e7e2      	b.n	80092c2 <__smakebuf_r+0xc>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	b15b      	cbz	r3, 8009326 <__smakebuf_r+0x70>
 800930e:	4630      	mov	r0, r6
 8009310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009314:	f000 f81e 	bl	8009354 <_isatty_r>
 8009318:	b128      	cbz	r0, 8009326 <__smakebuf_r+0x70>
 800931a:	89a3      	ldrh	r3, [r4, #12]
 800931c:	f023 0303 	bic.w	r3, r3, #3
 8009320:	f043 0301 	orr.w	r3, r3, #1
 8009324:	81a3      	strh	r3, [r4, #12]
 8009326:	89a3      	ldrh	r3, [r4, #12]
 8009328:	431d      	orrs	r5, r3
 800932a:	81a5      	strh	r5, [r4, #12]
 800932c:	e7cf      	b.n	80092ce <__smakebuf_r+0x18>
	...

08009330 <_fstat_r>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	2300      	movs	r3, #0
 8009334:	4d06      	ldr	r5, [pc, #24]	@ (8009350 <_fstat_r+0x20>)
 8009336:	4604      	mov	r4, r0
 8009338:	4608      	mov	r0, r1
 800933a:	4611      	mov	r1, r2
 800933c:	602b      	str	r3, [r5, #0]
 800933e:	f7f8 febb 	bl	80020b8 <_fstat>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	d102      	bne.n	800934c <_fstat_r+0x1c>
 8009346:	682b      	ldr	r3, [r5, #0]
 8009348:	b103      	cbz	r3, 800934c <_fstat_r+0x1c>
 800934a:	6023      	str	r3, [r4, #0]
 800934c:	bd38      	pop	{r3, r4, r5, pc}
 800934e:	bf00      	nop
 8009350:	200008fc 	.word	0x200008fc

08009354 <_isatty_r>:
 8009354:	b538      	push	{r3, r4, r5, lr}
 8009356:	2300      	movs	r3, #0
 8009358:	4d05      	ldr	r5, [pc, #20]	@ (8009370 <_isatty_r+0x1c>)
 800935a:	4604      	mov	r4, r0
 800935c:	4608      	mov	r0, r1
 800935e:	602b      	str	r3, [r5, #0]
 8009360:	f7f8 feb9 	bl	80020d6 <_isatty>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_isatty_r+0x1a>
 8009368:	682b      	ldr	r3, [r5, #0]
 800936a:	b103      	cbz	r3, 800936e <_isatty_r+0x1a>
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	200008fc 	.word	0x200008fc

08009374 <_init>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr

08009380 <_fini>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr
