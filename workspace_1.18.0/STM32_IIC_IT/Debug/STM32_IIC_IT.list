
STM32_IIC_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a150  0800a150  0000b150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0000b644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a64c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  200001dc  0800a828  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800a828  0000c3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b377  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ae  00000000  00000000  0001757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00019630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082c  00000000  00000000  0001a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185db  00000000  00000000  0001a8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5a6  00000000  00000000  00032ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086665  00000000  00000000  00041475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7ada  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f9c  00000000  00000000  000c7b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cbabc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a134 	.word	0x0800a134

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a134 	.word	0x0800a134

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Init>:
 */
//状态机
volatile  AHT20_State AHT20_STATE = FREE;
static uint8_t readBuffer[6] = {0};
void AHT20_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
    AHT20_STATE=INIT;
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <AHT20_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, "INIT_START", 10, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	220a      	movs	r2, #10
 80010a2:	4920      	ldr	r1, [pc, #128]	@ (8001124 <AHT20_Init+0x94>)
 80010a4:	4820      	ldr	r0, [pc, #128]	@ (8001128 <AHT20_Init+0x98>)
 80010a6:	f004 fb17 	bl	80056d8 <HAL_UART_Transmit>
  uint8_t readBuffer;
  HAL_Delay(40);
 80010aa:	2028      	movs	r0, #40	@ 0x28
 80010ac:	f000 fcda 	bl	8001a64 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 80010b0:	1dfa      	adds	r2, r7, #7
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	2170      	movs	r1, #112	@ 0x70
 80010bc:	481b      	ldr	r0, [pc, #108]	@ (800112c <AHT20_Init+0x9c>)
 80010be:	f001 fa7b 	bl	80025b8 <HAL_I2C_Master_Receive>
  if ((readBuffer & 0x08) == 0x00)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d11a      	bne.n	8001102 <AHT20_Init+0x72>
  {
	  HAL_UART_Transmit(&huart2, "INIT_SUCCESS", 12, HAL_MAX_DELAY);
 80010cc:	f04f 33ff 	mov.w	r3, #4294967295
 80010d0:	220c      	movs	r2, #12
 80010d2:	4917      	ldr	r1, [pc, #92]	@ (8001130 <AHT20_Init+0xa0>)
 80010d4:	4814      	ldr	r0, [pc, #80]	@ (8001128 <AHT20_Init+0x98>)
 80010d6:	f004 faff 	bl	80056d8 <HAL_UART_Transmit>
    uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};
 80010da:	4a16      	ldr	r2, [pc, #88]	@ (8001134 <AHT20_Init+0xa4>)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	4611      	mov	r1, r2
 80010e2:	8019      	strh	r1, [r3, #0]
 80010e4:	3302      	adds	r3, #2
 80010e6:	0c12      	lsrs	r2, r2, #16
 80010e8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 80010ea:	1d3a      	adds	r2, r7, #4
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2303      	movs	r3, #3
 80010f4:	2170      	movs	r1, #112	@ 0x70
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <AHT20_Init+0x9c>)
 80010f8:	f001 f960 	bl	80023bc <HAL_I2C_Master_Transmit>
      HAL_Delay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 fcb1 	bl	8001a64 <HAL_Delay>
  }
    AHT20_STATE=FREE;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <AHT20_Init+0x90>)
 8001104:	2206      	movs	r2, #6
 8001106:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, "INIT_COMPLETE", 13, HAL_MAX_DELAY);
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
 800110c:	220d      	movs	r2, #13
 800110e:	490a      	ldr	r1, [pc, #40]	@ (8001138 <AHT20_Init+0xa8>)
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <AHT20_Init+0x98>)
 8001112:	f004 fae1 	bl	80056d8 <HAL_UART_Transmit>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000
 8001124:	0800a150 	.word	0x0800a150
 8001128:	20000258 	.word	0x20000258
 800112c:	20000200 	.word	0x20000200
 8001130:	0800a15c 	.word	0x0800a15c
 8001134:	0800a17c 	.word	0x0800a17c
 8001138:	0800a16c 	.word	0x0800a16c

0800113c <AHT20_Measure>:
 * @param  Temperature: 存储获取到的温度
 * @param  Humidity: 存储获取到的湿度
 */

void AHT20_Measure()
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "MEASURE_START", 13, HAL_MAX_DELAY);
 8001140:	f04f 33ff 	mov.w	r3, #4294967295
 8001144:	220d      	movs	r2, #13
 8001146:	4909      	ldr	r1, [pc, #36]	@ (800116c <AHT20_Measure+0x30>)
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <AHT20_Measure+0x34>)
 800114a:	f004 fac5 	bl	80056d8 <HAL_UART_Transmit>
    AHT20_STATE=MEASURING;
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <AHT20_Measure+0x38>)
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
    static uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};
    //中断发送函数不会等待，有可能还没发送完成sendBuffer就已经被释放了，需要让它变成静态的避免发送错误数据
    HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDRESS, sendBuffer, 3);
 8001154:	2303      	movs	r3, #3
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <AHT20_Measure+0x3c>)
 8001158:	2170      	movs	r1, #112	@ 0x70
 800115a:	4808      	ldr	r0, [pc, #32]	@ (800117c <AHT20_Measure+0x40>)
 800115c:	f001 fc98 	bl	8002a90 <HAL_I2C_Master_Transmit_IT>
    HAL_Delay(75);
 8001160:	204b      	movs	r0, #75	@ 0x4b
 8001162:	f000 fc7f 	bl	8001a64 <HAL_Delay>

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0800a180 	.word	0x0800a180
 8001170:	20000258 	.word	0x20000258
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004
 800117c:	20000200 	.word	0x20000200

08001180 <AHT20_Get>:

void AHT20_Get()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, "GET_START", 9, HAL_MAX_DELAY);
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2209      	movs	r2, #9
 800118a:	490a      	ldr	r1, [pc, #40]	@ (80011b4 <AHT20_Get+0x34>)
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <AHT20_Get+0x38>)
 800118e:	f004 faa3 	bl	80056d8 <HAL_UART_Transmit>

    if(AHT20_STATE==MEASURE_DONE){
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <AHT20_Get+0x3c>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d108      	bne.n	80011ae <AHT20_Get+0x2e>
        AHT20_STATE=GETTING;
 800119c:	4b07      	ldr	r3, [pc, #28]	@ (80011bc <AHT20_Get+0x3c>)
 800119e:	2203      	movs	r2, #3
 80011a0:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_IT(&hi2c1, AHT20_ADDRESS, readBuffer, 6);
 80011a2:	2306      	movs	r3, #6
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <AHT20_Get+0x40>)
 80011a6:	2170      	movs	r1, #112	@ 0x70
 80011a8:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <AHT20_Get+0x44>)
 80011aa:	f001 fd11 	bl	8002bd0 <HAL_I2C_Master_Receive_IT>
    }


}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800a190 	.word	0x0800a190
 80011b8:	20000258 	.word	0x20000258
 80011bc:	20000000 	.word	0x20000000
 80011c0:	200001f8 	.word	0x200001f8
 80011c4:	20000200 	.word	0x20000200

080011c8 <AHT20_FIGURE>:
void AHT20_FIGURE(float *Temperature, float *Humidity)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	if (AHT20_STATE==GET_DONE) {
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <AHT20_FIGURE+0xc8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d14d      	bne.n	8001278 <AHT20_FIGURE+0xb0>

	        if ((readBuffer[0] & 0x80) == 0x00) {
 80011dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <AHT20_FIGURE+0xcc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b25b      	sxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db45      	blt.n	8001272 <AHT20_FIGURE+0xaa>
	            uint32_t data = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
	            data = ((uint32_t) readBuffer[3] >> 4) + ((uint32_t) readBuffer[2] << 4) + ((uint32_t) readBuffer[1] << 12);
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <AHT20_FIGURE+0xcc>)
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <AHT20_FIGURE+0xcc>)
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	441a      	add	r2, r3
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <AHT20_FIGURE+0xcc>)
 80011fe:	785b      	ldrb	r3, [r3, #1]
 8001200:	031b      	lsls	r3, r3, #12
 8001202:	4413      	add	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
	            *Humidity = data * 100.0f / (1 << 20);
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fd64 	bl	8000cd4 <__aeabi_ui2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4922      	ldr	r1, [pc, #136]	@ (8001298 <AHT20_FIGURE+0xd0>)
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fdb7 	bl	8000d84 <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe65 	bl	8000eec <__aeabi_fdiv>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	601a      	str	r2, [r3, #0]

	            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <AHT20_FIGURE+0xcc>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	041b      	lsls	r3, r3, #16
 8001230:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001234:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <AHT20_FIGURE+0xcc>)
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	4413      	add	r3, r2
	                   (uint32_t) readBuffer[5];
 800123c:	4a15      	ldr	r2, [pc, #84]	@ (8001294 <AHT20_FIGURE+0xcc>)
 800123e:	7952      	ldrb	r2, [r2, #5]
	            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 8001240:	4413      	add	r3, r2
 8001242:	60fb      	str	r3, [r7, #12]
	            *Temperature = data * 200.0f / (1 << 20) - 50;
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff fd45 	bl	8000cd4 <__aeabi_ui2f>
 800124a:	4603      	mov	r3, r0
 800124c:	4913      	ldr	r1, [pc, #76]	@ (800129c <AHT20_FIGURE+0xd4>)
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd98 	bl	8000d84 <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe46 	bl	8000eec <__aeabi_fdiv>
 8001260:	4603      	mov	r3, r0
 8001262:	490f      	ldr	r1, [pc, #60]	@ (80012a0 <AHT20_FIGURE+0xd8>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fc83 	bl	8000b70 <__aeabi_fsub>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	601a      	str	r2, [r3, #0]
	        }
	        AHT20_STATE=READY;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <AHT20_FIGURE+0xc8>)
 8001274:	2205      	movs	r2, #5
 8001276:	701a      	strb	r2, [r3, #0]
	    }
	HAL_UART_Transmit(&huart2, "READY", 5, HAL_MAX_DELAY);
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
 800127c:	2205      	movs	r2, #5
 800127e:	4909      	ldr	r1, [pc, #36]	@ (80012a4 <AHT20_FIGURE+0xdc>)
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <AHT20_FIGURE+0xe0>)
 8001282:	f004 fa29 	bl	80056d8 <HAL_UART_Transmit>

}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000
 8001294:	200001f8 	.word	0x200001f8
 8001298:	42c80000 	.word	0x42c80000
 800129c:	43480000 	.word	0x43480000
 80012a0:	42480000 	.word	0x42480000
 80012a4:	0800a19c 	.word	0x0800a19c
 80012a8:	20000258 	.word	0x20000258

080012ac <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a0b      	ldr	r2, [pc, #44]	@ (80012e4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d10f      	bne.n	80012dc <HAL_I2C_MasterTxCpltCallback+0x30>
        if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <HAL_I2C_MasterTxCpltCallback+0x38>)
 80012be:	f001 ff9b 	bl	80031f8 <HAL_I2C_GetState>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d106      	bne.n	80012d6 <HAL_I2C_MasterTxCpltCallback+0x2a>
        	HAL_UART_Transmit(&huart2, "MEASURE_COMPLETE", 16, HAL_MAX_DELAY);
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	2210      	movs	r2, #16
 80012ce:	4906      	ldr	r1, [pc, #24]	@ (80012e8 <HAL_I2C_MasterTxCpltCallback+0x3c>)
 80012d0:	4806      	ldr	r0, [pc, #24]	@ (80012ec <HAL_I2C_MasterTxCpltCallback+0x40>)
 80012d2:	f004 fa01 	bl	80056d8 <HAL_UART_Transmit>
        AHT20_STATE=MEASURE_DONE;
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_I2C_MasterTxCpltCallback+0x44>)
 80012d8:	2202      	movs	r2, #2
 80012da:	701a      	strb	r2, [r3, #0]
    }

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000200 	.word	0x20000200
 80012e8:	0800a1a4 	.word	0x0800a1a4
 80012ec:	20000258 	.word	0x20000258
 80012f0:	20000000 	.word	0x20000000

080012f4 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a0b      	ldr	r2, [pc, #44]	@ (800132c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d10f      	bne.n	8001324 <HAL_I2C_MasterRxCpltCallback+0x30>
        if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <HAL_I2C_MasterRxCpltCallback+0x38>)
 8001306:	f001 ff77 	bl	80031f8 <HAL_I2C_GetState>
 800130a:	4603      	mov	r3, r0
 800130c:	2b20      	cmp	r3, #32
 800130e:	d102      	bne.n	8001316 <HAL_I2C_MasterRxCpltCallback+0x22>
        AHT20_STATE=GET_DONE;
 8001310:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8001312:	2204      	movs	r2, #4
 8001314:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, "GET_COMPLETE", 12, HAL_MAX_DELAY);
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	220c      	movs	r2, #12
 800131c:	4905      	ldr	r1, [pc, #20]	@ (8001334 <HAL_I2C_MasterRxCpltCallback+0x40>)
 800131e:	4806      	ldr	r0, [pc, #24]	@ (8001338 <HAL_I2C_MasterRxCpltCallback+0x44>)
 8001320:	f004 f9da 	bl	80056d8 <HAL_UART_Transmit>
    }

}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000200 	.word	0x20000200
 8001330:	20000000 	.word	0x20000000
 8001334:	0800a1b8 	.word	0x0800a1b8
 8001338:	20000258 	.word	0x20000258

0800133c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_GPIO_Init+0x74>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a16      	ldr	r2, [pc, #88]	@ (80013b0 <MX_GPIO_Init+0x74>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_GPIO_Init+0x74>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_GPIO_Init+0x74>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <MX_GPIO_Init+0x74>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_GPIO_Init+0x74>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2102      	movs	r1, #2
 8001384:	480b      	ldr	r0, [pc, #44]	@ (80013b4 <MX_GPIO_Init+0x78>)
 8001386:	f000 fea9 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800138a:	2302      	movs	r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	4804      	ldr	r0, [pc, #16]	@ (80013b4 <MX_GPIO_Init+0x78>)
 80013a2:	f000 fd17 	bl	8001dd4 <HAL_GPIO_Init>

}
 80013a6:	bf00      	nop
 80013a8:	3718      	adds	r7, #24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40010c00 	.word	0x40010c00

080013b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <MX_I2C1_Init+0x54>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013c4:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_I2C1_Init+0x58>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_I2C1_Init+0x50>)
 80013f6:	f000 fe89 	bl	800210c <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 f8f3 	bl	80015ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000200 	.word	0x20000200
 800140c:	40005400 	.word	0x40005400
 8001410:	000186a0 	.word	0x000186a0

08001414 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <HAL_I2C_MspInit+0x90>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d133      	bne.n	800149c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144c:	23c0      	movs	r3, #192	@ 0xc0
 800144e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	4619      	mov	r1, r3
 800145e:	4813      	ldr	r0, [pc, #76]	@ (80014ac <HAL_I2C_MspInit+0x98>)
 8001460:	f000 fcb8 	bl	8001dd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a0f      	ldr	r2, [pc, #60]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 800146a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800146e:	61d3      	str	r3, [r2, #28]
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_I2C_MspInit+0x94>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	2100      	movs	r1, #0
 8001480:	201f      	movs	r0, #31
 8001482:	f000 fbea 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001486:	201f      	movs	r0, #31
 8001488:	f000 fc03 	bl	8001c92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800148c:	2200      	movs	r2, #0
 800148e:	2100      	movs	r1, #0
 8001490:	2020      	movs	r0, #32
 8001492:	f000 fbe2 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001496:	2020      	movs	r0, #32
 8001498:	f000 fbfb 	bl	8001c92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40005400 	.word	0x40005400
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010c00 	.word	0x40010c00

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b092      	sub	sp, #72	@ 0x48
 80014b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f000 fa73 	bl	80019a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f85b 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f7ff ff3d 	bl	800133c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014c2:	f7ff ff79 	bl	80013b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014c6:	f000 f9d1 	bl	800186c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  AHT20_Init();                // 初始化 AHT20
 80014ca:	f7ff fde1 	bl	8001090 <AHT20_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
      switch (AHT20_STATE) {
 80014ce:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <main+0xb8>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	3b02      	subs	r3, #2
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d843      	bhi.n	8001562 <main+0xb2>
 80014da:	a201      	add	r2, pc, #4	@ (adr r2, 80014e0 <main+0x30>)
 80014dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e0:	080014fb 	.word	0x080014fb
 80014e4:	08001563 	.word	0x08001563
 80014e8:	08001501 	.word	0x08001501
 80014ec:	08001513 	.word	0x08001513
 80014f0:	080014f5 	.word	0x080014f5
          case FREE:
              AHT20_Measure();
 80014f4:	f7ff fe22 	bl	800113c <AHT20_Measure>
              break;
 80014f8:	e034      	b.n	8001564 <main+0xb4>
          case MEASURE_DONE:
              AHT20_Get();
 80014fa:	f7ff fe41 	bl	8001180 <AHT20_Get>
              break;
 80014fe:	e031      	b.n	8001564 <main+0xb4>
          case GET_DONE:
        	  AHT20_FIGURE(&temperature, &humidity);
 8001500:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001504:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe5c 	bl	80011c8 <AHT20_FIGURE>
        	  break;
 8001510:	e028      	b.n	8001564 <main+0xb4>
          case READY: {
              sprintf(message, "温度: %.1f ℃, 湿度: %.1f %%\r\n", temperature, humidity);
 8001512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff87 	bl	8000428 <__aeabi_f2d>
 800151a:	4604      	mov	r4, r0
 800151c:	460d      	mov	r5, r1
 800151e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	1d38      	adds	r0, r7, #4
 800152c:	e9cd 2300 	strd	r2, r3, [sp]
 8001530:	4622      	mov	r2, r4
 8001532:	462b      	mov	r3, r5
 8001534:	490d      	ldr	r1, [pc, #52]	@ (800156c <main+0xbc>)
 8001536:	f005 f9c9 	bl	80068cc <siprintf>
              HAL_UART_Transmit(&huart2, (uint8_t *) message, strlen(message), HAL_MAX_DELAY);
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fe07 	bl	8000150 <strlen>
 8001542:	4603      	mov	r3, r0
 8001544:	b29a      	uxth	r2, r3
 8001546:	1d39      	adds	r1, r7, #4
 8001548:	f04f 33ff 	mov.w	r3, #4294967295
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <main+0xc0>)
 800154e:	f004 f8c3 	bl	80056d8 <HAL_UART_Transmit>
              HAL_Delay(1000);
 8001552:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001556:	f000 fa85 	bl	8001a64 <HAL_Delay>
              AHT20_STATE = FREE;
 800155a:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <main+0xb8>)
 800155c:	2206      	movs	r2, #6
 800155e:	701a      	strb	r2, [r3, #0]
              break;
 8001560:	e000      	b.n	8001564 <main+0xb4>
          }
          default:
              break;
 8001562:	bf00      	nop
      switch (AHT20_STATE) {
 8001564:	e7b3      	b.n	80014ce <main+0x1e>
 8001566:	bf00      	nop
 8001568:	20000000 	.word	0x20000000
 800156c:	0800a1c8 	.word	0x0800a1c8
 8001570:	20000258 	.word	0x20000258

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b090      	sub	sp, #64	@ 0x40
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	2228      	movs	r2, #40	@ 0x28
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f005 fa07 	bl	8006996 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001596:	2302      	movs	r3, #2
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159e:	2310      	movs	r3, #16
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a6:	f107 0318 	add.w	r3, r7, #24
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 fc34 	bl	8004e18 <HAL_RCC_OscConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015b6:	f000 f818 	bl	80015ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f003 fea2 	bl	800531c <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015de:	f000 f804 	bl	80015ea <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	@ 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ee:	b672      	cpsid	i
}
 80015f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f2:	bf00      	nop
 80015f4:	e7fd      	b.n	80015f2 <Error_Handler+0x8>
	...

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_MspInit+0x5c>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a14      	ldr	r2, [pc, #80]	@ (8001654 <HAL_MspInit+0x5c>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_MspInit+0x5c>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_MspInit+0x5c>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_MspInit+0x5c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_MspInit+0x5c>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_MspInit+0x60>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <HAL_MspInit+0x60>)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <NMI_Handler+0x4>

08001664 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <MemManage_Handler+0x4>

08001674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <UsageFault_Handler+0x4>

08001684 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ac:	f000 f9be 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <I2C1_EV_IRQHandler+0x10>)
 80016ba:	f001 fb31 	bl	8002d20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000200 	.word	0x20000200

080016c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <I2C1_ER_IRQHandler+0x10>)
 80016ce:	f001 fc98 	bl	8003002 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000200 	.word	0x20000200

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <_kill>:

int _kill(int pid, int sig)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016f4:	f005 f9a2 	bl	8006a3c <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2216      	movs	r2, #22
 80016fc:	601a      	str	r2, [r3, #0]
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_exit>:

void _exit (int status)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001712:	f04f 31ff 	mov.w	r1, #4294967295
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffe7 	bl	80016ea <_kill>
  while (1) {}    /* Make sure we hang here */
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
  }

  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
  }
  return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017b8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f005 f90a 	bl	8006a3c <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20005000 	.word	0x20005000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000254 	.word	0x20000254
 800185c:	200003f0 	.word	0x200003f0

08001860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	@ (80018bc <MX_USART2_UART_Init+0x50>)
 8001874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <MX_USART2_UART_Init+0x4c>)
 80018a4:	f003 fec8 	bl	8005638 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018ae:	f7ff fe9c 	bl	80015ea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000258 	.word	0x20000258
 80018bc:	40004400 	.word	0x40004400

080018c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 0310 	add.w	r3, r7, #16
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1b      	ldr	r2, [pc, #108]	@ (8001948 <HAL_UART_MspInit+0x88>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d12f      	bne.n	8001940 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018e0:	4b1a      	ldr	r3, [pc, #104]	@ (800194c <HAL_UART_MspInit+0x8c>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	4a19      	ldr	r2, [pc, #100]	@ (800194c <HAL_UART_MspInit+0x8c>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ea:	61d3      	str	r3, [r2, #28]
 80018ec:	4b17      	ldr	r3, [pc, #92]	@ (800194c <HAL_UART_MspInit+0x8c>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <HAL_UART_MspInit+0x8c>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	4a13      	ldr	r2, [pc, #76]	@ (800194c <HAL_UART_MspInit+0x8c>)
 80018fe:	f043 0304 	orr.w	r3, r3, #4
 8001902:	6193      	str	r3, [r2, #24]
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_UART_MspInit+0x8c>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 0304 	and.w	r3, r3, #4
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001910:	2304      	movs	r3, #4
 8001912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	4619      	mov	r1, r3
 8001922:	480b      	ldr	r0, [pc, #44]	@ (8001950 <HAL_UART_MspInit+0x90>)
 8001924:	f000 fa56 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001928:	2308      	movs	r3, #8
 800192a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <HAL_UART_MspInit+0x90>)
 800193c:	f000 fa4a 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40004400 	.word	0x40004400
 800194c:	40021000 	.word	0x40021000
 8001950:	40010800 	.word	0x40010800

08001954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001954:	f7ff ff84 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195a:	490c      	ldr	r1, [pc, #48]	@ (800198c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800195c:	4a0c      	ldr	r2, [pc, #48]	@ (8001990 <LoopFillZerobss+0x16>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a09      	ldr	r2, [pc, #36]	@ (8001994 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001970:	4c09      	ldr	r4, [pc, #36]	@ (8001998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800197e:	f005 f863 	bl	8006a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001982:	f7ff fd95 	bl	80014b0 <main>
  bx lr
 8001986:	4770      	bx	lr
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001990:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8001994:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001998:	200003f0 	.word	0x200003f0

0800199c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC1_2_IRQHandler>
	...

080019a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	@ (80019c8 <HAL_Init+0x28>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	@ (80019c8 <HAL_Init+0x28>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f947 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	200f      	movs	r0, #15
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fe1c 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40022000 	.word	0x40022000

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 f95f 	bl	8001cae <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 f927 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	@ (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000010 	.word	0x20000010
 8001a28:	2000000c 	.word	0x2000000c

08001a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_IncTick+0x1c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <HAL_IncTick+0x20>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a03      	ldr	r2, [pc, #12]	@ (8001a4c <HAL_IncTick+0x20>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	20000010 	.word	0x20000010
 8001a4c:	200002a0 	.word	0x200002a0

08001a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b02      	ldr	r3, [pc, #8]	@ (8001a60 <HAL_GetTick+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	200002a0 	.word	0x200002a0

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff fff0 	bl	8001a50 <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffe0 	bl	8001a50 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000010 	.word	0x20000010

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4906      	ldr	r1, [pc, #24]	@ (8001b44 <__NVIC_EnableIRQ+0x34>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff90 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff2d 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c6c:	f7ff ff42 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff ff90 	bl	8001b9c <NVIC_EncodePriority>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff5f 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8a:	bf00      	nop
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff ff35 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ffa2 	bl	8001c00 <SysTick_Config>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d005      	beq.n	8001cec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e051      	b.n	8001d90 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 020e 	bic.w	r2, r2, #14
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0201 	bic.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a22      	ldr	r2, [pc, #136]	@ (8001d9c <HAL_DMA_Abort_IT+0xd4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d029      	beq.n	8001d6a <HAL_DMA_Abort_IT+0xa2>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a21      	ldr	r2, [pc, #132]	@ (8001da0 <HAL_DMA_Abort_IT+0xd8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <HAL_DMA_Abort_IT+0x9e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1f      	ldr	r2, [pc, #124]	@ (8001da4 <HAL_DMA_Abort_IT+0xdc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d01a      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x98>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001da8 <HAL_DMA_Abort_IT+0xe0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d012      	beq.n	8001d5a <HAL_DMA_Abort_IT+0x92>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	@ (8001dac <HAL_DMA_Abort_IT+0xe4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d00a      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x8c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_DMA_Abort_IT+0xe8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d102      	bne.n	8001d4e <HAL_DMA_Abort_IT+0x86>
 8001d48:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d4c:	e00e      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d52:	e00b      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d58:	e008      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d5e:	e005      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d64:	e002      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d66:	2310      	movs	r3, #16
 8001d68:	e000      	b.n	8001d6c <HAL_DMA_Abort_IT+0xa4>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4a11      	ldr	r2, [pc, #68]	@ (8001db4 <HAL_DMA_Abort_IT+0xec>)
 8001d6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
    } 
  }
  return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40020008 	.word	0x40020008
 8001da0:	4002001c 	.word	0x4002001c
 8001da4:	40020030 	.word	0x40020030
 8001da8:	40020044 	.word	0x40020044
 8001dac:	40020058 	.word	0x40020058
 8001db0:	4002006c 	.word	0x4002006c
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dc6:	b2db      	uxtb	r3, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	@ 0x2c
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001de2:	2300      	movs	r3, #0
 8001de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de6:	e169      	b.n	80020bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de8:	2201      	movs	r2, #1
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 8158 	bne.w	80020b6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4a9a      	ldr	r2, [pc, #616]	@ (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d05e      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e10:	4a98      	ldr	r2, [pc, #608]	@ (8002074 <HAL_GPIO_Init+0x2a0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d875      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e16:	4a98      	ldr	r2, [pc, #608]	@ (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d058      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e1c:	4a96      	ldr	r2, [pc, #600]	@ (8002078 <HAL_GPIO_Init+0x2a4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d86f      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e22:	4a96      	ldr	r2, [pc, #600]	@ (800207c <HAL_GPIO_Init+0x2a8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d052      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e28:	4a94      	ldr	r2, [pc, #592]	@ (800207c <HAL_GPIO_Init+0x2a8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d869      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e2e:	4a94      	ldr	r2, [pc, #592]	@ (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04c      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e34:	4a92      	ldr	r2, [pc, #584]	@ (8002080 <HAL_GPIO_Init+0x2ac>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d863      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e3a:	4a92      	ldr	r2, [pc, #584]	@ (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d046      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
 8001e40:	4a90      	ldr	r2, [pc, #576]	@ (8002084 <HAL_GPIO_Init+0x2b0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d85d      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d82a      	bhi.n	8001ea0 <HAL_GPIO_Init+0xcc>
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	d859      	bhi.n	8001f02 <HAL_GPIO_Init+0x12e>
 8001e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e54 <HAL_GPIO_Init+0x80>)
 8001e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e54:	08001ecf 	.word	0x08001ecf
 8001e58:	08001ea9 	.word	0x08001ea9
 8001e5c:	08001ebb 	.word	0x08001ebb
 8001e60:	08001efd 	.word	0x08001efd
 8001e64:	08001f03 	.word	0x08001f03
 8001e68:	08001f03 	.word	0x08001f03
 8001e6c:	08001f03 	.word	0x08001f03
 8001e70:	08001f03 	.word	0x08001f03
 8001e74:	08001f03 	.word	0x08001f03
 8001e78:	08001f03 	.word	0x08001f03
 8001e7c:	08001f03 	.word	0x08001f03
 8001e80:	08001f03 	.word	0x08001f03
 8001e84:	08001f03 	.word	0x08001f03
 8001e88:	08001f03 	.word	0x08001f03
 8001e8c:	08001f03 	.word	0x08001f03
 8001e90:	08001f03 	.word	0x08001f03
 8001e94:	08001f03 	.word	0x08001f03
 8001e98:	08001eb1 	.word	0x08001eb1
 8001e9c:	08001ec5 	.word	0x08001ec5
 8001ea0:	4a79      	ldr	r2, [pc, #484]	@ (8002088 <HAL_GPIO_Init+0x2b4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea6:	e02c      	b.n	8001f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e029      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	623b      	str	r3, [r7, #32]
          break;
 8001eb8:	e024      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	3308      	adds	r3, #8
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e01f      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	330c      	adds	r3, #12
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e01a      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e013      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	611a      	str	r2, [r3, #16]
          break;
 8001eee:	e009      	b.n	8001f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	615a      	str	r2, [r3, #20]
          break;
 8001efa:	e003      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001efc:	2300      	movs	r3, #0
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e000      	b.n	8001f04 <HAL_GPIO_Init+0x130>
          break;
 8001f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	@ 0xff
 8001f08:	d801      	bhi.n	8001f0e <HAL_GPIO_Init+0x13a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_Init+0x13e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2bff      	cmp	r3, #255	@ 0xff
 8001f18:	d802      	bhi.n	8001f20 <HAL_GPIO_Init+0x14c>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	e002      	b.n	8001f26 <HAL_GPIO_Init+0x152>
 8001f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f22:	3b08      	subs	r3, #8
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	fa01 f303 	lsl.w	r3, r1, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	401a      	ands	r2, r3
 8001f38:	6a39      	ldr	r1, [r7, #32]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80b1 	beq.w	80020b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f54:	4b4d      	ldr	r3, [pc, #308]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a4c      	ldr	r2, [pc, #304]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b4a      	ldr	r3, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x2b8>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f6c:	4a48      	ldr	r2, [pc, #288]	@ (8002090 <HAL_GPIO_Init+0x2bc>)
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	220f      	movs	r2, #15
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a40      	ldr	r2, [pc, #256]	@ (8002094 <HAL_GPIO_Init+0x2c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d013      	beq.n	8001fc0 <HAL_GPIO_Init+0x1ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3f      	ldr	r2, [pc, #252]	@ (8002098 <HAL_GPIO_Init+0x2c4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00d      	beq.n	8001fbc <HAL_GPIO_Init+0x1e8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3e      	ldr	r2, [pc, #248]	@ (800209c <HAL_GPIO_Init+0x2c8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d007      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e4>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	@ (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e006      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e004      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e002      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_GPIO_Init+0x1ee>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	0092      	lsls	r2, r2, #2
 8001fca:	4093      	lsls	r3, r2
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fd2:	492f      	ldr	r1, [pc, #188]	@ (8002090 <HAL_GPIO_Init+0x2bc>)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	3302      	adds	r3, #2
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fec:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	492c      	ldr	r1, [pc, #176]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	43db      	mvns	r3, r3
 8002002:	4928      	ldr	r1, [pc, #160]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002004:	4013      	ands	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002014:	4b23      	ldr	r3, [pc, #140]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	4922      	ldr	r1, [pc, #136]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	60cb      	str	r3, [r1, #12]
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002022:	4b20      	ldr	r3, [pc, #128]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	69bb      	ldr	r3, [r7, #24]
 8002028:	43db      	mvns	r3, r3
 800202a:	491e      	ldr	r1, [pc, #120]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800202c:	4013      	ands	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4918      	ldr	r1, [pc, #96]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800204a:	4b16      	ldr	r3, [pc, #88]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4914      	ldr	r1, [pc, #80]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002054:	4013      	ands	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d021      	beq.n	80020a8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
 8002070:	e021      	b.n	80020b6 <HAL_GPIO_Init+0x2e2>
 8002072:	bf00      	nop
 8002074:	10320000 	.word	0x10320000
 8002078:	10310000 	.word	0x10310000
 800207c:	10220000 	.word	0x10220000
 8002080:	10210000 	.word	0x10210000
 8002084:	10120000 	.word	0x10120000
 8002088:	10110000 	.word	0x10110000
 800208c:	40021000 	.word	0x40021000
 8002090:	40010000 	.word	0x40010000
 8002094:	40010800 	.word	0x40010800
 8002098:	40010c00 	.word	0x40010c00
 800209c:	40011000 	.word	0x40011000
 80020a0:	40011400 	.word	0x40011400
 80020a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	4909      	ldr	r1, [pc, #36]	@ (80020d8 <HAL_GPIO_Init+0x304>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	3301      	adds	r3, #1
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae8e 	bne.w	8001de8 <HAL_GPIO_Init+0x14>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	372c      	adds	r7, #44	@ 0x2c
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e12b      	b.n	8002376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff f96e 	bl	8001414 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2224      	movs	r2, #36	@ 0x24
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002170:	f003 fa1c 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8002174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a81      	ldr	r2, [pc, #516]	@ (8002380 <HAL_I2C_Init+0x274>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d807      	bhi.n	8002190 <HAL_I2C_Init+0x84>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a80      	ldr	r2, [pc, #512]	@ (8002384 <HAL_I2C_Init+0x278>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e006      	b.n	800219e <HAL_I2C_Init+0x92>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4a7d      	ldr	r2, [pc, #500]	@ (8002388 <HAL_I2C_Init+0x27c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	bf94      	ite	ls
 8002198:	2301      	movls	r3, #1
 800219a:	2300      	movhi	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0e7      	b.n	8002376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a78      	ldr	r2, [pc, #480]	@ (800238c <HAL_I2C_Init+0x280>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0c9b      	lsrs	r3, r3, #18
 80021b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002380 <HAL_I2C_Init+0x274>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d802      	bhi.n	80021e0 <HAL_I2C_Init+0xd4>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	3301      	adds	r3, #1
 80021de:	e009      	b.n	80021f4 <HAL_I2C_Init+0xe8>
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	4a69      	ldr	r2, [pc, #420]	@ (8002390 <HAL_I2C_Init+0x284>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	099b      	lsrs	r3, r3, #6
 80021f2:	3301      	adds	r3, #1
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	495c      	ldr	r1, [pc, #368]	@ (8002380 <HAL_I2C_Init+0x274>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d819      	bhi.n	8002248 <HAL_I2C_Init+0x13c>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e59      	subs	r1, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002228:	400b      	ands	r3, r1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_I2C_Init+0x138>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1e59      	subs	r1, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fbb1 f3f3 	udiv	r3, r1, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	e051      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002244:	2304      	movs	r3, #4
 8002246:	e04f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d111      	bne.n	8002274 <HAL_I2C_Init+0x168>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1e58      	subs	r0, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	440b      	add	r3, r1
 800225e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002262:	3301      	adds	r3, #1
 8002264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	e012      	b.n	800229a <HAL_I2C_Init+0x18e>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf0c      	ite	eq
 8002294:	2301      	moveq	r3, #1
 8002296:	2300      	movne	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x196>
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10e      	bne.n	80022c8 <HAL_I2C_Init+0x1bc>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1e58      	subs	r0, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	440b      	add	r3, r1
 80022b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c6:	e00f      	b.n	80022e8 <HAL_I2C_Init+0x1dc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	1e58      	subs	r0, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	0099      	lsls	r1, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	3301      	adds	r3, #1
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6911      	ldr	r1, [r2, #16]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	4311      	orrs	r1, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	430b      	orrs	r3, r1
 800232a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	000186a0 	.word	0x000186a0
 8002384:	001e847f 	.word	0x001e847f
 8002388:	003d08ff 	.word	0x003d08ff
 800238c:	431bde83 	.word	0x431bde83
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	2b80      	cmp	r3, #128	@ 0x80
 80023a8:	d103      	bne.n	80023b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  }
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	461a      	mov	r2, r3
 80023c8:	460b      	mov	r3, r1
 80023ca:	817b      	strh	r3, [r7, #10]
 80023cc:	4613      	mov	r3, r2
 80023ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023d0:	f7ff fb3e 	bl	8001a50 <HAL_GetTick>
 80023d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b20      	cmp	r3, #32
 80023e0:	f040 80e0 	bne.w	80025a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	2319      	movs	r3, #25
 80023ea:	2201      	movs	r2, #1
 80023ec:	4970      	ldr	r1, [pc, #448]	@ (80025b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f002 fa90 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0d3      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_I2C_Master_Transmit+0x50>
 8002408:	2302      	movs	r3, #2
 800240a:	e0cc      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d007      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	@ 0x21
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2210      	movs	r2, #16
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4a50      	ldr	r2, [pc, #320]	@ (80025b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002474:	8979      	ldrh	r1, [r7, #10]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6a3a      	ldr	r2, [r7, #32]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f002 f852 	bl	8004524 <I2C_MasterRequestWrite>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e08d      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024a0:	e066      	b.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	6a39      	ldr	r1, [r7, #32]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f002 fb4e 	bl	8004b48 <I2C_WaitOnTXEFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d107      	bne.n	80024ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	781a      	ldrb	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11b      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x188>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b00      	cmp	r3, #0
 8002512:	d017      	beq.n	8002544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	6a39      	ldr	r1, [r7, #32]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f002 fb45 	bl	8004bd8 <I2C_WaitOnBTFFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	2b04      	cmp	r3, #4
 800255a:	d107      	bne.n	800256c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e01a      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d194      	bne.n	80024a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025a4:	2302      	movs	r3, #2
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	00100002 	.word	0x00100002
 80025b4:	ffff0000 	.word	0xffff0000

080025b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08c      	sub	sp, #48	@ 0x30
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	607a      	str	r2, [r7, #4]
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	817b      	strh	r3, [r7, #10]
 80025c8:	4613      	mov	r3, r2
 80025ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fa3e 	bl	8001a50 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	f040 824b 	bne.w	8002a7a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2319      	movs	r3, #25
 80025ea:	2201      	movs	r2, #1
 80025ec:	497f      	ldr	r1, [pc, #508]	@ (80027ec <HAL_I2C_Master_Receive+0x234>)
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f002 f990 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
 80025fc:	e23e      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_I2C_Master_Receive+0x54>
 8002608:	2302      	movs	r3, #2
 800260a:	e237      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d007      	beq.n	8002632 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f042 0201 	orr.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002640:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2222      	movs	r2, #34	@ 0x22
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2210      	movs	r2, #16
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	893a      	ldrh	r2, [r7, #8]
 8002662:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4a5f      	ldr	r2, [pc, #380]	@ (80027f0 <HAL_I2C_Master_Receive+0x238>)
 8002672:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002674:	8979      	ldrh	r1, [r7, #10]
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f001 ffd4 	bl	8004628 <I2C_MasterRequestRead>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e1f8      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d113      	bne.n	80026ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e1cc      	b.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d11e      	bne.n	8002700 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026d2:	b672      	cpsid	i
}
 80026d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026fc:	b662      	cpsie	i
}
 80026fe:	e035      	b.n	800276c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	2b02      	cmp	r3, #2
 8002706:	d11e      	bne.n	8002746 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002716:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002742:	b662      	cpsie	i
}
 8002744:	e012      	b.n	800276c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002754:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800276c:	e172      	b.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	2b03      	cmp	r3, #3
 8002774:	f200 811f 	bhi.w	80029b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800277c:	2b01      	cmp	r3, #1
 800277e:	d123      	bne.n	80027c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002782:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f002 faa1 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e173      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027c6:	e145      	b.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d152      	bne.n	8002876 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d6:	2200      	movs	r2, #0
 80027d8:	4906      	ldr	r1, [pc, #24]	@ (80027f4 <HAL_I2C_Master_Receive+0x23c>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f002 f89a 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e148      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
 80027ea:	bf00      	nop
 80027ec:	00100002 	.word	0x00100002
 80027f0:	ffff0000 	.word	0xffff0000
 80027f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800280a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800283e:	b662      	cpsie	i
}
 8002840:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	3b01      	subs	r3, #1
 800286e:	b29a      	uxth	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002874:	e0ee      	b.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287c:	2200      	movs	r2, #0
 800287e:	4981      	ldr	r1, [pc, #516]	@ (8002a84 <HAL_I2C_Master_Receive+0x4cc>)
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f002 f847 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0f5      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800289e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a0:	b672      	cpsid	i
}
 80028a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a88 <HAL_I2C_Master_Receive+0x4d0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	08db      	lsrs	r3, r3, #3
 80028dc:	4a6b      	ldr	r2, [pc, #428]	@ (8002a8c <HAL_I2C_Master_Receive+0x4d4>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0a1a      	lsrs	r2, r3, #8
 80028e4:	4613      	mov	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	00da      	lsls	r2, r3, #3
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d118      	bne.n	800292e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f043 0220 	orr.w	r2, r3, #32
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800291e:	b662      	cpsie	i
}
 8002920:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0a6      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d1d9      	bne.n	80028f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800294a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800297e:	b662      	cpsie	i
}
 8002980:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029b4:	e04e      	b.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f002 f986 	bl	8004ccc <I2C_WaitOnRXNEFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e058      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d124      	bne.n	8002a54 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d107      	bne.n	8002a22 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f ae88 	bne.w	800276e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	@ 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	00010004 	.word	0x00010004
 8002a88:	20000008 	.word	0x20000008
 8002a8c:	14f8b589 	.word	0x14f8b589

08002a90 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	f040 8081 	bne.w	8002bb8 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002ab6:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_I2C_Master_Transmit_IT+0x134>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	4a42      	ldr	r2, [pc, #264]	@ (8002bc8 <HAL_I2C_Master_Transmit_IT+0x138>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	0a1a      	lsrs	r2, r3, #8
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009a      	lsls	r2, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d112      	bne.n	8002b02 <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af6:	f043 0220 	orr.w	r2, r3, #32
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e05b      	b.n	8002bba <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d0df      	beq.n	8002ad0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Master_Transmit_IT+0x8e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e04d      	b.n	8002bba <HAL_I2C_Master_Transmit_IT+0x12a>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d007      	beq.n	8002b44 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	@ 0x21
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2210      	movs	r2, #16
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	893a      	ldrh	r2, [r7, #8]
 8002b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_I2C_Master_Transmit_IT+0x13c>)
 8002b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002b86:	897a      	ldrh	r2, [r7, #10]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002ba2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bb2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	14f8b589 	.word	0x14f8b589
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
 8002be0:	4613      	mov	r3, r2
 8002be2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 8089 	bne.w	8002d08 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_I2C_Master_Receive_IT+0x144>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	08db      	lsrs	r3, r3, #3
 8002bfc:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <HAL_I2C_Master_Receive_IT+0x148>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	0a1a      	lsrs	r2, r3, #8
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009a      	lsls	r2, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d112      	bne.n	8002c42 <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e063      	b.n	8002d0a <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d0df      	beq.n	8002c10 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_I2C_Master_Receive_IT+0x8e>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e055      	b.n	8002d0a <HAL_I2C_Master_Receive_IT+0x13a>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d007      	beq.n	8002c84 <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2222      	movs	r2, #34	@ 0x22
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	893a      	ldrh	r2, [r7, #8]
 8002cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a16      	ldr	r2, [pc, #88]	@ (8002d1c <HAL_I2C_Master_Receive_IT+0x14c>)
 8002cc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002cc6:	897a      	ldrh	r2, [r7, #10]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d02:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	20000008 	.word	0x20000008
 8002d18:	14f8b589 	.word	0x14f8b589
 8002d1c:	ffff0000 	.word	0xffff0000

08002d20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d003      	beq.n	8002d58 <HAL_I2C_EV_IRQHandler+0x38>
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b40      	cmp	r3, #64	@ 0x40
 8002d54:	f040 80c1 	bne.w	8002eda <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10d      	bne.n	8002d8e <HAL_I2C_EV_IRQHandler+0x6e>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d78:	d003      	beq.n	8002d82 <HAL_I2C_EV_IRQHandler+0x62>
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_EV_IRQHandler+0x66>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <HAL_I2C_EV_IRQHandler+0x68>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f000 8132 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0x92>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	0a5b      	lsrs	r3, r3, #9
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f002 f81c 	bl	8004de2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd94 	bl	80038d8 <I2C_Master_SB>
 8002db0:	e092      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	08db      	lsrs	r3, r3, #3
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_I2C_EV_IRQHandler+0xb2>
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	0a5b      	lsrs	r3, r3, #9
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fe09 	bl	80039e2 <I2C_Master_ADD10>
 8002dd0:	e082      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	0a5b      	lsrs	r3, r3, #9
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fe22 	bl	8003a34 <I2C_Master_ADDR>
 8002df0:	e072      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03b      	beq.n	8002e76 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0c:	f000 80f3 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	09db      	lsrs	r3, r3, #7
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00f      	beq.n	8002e3c <HAL_I2C_EV_IRQHandler+0x11c>
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_I2C_EV_IRQHandler+0x11c>
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d103      	bne.n	8002e3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9ec 	bl	8003212 <I2C_MasterTransmit_TXE>
 8002e3a:	e04d      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80d6 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	0a5b      	lsrs	r3, r3, #9
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 80cf 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2b21      	cmp	r3, #33	@ 0x21
 8002e5c:	d103      	bne.n	8002e66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fa73 	bl	800334a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e64:	e0c7      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b40      	cmp	r3, #64	@ 0x40
 8002e6a:	f040 80c4 	bne.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fae1 	bl	8003436 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e74:	e0bf      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e84:	f000 80b7 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00f      	beq.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x194>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	0a9b      	lsrs	r3, r3, #10
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d009      	beq.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x194>
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fb5a 	bl	8003566 <I2C_MasterReceive_RXNE>
 8002eb2:	e011      	b.n	8002ed8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 809a 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	0a5b      	lsrs	r3, r3, #9
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8093 	beq.w	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 fc10 	bl	80036f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed6:	e08e      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ed8:	e08d      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	e007      	b.n	8002efc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <HAL_I2C_EV_IRQHandler+0x20e>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	0a5b      	lsrs	r3, r3, #9
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00c      	beq.n	8002f2e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f24:	69b9      	ldr	r1, [r7, #24]
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 ffdb 	bl	8003ee2 <I2C_Slave_ADDR>
 8002f2c:	e066      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_I2C_EV_IRQHandler+0x22e>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	0a5b      	lsrs	r3, r3, #9
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f001 f816 	bl	8003f78 <I2C_Slave_STOPF>
 8002f4c:	e056      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	2b21      	cmp	r3, #33	@ 0x21
 8002f52:	d002      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x23a>
 8002f54:	7bbb      	ldrb	r3, [r7, #14]
 8002f56:	2b29      	cmp	r3, #41	@ 0x29
 8002f58:	d125      	bne.n	8002fa6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	09db      	lsrs	r3, r3, #7
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00f      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x266>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	0a9b      	lsrs	r3, r3, #10
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_I2C_EV_IRQHandler+0x266>
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fef3 	bl	8003d6a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f84:	e039      	b.n	8002ffa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d033      	beq.n	8002ffa <HAL_I2C_EV_IRQHandler+0x2da>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	0a5b      	lsrs	r3, r3, #9
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d02d      	beq.n	8002ffa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 ff20 	bl	8003de4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa4:	e029      	b.n	8002ffa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00f      	beq.n	8002fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	0a9b      	lsrs	r3, r3, #10
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d009      	beq.n	8002fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	089b      	lsrs	r3, r3, #2
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 ff2a 	bl	8003e24 <I2C_SlaveReceive_RXNE>
 8002fd0:	e014      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	0a5b      	lsrs	r3, r3, #9
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 ff58 	bl	8003ea0 <I2C_SlaveReceive_BTF>
 8002ff0:	e004      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002ff2:	bf00      	nop
 8002ff4:	e002      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ffa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ffc:	3720      	adds	r7, #32
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b08a      	sub	sp, #40	@ 0x28
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003024:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_I2C_ER_IRQHandler+0x5e>
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800304e:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	0a5b      	lsrs	r3, r3, #9
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00e      	beq.n	800308a <HAL_I2C_ER_IRQHandler+0x88>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003088:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	0a9b      	lsrs	r3, r3, #10
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d03f      	beq.n	8003116 <HAL_I2C_ER_IRQHandler+0x114>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d039      	beq.n	8003116 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80030a2:	7efb      	ldrb	r3, [r7, #27]
 80030a4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030bc:	7ebb      	ldrb	r3, [r7, #26]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d112      	bne.n	80030e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10f      	bne.n	80030e8 <HAL_I2C_ER_IRQHandler+0xe6>
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b21      	cmp	r3, #33	@ 0x21
 80030cc:	d008      	beq.n	80030e0 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b29      	cmp	r3, #41	@ 0x29
 80030d2:	d005      	beq.n	80030e0 <HAL_I2C_ER_IRQHandler+0xde>
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	2b28      	cmp	r3, #40	@ 0x28
 80030d8:	d106      	bne.n	80030e8 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b21      	cmp	r3, #33	@ 0x21
 80030de:	d103      	bne.n	80030e8 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 f879 	bl	80041d8 <I2C_Slave_AF>
 80030e6:	e016      	b.n	8003116 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030f0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030fa:	7efb      	ldrb	r3, [r7, #27]
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d002      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x104>
 8003100:	7efb      	ldrb	r3, [r7, #27]
 8003102:	2b40      	cmp	r3, #64	@ 0x40
 8003104:	d107      	bne.n	8003116 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003114:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	0adb      	lsrs	r3, r3, #11
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00e      	beq.n	8003140 <HAL_I2C_ER_IRQHandler+0x13e>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d008      	beq.n	8003140 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	f043 0308 	orr.w	r3, r3, #8
 8003134:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800313e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	2b00      	cmp	r3, #0
 8003144:	d008      	beq.n	8003158 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f001 f8b4 	bl	80042c0 <I2C_ITError>
  }
}
 8003158:	bf00      	nop
 800315a:	3728      	adds	r7, #40	@ 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr

08003172 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
 8003190:	4613      	mov	r3, r2
 8003192:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003220:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003228:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003234:	2b00      	cmp	r3, #0
 8003236:	d150      	bne.n	80032da <I2C_MasterTransmit_TXE+0xc8>
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b21      	cmp	r3, #33	@ 0x21
 800323c:	d14d      	bne.n	80032da <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d01d      	beq.n	8003280 <I2C_MasterTransmit_TXE+0x6e>
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b20      	cmp	r3, #32
 8003248:	d01a      	beq.n	8003280 <I2C_MasterTransmit_TXE+0x6e>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003250:	d016      	beq.n	8003280 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003260:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2211      	movs	r2, #17
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fe f817 	bl	80012ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800327e:	e060      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800328e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d107      	bne.n	80032ca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff ff74 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032c8:	e03b      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd ffea 	bl	80012ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032d8:	e033      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d005      	beq.n	80032ec <I2C_MasterTransmit_TXE+0xda>
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d12d      	bne.n	8003342 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b22      	cmp	r3, #34	@ 0x22
 80032ea:	d12a      	bne.n	8003342 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d108      	bne.n	8003308 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003304:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003306:	e01c      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b40      	cmp	r3, #64	@ 0x40
 8003312:	d103      	bne.n	800331c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f88e 	bl	8003436 <I2C_MemoryTransmit_TXE_BTF>
}
 800331a:	e012      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	781a      	ldrb	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003340:	e7ff      	b.n	8003342 <I2C_MasterTransmit_TXE+0x130>
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b21      	cmp	r3, #33	@ 0x21
 8003362:	d164      	bne.n	800342e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d012      	beq.n	8003394 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	781a      	ldrb	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003392:	e04c      	b.n	800342e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b08      	cmp	r3, #8
 8003398:	d01d      	beq.n	80033d6 <I2C_MasterTransmit_BTF+0x8c>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b20      	cmp	r3, #32
 800339e:	d01a      	beq.n	80033d6 <I2C_MasterTransmit_BTF+0x8c>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033a6:	d016      	beq.n	80033d6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033b6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2211      	movs	r2, #17
 80033bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd ff6c 	bl	80012ac <HAL_I2C_MasterTxCpltCallback>
}
 80033d4:	e02b      	b.n	800342e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033e4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b40      	cmp	r3, #64	@ 0x40
 800340e:	d107      	bne.n	8003420 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fec9 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
}
 800341e:	e006      	b.n	800342e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fd ff3f 	bl	80012ac <HAL_I2C_MasterTxCpltCallback>
}
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003444:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11d      	bne.n	800348a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d10b      	bne.n	800346e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	b2da      	uxtb	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003466:	1c9a      	adds	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800346c:	e077      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	b29b      	uxth	r3, r3
 8003474:	121b      	asrs	r3, r3, #8
 8003476:	b2da      	uxtb	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003488:	e069      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10b      	bne.n	80034aa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80034a8:	e059      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d152      	bne.n	8003558 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	2b22      	cmp	r3, #34	@ 0x22
 80034b6:	d10d      	bne.n	80034d4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034c6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80034d2:	e044      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d015      	beq.n	800350a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	2b21      	cmp	r3, #33	@ 0x21
 80034e2:	d112      	bne.n	800350a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003508:	e029      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d124      	bne.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b21      	cmp	r3, #33	@ 0x21
 8003518:	d121      	bne.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003528:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003538:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff fe2d 	bl	80031b0 <HAL_I2C_MemTxCpltCallback>
}
 8003556:	e002      	b.n	800355e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe ff1b 	bl	8002394 <I2C_Flush_DR>
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b22      	cmp	r3, #34	@ 0x22
 8003578:	f040 80b9 	bne.w	80036ee <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d921      	bls.n	80035d4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	f040 8096 	bne.w	80036ee <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80035d2:	e08c      	b.n	80036ee <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d07f      	beq.n	80036dc <I2C_MasterReceive_RXNE+0x176>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d002      	beq.n	80035e8 <I2C_MasterReceive_RXNE+0x82>
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d179      	bne.n	80036dc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f001 fb3d 	bl	8004c68 <I2C_WaitOnSTOPRequestThroughIT>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d14c      	bne.n	800368e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003602:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003612:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b40      	cmp	r3, #64	@ 0x40
 800364c:	d10a      	bne.n	8003664 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fdb0 	bl	80031c2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003662:	e044      	b.n	80036ee <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d002      	beq.n	8003678 <I2C_MasterReceive_RXNE+0x112>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b20      	cmp	r3, #32
 8003676:	d103      	bne.n	8003680 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
 800367e:	e002      	b.n	8003686 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2212      	movs	r2, #18
 8003684:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fe34 	bl	80012f4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800368c:	e02f      	b.n	80036ee <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800369c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7ff fd7d 	bl	80031d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036da:	e008      	b.n	80036ee <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ea:	605a      	str	r2, [r3, #4]
}
 80036ec:	e7ff      	b.n	80036ee <I2C_MasterReceive_RXNE+0x188>
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b04      	cmp	r3, #4
 800370c:	d11b      	bne.n	8003746 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003744:	e0c4      	b.n	80038d0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d129      	bne.n	80037a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800375e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00a      	beq.n	800377c <I2C_MasterReceive_BTF+0x86>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d007      	beq.n	800377c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80037a2:	e095      	b.n	80038d0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d17d      	bne.n	80038aa <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d002      	beq.n	80037ba <I2C_MasterReceive_BTF+0xc4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d108      	bne.n	80037cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e016      	b.n	80037fa <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d002      	beq.n	80037d8 <I2C_MasterReceive_BTF+0xe2>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d108      	bne.n	80037ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e007      	b.n	80037fa <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003854:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	d10a      	bne.n	8003880 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fca2 	bl	80031c2 <HAL_I2C_MemRxCpltCallback>
}
 800387e:	e027      	b.n	80038d0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b08      	cmp	r3, #8
 800388c:	d002      	beq.n	8003894 <I2C_MasterReceive_BTF+0x19e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b20      	cmp	r3, #32
 8003892:	d103      	bne.n	800389c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	@ 0x30
 800389a:	e002      	b.n	80038a2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2212      	movs	r2, #18
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fd26 	bl	80012f4 <HAL_I2C_MasterRxCpltCallback>
}
 80038a8:	e012      	b.n	80038d0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691a      	ldr	r2, [r3, #16]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038d0:	bf00      	nop
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b40      	cmp	r3, #64	@ 0x40
 80038ea:	d117      	bne.n	800391c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003904:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003906:	e067      	b.n	80039d8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]
}
 800391a:	e05d      	b.n	80039d8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003924:	d133      	bne.n	800398e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b21      	cmp	r3, #33	@ 0x21
 8003930:	d109      	bne.n	8003946 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003942:	611a      	str	r2, [r3, #16]
 8003944:	e008      	b.n	8003958 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	b2da      	uxtb	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <I2C_Master_SB+0x92>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396e:	2b00      	cmp	r3, #0
 8003970:	d032      	beq.n	80039d8 <I2C_Master_SB+0x100>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02d      	beq.n	80039d8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800398a:	605a      	str	r2, [r3, #4]
}
 800398c:	e024      	b.n	80039d8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10e      	bne.n	80039b4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	b29b      	uxth	r3, r3
 800399c:	11db      	asrs	r3, r3, #7
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 0306 	and.w	r3, r3, #6
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f063 030f 	orn	r3, r3, #15
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
}
 80039b2:	e011      	b.n	80039d8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d10d      	bne.n	80039d8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	11db      	asrs	r3, r3, #7
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 0306 	and.w	r3, r3, #6
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f063 030e 	orn	r3, r3, #14
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	611a      	str	r2, [r3, #16]
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr

080039e2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <I2C_Master_ADD10+0x26>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <I2C_Master_ADD10+0x48>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a28:	605a      	str	r2, [r3, #4]
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b091      	sub	sp, #68	@ 0x44
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b22      	cmp	r3, #34	@ 0x22
 8003a5c:	f040 8174 	bne.w	8003d48 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <I2C_Master_ADDR+0x54>
 8003a68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d10b      	bne.n	8003a88 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a70:	2300      	movs	r3, #0
 8003a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a86:	e16b      	b.n	8003d60 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <I2C_Master_ADDR+0x98>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a98:	d118      	bne.n	8003acc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003abe:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	651a      	str	r2, [r3, #80]	@ 0x50
 8003aca:	e149      	b.n	8003d60 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d113      	bne.n	8003afe <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e120      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 808a 	bne.w	8003c1e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b10:	d137      	bne.n	8003b82 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b20:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b30:	d113      	bne.n	8003b5a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b40:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	e0f2      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	623b      	str	r3, [r7, #32]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	623b      	str	r3, [r7, #32]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e0de      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d02e      	beq.n	8003be6 <I2C_Master_ADDR+0x1b2>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d02b      	beq.n	8003be6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d102      	bne.n	8003b9a <I2C_Master_ADDR+0x166>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d125      	bne.n	8003be6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	2b04      	cmp	r3, #4
 8003b9e:	d00e      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d00b      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	2b10      	cmp	r3, #16
 8003baa:	d008      	beq.n	8003bbe <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	e007      	b.n	8003bce <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	e0ac      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e090      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d158      	bne.n	8003cda <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d021      	beq.n	8003c72 <I2C_Master_ADDR+0x23e>
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d01e      	beq.n	8003c72 <I2C_Master_ADDR+0x23e>
 8003c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c36:	2b10      	cmp	r3, #16
 8003c38:	d01b      	beq.n	8003c72 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e012      	b.n	8003c98 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	613b      	str	r3, [r7, #16]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ca6:	d14b      	bne.n	8003d40 <I2C_Master_ADDR+0x30c>
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003caa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003cae:	d00b      	beq.n	8003cc8 <I2C_Master_ADDR+0x294>
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d008      	beq.n	8003cc8 <I2C_Master_ADDR+0x294>
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d005      	beq.n	8003cc8 <I2C_Master_ADDR+0x294>
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cbe:	2b10      	cmp	r3, #16
 8003cc0:	d002      	beq.n	8003cc8 <I2C_Master_ADDR+0x294>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d13b      	bne.n	8003d40 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e032      	b.n	8003d40 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ce8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf8:	d117      	bne.n	8003d2a <I2C_Master_ADDR+0x2f6>
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d00:	d00b      	beq.n	8003d1a <I2C_Master_ADDR+0x2e6>
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d008      	beq.n	8003d1a <I2C_Master_ADDR+0x2e6>
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d005      	beq.n	8003d1a <I2C_Master_ADDR+0x2e6>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d002      	beq.n	8003d1a <I2C_Master_ADDR+0x2e6>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d107      	bne.n	8003d2a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d28:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d46:	e00b      	b.n	8003d60 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
}
 8003d5e:	e7ff      	b.n	8003d60 <I2C_Master_ADDR+0x32c>
 8003d60:	bf00      	nop
 8003d62:	3744      	adds	r7, #68	@ 0x44
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d78:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d02b      	beq.n	8003ddc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	781a      	ldrb	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d114      	bne.n	8003ddc <I2C_SlaveTransmit_TXE+0x72>
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	2b29      	cmp	r3, #41	@ 0x29
 8003db6:	d111      	bne.n	8003ddc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2221      	movs	r2, #33	@ 0x21
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2228      	movs	r2, #40	@ 0x28
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff f9c2 	bl	8003160 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d011      	beq.n	8003e1a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr

08003e24 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e32:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02c      	beq.n	8003e98 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d114      	bne.n	8003e98 <I2C_SlaveReceive_RXNE+0x74>
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e72:	d111      	bne.n	8003e98 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e82:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2222      	movs	r2, #34	@ 0x22
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2228      	movs	r2, #40	@ 0x28
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff f96d 	bl	8003172 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr

08003ee2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003efc:	2b28      	cmp	r3, #40	@ 0x28
 8003efe:	d127      	bne.n	8003f50 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f0e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	09db      	lsrs	r3, r3, #7
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	81bb      	strh	r3, [r7, #12]
 8003f32:	e002      	b.n	8003f3a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f42:	89ba      	ldrh	r2, [r7, #12]
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	4619      	mov	r1, r3
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff f91b 	bl	8003184 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f4e:	e00e      	b.n	8003f6e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f86:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f96:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fd4:	d172      	bne.n	80040bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	2b22      	cmp	r3, #34	@ 0x22
 8003fda:	d002      	beq.n	8003fe2 <I2C_Slave_STOPF+0x6a>
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fe0:	d135      	bne.n	800404e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	f043 0204 	orr.w	r2, r3, #4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004014:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fecc 	bl	8001db8 <HAL_DMA_GetState>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d049      	beq.n	80040ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	4a69      	ldr	r2, [pc, #420]	@ (80041d0 <I2C_Slave_STOPF+0x258>)
 800402c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	4618      	mov	r0, r3
 8004034:	f7fd fe48 	bl	8001cc8 <HAL_DMA_Abort_IT>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03d      	beq.n	80040ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004048:	4610      	mov	r0, r2
 800404a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800404c:	e035      	b.n	80040ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	b29a      	uxth	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004080:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd fe96 	bl	8001db8 <HAL_DMA_GetState>
 800408c:	4603      	mov	r3, r0
 800408e:	2b01      	cmp	r3, #1
 8004090:	d014      	beq.n	80040bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	4a4e      	ldr	r2, [pc, #312]	@ (80041d0 <I2C_Slave_STOPF+0x258>)
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fe12 	bl	8001cc8 <HAL_DMA_Abort_IT>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040b4:	4610      	mov	r0, r2
 80040b6:	4798      	blx	r3
 80040b8:	e000      	b.n	80040bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03e      	beq.n	8004144 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d112      	bne.n	80040fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b40      	cmp	r3, #64	@ 0x40
 8004106:	d112      	bne.n	800412e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	f043 0204 	orr.w	r2, r3, #4
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f8b7 	bl	80042c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004152:	e039      	b.n	80041c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b2a      	cmp	r3, #42	@ 0x2a
 8004158:	d109      	bne.n	800416e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2228      	movs	r2, #40	@ 0x28
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff f802 	bl	8003172 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b28      	cmp	r3, #40	@ 0x28
 8004178:	d111      	bne.n	800419e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a15      	ldr	r2, [pc, #84]	@ (80041d4 <I2C_Slave_STOPF+0x25c>)
 800417e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff f801 	bl	800319e <HAL_I2C_ListenCpltCallback>
}
 800419c:	e014      	b.n	80041c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	2b22      	cmp	r3, #34	@ 0x22
 80041a4:	d002      	beq.n	80041ac <I2C_Slave_STOPF+0x234>
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	2b22      	cmp	r3, #34	@ 0x22
 80041aa:	d10d      	bne.n	80041c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe ffd5 	bl	8003172 <HAL_I2C_SlaveRxCpltCallback>
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	080047c5 	.word	0x080047c5
 80041d4:	ffff0000 	.word	0xffff0000

080041d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d002      	beq.n	80041fa <I2C_Slave_AF+0x22>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d129      	bne.n	800424e <I2C_Slave_AF+0x76>
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b28      	cmp	r3, #40	@ 0x28
 80041fe:	d126      	bne.n	800424e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a2e      	ldr	r2, [pc, #184]	@ (80042bc <I2C_Slave_AF+0xe4>)
 8004204:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004214:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800421e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800422e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fe ffa9 	bl	800319e <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800424c:	e031      	b.n	80042b2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b21      	cmp	r3, #33	@ 0x21
 8004252:	d129      	bne.n	80042a8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a19      	ldr	r2, [pc, #100]	@ (80042bc <I2C_Slave_AF+0xe4>)
 8004258:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2221      	movs	r2, #33	@ 0x21
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004288:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004298:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7fe f87a 	bl	8002394 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7fe ff5d 	bl	8003160 <HAL_I2C_SlaveTxCpltCallback>
}
 80042a6:	e004      	b.n	80042b2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042b0:	615a      	str	r2, [r3, #20]
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	ffff0000 	.word	0xffff0000

080042c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d002      	beq.n	80042e4 <I2C_ITError+0x24>
 80042de:	7bbb      	ldrb	r3, [r7, #14]
 80042e0:	2b40      	cmp	r3, #64	@ 0x40
 80042e2:	d10a      	bne.n	80042fa <I2C_ITError+0x3a>
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b22      	cmp	r3, #34	@ 0x22
 80042e8:	d107      	bne.n	80042fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042fa:	7bfb      	ldrb	r3, [r7, #15]
 80042fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004300:	2b28      	cmp	r3, #40	@ 0x28
 8004302:	d107      	bne.n	8004314 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2228      	movs	r2, #40	@ 0x28
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004312:	e015      	b.n	8004340 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004322:	d00a      	beq.n	800433a <I2C_ITError+0x7a>
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	2b60      	cmp	r3, #96	@ 0x60
 8004328:	d007      	beq.n	800433a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800434e:	d162      	bne.n	8004416 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800435e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004364:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d020      	beq.n	80043b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004372:	4a6a      	ldr	r2, [pc, #424]	@ (800451c <I2C_ITError+0x25c>)
 8004374:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fca4 	bl	8001cc8 <HAL_DMA_Abort_IT>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 8089 	beq.w	800449a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0201 	bic.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043aa:	4610      	mov	r0, r2
 80043ac:	4798      	blx	r3
 80043ae:	e074      	b.n	800449a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b4:	4a59      	ldr	r2, [pc, #356]	@ (800451c <I2C_ITError+0x25c>)
 80043b6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd fc83 	bl	8001cc8 <HAL_DMA_Abort_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d068      	beq.n	800449a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d10b      	bne.n	80043ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0201 	bic.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004410:	4610      	mov	r0, r2
 8004412:	4798      	blx	r3
 8004414:	e041      	b.n	800449a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b60      	cmp	r3, #96	@ 0x60
 8004420:	d125      	bne.n	800446e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443a:	2b40      	cmp	r3, #64	@ 0x40
 800443c:	d10b      	bne.n	8004456 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe febd 	bl	80031e6 <HAL_I2C_AbortCpltCallback>
 800446c:	e015      	b.n	800449a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004478:	2b40      	cmp	r3, #64	@ 0x40
 800447a:	d10b      	bne.n	8004494 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fe fe9d 	bl	80031d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10e      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d113      	bne.n	8004514 <I2C_ITError+0x254>
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b28      	cmp	r3, #40	@ 0x28
 80044f0:	d110      	bne.n	8004514 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004520 <I2C_ITError+0x260>)
 80044f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fe fe45 	bl	800319e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	080047c5 	.word	0x080047c5
 8004520:	ffff0000 	.word	0xffff0000

08004524 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	460b      	mov	r3, r1
 8004532:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b08      	cmp	r3, #8
 800453e:	d006      	beq.n	800454e <I2C_MasterRequestWrite+0x2a>
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d003      	beq.n	800454e <I2C_MasterRequestWrite+0x2a>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800454c:	d108      	bne.n	8004560 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e00b      	b.n	8004578 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	2b12      	cmp	r3, #18
 8004566:	d107      	bne.n	8004578 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004576:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f9c5 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459e:	d103      	bne.n	80045a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e035      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045b4:	d108      	bne.n	80045c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b6:	897b      	ldrh	r3, [r7, #10]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045c4:	611a      	str	r2, [r3, #16]
 80045c6:	e01b      	b.n	8004600 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c8:	897b      	ldrh	r3, [r7, #10]
 80045ca:	11db      	asrs	r3, r3, #7
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	f003 0306 	and.w	r3, r3, #6
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f063 030f 	orn	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	490e      	ldr	r1, [pc, #56]	@ (8004620 <I2C_MasterRequestWrite+0xfc>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fa0e 	bl	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e010      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045f6:	897b      	ldrh	r3, [r7, #10]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	4907      	ldr	r1, [pc, #28]	@ (8004624 <I2C_MasterRequestWrite+0x100>)
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f9fe 	bl	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e000      	b.n	8004618 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	00010008 	.word	0x00010008
 8004624:	00010002 	.word	0x00010002

08004628 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
 8004634:	460b      	mov	r3, r1
 8004636:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800464c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2b08      	cmp	r3, #8
 8004652:	d006      	beq.n	8004662 <I2C_MasterRequestRead+0x3a>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d003      	beq.n	8004662 <I2C_MasterRequestRead+0x3a>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004660:	d108      	bne.n	8004674 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	e00b      	b.n	800468c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	2b11      	cmp	r3, #17
 800467a:	d107      	bne.n	800468c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800468a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f93b 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d103      	bne.n	80046bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e079      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046c8:	d108      	bne.n	80046dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046ca:	897b      	ldrh	r3, [r7, #10]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	611a      	str	r2, [r3, #16]
 80046da:	e05f      	b.n	800479c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046dc:	897b      	ldrh	r3, [r7, #10]
 80046de:	11db      	asrs	r3, r3, #7
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0306 	and.w	r3, r3, #6
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f063 030f 	orn	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	4930      	ldr	r1, [pc, #192]	@ (80047bc <I2C_MasterRequestRead+0x194>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f984 	bl	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e054      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800470a:	897b      	ldrh	r3, [r7, #10]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4929      	ldr	r1, [pc, #164]	@ (80047c0 <I2C_MasterRequestRead+0x198>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f974 	bl	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e044      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	613b      	str	r3, [r7, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800474e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f8d9 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004776:	d103      	bne.n	8004780 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e017      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	11db      	asrs	r3, r3, #7
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 0306 	and.w	r3, r3, #6
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f063 030e 	orn	r3, r3, #14
 8004794:	b2da      	uxtb	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	4907      	ldr	r1, [pc, #28]	@ (80047c0 <I2C_MasterRequestRead+0x198>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f930 	bl	8004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	00010008 	.word	0x00010008
 80047c0:	00010002 	.word	0x00010002

080047c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047de:	4b4b      	ldr	r3, [pc, #300]	@ (800490c <I2C_DMAAbort+0x148>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	08db      	lsrs	r3, r3, #3
 80047e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004910 <I2C_DMAAbort+0x14c>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	0a1a      	lsrs	r2, r3, #8
 80047ec:	4613      	mov	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4413      	add	r3, r2
 80047f2:	00da      	lsls	r2, r3, #3
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	f043 0220 	orr.w	r2, r3, #32
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800480a:	e00a      	b.n	8004822 <I2C_DMAAbort+0x5e>
    }
    count--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3b01      	subs	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800481c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004820:	d0ea      	beq.n	80047f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	2200      	movs	r2, #0
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004850:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2200      	movs	r2, #0
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004864:	2200      	movs	r2, #0
 8004866:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	2200      	movs	r2, #0
 8004876:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b60      	cmp	r3, #96	@ 0x60
 8004892:	d10e      	bne.n	80048b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80048aa:	6978      	ldr	r0, [r7, #20]
 80048ac:	f7fe fc9b 	bl	80031e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048b0:	e027      	b.n	8004902 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80048b8:	2b28      	cmp	r3, #40	@ 0x28
 80048ba:	d117      	bne.n	80048ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2228      	movs	r2, #40	@ 0x28
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048ea:	e007      	b.n	80048fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7fe fc69 	bl	80031d4 <HAL_I2C_ErrorCallback>
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000008 	.word	0x20000008
 8004910:	14f8b589 	.word	0x14f8b589

08004914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004924:	e048      	b.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d044      	beq.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fd f88f 	bl	8001a50 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d139      	bne.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	0c1b      	lsrs	r3, r3, #16
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10d      	bne.n	800496a <I2C_WaitOnFlagUntilTimeout+0x56>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	43da      	mvns	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4013      	ands	r3, r2
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	461a      	mov	r2, r3
 8004968:	e00c      	b.n	8004984 <I2C_WaitOnFlagUntilTimeout+0x70>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	43da      	mvns	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d116      	bne.n	80049b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e023      	b.n	8004a00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d10d      	bne.n	80049de <I2C_WaitOnFlagUntilTimeout+0xca>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	43da      	mvns	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	461a      	mov	r2, r3
 80049dc:	e00c      	b.n	80049f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	43da      	mvns	r2, r3
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d093      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a16:	e071      	b.n	8004afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a26:	d123      	bne.n	8004a70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f043 0204 	orr.w	r2, r3, #4
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e067      	b.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d041      	beq.n	8004afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a78:	f7fc ffea 	bl	8001a50 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d302      	bcc.n	8004a8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d136      	bne.n	8004afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d10c      	bne.n	8004ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	43da      	mvns	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e00b      	b.n	8004aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e021      	b.n	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10c      	bne.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf14      	ite	ne
 8004b18:	2301      	movne	r3, #1
 8004b1a:	2300      	moveq	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	e00b      	b.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	43da      	mvns	r2, r3
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bf14      	ite	ne
 8004b32:	2301      	movne	r3, #1
 8004b34:	2300      	moveq	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f47f af6d 	bne.w	8004a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b54:	e034      	b.n	8004bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f915 	bl	8004d86 <I2C_IsAcknowledgeFailed>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e034      	b.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d028      	beq.n	8004bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6e:	f7fc ff6f 	bl	8001a50 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d302      	bcc.n	8004b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d11d      	bne.n	8004bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8e:	2b80      	cmp	r3, #128	@ 0x80
 8004b90:	d016      	beq.n	8004bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e007      	b.n	8004bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b80      	cmp	r3, #128	@ 0x80
 8004bcc:	d1c3      	bne.n	8004b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004be4:	e034      	b.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8cd 	bl	8004d86 <I2C_IsAcknowledgeFailed>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e034      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d028      	beq.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fc ff27 	bl	8001a50 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11d      	bne.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d016      	beq.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3c:	f043 0220 	orr.w	r2, r3, #32
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e007      	b.n	8004c60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b04      	cmp	r3, #4
 8004c5c:	d1c3      	bne.n	8004be6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c74:	4b13      	ldr	r3, [pc, #76]	@ (8004cc4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	08db      	lsrs	r3, r3, #3
 8004c7a:	4a13      	ldr	r2, [pc, #76]	@ (8004cc8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	0a1a      	lsrs	r2, r3, #8
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d107      	bne.n	8004ca6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e008      	b.n	8004cb8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cb4:	d0e9      	beq.n	8004c8a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bc80      	pop	{r7}
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000008 	.word	0x20000008
 8004cc8:	14f8b589 	.word	0x14f8b589

08004ccc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd8:	e049      	b.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d119      	bne.n	8004d1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0210 	mvn.w	r2, #16
 8004cf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e030      	b.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1c:	f7fc fe98 	bl	8001a50 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d302      	bcc.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d11d      	bne.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d016      	beq.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e007      	b.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b40      	cmp	r3, #64	@ 0x40
 8004d7a:	d1ae      	bne.n	8004cda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9c:	d11b      	bne.n	8004dd6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	f043 0204 	orr.w	r2, r3, #4
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004df2:	d103      	bne.n	8004dfc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004dfa:	e007      	b.n	8004e0c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e04:	d102      	bne.n	8004e0c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e272      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	f000 8087 	beq.w	8004f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e38:	4b92      	ldr	r3, [pc, #584]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 030c 	and.w	r3, r3, #12
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e44:	4b8f      	ldr	r3, [pc, #572]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d112      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5e>
 8004e50:	4b8c      	ldr	r3, [pc, #560]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e5c:	d10b      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e5e:	4b89      	ldr	r3, [pc, #548]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d06c      	beq.n	8004f44 <HAL_RCC_OscConfig+0x12c>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d168      	bne.n	8004f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e24c      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x76>
 8004e80:	4b80      	ldr	r3, [pc, #512]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a7f      	ldr	r2, [pc, #508]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e02e      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x98>
 8004e96:	4b7b      	ldr	r3, [pc, #492]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4b78      	ldr	r3, [pc, #480]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a77      	ldr	r2, [pc, #476]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ea8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0xbc>
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a71      	ldr	r2, [pc, #452]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6e      	ldr	r2, [pc, #440]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xd4>
 8004ed4:	4b6b      	ldr	r3, [pc, #428]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b68      	ldr	r3, [pc, #416]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a67      	ldr	r2, [pc, #412]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fc fdac 	bl	8001a50 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fc fda8 	bl	8001a50 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e200      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b5d      	ldr	r3, [pc, #372]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xe4>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fd98 	bl	8001a50 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fc fd94 	bl	8001a50 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1ec      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	4b53      	ldr	r3, [pc, #332]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x10c>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f52:	4b4c      	ldr	r3, [pc, #304]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f5e:	4b49      	ldr	r3, [pc, #292]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x18c>
 8004f6a:	4b46      	ldr	r3, [pc, #280]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	4b43      	ldr	r3, [pc, #268]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x176>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1c0      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4939      	ldr	r1, [pc, #228]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	e03a      	b.n	800501a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fac:	4b36      	ldr	r3, [pc, #216]	@ (8005088 <HAL_RCC_OscConfig+0x270>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fc fd4d 	bl	8001a50 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fc fd49 	bl	8001a50 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1a1      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4927      	ldr	r1, [pc, #156]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
 8004fec:	e015      	b.n	800501a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fee:	4b26      	ldr	r3, [pc, #152]	@ (8005088 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fc fd2c 	bl	8001a50 <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fc fd28 	bl	8001a50 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e180      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500e:	4b1d      	ldr	r3, [pc, #116]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d03a      	beq.n	800509c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d019      	beq.n	8005062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b17      	ldr	r3, [pc, #92]	@ (800508c <HAL_RCC_OscConfig+0x274>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005034:	f7fc fd0c 	bl	8001a50 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503c:	f7fc fd08 	bl	8001a50 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e160      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	4b0d      	ldr	r3, [pc, #52]	@ (8005084 <HAL_RCC_OscConfig+0x26c>)
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800505a:	2001      	movs	r0, #1
 800505c:	f000 face 	bl	80055fc <RCC_Delay>
 8005060:	e01c      	b.n	800509c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <HAL_RCC_OscConfig+0x274>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f7fc fcf2 	bl	8001a50 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506e:	e00f      	b.n	8005090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005070:	f7fc fcee 	bl	8001a50 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d908      	bls.n	8005090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e146      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	42420000 	.word	0x42420000
 800508c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	4b92      	ldr	r3, [pc, #584]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e9      	bne.n	8005070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a6 	beq.w	80051f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ae:	4b8b      	ldr	r3, [pc, #556]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10d      	bne.n	80050d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	4b88      	ldr	r3, [pc, #544]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	4a87      	ldr	r2, [pc, #540]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	61d3      	str	r3, [r2, #28]
 80050c6:	4b85      	ldr	r3, [pc, #532]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d2:	2301      	movs	r3, #1
 80050d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d6:	4b82      	ldr	r3, [pc, #520]	@ (80052e0 <HAL_RCC_OscConfig+0x4c8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d118      	bne.n	8005114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e2:	4b7f      	ldr	r3, [pc, #508]	@ (80052e0 <HAL_RCC_OscConfig+0x4c8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a7e      	ldr	r2, [pc, #504]	@ (80052e0 <HAL_RCC_OscConfig+0x4c8>)
 80050e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ee:	f7fc fcaf 	bl	8001a50 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f6:	f7fc fcab 	bl	8001a50 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	@ 0x64
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e103      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005108:	4b75      	ldr	r3, [pc, #468]	@ (80052e0 <HAL_RCC_OscConfig+0x4c8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0f0      	beq.n	80050f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d106      	bne.n	800512a <HAL_RCC_OscConfig+0x312>
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	4a6e      	ldr	r2, [pc, #440]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005122:	f043 0301 	orr.w	r3, r3, #1
 8005126:	6213      	str	r3, [r2, #32]
 8005128:	e02d      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x334>
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4a69      	ldr	r2, [pc, #420]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	6213      	str	r3, [r2, #32]
 800513e:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	4a66      	ldr	r2, [pc, #408]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005144:	f023 0304 	bic.w	r3, r3, #4
 8005148:	6213      	str	r3, [r2, #32]
 800514a:	e01c      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b05      	cmp	r3, #5
 8005152:	d10c      	bne.n	800516e <HAL_RCC_OscConfig+0x356>
 8005154:	4b61      	ldr	r3, [pc, #388]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005156:	6a1b      	ldr	r3, [r3, #32]
 8005158:	4a60      	ldr	r2, [pc, #384]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 800515a:	f043 0304 	orr.w	r3, r3, #4
 800515e:	6213      	str	r3, [r2, #32]
 8005160:	4b5e      	ldr	r3, [pc, #376]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	4a5d      	ldr	r2, [pc, #372]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6213      	str	r3, [r2, #32]
 800516c:	e00b      	b.n	8005186 <HAL_RCC_OscConfig+0x36e>
 800516e:	4b5b      	ldr	r3, [pc, #364]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4a5a      	ldr	r2, [pc, #360]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	6213      	str	r3, [r2, #32]
 800517a:	4b58      	ldr	r3, [pc, #352]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	4a57      	ldr	r2, [pc, #348]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d015      	beq.n	80051ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518e:	f7fc fc5f 	bl	8001a50 <HAL_GetTick>
 8005192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005194:	e00a      	b.n	80051ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005196:	f7fc fc5b 	bl	8001a50 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0b1      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	4b4b      	ldr	r3, [pc, #300]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ee      	beq.n	8005196 <HAL_RCC_OscConfig+0x37e>
 80051b8:	e014      	b.n	80051e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7fc fc49 	bl	8001a50 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c2:	f7fc fc45 	bl	8001a50 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d901      	bls.n	80051d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e09b      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	4b40      	ldr	r3, [pc, #256]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ee      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d105      	bne.n	80051f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ea:	4b3c      	ldr	r3, [pc, #240]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	4a3b      	ldr	r2, [pc, #236]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80051f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 8087 	beq.w	800530e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005200:	4b36      	ldr	r3, [pc, #216]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 030c 	and.w	r3, r3, #12
 8005208:	2b08      	cmp	r3, #8
 800520a:	d061      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d146      	bne.n	80052a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005214:	4b33      	ldr	r3, [pc, #204]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521a:	f7fc fc19 	bl	8001a50 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005222:	f7fc fc15 	bl	8001a50 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e06d      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005234:	4b29      	ldr	r3, [pc, #164]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1f0      	bne.n	8005222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005248:	d108      	bne.n	800525c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800524a:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	4921      	ldr	r1, [pc, #132]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005258:	4313      	orrs	r3, r2
 800525a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800525c:	4b1f      	ldr	r3, [pc, #124]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a19      	ldr	r1, [r3, #32]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526c:	430b      	orrs	r3, r1
 800526e:	491b      	ldr	r1, [pc, #108]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005274:	4b1b      	ldr	r3, [pc, #108]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 8005276:	2201      	movs	r2, #1
 8005278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fc fbe9 	bl	8001a50 <HAL_GetTick>
 800527e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fc fbe5 	bl	8001a50 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e03d      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0f0      	beq.n	8005282 <HAL_RCC_OscConfig+0x46a>
 80052a0:	e035      	b.n	800530e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b10      	ldr	r3, [pc, #64]	@ (80052e4 <HAL_RCC_OscConfig+0x4cc>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fc fbd2 	bl	8001a50 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fc fbce 	bl	8001a50 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e026      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c2:	4b06      	ldr	r3, [pc, #24]	@ (80052dc <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x498>
 80052ce:	e01e      	b.n	800530e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e019      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
 80052dc:	40021000 	.word	0x40021000
 80052e0:	40007000 	.word	0x40007000
 80052e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <HAL_RCC_OscConfig+0x500>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d106      	bne.n	800530a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d001      	beq.n	800530e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000

0800531c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e0d0      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005330:	4b6a      	ldr	r3, [pc, #424]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d910      	bls.n	8005360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800533e:	4b67      	ldr	r3, [pc, #412]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 0207 	bic.w	r2, r3, #7
 8005346:	4965      	ldr	r1, [pc, #404]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	4313      	orrs	r3, r2
 800534c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800534e:	4b63      	ldr	r3, [pc, #396]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	683a      	ldr	r2, [r7, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d001      	beq.n	8005360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e0b8      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d020      	beq.n	80053ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005378:	4b59      	ldr	r3, [pc, #356]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a58      	ldr	r2, [pc, #352]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005390:	4b53      	ldr	r3, [pc, #332]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a52      	ldr	r2, [pc, #328]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800539a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800539c:	4b50      	ldr	r3, [pc, #320]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	494d      	ldr	r1, [pc, #308]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d040      	beq.n	800543c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d107      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b47      	ldr	r3, [pc, #284]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d115      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e07f      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b41      	ldr	r3, [pc, #260]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d109      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e073      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b3d      	ldr	r3, [pc, #244]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e06b      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053fa:	4b39      	ldr	r3, [pc, #228]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f023 0203 	bic.w	r2, r3, #3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	4936      	ldr	r1, [pc, #216]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005408:	4313      	orrs	r3, r2
 800540a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800540c:	f7fc fb20 	bl	8001a50 <HAL_GetTick>
 8005410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	e00a      	b.n	800542a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005414:	f7fc fb1c 	bl	8001a50 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e053      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	4b2d      	ldr	r3, [pc, #180]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f003 020c 	and.w	r2, r3, #12
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d1eb      	bne.n	8005414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800543c:	4b27      	ldr	r3, [pc, #156]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d210      	bcs.n	800546c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544a:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f023 0207 	bic.w	r2, r3, #7
 8005452:	4922      	ldr	r1, [pc, #136]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b20      	ldr	r3, [pc, #128]	@ (80054dc <HAL_RCC_ClockConfig+0x1c0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e032      	b.n	80054d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005478:	4b19      	ldr	r3, [pc, #100]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	4916      	ldr	r1, [pc, #88]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005486:	4313      	orrs	r3, r2
 8005488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005496:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	490e      	ldr	r1, [pc, #56]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054aa:	f000 f821 	bl	80054f0 <HAL_RCC_GetSysClockFreq>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <HAL_RCC_ClockConfig+0x1c4>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	091b      	lsrs	r3, r3, #4
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	490a      	ldr	r1, [pc, #40]	@ (80054e4 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	5ccb      	ldrb	r3, [r1, r3]
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	4a09      	ldr	r2, [pc, #36]	@ (80054e8 <HAL_RCC_ClockConfig+0x1cc>)
 80054c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054c6:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <HAL_RCC_ClockConfig+0x1d0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7fc fa7e 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40022000 	.word	0x40022000
 80054e0:	40021000 	.word	0x40021000
 80054e4:	0800a1ec 	.word	0x0800a1ec
 80054e8:	20000008 	.word	0x20000008
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800550a:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x94>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f003 030c 	and.w	r3, r3, #12
 8005516:	2b04      	cmp	r3, #4
 8005518:	d002      	beq.n	8005520 <HAL_RCC_GetSysClockFreq+0x30>
 800551a:	2b08      	cmp	r3, #8
 800551c:	d003      	beq.n	8005526 <HAL_RCC_GetSysClockFreq+0x36>
 800551e:	e027      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005520:	4b19      	ldr	r3, [pc, #100]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x98>)
 8005522:	613b      	str	r3, [r7, #16]
      break;
 8005524:	e027      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	0c9b      	lsrs	r3, r3, #18
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	4a17      	ldr	r2, [pc, #92]	@ (800558c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005530:	5cd3      	ldrb	r3, [r2, r3]
 8005532:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d010      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800553e:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x94>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	0c5b      	lsrs	r3, r3, #17
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	4a11      	ldr	r2, [pc, #68]	@ (8005590 <HAL_RCC_GetSysClockFreq+0xa0>)
 800554a:	5cd3      	ldrb	r3, [r2, r3]
 800554c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a0d      	ldr	r2, [pc, #52]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x98>)
 8005552:	fb03 f202 	mul.w	r2, r3, r2
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e004      	b.n	800556a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a0c      	ldr	r2, [pc, #48]	@ (8005594 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005564:	fb02 f303 	mul.w	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	613b      	str	r3, [r7, #16]
      break;
 800556e:	e002      	b.n	8005576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x98>)
 8005572:	613b      	str	r3, [r7, #16]
      break;
 8005574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005576:	693b      	ldr	r3, [r7, #16]
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40021000 	.word	0x40021000
 8005588:	007a1200 	.word	0x007a1200
 800558c:	0800a204 	.word	0x0800a204
 8005590:	0800a214 	.word	0x0800a214
 8005594:	003d0900 	.word	0x003d0900

08005598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800559c:	4b02      	ldr	r3, [pc, #8]	@ (80055a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	20000008 	.word	0x20000008

080055ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055b0:	f7ff fff2 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4903      	ldr	r1, [pc, #12]	@ (80055d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	0800a1fc 	.word	0x0800a1fc

080055d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055d8:	f7ff ffde 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	0adb      	lsrs	r3, r3, #11
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	@ (80055f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40021000 	.word	0x40021000
 80055f8:	0800a1fc 	.word	0x0800a1fc

080055fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005604:	4b0a      	ldr	r3, [pc, #40]	@ (8005630 <RCC_Delay+0x34>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <RCC_Delay+0x38>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	0a5b      	lsrs	r3, r3, #9
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005618:	bf00      	nop
  }
  while (Delay --);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e5a      	subs	r2, r3, #1
 800561e:	60fa      	str	r2, [r7, #12]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1f9      	bne.n	8005618 <RCC_Delay+0x1c>
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	20000008 	.word	0x20000008
 8005634:	10624dd3 	.word	0x10624dd3

08005638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e042      	b.n	80056d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fc f92e 	bl	80018c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2224      	movs	r2, #36	@ 0x24
 8005668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800567a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f971 	bl	8005964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695a      	ldr	r2, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	@ 0x28
 80056dc:	af02      	add	r7, sp, #8
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	603b      	str	r3, [r7, #0]
 80056e4:	4613      	mov	r3, r2
 80056e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d175      	bne.n	80057e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_UART_Transmit+0x2c>
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e06e      	b.n	80057e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2221      	movs	r2, #33	@ 0x21
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005716:	f7fc f99b 	bl	8001a50 <HAL_GetTick>
 800571a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	88fa      	ldrh	r2, [r7, #6]
 8005726:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005730:	d108      	bne.n	8005744 <HAL_UART_Transmit+0x6c>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d104      	bne.n	8005744 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	e003      	b.n	800574c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800574c:	e02e      	b.n	80057ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	2180      	movs	r1, #128	@ 0x80
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f848 	bl	80057ee <UART_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e03a      	b.n	80057e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005784:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	3302      	adds	r3, #2
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e007      	b.n	800579e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	781a      	ldrb	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	3301      	adds	r3, #1
 800579c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1cb      	bne.n	800574e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2200      	movs	r2, #0
 80057be:	2140      	movs	r1, #64	@ 0x40
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f814 	bl	80057ee <UART_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e006      	b.n	80057e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b086      	sub	sp, #24
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fe:	e03b      	b.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d037      	beq.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005808:	f7fc f922 	bl	8001a50 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <UART_WaitOnFlagUntilTimeout+0x30>
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e03a      	b.n	8005898 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d023      	beq.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b80      	cmp	r3, #128	@ 0x80
 8005834:	d020      	beq.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d01d      	beq.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d116      	bne.n	8005878 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	617b      	str	r3, [r7, #20]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 f81d 	bl	80058a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2208      	movs	r2, #8
 800586a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e00f      	b.n	8005898 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4013      	ands	r3, r2
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	429a      	cmp	r2, r3
 8005886:	bf0c      	ite	eq
 8005888:	2301      	moveq	r3, #1
 800588a:	2300      	movne	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	429a      	cmp	r2, r3
 8005894:	d0b4      	beq.n	8005800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b095      	sub	sp, #84	@ 0x54
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80058ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e5      	bne.n	80058a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3314      	adds	r3, #20
 80058e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800590a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	2b01      	cmp	r3, #1
 8005916:	d119      	bne.n	800594c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60bb      	str	r3, [r7, #8]
   return(result);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005938:	61ba      	str	r2, [r7, #24]
 800593a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	613b      	str	r3, [r7, #16]
   return(result);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800595a:	bf00      	nop
 800595c:	3754      	adds	r7, #84	@ 0x54
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800599e:	f023 030c 	bic.w	r3, r3, #12
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <UART_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7ff fe02 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7ff fdea 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80059d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <UART_SetConfig+0x118>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	0119      	lsls	r1, r3, #4
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a12:	fba3 0302 	umull	r0, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2064      	movs	r0, #100	@ 0x64
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	@ 0x32
 8005a24:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a30:	4419      	add	r1, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2064      	movs	r0, #100	@ 0x64
 8005a52:	fb00 f303 	mul.w	r3, r0, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	@ 0x32
 8005a5c:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	51eb851f 	.word	0x51eb851f

08005a80 <__cvt>:
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a86:	461d      	mov	r5, r3
 8005a88:	bfbb      	ittet	lt
 8005a8a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005a8e:	461d      	movlt	r5, r3
 8005a90:	2300      	movge	r3, #0
 8005a92:	232d      	movlt	r3, #45	@ 0x2d
 8005a94:	b088      	sub	sp, #32
 8005a96:	4614      	mov	r4, r2
 8005a98:	bfb8      	it	lt
 8005a9a:	4614      	movlt	r4, r2
 8005a9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a9e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005aa0:	7013      	strb	r3, [r2, #0]
 8005aa2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005aa4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005aa8:	f023 0820 	bic.w	r8, r3, #32
 8005aac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ab0:	d005      	beq.n	8005abe <__cvt+0x3e>
 8005ab2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ab6:	d100      	bne.n	8005aba <__cvt+0x3a>
 8005ab8:	3601      	adds	r6, #1
 8005aba:	2302      	movs	r3, #2
 8005abc:	e000      	b.n	8005ac0 <__cvt+0x40>
 8005abe:	2303      	movs	r3, #3
 8005ac0:	aa07      	add	r2, sp, #28
 8005ac2:	9204      	str	r2, [sp, #16]
 8005ac4:	aa06      	add	r2, sp, #24
 8005ac6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005aca:	e9cd 3600 	strd	r3, r6, [sp]
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	f001 f87d 	bl	8006bd0 <_dtoa_r>
 8005ad6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ada:	4607      	mov	r7, r0
 8005adc:	d119      	bne.n	8005b12 <__cvt+0x92>
 8005ade:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ae0:	07db      	lsls	r3, r3, #31
 8005ae2:	d50e      	bpl.n	8005b02 <__cvt+0x82>
 8005ae4:	eb00 0906 	add.w	r9, r0, r6
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2300      	movs	r3, #0
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8005af4:	b108      	cbz	r0, 8005afa <__cvt+0x7a>
 8005af6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005afa:	2230      	movs	r2, #48	@ 0x30
 8005afc:	9b07      	ldr	r3, [sp, #28]
 8005afe:	454b      	cmp	r3, r9
 8005b00:	d31e      	bcc.n	8005b40 <__cvt+0xc0>
 8005b02:	4638      	mov	r0, r7
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b08:	1bdb      	subs	r3, r3, r7
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	b008      	add	sp, #32
 8005b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b12:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b16:	eb00 0906 	add.w	r9, r0, r6
 8005b1a:	d1e5      	bne.n	8005ae8 <__cvt+0x68>
 8005b1c:	7803      	ldrb	r3, [r0, #0]
 8005b1e:	2b30      	cmp	r3, #48	@ 0x30
 8005b20:	d10a      	bne.n	8005b38 <__cvt+0xb8>
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	4620      	mov	r0, r4
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7fa ff3d 	bl	80009a8 <__aeabi_dcmpeq>
 8005b2e:	b918      	cbnz	r0, 8005b38 <__cvt+0xb8>
 8005b30:	f1c6 0601 	rsb	r6, r6, #1
 8005b34:	f8ca 6000 	str.w	r6, [sl]
 8005b38:	f8da 3000 	ldr.w	r3, [sl]
 8005b3c:	4499      	add	r9, r3
 8005b3e:	e7d3      	b.n	8005ae8 <__cvt+0x68>
 8005b40:	1c59      	adds	r1, r3, #1
 8005b42:	9107      	str	r1, [sp, #28]
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e7d9      	b.n	8005afc <__cvt+0x7c>

08005b48 <__exponent>:
 8005b48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	bfb6      	itet	lt
 8005b4e:	232d      	movlt	r3, #45	@ 0x2d
 8005b50:	232b      	movge	r3, #43	@ 0x2b
 8005b52:	4249      	neglt	r1, r1
 8005b54:	2909      	cmp	r1, #9
 8005b56:	7002      	strb	r2, [r0, #0]
 8005b58:	7043      	strb	r3, [r0, #1]
 8005b5a:	dd29      	ble.n	8005bb0 <__exponent+0x68>
 8005b5c:	f10d 0307 	add.w	r3, sp, #7
 8005b60:	461d      	mov	r5, r3
 8005b62:	270a      	movs	r7, #10
 8005b64:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b68:	461a      	mov	r2, r3
 8005b6a:	fb07 1416 	mls	r4, r7, r6, r1
 8005b6e:	3430      	adds	r4, #48	@ 0x30
 8005b70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b74:	460c      	mov	r4, r1
 8005b76:	2c63      	cmp	r4, #99	@ 0x63
 8005b78:	4631      	mov	r1, r6
 8005b7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b7e:	dcf1      	bgt.n	8005b64 <__exponent+0x1c>
 8005b80:	3130      	adds	r1, #48	@ 0x30
 8005b82:	1e94      	subs	r4, r2, #2
 8005b84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b88:	4623      	mov	r3, r4
 8005b8a:	1c41      	adds	r1, r0, #1
 8005b8c:	42ab      	cmp	r3, r5
 8005b8e:	d30a      	bcc.n	8005ba6 <__exponent+0x5e>
 8005b90:	f10d 0309 	add.w	r3, sp, #9
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	42ac      	cmp	r4, r5
 8005b98:	bf88      	it	hi
 8005b9a:	2300      	movhi	r3, #0
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	4403      	add	r3, r0
 8005ba0:	1a18      	subs	r0, r3, r0
 8005ba2:	b003      	add	sp, #12
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005baa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bae:	e7ed      	b.n	8005b8c <__exponent+0x44>
 8005bb0:	2330      	movs	r3, #48	@ 0x30
 8005bb2:	3130      	adds	r1, #48	@ 0x30
 8005bb4:	7083      	strb	r3, [r0, #2]
 8005bb6:	70c1      	strb	r1, [r0, #3]
 8005bb8:	1d03      	adds	r3, r0, #4
 8005bba:	e7f1      	b.n	8005ba0 <__exponent+0x58>

08005bbc <_printf_float>:
 8005bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc0:	b091      	sub	sp, #68	@ 0x44
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005bc8:	4616      	mov	r6, r2
 8005bca:	461f      	mov	r7, r3
 8005bcc:	4605      	mov	r5, r0
 8005bce:	f000 feeb 	bl	80069a8 <_localeconv_r>
 8005bd2:	6803      	ldr	r3, [r0, #0]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	9308      	str	r3, [sp, #32]
 8005bd8:	f7fa faba 	bl	8000150 <strlen>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930e      	str	r3, [sp, #56]	@ 0x38
 8005be0:	f8d8 3000 	ldr.w	r3, [r8]
 8005be4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005be6:	3307      	adds	r3, #7
 8005be8:	f023 0307 	bic.w	r3, r3, #7
 8005bec:	f103 0208 	add.w	r2, r3, #8
 8005bf0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bf4:	f8d4 b000 	ldr.w	fp, [r4]
 8005bf8:	f8c8 2000 	str.w	r2, [r8]
 8005bfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c06:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c12:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c16:	4b9c      	ldr	r3, [pc, #624]	@ (8005e88 <_printf_float+0x2cc>)
 8005c18:	f7fa fef8 	bl	8000a0c <__aeabi_dcmpun>
 8005c1c:	bb70      	cbnz	r0, 8005c7c <_printf_float+0xc0>
 8005c1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	4b98      	ldr	r3, [pc, #608]	@ (8005e88 <_printf_float+0x2cc>)
 8005c28:	f7fa fed2 	bl	80009d0 <__aeabi_dcmple>
 8005c2c:	bb30      	cbnz	r0, 8005c7c <_printf_float+0xc0>
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2300      	movs	r3, #0
 8005c32:	4640      	mov	r0, r8
 8005c34:	4649      	mov	r1, r9
 8005c36:	f7fa fec1 	bl	80009bc <__aeabi_dcmplt>
 8005c3a:	b110      	cbz	r0, 8005c42 <_printf_float+0x86>
 8005c3c:	232d      	movs	r3, #45	@ 0x2d
 8005c3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c42:	4a92      	ldr	r2, [pc, #584]	@ (8005e8c <_printf_float+0x2d0>)
 8005c44:	4b92      	ldr	r3, [pc, #584]	@ (8005e90 <_printf_float+0x2d4>)
 8005c46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c4a:	bf8c      	ite	hi
 8005c4c:	4690      	movhi	r8, r2
 8005c4e:	4698      	movls	r8, r3
 8005c50:	2303      	movs	r3, #3
 8005c52:	f04f 0900 	mov.w	r9, #0
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	f02b 0304 	bic.w	r3, fp, #4
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	4633      	mov	r3, r6
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	9700      	str	r7, [sp, #0]
 8005c66:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c68:	f000 f9d4 	bl	8006014 <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f040 8090 	bne.w	8005d92 <_printf_float+0x1d6>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b011      	add	sp, #68	@ 0x44
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	4649      	mov	r1, r9
 8005c84:	f7fa fec2 	bl	8000a0c <__aeabi_dcmpun>
 8005c88:	b148      	cbz	r0, 8005c9e <_printf_float+0xe2>
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	bfb8      	it	lt
 8005c90:	232d      	movlt	r3, #45	@ 0x2d
 8005c92:	4a80      	ldr	r2, [pc, #512]	@ (8005e94 <_printf_float+0x2d8>)
 8005c94:	bfb8      	it	lt
 8005c96:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e98 <_printf_float+0x2dc>)
 8005c9c:	e7d3      	b.n	8005c46 <_printf_float+0x8a>
 8005c9e:	6863      	ldr	r3, [r4, #4]
 8005ca0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	d13f      	bne.n	8005d28 <_printf_float+0x16c>
 8005ca8:	2306      	movs	r3, #6
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005cb2:	6023      	str	r3, [r4, #0]
 8005cb4:	9206      	str	r2, [sp, #24]
 8005cb6:	aa0e      	add	r2, sp, #56	@ 0x38
 8005cb8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005cbc:	aa0d      	add	r2, sp, #52	@ 0x34
 8005cbe:	9203      	str	r2, [sp, #12]
 8005cc0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005cc4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	4642      	mov	r2, r8
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	910a      	str	r1, [sp, #40]	@ 0x28
 8005cd4:	f7ff fed4 	bl	8005a80 <__cvt>
 8005cd8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cda:	4680      	mov	r8, r0
 8005cdc:	2947      	cmp	r1, #71	@ 0x47
 8005cde:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005ce0:	d128      	bne.n	8005d34 <_printf_float+0x178>
 8005ce2:	1cc8      	adds	r0, r1, #3
 8005ce4:	db02      	blt.n	8005cec <_printf_float+0x130>
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	dd40      	ble.n	8005d6e <_printf_float+0x1b2>
 8005cec:	f1aa 0a02 	sub.w	sl, sl, #2
 8005cf0:	fa5f fa8a 	uxtb.w	sl, sl
 8005cf4:	4652      	mov	r2, sl
 8005cf6:	3901      	subs	r1, #1
 8005cf8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cfc:	910d      	str	r1, [sp, #52]	@ 0x34
 8005cfe:	f7ff ff23 	bl	8005b48 <__exponent>
 8005d02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d04:	4681      	mov	r9, r0
 8005d06:	1813      	adds	r3, r2, r0
 8005d08:	2a01      	cmp	r2, #1
 8005d0a:	6123      	str	r3, [r4, #16]
 8005d0c:	dc02      	bgt.n	8005d14 <_printf_float+0x158>
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	07d2      	lsls	r2, r2, #31
 8005d12:	d501      	bpl.n	8005d18 <_printf_float+0x15c>
 8005d14:	3301      	adds	r3, #1
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d09e      	beq.n	8005c5e <_printf_float+0xa2>
 8005d20:	232d      	movs	r3, #45	@ 0x2d
 8005d22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d26:	e79a      	b.n	8005c5e <_printf_float+0xa2>
 8005d28:	2947      	cmp	r1, #71	@ 0x47
 8005d2a:	d1bf      	bne.n	8005cac <_printf_float+0xf0>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1bd      	bne.n	8005cac <_printf_float+0xf0>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e7ba      	b.n	8005caa <_printf_float+0xee>
 8005d34:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d38:	d9dc      	bls.n	8005cf4 <_printf_float+0x138>
 8005d3a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d3e:	d118      	bne.n	8005d72 <_printf_float+0x1b6>
 8005d40:	2900      	cmp	r1, #0
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	dd0b      	ble.n	8005d5e <_printf_float+0x1a2>
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	b913      	cbnz	r3, 8005d50 <_printf_float+0x194>
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	07d0      	lsls	r0, r2, #31
 8005d4e:	d502      	bpl.n	8005d56 <_printf_float+0x19a>
 8005d50:	3301      	adds	r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	6123      	str	r3, [r4, #16]
 8005d56:	f04f 0900 	mov.w	r9, #0
 8005d5a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d5c:	e7dc      	b.n	8005d18 <_printf_float+0x15c>
 8005d5e:	b913      	cbnz	r3, 8005d66 <_printf_float+0x1aa>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	07d2      	lsls	r2, r2, #31
 8005d64:	d501      	bpl.n	8005d6a <_printf_float+0x1ae>
 8005d66:	3302      	adds	r3, #2
 8005d68:	e7f4      	b.n	8005d54 <_printf_float+0x198>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7f2      	b.n	8005d54 <_printf_float+0x198>
 8005d6e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d74:	4299      	cmp	r1, r3
 8005d76:	db05      	blt.n	8005d84 <_printf_float+0x1c8>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	6121      	str	r1, [r4, #16]
 8005d7c:	07d8      	lsls	r0, r3, #31
 8005d7e:	d5ea      	bpl.n	8005d56 <_printf_float+0x19a>
 8005d80:	1c4b      	adds	r3, r1, #1
 8005d82:	e7e7      	b.n	8005d54 <_printf_float+0x198>
 8005d84:	2900      	cmp	r1, #0
 8005d86:	bfcc      	ite	gt
 8005d88:	2201      	movgt	r2, #1
 8005d8a:	f1c1 0202 	rsble	r2, r1, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	e7e0      	b.n	8005d54 <_printf_float+0x198>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	055a      	lsls	r2, r3, #21
 8005d96:	d407      	bmi.n	8005da8 <_printf_float+0x1ec>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	4642      	mov	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d12b      	bne.n	8005dfe <_printf_float+0x242>
 8005da6:	e764      	b.n	8005c72 <_printf_float+0xb6>
 8005da8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dac:	f240 80dc 	bls.w	8005f68 <_printf_float+0x3ac>
 8005db0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f7fa fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d033      	beq.n	8005e28 <_printf_float+0x26c>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4631      	mov	r1, r6
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	4a35      	ldr	r2, [pc, #212]	@ (8005e9c <_printf_float+0x2e0>)
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af51 	beq.w	8005c72 <_printf_float+0xb6>
 8005dd0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x222>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	07d8      	lsls	r0, r3, #31
 8005ddc:	d50f      	bpl.n	8005dfe <_printf_float+0x242>
 8005dde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f af42 	beq.w	8005c72 <_printf_float+0xb6>
 8005dee:	f04f 0900 	mov.w	r9, #0
 8005df2:	f108 38ff 	add.w	r8, r8, #4294967295
 8005df6:	f104 0a1a 	add.w	sl, r4, #26
 8005dfa:	45c8      	cmp	r8, r9
 8005dfc:	dc09      	bgt.n	8005e12 <_printf_float+0x256>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	079b      	lsls	r3, r3, #30
 8005e02:	f100 8102 	bmi.w	800600a <_printf_float+0x44e>
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bfb8      	it	lt
 8005e0e:	4618      	movlt	r0, r3
 8005e10:	e731      	b.n	8005c76 <_printf_float+0xba>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4652      	mov	r2, sl
 8005e16:	4631      	mov	r1, r6
 8005e18:	4628      	mov	r0, r5
 8005e1a:	47b8      	blx	r7
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f43f af28 	beq.w	8005c72 <_printf_float+0xb6>
 8005e22:	f109 0901 	add.w	r9, r9, #1
 8005e26:	e7e8      	b.n	8005dfa <_printf_float+0x23e>
 8005e28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	dc38      	bgt.n	8005ea0 <_printf_float+0x2e4>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	4a19      	ldr	r2, [pc, #100]	@ (8005e9c <_printf_float+0x2e0>)
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f af1a 	beq.w	8005c72 <_printf_float+0xb6>
 8005e3e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e42:	ea59 0303 	orrs.w	r3, r9, r3
 8005e46:	d102      	bne.n	8005e4e <_printf_float+0x292>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	07d9      	lsls	r1, r3, #31
 8005e4c:	d5d7      	bpl.n	8005dfe <_printf_float+0x242>
 8005e4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e52:	4631      	mov	r1, r6
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b8      	blx	r7
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f43f af0a 	beq.w	8005c72 <_printf_float+0xb6>
 8005e5e:	f04f 0a00 	mov.w	sl, #0
 8005e62:	f104 0b1a 	add.w	fp, r4, #26
 8005e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e68:	425b      	negs	r3, r3
 8005e6a:	4553      	cmp	r3, sl
 8005e6c:	dc01      	bgt.n	8005e72 <_printf_float+0x2b6>
 8005e6e:	464b      	mov	r3, r9
 8005e70:	e793      	b.n	8005d9a <_printf_float+0x1de>
 8005e72:	2301      	movs	r3, #1
 8005e74:	465a      	mov	r2, fp
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f43f aef8 	beq.w	8005c72 <_printf_float+0xb6>
 8005e82:	f10a 0a01 	add.w	sl, sl, #1
 8005e86:	e7ee      	b.n	8005e66 <_printf_float+0x2aa>
 8005e88:	7fefffff 	.word	0x7fefffff
 8005e8c:	0800a21a 	.word	0x0800a21a
 8005e90:	0800a216 	.word	0x0800a216
 8005e94:	0800a222 	.word	0x0800a222
 8005e98:	0800a21e 	.word	0x0800a21e
 8005e9c:	0800a226 	.word	0x0800a226
 8005ea0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ea2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ea6:	4553      	cmp	r3, sl
 8005ea8:	bfa8      	it	ge
 8005eaa:	4653      	movge	r3, sl
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	4699      	mov	r9, r3
 8005eb0:	dc36      	bgt.n	8005f20 <_printf_float+0x364>
 8005eb2:	f04f 0b00 	mov.w	fp, #0
 8005eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eba:	f104 021a 	add.w	r2, r4, #26
 8005ebe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec2:	eba3 0309 	sub.w	r3, r3, r9
 8005ec6:	455b      	cmp	r3, fp
 8005ec8:	dc31      	bgt.n	8005f2e <_printf_float+0x372>
 8005eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ecc:	459a      	cmp	sl, r3
 8005ece:	dc3a      	bgt.n	8005f46 <_printf_float+0x38a>
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	07da      	lsls	r2, r3, #31
 8005ed4:	d437      	bmi.n	8005f46 <_printf_float+0x38a>
 8005ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ed8:	ebaa 0903 	sub.w	r9, sl, r3
 8005edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ede:	ebaa 0303 	sub.w	r3, sl, r3
 8005ee2:	4599      	cmp	r9, r3
 8005ee4:	bfa8      	it	ge
 8005ee6:	4699      	movge	r9, r3
 8005ee8:	f1b9 0f00 	cmp.w	r9, #0
 8005eec:	dc33      	bgt.n	8005f56 <_printf_float+0x39a>
 8005eee:	f04f 0800 	mov.w	r8, #0
 8005ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ef6:	f104 0b1a 	add.w	fp, r4, #26
 8005efa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005efc:	ebaa 0303 	sub.w	r3, sl, r3
 8005f00:	eba3 0309 	sub.w	r3, r3, r9
 8005f04:	4543      	cmp	r3, r8
 8005f06:	f77f af7a 	ble.w	8005dfe <_printf_float+0x242>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	465a      	mov	r2, fp
 8005f0e:	4631      	mov	r1, r6
 8005f10:	4628      	mov	r0, r5
 8005f12:	47b8      	blx	r7
 8005f14:	3001      	adds	r0, #1
 8005f16:	f43f aeac 	beq.w	8005c72 <_printf_float+0xb6>
 8005f1a:	f108 0801 	add.w	r8, r8, #1
 8005f1e:	e7ec      	b.n	8005efa <_printf_float+0x33e>
 8005f20:	4642      	mov	r2, r8
 8005f22:	4631      	mov	r1, r6
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b8      	blx	r7
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1c2      	bne.n	8005eb2 <_printf_float+0x2f6>
 8005f2c:	e6a1      	b.n	8005c72 <_printf_float+0xb6>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f36:	47b8      	blx	r7
 8005f38:	3001      	adds	r0, #1
 8005f3a:	f43f ae9a 	beq.w	8005c72 <_printf_float+0xb6>
 8005f3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f40:	f10b 0b01 	add.w	fp, fp, #1
 8005f44:	e7bb      	b.n	8005ebe <_printf_float+0x302>
 8005f46:	4631      	mov	r1, r6
 8005f48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	d1c0      	bne.n	8005ed6 <_printf_float+0x31a>
 8005f54:	e68d      	b.n	8005c72 <_printf_float+0xb6>
 8005f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f58:	464b      	mov	r3, r9
 8005f5a:	4631      	mov	r1, r6
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	4442      	add	r2, r8
 8005f60:	47b8      	blx	r7
 8005f62:	3001      	adds	r0, #1
 8005f64:	d1c3      	bne.n	8005eee <_printf_float+0x332>
 8005f66:	e684      	b.n	8005c72 <_printf_float+0xb6>
 8005f68:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f6c:	f1ba 0f01 	cmp.w	sl, #1
 8005f70:	dc01      	bgt.n	8005f76 <_printf_float+0x3ba>
 8005f72:	07db      	lsls	r3, r3, #31
 8005f74:	d536      	bpl.n	8005fe4 <_printf_float+0x428>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4642      	mov	r2, r8
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f ae76 	beq.w	8005c72 <_printf_float+0xb6>
 8005f86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	47b8      	blx	r7
 8005f90:	3001      	adds	r0, #1
 8005f92:	f43f ae6e 	beq.w	8005c72 <_printf_float+0xb6>
 8005f96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fa2:	f7fa fd01 	bl	80009a8 <__aeabi_dcmpeq>
 8005fa6:	b9c0      	cbnz	r0, 8005fda <_printf_float+0x41e>
 8005fa8:	4653      	mov	r3, sl
 8005faa:	f108 0201 	add.w	r2, r8, #1
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d10c      	bne.n	8005fd2 <_printf_float+0x416>
 8005fb8:	e65b      	b.n	8005c72 <_printf_float+0xb6>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	465a      	mov	r2, fp
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae54 	beq.w	8005c72 <_printf_float+0xb6>
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	45d0      	cmp	r8, sl
 8005fd0:	dbf3      	blt.n	8005fba <_printf_float+0x3fe>
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fd8:	e6e0      	b.n	8005d9c <_printf_float+0x1e0>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	f104 0b1a 	add.w	fp, r4, #26
 8005fe2:	e7f4      	b.n	8005fce <_printf_float+0x412>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	4642      	mov	r2, r8
 8005fe8:	e7e1      	b.n	8005fae <_printf_float+0x3f2>
 8005fea:	2301      	movs	r3, #1
 8005fec:	464a      	mov	r2, r9
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae3c 	beq.w	8005c72 <_printf_float+0xb6>
 8005ffa:	f108 0801 	add.w	r8, r8, #1
 8005ffe:	68e3      	ldr	r3, [r4, #12]
 8006000:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006002:	1a5b      	subs	r3, r3, r1
 8006004:	4543      	cmp	r3, r8
 8006006:	dcf0      	bgt.n	8005fea <_printf_float+0x42e>
 8006008:	e6fd      	b.n	8005e06 <_printf_float+0x24a>
 800600a:	f04f 0800 	mov.w	r8, #0
 800600e:	f104 0919 	add.w	r9, r4, #25
 8006012:	e7f4      	b.n	8005ffe <_printf_float+0x442>

08006014 <_printf_common>:
 8006014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006018:	4616      	mov	r6, r2
 800601a:	4698      	mov	r8, r3
 800601c:	688a      	ldr	r2, [r1, #8]
 800601e:	690b      	ldr	r3, [r1, #16]
 8006020:	4607      	mov	r7, r0
 8006022:	4293      	cmp	r3, r2
 8006024:	bfb8      	it	lt
 8006026:	4613      	movlt	r3, r2
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800602e:	460c      	mov	r4, r1
 8006030:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006034:	b10a      	cbz	r2, 800603a <_printf_common+0x26>
 8006036:	3301      	adds	r3, #1
 8006038:	6033      	str	r3, [r6, #0]
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	0699      	lsls	r1, r3, #26
 800603e:	bf42      	ittt	mi
 8006040:	6833      	ldrmi	r3, [r6, #0]
 8006042:	3302      	addmi	r3, #2
 8006044:	6033      	strmi	r3, [r6, #0]
 8006046:	6825      	ldr	r5, [r4, #0]
 8006048:	f015 0506 	ands.w	r5, r5, #6
 800604c:	d106      	bne.n	800605c <_printf_common+0x48>
 800604e:	f104 0a19 	add.w	sl, r4, #25
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ab      	cmp	r3, r5
 800605a:	dc2b      	bgt.n	80060b4 <_printf_common+0xa0>
 800605c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	3b00      	subs	r3, #0
 8006064:	bf18      	it	ne
 8006066:	2301      	movne	r3, #1
 8006068:	0692      	lsls	r2, r2, #26
 800606a:	d430      	bmi.n	80060ce <_printf_common+0xba>
 800606c:	4641      	mov	r1, r8
 800606e:	4638      	mov	r0, r7
 8006070:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006074:	47c8      	blx	r9
 8006076:	3001      	adds	r0, #1
 8006078:	d023      	beq.n	80060c2 <_printf_common+0xae>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6922      	ldr	r2, [r4, #16]
 800607e:	f003 0306 	and.w	r3, r3, #6
 8006082:	2b04      	cmp	r3, #4
 8006084:	bf14      	ite	ne
 8006086:	2500      	movne	r5, #0
 8006088:	6833      	ldreq	r3, [r6, #0]
 800608a:	f04f 0600 	mov.w	r6, #0
 800608e:	bf08      	it	eq
 8006090:	68e5      	ldreq	r5, [r4, #12]
 8006092:	f104 041a 	add.w	r4, r4, #26
 8006096:	bf08      	it	eq
 8006098:	1aed      	subeq	r5, r5, r3
 800609a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800609e:	bf08      	it	eq
 80060a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a4:	4293      	cmp	r3, r2
 80060a6:	bfc4      	itt	gt
 80060a8:	1a9b      	subgt	r3, r3, r2
 80060aa:	18ed      	addgt	r5, r5, r3
 80060ac:	42b5      	cmp	r5, r6
 80060ae:	d11a      	bne.n	80060e6 <_printf_common+0xd2>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e008      	b.n	80060c6 <_printf_common+0xb2>
 80060b4:	2301      	movs	r3, #1
 80060b6:	4652      	mov	r2, sl
 80060b8:	4641      	mov	r1, r8
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c8      	blx	r9
 80060be:	3001      	adds	r0, #1
 80060c0:	d103      	bne.n	80060ca <_printf_common+0xb6>
 80060c2:	f04f 30ff 	mov.w	r0, #4294967295
 80060c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060ca:	3501      	adds	r5, #1
 80060cc:	e7c1      	b.n	8006052 <_printf_common+0x3e>
 80060ce:	2030      	movs	r0, #48	@ 0x30
 80060d0:	18e1      	adds	r1, r4, r3
 80060d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060d6:	1c5a      	adds	r2, r3, #1
 80060d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060dc:	4422      	add	r2, r4
 80060de:	3302      	adds	r3, #2
 80060e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060e4:	e7c2      	b.n	800606c <_printf_common+0x58>
 80060e6:	2301      	movs	r3, #1
 80060e8:	4622      	mov	r2, r4
 80060ea:	4641      	mov	r1, r8
 80060ec:	4638      	mov	r0, r7
 80060ee:	47c8      	blx	r9
 80060f0:	3001      	adds	r0, #1
 80060f2:	d0e6      	beq.n	80060c2 <_printf_common+0xae>
 80060f4:	3601      	adds	r6, #1
 80060f6:	e7d9      	b.n	80060ac <_printf_common+0x98>

080060f8 <_printf_i>:
 80060f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060fc:	7e0f      	ldrb	r7, [r1, #24]
 80060fe:	4691      	mov	r9, r2
 8006100:	2f78      	cmp	r7, #120	@ 0x78
 8006102:	4680      	mov	r8, r0
 8006104:	460c      	mov	r4, r1
 8006106:	469a      	mov	sl, r3
 8006108:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800610a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800610e:	d807      	bhi.n	8006120 <_printf_i+0x28>
 8006110:	2f62      	cmp	r7, #98	@ 0x62
 8006112:	d80a      	bhi.n	800612a <_printf_i+0x32>
 8006114:	2f00      	cmp	r7, #0
 8006116:	f000 80d1 	beq.w	80062bc <_printf_i+0x1c4>
 800611a:	2f58      	cmp	r7, #88	@ 0x58
 800611c:	f000 80b8 	beq.w	8006290 <_printf_i+0x198>
 8006120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006128:	e03a      	b.n	80061a0 <_printf_i+0xa8>
 800612a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800612e:	2b15      	cmp	r3, #21
 8006130:	d8f6      	bhi.n	8006120 <_printf_i+0x28>
 8006132:	a101      	add	r1, pc, #4	@ (adr r1, 8006138 <_printf_i+0x40>)
 8006134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006138:	08006191 	.word	0x08006191
 800613c:	080061a5 	.word	0x080061a5
 8006140:	08006121 	.word	0x08006121
 8006144:	08006121 	.word	0x08006121
 8006148:	08006121 	.word	0x08006121
 800614c:	08006121 	.word	0x08006121
 8006150:	080061a5 	.word	0x080061a5
 8006154:	08006121 	.word	0x08006121
 8006158:	08006121 	.word	0x08006121
 800615c:	08006121 	.word	0x08006121
 8006160:	08006121 	.word	0x08006121
 8006164:	080062a3 	.word	0x080062a3
 8006168:	080061cf 	.word	0x080061cf
 800616c:	0800625d 	.word	0x0800625d
 8006170:	08006121 	.word	0x08006121
 8006174:	08006121 	.word	0x08006121
 8006178:	080062c5 	.word	0x080062c5
 800617c:	08006121 	.word	0x08006121
 8006180:	080061cf 	.word	0x080061cf
 8006184:	08006121 	.word	0x08006121
 8006188:	08006121 	.word	0x08006121
 800618c:	08006265 	.word	0x08006265
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	1d1a      	adds	r2, r3, #4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6032      	str	r2, [r6, #0]
 8006198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800619c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061a0:	2301      	movs	r3, #1
 80061a2:	e09c      	b.n	80062de <_printf_i+0x1e6>
 80061a4:	6833      	ldr	r3, [r6, #0]
 80061a6:	6820      	ldr	r0, [r4, #0]
 80061a8:	1d19      	adds	r1, r3, #4
 80061aa:	6031      	str	r1, [r6, #0]
 80061ac:	0606      	lsls	r6, r0, #24
 80061ae:	d501      	bpl.n	80061b4 <_printf_i+0xbc>
 80061b0:	681d      	ldr	r5, [r3, #0]
 80061b2:	e003      	b.n	80061bc <_printf_i+0xc4>
 80061b4:	0645      	lsls	r5, r0, #25
 80061b6:	d5fb      	bpl.n	80061b0 <_printf_i+0xb8>
 80061b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061bc:	2d00      	cmp	r5, #0
 80061be:	da03      	bge.n	80061c8 <_printf_i+0xd0>
 80061c0:	232d      	movs	r3, #45	@ 0x2d
 80061c2:	426d      	negs	r5, r5
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061c8:	230a      	movs	r3, #10
 80061ca:	4858      	ldr	r0, [pc, #352]	@ (800632c <_printf_i+0x234>)
 80061cc:	e011      	b.n	80061f2 <_printf_i+0xfa>
 80061ce:	6821      	ldr	r1, [r4, #0]
 80061d0:	6833      	ldr	r3, [r6, #0]
 80061d2:	0608      	lsls	r0, r1, #24
 80061d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80061d8:	d402      	bmi.n	80061e0 <_printf_i+0xe8>
 80061da:	0649      	lsls	r1, r1, #25
 80061dc:	bf48      	it	mi
 80061de:	b2ad      	uxthmi	r5, r5
 80061e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80061e2:	6033      	str	r3, [r6, #0]
 80061e4:	bf14      	ite	ne
 80061e6:	230a      	movne	r3, #10
 80061e8:	2308      	moveq	r3, #8
 80061ea:	4850      	ldr	r0, [pc, #320]	@ (800632c <_printf_i+0x234>)
 80061ec:	2100      	movs	r1, #0
 80061ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061f2:	6866      	ldr	r6, [r4, #4]
 80061f4:	2e00      	cmp	r6, #0
 80061f6:	60a6      	str	r6, [r4, #8]
 80061f8:	db05      	blt.n	8006206 <_printf_i+0x10e>
 80061fa:	6821      	ldr	r1, [r4, #0]
 80061fc:	432e      	orrs	r6, r5
 80061fe:	f021 0104 	bic.w	r1, r1, #4
 8006202:	6021      	str	r1, [r4, #0]
 8006204:	d04b      	beq.n	800629e <_printf_i+0x1a6>
 8006206:	4616      	mov	r6, r2
 8006208:	fbb5 f1f3 	udiv	r1, r5, r3
 800620c:	fb03 5711 	mls	r7, r3, r1, r5
 8006210:	5dc7      	ldrb	r7, [r0, r7]
 8006212:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006216:	462f      	mov	r7, r5
 8006218:	42bb      	cmp	r3, r7
 800621a:	460d      	mov	r5, r1
 800621c:	d9f4      	bls.n	8006208 <_printf_i+0x110>
 800621e:	2b08      	cmp	r3, #8
 8006220:	d10b      	bne.n	800623a <_printf_i+0x142>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	07df      	lsls	r7, r3, #31
 8006226:	d508      	bpl.n	800623a <_printf_i+0x142>
 8006228:	6923      	ldr	r3, [r4, #16]
 800622a:	6861      	ldr	r1, [r4, #4]
 800622c:	4299      	cmp	r1, r3
 800622e:	bfde      	ittt	le
 8006230:	2330      	movle	r3, #48	@ 0x30
 8006232:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006236:	f106 36ff 	addle.w	r6, r6, #4294967295
 800623a:	1b92      	subs	r2, r2, r6
 800623c:	6122      	str	r2, [r4, #16]
 800623e:	464b      	mov	r3, r9
 8006240:	4621      	mov	r1, r4
 8006242:	4640      	mov	r0, r8
 8006244:	f8cd a000 	str.w	sl, [sp]
 8006248:	aa03      	add	r2, sp, #12
 800624a:	f7ff fee3 	bl	8006014 <_printf_common>
 800624e:	3001      	adds	r0, #1
 8006250:	d14a      	bne.n	80062e8 <_printf_i+0x1f0>
 8006252:	f04f 30ff 	mov.w	r0, #4294967295
 8006256:	b004      	add	sp, #16
 8006258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2778      	movs	r7, #120	@ 0x78
 8006266:	4832      	ldr	r0, [pc, #200]	@ (8006330 <_printf_i+0x238>)
 8006268:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	6831      	ldr	r1, [r6, #0]
 8006270:	061f      	lsls	r7, r3, #24
 8006272:	f851 5b04 	ldr.w	r5, [r1], #4
 8006276:	d402      	bmi.n	800627e <_printf_i+0x186>
 8006278:	065f      	lsls	r7, r3, #25
 800627a:	bf48      	it	mi
 800627c:	b2ad      	uxthmi	r5, r5
 800627e:	6031      	str	r1, [r6, #0]
 8006280:	07d9      	lsls	r1, r3, #31
 8006282:	bf44      	itt	mi
 8006284:	f043 0320 	orrmi.w	r3, r3, #32
 8006288:	6023      	strmi	r3, [r4, #0]
 800628a:	b11d      	cbz	r5, 8006294 <_printf_i+0x19c>
 800628c:	2310      	movs	r3, #16
 800628e:	e7ad      	b.n	80061ec <_printf_i+0xf4>
 8006290:	4826      	ldr	r0, [pc, #152]	@ (800632c <_printf_i+0x234>)
 8006292:	e7e9      	b.n	8006268 <_printf_i+0x170>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	f023 0320 	bic.w	r3, r3, #32
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	e7f6      	b.n	800628c <_printf_i+0x194>
 800629e:	4616      	mov	r6, r2
 80062a0:	e7bd      	b.n	800621e <_printf_i+0x126>
 80062a2:	6833      	ldr	r3, [r6, #0]
 80062a4:	6825      	ldr	r5, [r4, #0]
 80062a6:	1d18      	adds	r0, r3, #4
 80062a8:	6961      	ldr	r1, [r4, #20]
 80062aa:	6030      	str	r0, [r6, #0]
 80062ac:	062e      	lsls	r6, r5, #24
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	d501      	bpl.n	80062b6 <_printf_i+0x1be>
 80062b2:	6019      	str	r1, [r3, #0]
 80062b4:	e002      	b.n	80062bc <_printf_i+0x1c4>
 80062b6:	0668      	lsls	r0, r5, #25
 80062b8:	d5fb      	bpl.n	80062b2 <_printf_i+0x1ba>
 80062ba:	8019      	strh	r1, [r3, #0]
 80062bc:	2300      	movs	r3, #0
 80062be:	4616      	mov	r6, r2
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	e7bc      	b.n	800623e <_printf_i+0x146>
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	2100      	movs	r1, #0
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	6032      	str	r2, [r6, #0]
 80062cc:	681e      	ldr	r6, [r3, #0]
 80062ce:	6862      	ldr	r2, [r4, #4]
 80062d0:	4630      	mov	r0, r6
 80062d2:	f000 fbe0 	bl	8006a96 <memchr>
 80062d6:	b108      	cbz	r0, 80062dc <_printf_i+0x1e4>
 80062d8:	1b80      	subs	r0, r0, r6
 80062da:	6060      	str	r0, [r4, #4]
 80062dc:	6863      	ldr	r3, [r4, #4]
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	2300      	movs	r3, #0
 80062e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e6:	e7aa      	b.n	800623e <_printf_i+0x146>
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	47d0      	blx	sl
 80062f2:	3001      	adds	r0, #1
 80062f4:	d0ad      	beq.n	8006252 <_printf_i+0x15a>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	079b      	lsls	r3, r3, #30
 80062fa:	d413      	bmi.n	8006324 <_printf_i+0x22c>
 80062fc:	68e0      	ldr	r0, [r4, #12]
 80062fe:	9b03      	ldr	r3, [sp, #12]
 8006300:	4298      	cmp	r0, r3
 8006302:	bfb8      	it	lt
 8006304:	4618      	movlt	r0, r3
 8006306:	e7a6      	b.n	8006256 <_printf_i+0x15e>
 8006308:	2301      	movs	r3, #1
 800630a:	4632      	mov	r2, r6
 800630c:	4649      	mov	r1, r9
 800630e:	4640      	mov	r0, r8
 8006310:	47d0      	blx	sl
 8006312:	3001      	adds	r0, #1
 8006314:	d09d      	beq.n	8006252 <_printf_i+0x15a>
 8006316:	3501      	adds	r5, #1
 8006318:	68e3      	ldr	r3, [r4, #12]
 800631a:	9903      	ldr	r1, [sp, #12]
 800631c:	1a5b      	subs	r3, r3, r1
 800631e:	42ab      	cmp	r3, r5
 8006320:	dcf2      	bgt.n	8006308 <_printf_i+0x210>
 8006322:	e7eb      	b.n	80062fc <_printf_i+0x204>
 8006324:	2500      	movs	r5, #0
 8006326:	f104 0619 	add.w	r6, r4, #25
 800632a:	e7f5      	b.n	8006318 <_printf_i+0x220>
 800632c:	0800a228 	.word	0x0800a228
 8006330:	0800a239 	.word	0x0800a239

08006334 <_scanf_float>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	b087      	sub	sp, #28
 800633a:	9303      	str	r3, [sp, #12]
 800633c:	688b      	ldr	r3, [r1, #8]
 800633e:	4691      	mov	r9, r2
 8006340:	1e5a      	subs	r2, r3, #1
 8006342:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006346:	bf82      	ittt	hi
 8006348:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800634c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006350:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006354:	460a      	mov	r2, r1
 8006356:	f04f 0500 	mov.w	r5, #0
 800635a:	bf88      	it	hi
 800635c:	608b      	strhi	r3, [r1, #8]
 800635e:	680b      	ldr	r3, [r1, #0]
 8006360:	4680      	mov	r8, r0
 8006362:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006366:	f842 3b1c 	str.w	r3, [r2], #28
 800636a:	460c      	mov	r4, r1
 800636c:	bf98      	it	ls
 800636e:	f04f 0b00 	movls.w	fp, #0
 8006372:	4616      	mov	r6, r2
 8006374:	46aa      	mov	sl, r5
 8006376:	462f      	mov	r7, r5
 8006378:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800637c:	9201      	str	r2, [sp, #4]
 800637e:	9502      	str	r5, [sp, #8]
 8006380:	68a2      	ldr	r2, [r4, #8]
 8006382:	b15a      	cbz	r2, 800639c <_scanf_float+0x68>
 8006384:	f8d9 3000 	ldr.w	r3, [r9]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b4e      	cmp	r3, #78	@ 0x4e
 800638c:	d862      	bhi.n	8006454 <_scanf_float+0x120>
 800638e:	2b40      	cmp	r3, #64	@ 0x40
 8006390:	d83a      	bhi.n	8006408 <_scanf_float+0xd4>
 8006392:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006396:	b2c8      	uxtb	r0, r1
 8006398:	280e      	cmp	r0, #14
 800639a:	d938      	bls.n	800640e <_scanf_float+0xda>
 800639c:	b11f      	cbz	r7, 80063a6 <_scanf_float+0x72>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063aa:	f1ba 0f01 	cmp.w	sl, #1
 80063ae:	f200 8114 	bhi.w	80065da <_scanf_float+0x2a6>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	429e      	cmp	r6, r3
 80063b6:	f200 8105 	bhi.w	80065c4 <_scanf_float+0x290>
 80063ba:	2001      	movs	r0, #1
 80063bc:	b007      	add	sp, #28
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80063c6:	2a0d      	cmp	r2, #13
 80063c8:	d8e8      	bhi.n	800639c <_scanf_float+0x68>
 80063ca:	a101      	add	r1, pc, #4	@ (adr r1, 80063d0 <_scanf_float+0x9c>)
 80063cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063d0:	08006519 	.word	0x08006519
 80063d4:	0800639d 	.word	0x0800639d
 80063d8:	0800639d 	.word	0x0800639d
 80063dc:	0800639d 	.word	0x0800639d
 80063e0:	08006575 	.word	0x08006575
 80063e4:	0800654f 	.word	0x0800654f
 80063e8:	0800639d 	.word	0x0800639d
 80063ec:	0800639d 	.word	0x0800639d
 80063f0:	08006527 	.word	0x08006527
 80063f4:	0800639d 	.word	0x0800639d
 80063f8:	0800639d 	.word	0x0800639d
 80063fc:	0800639d 	.word	0x0800639d
 8006400:	0800639d 	.word	0x0800639d
 8006404:	080064e3 	.word	0x080064e3
 8006408:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800640c:	e7db      	b.n	80063c6 <_scanf_float+0x92>
 800640e:	290e      	cmp	r1, #14
 8006410:	d8c4      	bhi.n	800639c <_scanf_float+0x68>
 8006412:	a001      	add	r0, pc, #4	@ (adr r0, 8006418 <_scanf_float+0xe4>)
 8006414:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006418:	080064d3 	.word	0x080064d3
 800641c:	0800639d 	.word	0x0800639d
 8006420:	080064d3 	.word	0x080064d3
 8006424:	08006563 	.word	0x08006563
 8006428:	0800639d 	.word	0x0800639d
 800642c:	08006475 	.word	0x08006475
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064b9 	.word	0x080064b9
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b9 	.word	0x080064b9
 8006454:	2b6e      	cmp	r3, #110	@ 0x6e
 8006456:	d809      	bhi.n	800646c <_scanf_float+0x138>
 8006458:	2b60      	cmp	r3, #96	@ 0x60
 800645a:	d8b2      	bhi.n	80063c2 <_scanf_float+0x8e>
 800645c:	2b54      	cmp	r3, #84	@ 0x54
 800645e:	d07b      	beq.n	8006558 <_scanf_float+0x224>
 8006460:	2b59      	cmp	r3, #89	@ 0x59
 8006462:	d19b      	bne.n	800639c <_scanf_float+0x68>
 8006464:	2d07      	cmp	r5, #7
 8006466:	d199      	bne.n	800639c <_scanf_float+0x68>
 8006468:	2508      	movs	r5, #8
 800646a:	e02f      	b.n	80064cc <_scanf_float+0x198>
 800646c:	2b74      	cmp	r3, #116	@ 0x74
 800646e:	d073      	beq.n	8006558 <_scanf_float+0x224>
 8006470:	2b79      	cmp	r3, #121	@ 0x79
 8006472:	e7f6      	b.n	8006462 <_scanf_float+0x12e>
 8006474:	6821      	ldr	r1, [r4, #0]
 8006476:	05c8      	lsls	r0, r1, #23
 8006478:	d51e      	bpl.n	80064b8 <_scanf_float+0x184>
 800647a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800647e:	6021      	str	r1, [r4, #0]
 8006480:	3701      	adds	r7, #1
 8006482:	f1bb 0f00 	cmp.w	fp, #0
 8006486:	d003      	beq.n	8006490 <_scanf_float+0x15c>
 8006488:	3201      	adds	r2, #1
 800648a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800648e:	60a2      	str	r2, [r4, #8]
 8006490:	68a3      	ldr	r3, [r4, #8]
 8006492:	3b01      	subs	r3, #1
 8006494:	60a3      	str	r3, [r4, #8]
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	3301      	adds	r3, #1
 800649a:	6123      	str	r3, [r4, #16]
 800649c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f8c9 3004 	str.w	r3, [r9, #4]
 80064a8:	f340 8083 	ble.w	80065b2 <_scanf_float+0x27e>
 80064ac:	f8d9 3000 	ldr.w	r3, [r9]
 80064b0:	3301      	adds	r3, #1
 80064b2:	f8c9 3000 	str.w	r3, [r9]
 80064b6:	e763      	b.n	8006380 <_scanf_float+0x4c>
 80064b8:	eb1a 0105 	adds.w	r1, sl, r5
 80064bc:	f47f af6e 	bne.w	800639c <_scanf_float+0x68>
 80064c0:	460d      	mov	r5, r1
 80064c2:	468a      	mov	sl, r1
 80064c4:	6822      	ldr	r2, [r4, #0]
 80064c6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80064ca:	6022      	str	r2, [r4, #0]
 80064cc:	f806 3b01 	strb.w	r3, [r6], #1
 80064d0:	e7de      	b.n	8006490 <_scanf_float+0x15c>
 80064d2:	6822      	ldr	r2, [r4, #0]
 80064d4:	0610      	lsls	r0, r2, #24
 80064d6:	f57f af61 	bpl.w	800639c <_scanf_float+0x68>
 80064da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064de:	6022      	str	r2, [r4, #0]
 80064e0:	e7f4      	b.n	80064cc <_scanf_float+0x198>
 80064e2:	f1ba 0f00 	cmp.w	sl, #0
 80064e6:	d10c      	bne.n	8006502 <_scanf_float+0x1ce>
 80064e8:	b977      	cbnz	r7, 8006508 <_scanf_float+0x1d4>
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80064f0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80064f4:	d108      	bne.n	8006508 <_scanf_float+0x1d4>
 80064f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80064fa:	f04f 0a01 	mov.w	sl, #1
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	e7e4      	b.n	80064cc <_scanf_float+0x198>
 8006502:	f1ba 0f02 	cmp.w	sl, #2
 8006506:	d051      	beq.n	80065ac <_scanf_float+0x278>
 8006508:	2d01      	cmp	r5, #1
 800650a:	d002      	beq.n	8006512 <_scanf_float+0x1de>
 800650c:	2d04      	cmp	r5, #4
 800650e:	f47f af45 	bne.w	800639c <_scanf_float+0x68>
 8006512:	3501      	adds	r5, #1
 8006514:	b2ed      	uxtb	r5, r5
 8006516:	e7d9      	b.n	80064cc <_scanf_float+0x198>
 8006518:	f1ba 0f01 	cmp.w	sl, #1
 800651c:	f47f af3e 	bne.w	800639c <_scanf_float+0x68>
 8006520:	f04f 0a02 	mov.w	sl, #2
 8006524:	e7d2      	b.n	80064cc <_scanf_float+0x198>
 8006526:	b975      	cbnz	r5, 8006546 <_scanf_float+0x212>
 8006528:	2f00      	cmp	r7, #0
 800652a:	f47f af38 	bne.w	800639e <_scanf_float+0x6a>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006534:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006538:	f040 80ff 	bne.w	800673a <_scanf_float+0x406>
 800653c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006540:	2501      	movs	r5, #1
 8006542:	6022      	str	r2, [r4, #0]
 8006544:	e7c2      	b.n	80064cc <_scanf_float+0x198>
 8006546:	2d03      	cmp	r5, #3
 8006548:	d0e3      	beq.n	8006512 <_scanf_float+0x1de>
 800654a:	2d05      	cmp	r5, #5
 800654c:	e7df      	b.n	800650e <_scanf_float+0x1da>
 800654e:	2d02      	cmp	r5, #2
 8006550:	f47f af24 	bne.w	800639c <_scanf_float+0x68>
 8006554:	2503      	movs	r5, #3
 8006556:	e7b9      	b.n	80064cc <_scanf_float+0x198>
 8006558:	2d06      	cmp	r5, #6
 800655a:	f47f af1f 	bne.w	800639c <_scanf_float+0x68>
 800655e:	2507      	movs	r5, #7
 8006560:	e7b4      	b.n	80064cc <_scanf_float+0x198>
 8006562:	6822      	ldr	r2, [r4, #0]
 8006564:	0591      	lsls	r1, r2, #22
 8006566:	f57f af19 	bpl.w	800639c <_scanf_float+0x68>
 800656a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800656e:	6022      	str	r2, [r4, #0]
 8006570:	9702      	str	r7, [sp, #8]
 8006572:	e7ab      	b.n	80064cc <_scanf_float+0x198>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800657a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800657e:	d005      	beq.n	800658c <_scanf_float+0x258>
 8006580:	0550      	lsls	r0, r2, #21
 8006582:	f57f af0b 	bpl.w	800639c <_scanf_float+0x68>
 8006586:	2f00      	cmp	r7, #0
 8006588:	f000 80d7 	beq.w	800673a <_scanf_float+0x406>
 800658c:	0591      	lsls	r1, r2, #22
 800658e:	bf58      	it	pl
 8006590:	9902      	ldrpl	r1, [sp, #8]
 8006592:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006596:	bf58      	it	pl
 8006598:	1a79      	subpl	r1, r7, r1
 800659a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800659e:	f04f 0700 	mov.w	r7, #0
 80065a2:	bf58      	it	pl
 80065a4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065a8:	6022      	str	r2, [r4, #0]
 80065aa:	e78f      	b.n	80064cc <_scanf_float+0x198>
 80065ac:	f04f 0a03 	mov.w	sl, #3
 80065b0:	e78c      	b.n	80064cc <_scanf_float+0x198>
 80065b2:	4649      	mov	r1, r9
 80065b4:	4640      	mov	r0, r8
 80065b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80065ba:	4798      	blx	r3
 80065bc:	2800      	cmp	r0, #0
 80065be:	f43f aedf 	beq.w	8006380 <_scanf_float+0x4c>
 80065c2:	e6eb      	b.n	800639c <_scanf_float+0x68>
 80065c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065c8:	464a      	mov	r2, r9
 80065ca:	4640      	mov	r0, r8
 80065cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065d0:	4798      	blx	r3
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	e6eb      	b.n	80063b2 <_scanf_float+0x7e>
 80065da:	1e6b      	subs	r3, r5, #1
 80065dc:	2b06      	cmp	r3, #6
 80065de:	d824      	bhi.n	800662a <_scanf_float+0x2f6>
 80065e0:	2d02      	cmp	r5, #2
 80065e2:	d836      	bhi.n	8006652 <_scanf_float+0x31e>
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	429e      	cmp	r6, r3
 80065e8:	f67f aee7 	bls.w	80063ba <_scanf_float+0x86>
 80065ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065f0:	464a      	mov	r2, r9
 80065f2:	4640      	mov	r0, r8
 80065f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065f8:	4798      	blx	r3
 80065fa:	6923      	ldr	r3, [r4, #16]
 80065fc:	3b01      	subs	r3, #1
 80065fe:	6123      	str	r3, [r4, #16]
 8006600:	e7f0      	b.n	80065e4 <_scanf_float+0x2b0>
 8006602:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006606:	464a      	mov	r2, r9
 8006608:	4640      	mov	r0, r8
 800660a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800660e:	4798      	blx	r3
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	3b01      	subs	r3, #1
 8006614:	6123      	str	r3, [r4, #16]
 8006616:	f10a 3aff 	add.w	sl, sl, #4294967295
 800661a:	fa5f fa8a 	uxtb.w	sl, sl
 800661e:	f1ba 0f02 	cmp.w	sl, #2
 8006622:	d1ee      	bne.n	8006602 <_scanf_float+0x2ce>
 8006624:	3d03      	subs	r5, #3
 8006626:	b2ed      	uxtb	r5, r5
 8006628:	1b76      	subs	r6, r6, r5
 800662a:	6823      	ldr	r3, [r4, #0]
 800662c:	05da      	lsls	r2, r3, #23
 800662e:	d530      	bpl.n	8006692 <_scanf_float+0x35e>
 8006630:	055b      	lsls	r3, r3, #21
 8006632:	d511      	bpl.n	8006658 <_scanf_float+0x324>
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	429e      	cmp	r6, r3
 8006638:	f67f aebf 	bls.w	80063ba <_scanf_float+0x86>
 800663c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006640:	464a      	mov	r2, r9
 8006642:	4640      	mov	r0, r8
 8006644:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006648:	4798      	blx	r3
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	3b01      	subs	r3, #1
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	e7f0      	b.n	8006634 <_scanf_float+0x300>
 8006652:	46aa      	mov	sl, r5
 8006654:	46b3      	mov	fp, r6
 8006656:	e7de      	b.n	8006616 <_scanf_float+0x2e2>
 8006658:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800665c:	6923      	ldr	r3, [r4, #16]
 800665e:	2965      	cmp	r1, #101	@ 0x65
 8006660:	f103 33ff 	add.w	r3, r3, #4294967295
 8006664:	f106 35ff 	add.w	r5, r6, #4294967295
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	d00c      	beq.n	8006686 <_scanf_float+0x352>
 800666c:	2945      	cmp	r1, #69	@ 0x45
 800666e:	d00a      	beq.n	8006686 <_scanf_float+0x352>
 8006670:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006674:	464a      	mov	r2, r9
 8006676:	4640      	mov	r0, r8
 8006678:	4798      	blx	r3
 800667a:	6923      	ldr	r3, [r4, #16]
 800667c:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006680:	3b01      	subs	r3, #1
 8006682:	1eb5      	subs	r5, r6, #2
 8006684:	6123      	str	r3, [r4, #16]
 8006686:	464a      	mov	r2, r9
 8006688:	4640      	mov	r0, r8
 800668a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800668e:	4798      	blx	r3
 8006690:	462e      	mov	r6, r5
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	f012 0210 	ands.w	r2, r2, #16
 8006698:	d001      	beq.n	800669e <_scanf_float+0x36a>
 800669a:	2000      	movs	r0, #0
 800669c:	e68e      	b.n	80063bc <_scanf_float+0x88>
 800669e:	7032      	strb	r2, [r6, #0]
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066aa:	d125      	bne.n	80066f8 <_scanf_float+0x3c4>
 80066ac:	9b02      	ldr	r3, [sp, #8]
 80066ae:	429f      	cmp	r7, r3
 80066b0:	d00a      	beq.n	80066c8 <_scanf_float+0x394>
 80066b2:	1bda      	subs	r2, r3, r7
 80066b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80066b8:	429e      	cmp	r6, r3
 80066ba:	bf28      	it	cs
 80066bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80066c0:	4630      	mov	r0, r6
 80066c2:	491f      	ldr	r1, [pc, #124]	@ (8006740 <_scanf_float+0x40c>)
 80066c4:	f000 f902 	bl	80068cc <siprintf>
 80066c8:	2200      	movs	r2, #0
 80066ca:	4640      	mov	r0, r8
 80066cc:	9901      	ldr	r1, [sp, #4]
 80066ce:	f002 fbeb 	bl	8008ea8 <_strtod_r>
 80066d2:	9b03      	ldr	r3, [sp, #12]
 80066d4:	6825      	ldr	r5, [r4, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f015 0f02 	tst.w	r5, #2
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	f103 0204 	add.w	r2, r3, #4
 80066e4:	d015      	beq.n	8006712 <_scanf_float+0x3de>
 80066e6:	9903      	ldr	r1, [sp, #12]
 80066e8:	600a      	str	r2, [r1, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	e9c3 6700 	strd	r6, r7, [r3]
 80066f0:	68e3      	ldr	r3, [r4, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60e3      	str	r3, [r4, #12]
 80066f6:	e7d0      	b.n	800669a <_scanf_float+0x366>
 80066f8:	9b04      	ldr	r3, [sp, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0e4      	beq.n	80066c8 <_scanf_float+0x394>
 80066fe:	9905      	ldr	r1, [sp, #20]
 8006700:	230a      	movs	r3, #10
 8006702:	4640      	mov	r0, r8
 8006704:	3101      	adds	r1, #1
 8006706:	f002 fc4f 	bl	8008fa8 <_strtol_r>
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	9e05      	ldr	r6, [sp, #20]
 800670e:	1ac2      	subs	r2, r0, r3
 8006710:	e7d0      	b.n	80066b4 <_scanf_float+0x380>
 8006712:	076d      	lsls	r5, r5, #29
 8006714:	d4e7      	bmi.n	80066e6 <_scanf_float+0x3b2>
 8006716:	9d03      	ldr	r5, [sp, #12]
 8006718:	602a      	str	r2, [r5, #0]
 800671a:	681d      	ldr	r5, [r3, #0]
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	f7fa f974 	bl	8000a0c <__aeabi_dcmpun>
 8006724:	b120      	cbz	r0, 8006730 <_scanf_float+0x3fc>
 8006726:	4807      	ldr	r0, [pc, #28]	@ (8006744 <_scanf_float+0x410>)
 8006728:	f000 f9c4 	bl	8006ab4 <nanf>
 800672c:	6028      	str	r0, [r5, #0]
 800672e:	e7df      	b.n	80066f0 <_scanf_float+0x3bc>
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7fa f9c8 	bl	8000ac8 <__aeabi_d2f>
 8006738:	e7f8      	b.n	800672c <_scanf_float+0x3f8>
 800673a:	2700      	movs	r7, #0
 800673c:	e633      	b.n	80063a6 <_scanf_float+0x72>
 800673e:	bf00      	nop
 8006740:	0800a24a 	.word	0x0800a24a
 8006744:	0800a38b 	.word	0x0800a38b

08006748 <std>:
 8006748:	2300      	movs	r3, #0
 800674a:	b510      	push	{r4, lr}
 800674c:	4604      	mov	r4, r0
 800674e:	e9c0 3300 	strd	r3, r3, [r0]
 8006752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006756:	6083      	str	r3, [r0, #8]
 8006758:	8181      	strh	r1, [r0, #12]
 800675a:	6643      	str	r3, [r0, #100]	@ 0x64
 800675c:	81c2      	strh	r2, [r0, #14]
 800675e:	6183      	str	r3, [r0, #24]
 8006760:	4619      	mov	r1, r3
 8006762:	2208      	movs	r2, #8
 8006764:	305c      	adds	r0, #92	@ 0x5c
 8006766:	f000 f916 	bl	8006996 <memset>
 800676a:	4b0d      	ldr	r3, [pc, #52]	@ (80067a0 <std+0x58>)
 800676c:	6224      	str	r4, [r4, #32]
 800676e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006770:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <std+0x5c>)
 8006772:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006774:	4b0c      	ldr	r3, [pc, #48]	@ (80067a8 <std+0x60>)
 8006776:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006778:	4b0c      	ldr	r3, [pc, #48]	@ (80067ac <std+0x64>)
 800677a:	6323      	str	r3, [r4, #48]	@ 0x30
 800677c:	4b0c      	ldr	r3, [pc, #48]	@ (80067b0 <std+0x68>)
 800677e:	429c      	cmp	r4, r3
 8006780:	d006      	beq.n	8006790 <std+0x48>
 8006782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006786:	4294      	cmp	r4, r2
 8006788:	d002      	beq.n	8006790 <std+0x48>
 800678a:	33d0      	adds	r3, #208	@ 0xd0
 800678c:	429c      	cmp	r4, r3
 800678e:	d105      	bne.n	800679c <std+0x54>
 8006790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006798:	f000 b97a 	b.w	8006a90 <__retarget_lock_init_recursive>
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	08006911 	.word	0x08006911
 80067a4:	08006933 	.word	0x08006933
 80067a8:	0800696b 	.word	0x0800696b
 80067ac:	0800698f 	.word	0x0800698f
 80067b0:	200002a4 	.word	0x200002a4

080067b4 <stdio_exit_handler>:
 80067b4:	4a02      	ldr	r2, [pc, #8]	@ (80067c0 <stdio_exit_handler+0xc>)
 80067b6:	4903      	ldr	r1, [pc, #12]	@ (80067c4 <stdio_exit_handler+0x10>)
 80067b8:	4803      	ldr	r0, [pc, #12]	@ (80067c8 <stdio_exit_handler+0x14>)
 80067ba:	f000 b869 	b.w	8006890 <_fwalk_sglue>
 80067be:	bf00      	nop
 80067c0:	20000014 	.word	0x20000014
 80067c4:	0800935d 	.word	0x0800935d
 80067c8:	20000024 	.word	0x20000024

080067cc <cleanup_stdio>:
 80067cc:	6841      	ldr	r1, [r0, #4]
 80067ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006800 <cleanup_stdio+0x34>)
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4299      	cmp	r1, r3
 80067d4:	4604      	mov	r4, r0
 80067d6:	d001      	beq.n	80067dc <cleanup_stdio+0x10>
 80067d8:	f002 fdc0 	bl	800935c <_fflush_r>
 80067dc:	68a1      	ldr	r1, [r4, #8]
 80067de:	4b09      	ldr	r3, [pc, #36]	@ (8006804 <cleanup_stdio+0x38>)
 80067e0:	4299      	cmp	r1, r3
 80067e2:	d002      	beq.n	80067ea <cleanup_stdio+0x1e>
 80067e4:	4620      	mov	r0, r4
 80067e6:	f002 fdb9 	bl	800935c <_fflush_r>
 80067ea:	68e1      	ldr	r1, [r4, #12]
 80067ec:	4b06      	ldr	r3, [pc, #24]	@ (8006808 <cleanup_stdio+0x3c>)
 80067ee:	4299      	cmp	r1, r3
 80067f0:	d004      	beq.n	80067fc <cleanup_stdio+0x30>
 80067f2:	4620      	mov	r0, r4
 80067f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f8:	f002 bdb0 	b.w	800935c <_fflush_r>
 80067fc:	bd10      	pop	{r4, pc}
 80067fe:	bf00      	nop
 8006800:	200002a4 	.word	0x200002a4
 8006804:	2000030c 	.word	0x2000030c
 8006808:	20000374 	.word	0x20000374

0800680c <global_stdio_init.part.0>:
 800680c:	b510      	push	{r4, lr}
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <global_stdio_init.part.0+0x30>)
 8006810:	4c0b      	ldr	r4, [pc, #44]	@ (8006840 <global_stdio_init.part.0+0x34>)
 8006812:	4a0c      	ldr	r2, [pc, #48]	@ (8006844 <global_stdio_init.part.0+0x38>)
 8006814:	4620      	mov	r0, r4
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	2104      	movs	r1, #4
 800681a:	2200      	movs	r2, #0
 800681c:	f7ff ff94 	bl	8006748 <std>
 8006820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006824:	2201      	movs	r2, #1
 8006826:	2109      	movs	r1, #9
 8006828:	f7ff ff8e 	bl	8006748 <std>
 800682c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006830:	2202      	movs	r2, #2
 8006832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006836:	2112      	movs	r1, #18
 8006838:	f7ff bf86 	b.w	8006748 <std>
 800683c:	200003dc 	.word	0x200003dc
 8006840:	200002a4 	.word	0x200002a4
 8006844:	080067b5 	.word	0x080067b5

08006848 <__sfp_lock_acquire>:
 8006848:	4801      	ldr	r0, [pc, #4]	@ (8006850 <__sfp_lock_acquire+0x8>)
 800684a:	f000 b922 	b.w	8006a92 <__retarget_lock_acquire_recursive>
 800684e:	bf00      	nop
 8006850:	200003e5 	.word	0x200003e5

08006854 <__sfp_lock_release>:
 8006854:	4801      	ldr	r0, [pc, #4]	@ (800685c <__sfp_lock_release+0x8>)
 8006856:	f000 b91d 	b.w	8006a94 <__retarget_lock_release_recursive>
 800685a:	bf00      	nop
 800685c:	200003e5 	.word	0x200003e5

08006860 <__sinit>:
 8006860:	b510      	push	{r4, lr}
 8006862:	4604      	mov	r4, r0
 8006864:	f7ff fff0 	bl	8006848 <__sfp_lock_acquire>
 8006868:	6a23      	ldr	r3, [r4, #32]
 800686a:	b11b      	cbz	r3, 8006874 <__sinit+0x14>
 800686c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006870:	f7ff bff0 	b.w	8006854 <__sfp_lock_release>
 8006874:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <__sinit+0x28>)
 8006876:	6223      	str	r3, [r4, #32]
 8006878:	4b04      	ldr	r3, [pc, #16]	@ (800688c <__sinit+0x2c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1f5      	bne.n	800686c <__sinit+0xc>
 8006880:	f7ff ffc4 	bl	800680c <global_stdio_init.part.0>
 8006884:	e7f2      	b.n	800686c <__sinit+0xc>
 8006886:	bf00      	nop
 8006888:	080067cd 	.word	0x080067cd
 800688c:	200003dc 	.word	0x200003dc

08006890 <_fwalk_sglue>:
 8006890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006894:	4607      	mov	r7, r0
 8006896:	4688      	mov	r8, r1
 8006898:	4614      	mov	r4, r2
 800689a:	2600      	movs	r6, #0
 800689c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068a0:	f1b9 0901 	subs.w	r9, r9, #1
 80068a4:	d505      	bpl.n	80068b2 <_fwalk_sglue+0x22>
 80068a6:	6824      	ldr	r4, [r4, #0]
 80068a8:	2c00      	cmp	r4, #0
 80068aa:	d1f7      	bne.n	800689c <_fwalk_sglue+0xc>
 80068ac:	4630      	mov	r0, r6
 80068ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068b2:	89ab      	ldrh	r3, [r5, #12]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d907      	bls.n	80068c8 <_fwalk_sglue+0x38>
 80068b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068bc:	3301      	adds	r3, #1
 80068be:	d003      	beq.n	80068c8 <_fwalk_sglue+0x38>
 80068c0:	4629      	mov	r1, r5
 80068c2:	4638      	mov	r0, r7
 80068c4:	47c0      	blx	r8
 80068c6:	4306      	orrs	r6, r0
 80068c8:	3568      	adds	r5, #104	@ 0x68
 80068ca:	e7e9      	b.n	80068a0 <_fwalk_sglue+0x10>

080068cc <siprintf>:
 80068cc:	b40e      	push	{r1, r2, r3}
 80068ce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068d2:	b510      	push	{r4, lr}
 80068d4:	2400      	movs	r4, #0
 80068d6:	b09d      	sub	sp, #116	@ 0x74
 80068d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068da:	9002      	str	r0, [sp, #8]
 80068dc:	9006      	str	r0, [sp, #24]
 80068de:	9107      	str	r1, [sp, #28]
 80068e0:	9104      	str	r1, [sp, #16]
 80068e2:	4809      	ldr	r0, [pc, #36]	@ (8006908 <siprintf+0x3c>)
 80068e4:	4909      	ldr	r1, [pc, #36]	@ (800690c <siprintf+0x40>)
 80068e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ea:	9105      	str	r1, [sp, #20]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	a902      	add	r1, sp, #8
 80068f0:	9301      	str	r3, [sp, #4]
 80068f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068f4:	f002 fbb6 	bl	8009064 <_svfiprintf_r>
 80068f8:	9b02      	ldr	r3, [sp, #8]
 80068fa:	701c      	strb	r4, [r3, #0]
 80068fc:	b01d      	add	sp, #116	@ 0x74
 80068fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006902:	b003      	add	sp, #12
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	20000020 	.word	0x20000020
 800690c:	ffff0208 	.word	0xffff0208

08006910 <__sread>:
 8006910:	b510      	push	{r4, lr}
 8006912:	460c      	mov	r4, r1
 8006914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006918:	f000 f86c 	bl	80069f4 <_read_r>
 800691c:	2800      	cmp	r0, #0
 800691e:	bfab      	itete	ge
 8006920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006922:	89a3      	ldrhlt	r3, [r4, #12]
 8006924:	181b      	addge	r3, r3, r0
 8006926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800692a:	bfac      	ite	ge
 800692c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800692e:	81a3      	strhlt	r3, [r4, #12]
 8006930:	bd10      	pop	{r4, pc}

08006932 <__swrite>:
 8006932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006936:	461f      	mov	r7, r3
 8006938:	898b      	ldrh	r3, [r1, #12]
 800693a:	4605      	mov	r5, r0
 800693c:	05db      	lsls	r3, r3, #23
 800693e:	460c      	mov	r4, r1
 8006940:	4616      	mov	r6, r2
 8006942:	d505      	bpl.n	8006950 <__swrite+0x1e>
 8006944:	2302      	movs	r3, #2
 8006946:	2200      	movs	r2, #0
 8006948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800694c:	f000 f840 	bl	80069d0 <_lseek_r>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	4632      	mov	r2, r6
 8006954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	4628      	mov	r0, r5
 800695c:	463b      	mov	r3, r7
 800695e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006966:	f000 b857 	b.w	8006a18 <_write_r>

0800696a <__sseek>:
 800696a:	b510      	push	{r4, lr}
 800696c:	460c      	mov	r4, r1
 800696e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006972:	f000 f82d 	bl	80069d0 <_lseek_r>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	bf15      	itete	ne
 800697c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800697e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006986:	81a3      	strheq	r3, [r4, #12]
 8006988:	bf18      	it	ne
 800698a:	81a3      	strhne	r3, [r4, #12]
 800698c:	bd10      	pop	{r4, pc}

0800698e <__sclose>:
 800698e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006992:	f000 b80d 	b.w	80069b0 <_close_r>

08006996 <memset>:
 8006996:	4603      	mov	r3, r0
 8006998:	4402      	add	r2, r0
 800699a:	4293      	cmp	r3, r2
 800699c:	d100      	bne.n	80069a0 <memset+0xa>
 800699e:	4770      	bx	lr
 80069a0:	f803 1b01 	strb.w	r1, [r3], #1
 80069a4:	e7f9      	b.n	800699a <memset+0x4>
	...

080069a8 <_localeconv_r>:
 80069a8:	4800      	ldr	r0, [pc, #0]	@ (80069ac <_localeconv_r+0x4>)
 80069aa:	4770      	bx	lr
 80069ac:	20000160 	.word	0x20000160

080069b0 <_close_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	2300      	movs	r3, #0
 80069b4:	4d05      	ldr	r5, [pc, #20]	@ (80069cc <_close_r+0x1c>)
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	602b      	str	r3, [r5, #0]
 80069bc:	f7fa fee9 	bl	8001792 <_close>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_close_r+0x1a>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_close_r+0x1a>
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	200003e0 	.word	0x200003e0

080069d0 <_lseek_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	2200      	movs	r2, #0
 80069da:	4d05      	ldr	r5, [pc, #20]	@ (80069f0 <_lseek_r+0x20>)
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fa fefb 	bl	80017da <_lseek>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_lseek_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_lseek_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	200003e0 	.word	0x200003e0

080069f4 <_read_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	4611      	mov	r1, r2
 80069fc:	2200      	movs	r2, #0
 80069fe:	4d05      	ldr	r5, [pc, #20]	@ (8006a14 <_read_r+0x20>)
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f7fa fe8c 	bl	8001720 <_read>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_read_r+0x1e>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_read_r+0x1e>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	200003e0 	.word	0x200003e0

08006a18 <_write_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	2200      	movs	r2, #0
 8006a22:	4d05      	ldr	r5, [pc, #20]	@ (8006a38 <_write_r+0x20>)
 8006a24:	602a      	str	r2, [r5, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f7fa fe97 	bl	800175a <_write>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_write_r+0x1e>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_write_r+0x1e>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	200003e0 	.word	0x200003e0

08006a3c <__errno>:
 8006a3c:	4b01      	ldr	r3, [pc, #4]	@ (8006a44 <__errno+0x8>)
 8006a3e:	6818      	ldr	r0, [r3, #0]
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	20000020 	.word	0x20000020

08006a48 <__libc_init_array>:
 8006a48:	b570      	push	{r4, r5, r6, lr}
 8006a4a:	2600      	movs	r6, #0
 8006a4c:	4d0c      	ldr	r5, [pc, #48]	@ (8006a80 <__libc_init_array+0x38>)
 8006a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8006a84 <__libc_init_array+0x3c>)
 8006a50:	1b64      	subs	r4, r4, r5
 8006a52:	10a4      	asrs	r4, r4, #2
 8006a54:	42a6      	cmp	r6, r4
 8006a56:	d109      	bne.n	8006a6c <__libc_init_array+0x24>
 8006a58:	f003 fb6c 	bl	800a134 <_init>
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8006a88 <__libc_init_array+0x40>)
 8006a60:	4c0a      	ldr	r4, [pc, #40]	@ (8006a8c <__libc_init_array+0x44>)
 8006a62:	1b64      	subs	r4, r4, r5
 8006a64:	10a4      	asrs	r4, r4, #2
 8006a66:	42a6      	cmp	r6, r4
 8006a68:	d105      	bne.n	8006a76 <__libc_init_array+0x2e>
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a70:	4798      	blx	r3
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7ee      	b.n	8006a54 <__libc_init_array+0xc>
 8006a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a7a:	4798      	blx	r3
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	e7f2      	b.n	8006a66 <__libc_init_array+0x1e>
 8006a80:	0800a644 	.word	0x0800a644
 8006a84:	0800a644 	.word	0x0800a644
 8006a88:	0800a644 	.word	0x0800a644
 8006a8c:	0800a648 	.word	0x0800a648

08006a90 <__retarget_lock_init_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <__retarget_lock_acquire_recursive>:
 8006a92:	4770      	bx	lr

08006a94 <__retarget_lock_release_recursive>:
 8006a94:	4770      	bx	lr

08006a96 <memchr>:
 8006a96:	4603      	mov	r3, r0
 8006a98:	b510      	push	{r4, lr}
 8006a9a:	b2c9      	uxtb	r1, r1
 8006a9c:	4402      	add	r2, r0
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	d101      	bne.n	8006aa8 <memchr+0x12>
 8006aa4:	2000      	movs	r0, #0
 8006aa6:	e003      	b.n	8006ab0 <memchr+0x1a>
 8006aa8:	7804      	ldrb	r4, [r0, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	428c      	cmp	r4, r1
 8006aae:	d1f6      	bne.n	8006a9e <memchr+0x8>
 8006ab0:	bd10      	pop	{r4, pc}
	...

08006ab4 <nanf>:
 8006ab4:	4800      	ldr	r0, [pc, #0]	@ (8006ab8 <nanf+0x4>)
 8006ab6:	4770      	bx	lr
 8006ab8:	7fc00000 	.word	0x7fc00000

08006abc <quorem>:
 8006abc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac0:	6903      	ldr	r3, [r0, #16]
 8006ac2:	690c      	ldr	r4, [r1, #16]
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	42a3      	cmp	r3, r4
 8006ac8:	db7e      	blt.n	8006bc8 <quorem+0x10c>
 8006aca:	3c01      	subs	r4, #1
 8006acc:	00a3      	lsls	r3, r4, #2
 8006ace:	f100 0514 	add.w	r5, r0, #20
 8006ad2:	f101 0814 	add.w	r8, r1, #20
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006adc:	9301      	str	r3, [sp, #4]
 8006ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	fbb2 f6f3 	udiv	r6, r2, r3
 8006aee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006af2:	d32e      	bcc.n	8006b52 <quorem+0x96>
 8006af4:	f04f 0a00 	mov.w	sl, #0
 8006af8:	46c4      	mov	ip, r8
 8006afa:	46ae      	mov	lr, r5
 8006afc:	46d3      	mov	fp, sl
 8006afe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b02:	b298      	uxth	r0, r3
 8006b04:	fb06 a000 	mla	r0, r6, r0, sl
 8006b08:	0c1b      	lsrs	r3, r3, #16
 8006b0a:	0c02      	lsrs	r2, r0, #16
 8006b0c:	fb06 2303 	mla	r3, r6, r3, r2
 8006b10:	f8de 2000 	ldr.w	r2, [lr]
 8006b14:	b280      	uxth	r0, r0
 8006b16:	b292      	uxth	r2, r2
 8006b18:	1a12      	subs	r2, r2, r0
 8006b1a:	445a      	add	r2, fp
 8006b1c:	f8de 0000 	ldr.w	r0, [lr]
 8006b20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b2e:	b292      	uxth	r2, r2
 8006b30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b34:	45e1      	cmp	r9, ip
 8006b36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b3a:	f84e 2b04 	str.w	r2, [lr], #4
 8006b3e:	d2de      	bcs.n	8006afe <quorem+0x42>
 8006b40:	9b00      	ldr	r3, [sp, #0]
 8006b42:	58eb      	ldr	r3, [r5, r3]
 8006b44:	b92b      	cbnz	r3, 8006b52 <quorem+0x96>
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	3b04      	subs	r3, #4
 8006b4a:	429d      	cmp	r5, r3
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	d32f      	bcc.n	8006bb0 <quorem+0xf4>
 8006b50:	613c      	str	r4, [r7, #16]
 8006b52:	4638      	mov	r0, r7
 8006b54:	f001 f9ca 	bl	8007eec <__mcmp>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	db25      	blt.n	8006ba8 <quorem+0xec>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	2000      	movs	r0, #0
 8006b60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b64:	f8d1 c000 	ldr.w	ip, [r1]
 8006b68:	fa1f fe82 	uxth.w	lr, r2
 8006b6c:	fa1f f38c 	uxth.w	r3, ip
 8006b70:	eba3 030e 	sub.w	r3, r3, lr
 8006b74:	4403      	add	r3, r0
 8006b76:	0c12      	lsrs	r2, r2, #16
 8006b78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006b7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b86:	45c1      	cmp	r9, r8
 8006b88:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b8c:	f841 3b04 	str.w	r3, [r1], #4
 8006b90:	d2e6      	bcs.n	8006b60 <quorem+0xa4>
 8006b92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b9a:	b922      	cbnz	r2, 8006ba6 <quorem+0xea>
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	d30b      	bcc.n	8006bbc <quorem+0x100>
 8006ba4:	613c      	str	r4, [r7, #16]
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	4630      	mov	r0, r6
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	3b04      	subs	r3, #4
 8006bb4:	2a00      	cmp	r2, #0
 8006bb6:	d1cb      	bne.n	8006b50 <quorem+0x94>
 8006bb8:	3c01      	subs	r4, #1
 8006bba:	e7c6      	b.n	8006b4a <quorem+0x8e>
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	3b04      	subs	r3, #4
 8006bc0:	2a00      	cmp	r2, #0
 8006bc2:	d1ef      	bne.n	8006ba4 <quorem+0xe8>
 8006bc4:	3c01      	subs	r4, #1
 8006bc6:	e7ea      	b.n	8006b9e <quorem+0xe2>
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7ee      	b.n	8006baa <quorem+0xee>
 8006bcc:	0000      	movs	r0, r0
	...

08006bd0 <_dtoa_r>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	69c7      	ldr	r7, [r0, #28]
 8006bda:	b097      	sub	sp, #92	@ 0x5c
 8006bdc:	4681      	mov	r9, r0
 8006bde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006be2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006be4:	b97f      	cbnz	r7, 8006c06 <_dtoa_r+0x36>
 8006be6:	2010      	movs	r0, #16
 8006be8:	f000 fe0e 	bl	8007808 <malloc>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f8c9 001c 	str.w	r0, [r9, #28]
 8006bf2:	b920      	cbnz	r0, 8006bfe <_dtoa_r+0x2e>
 8006bf4:	21ef      	movs	r1, #239	@ 0xef
 8006bf6:	4bac      	ldr	r3, [pc, #688]	@ (8006ea8 <_dtoa_r+0x2d8>)
 8006bf8:	48ac      	ldr	r0, [pc, #688]	@ (8006eac <_dtoa_r+0x2dc>)
 8006bfa:	f002 fc27 	bl	800944c <__assert_func>
 8006bfe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c02:	6007      	str	r7, [r0, #0]
 8006c04:	60c7      	str	r7, [r0, #12]
 8006c06:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	b159      	cbz	r1, 8006c26 <_dtoa_r+0x56>
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	2301      	movs	r3, #1
 8006c12:	4093      	lsls	r3, r2
 8006c14:	604a      	str	r2, [r1, #4]
 8006c16:	608b      	str	r3, [r1, #8]
 8006c18:	4648      	mov	r0, r9
 8006c1a:	f000 feeb 	bl	80079f4 <_Bfree>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	1e2b      	subs	r3, r5, #0
 8006c28:	bfaf      	iteee	ge
 8006c2a:	2300      	movge	r3, #0
 8006c2c:	2201      	movlt	r2, #1
 8006c2e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c32:	9307      	strlt	r3, [sp, #28]
 8006c34:	bfa8      	it	ge
 8006c36:	6033      	strge	r3, [r6, #0]
 8006c38:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006c3c:	4b9c      	ldr	r3, [pc, #624]	@ (8006eb0 <_dtoa_r+0x2e0>)
 8006c3e:	bfb8      	it	lt
 8006c40:	6032      	strlt	r2, [r6, #0]
 8006c42:	ea33 0308 	bics.w	r3, r3, r8
 8006c46:	d112      	bne.n	8006c6e <_dtoa_r+0x9e>
 8006c48:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c4c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006c54:	4323      	orrs	r3, r4
 8006c56:	f000 855e 	beq.w	8007716 <_dtoa_r+0xb46>
 8006c5a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006eb4 <_dtoa_r+0x2e4>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8560 	beq.w	8007726 <_dtoa_r+0xb56>
 8006c66:	f10a 0303 	add.w	r3, sl, #3
 8006c6a:	f000 bd5a 	b.w	8007722 <_dtoa_r+0xb52>
 8006c6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c72:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	f7f9 fe93 	bl	80009a8 <__aeabi_dcmpeq>
 8006c82:	4607      	mov	r7, r0
 8006c84:	b158      	cbz	r0, 8006c9e <_dtoa_r+0xce>
 8006c86:	2301      	movs	r3, #1
 8006c88:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006c8a:	6013      	str	r3, [r2, #0]
 8006c8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c8e:	b113      	cbz	r3, 8006c96 <_dtoa_r+0xc6>
 8006c90:	4b89      	ldr	r3, [pc, #548]	@ (8006eb8 <_dtoa_r+0x2e8>)
 8006c92:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006ebc <_dtoa_r+0x2ec>
 8006c9a:	f000 bd44 	b.w	8007726 <_dtoa_r+0xb56>
 8006c9e:	ab14      	add	r3, sp, #80	@ 0x50
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006cac:	f001 fa36 	bl	800811c <__d2b>
 8006cb0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006cb4:	9003      	str	r0, [sp, #12]
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	d078      	beq.n	8006dac <_dtoa_r+0x1dc>
 8006cba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cc0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cc8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ccc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006cd0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec0 <_dtoa_r+0x2f0>)
 8006cd8:	f7f9 fa46 	bl	8000168 <__aeabi_dsub>
 8006cdc:	a36c      	add	r3, pc, #432	@ (adr r3, 8006e90 <_dtoa_r+0x2c0>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	a36c      	add	r3, pc, #432	@ (adr r3, 8006e98 <_dtoa_r+0x2c8>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7f9 fa3e 	bl	800016c <__adddf3>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	f7f9 fb85 	bl	8000404 <__aeabi_i2d>
 8006cfa:	a369      	add	r3, pc, #420	@ (adr r3, 8006ea0 <_dtoa_r+0x2d0>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fbea 	bl	80004d8 <__aeabi_dmul>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f7f9 fa2e 	bl	800016c <__adddf3>
 8006d10:	4604      	mov	r4, r0
 8006d12:	460d      	mov	r5, r1
 8006d14:	f7f9 fe90 	bl	8000a38 <__aeabi_d2iz>
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fe4b 	bl	80009bc <__aeabi_dcmplt>
 8006d26:	b140      	cbz	r0, 8006d3a <_dtoa_r+0x16a>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7f9 fb6b 	bl	8000404 <__aeabi_i2d>
 8006d2e:	4622      	mov	r2, r4
 8006d30:	462b      	mov	r3, r5
 8006d32:	f7f9 fe39 	bl	80009a8 <__aeabi_dcmpeq>
 8006d36:	b900      	cbnz	r0, 8006d3a <_dtoa_r+0x16a>
 8006d38:	3f01      	subs	r7, #1
 8006d3a:	2f16      	cmp	r7, #22
 8006d3c:	d854      	bhi.n	8006de8 <_dtoa_r+0x218>
 8006d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d42:	4b60      	ldr	r3, [pc, #384]	@ (8006ec4 <_dtoa_r+0x2f4>)
 8006d44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4c:	f7f9 fe36 	bl	80009bc <__aeabi_dcmplt>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	d04b      	beq.n	8006dec <_dtoa_r+0x21c>
 8006d54:	2300      	movs	r3, #0
 8006d56:	3f01      	subs	r7, #1
 8006d58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d5a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d5c:	1b9b      	subs	r3, r3, r6
 8006d5e:	1e5a      	subs	r2, r3, #1
 8006d60:	bf49      	itett	mi
 8006d62:	f1c3 0301 	rsbmi	r3, r3, #1
 8006d66:	2300      	movpl	r3, #0
 8006d68:	9304      	strmi	r3, [sp, #16]
 8006d6a:	2300      	movmi	r3, #0
 8006d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d6e:	bf54      	ite	pl
 8006d70:	9304      	strpl	r3, [sp, #16]
 8006d72:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006d74:	2f00      	cmp	r7, #0
 8006d76:	db3b      	blt.n	8006df0 <_dtoa_r+0x220>
 8006d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7a:	970e      	str	r7, [sp, #56]	@ 0x38
 8006d7c:	443b      	add	r3, r7
 8006d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d80:	2300      	movs	r3, #0
 8006d82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d86:	2b09      	cmp	r3, #9
 8006d88:	d865      	bhi.n	8006e56 <_dtoa_r+0x286>
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	bfc4      	itt	gt
 8006d8e:	3b04      	subgt	r3, #4
 8006d90:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006d92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d94:	bfc8      	it	gt
 8006d96:	2400      	movgt	r4, #0
 8006d98:	f1a3 0302 	sub.w	r3, r3, #2
 8006d9c:	bfd8      	it	le
 8006d9e:	2401      	movle	r4, #1
 8006da0:	2b03      	cmp	r3, #3
 8006da2:	d864      	bhi.n	8006e6e <_dtoa_r+0x29e>
 8006da4:	e8df f003 	tbb	[pc, r3]
 8006da8:	2c385553 	.word	0x2c385553
 8006dac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006db0:	441e      	add	r6, r3
 8006db2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	bfc1      	itttt	gt
 8006dba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006dbe:	fa08 f803 	lslgt.w	r8, r8, r3
 8006dc2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006dc6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006dca:	bfd6      	itet	le
 8006dcc:	f1c3 0320 	rsble	r3, r3, #32
 8006dd0:	ea48 0003 	orrgt.w	r0, r8, r3
 8006dd4:	fa04 f003 	lslle.w	r0, r4, r3
 8006dd8:	f7f9 fb04 	bl	80003e4 <__aeabi_ui2d>
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006de2:	3e01      	subs	r6, #1
 8006de4:	9212      	str	r2, [sp, #72]	@ 0x48
 8006de6:	e774      	b.n	8006cd2 <_dtoa_r+0x102>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e7b5      	b.n	8006d58 <_dtoa_r+0x188>
 8006dec:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006dee:	e7b4      	b.n	8006d5a <_dtoa_r+0x18a>
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	1bdb      	subs	r3, r3, r7
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	427b      	negs	r3, r7
 8006df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	930e      	str	r3, [sp, #56]	@ 0x38
 8006dfe:	e7c1      	b.n	8006d84 <_dtoa_r+0x1b4>
 8006e00:	2301      	movs	r3, #1
 8006e02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e06:	eb07 0b03 	add.w	fp, r7, r3
 8006e0a:	f10b 0301 	add.w	r3, fp, #1
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	9308      	str	r3, [sp, #32]
 8006e12:	bfb8      	it	lt
 8006e14:	2301      	movlt	r3, #1
 8006e16:	e006      	b.n	8006e26 <_dtoa_r+0x256>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	dd28      	ble.n	8006e74 <_dtoa_r+0x2a4>
 8006e22:	469b      	mov	fp, r3
 8006e24:	9308      	str	r3, [sp, #32]
 8006e26:	2100      	movs	r1, #0
 8006e28:	2204      	movs	r2, #4
 8006e2a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006e2e:	f102 0514 	add.w	r5, r2, #20
 8006e32:	429d      	cmp	r5, r3
 8006e34:	d926      	bls.n	8006e84 <_dtoa_r+0x2b4>
 8006e36:	6041      	str	r1, [r0, #4]
 8006e38:	4648      	mov	r0, r9
 8006e3a:	f000 fd9b 	bl	8007974 <_Balloc>
 8006e3e:	4682      	mov	sl, r0
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d143      	bne.n	8006ecc <_dtoa_r+0x2fc>
 8006e44:	4602      	mov	r2, r0
 8006e46:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec8 <_dtoa_r+0x2f8>)
 8006e4c:	e6d4      	b.n	8006bf8 <_dtoa_r+0x28>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	e7e3      	b.n	8006e1a <_dtoa_r+0x24a>
 8006e52:	2300      	movs	r3, #0
 8006e54:	e7d5      	b.n	8006e02 <_dtoa_r+0x232>
 8006e56:	2401      	movs	r4, #1
 8006e58:	2300      	movs	r3, #0
 8006e5a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e5c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006e5e:	f04f 3bff 	mov.w	fp, #4294967295
 8006e62:	2200      	movs	r2, #0
 8006e64:	2312      	movs	r3, #18
 8006e66:	f8cd b020 	str.w	fp, [sp, #32]
 8006e6a:	9221      	str	r2, [sp, #132]	@ 0x84
 8006e6c:	e7db      	b.n	8006e26 <_dtoa_r+0x256>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e72:	e7f4      	b.n	8006e5e <_dtoa_r+0x28e>
 8006e74:	f04f 0b01 	mov.w	fp, #1
 8006e78:	465b      	mov	r3, fp
 8006e7a:	f8cd b020 	str.w	fp, [sp, #32]
 8006e7e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8006e82:	e7d0      	b.n	8006e26 <_dtoa_r+0x256>
 8006e84:	3101      	adds	r1, #1
 8006e86:	0052      	lsls	r2, r2, #1
 8006e88:	e7d1      	b.n	8006e2e <_dtoa_r+0x25e>
 8006e8a:	bf00      	nop
 8006e8c:	f3af 8000 	nop.w
 8006e90:	636f4361 	.word	0x636f4361
 8006e94:	3fd287a7 	.word	0x3fd287a7
 8006e98:	8b60c8b3 	.word	0x8b60c8b3
 8006e9c:	3fc68a28 	.word	0x3fc68a28
 8006ea0:	509f79fb 	.word	0x509f79fb
 8006ea4:	3fd34413 	.word	0x3fd34413
 8006ea8:	0800a25c 	.word	0x0800a25c
 8006eac:	0800a273 	.word	0x0800a273
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	0800a258 	.word	0x0800a258
 8006eb8:	0800a227 	.word	0x0800a227
 8006ebc:	0800a226 	.word	0x0800a226
 8006ec0:	3ff80000 	.word	0x3ff80000
 8006ec4:	0800a420 	.word	0x0800a420
 8006ec8:	0800a2cb 	.word	0x0800a2cb
 8006ecc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006ed0:	6018      	str	r0, [r3, #0]
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	2b0e      	cmp	r3, #14
 8006ed6:	f200 80a1 	bhi.w	800701c <_dtoa_r+0x44c>
 8006eda:	2c00      	cmp	r4, #0
 8006edc:	f000 809e 	beq.w	800701c <_dtoa_r+0x44c>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	dd33      	ble.n	8006f4c <_dtoa_r+0x37c>
 8006ee4:	4b9c      	ldr	r3, [pc, #624]	@ (8007158 <_dtoa_r+0x588>)
 8006ee6:	f007 020f 	and.w	r2, r7, #15
 8006eea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eee:	05f8      	lsls	r0, r7, #23
 8006ef0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ef4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006ef8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006efc:	d516      	bpl.n	8006f2c <_dtoa_r+0x35c>
 8006efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f02:	4b96      	ldr	r3, [pc, #600]	@ (800715c <_dtoa_r+0x58c>)
 8006f04:	2603      	movs	r6, #3
 8006f06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f0a:	f7f9 fc0f 	bl	800072c <__aeabi_ddiv>
 8006f0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f12:	f004 040f 	and.w	r4, r4, #15
 8006f16:	4d91      	ldr	r5, [pc, #580]	@ (800715c <_dtoa_r+0x58c>)
 8006f18:	b954      	cbnz	r4, 8006f30 <_dtoa_r+0x360>
 8006f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f22:	f7f9 fc03 	bl	800072c <__aeabi_ddiv>
 8006f26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f2a:	e028      	b.n	8006f7e <_dtoa_r+0x3ae>
 8006f2c:	2602      	movs	r6, #2
 8006f2e:	e7f2      	b.n	8006f16 <_dtoa_r+0x346>
 8006f30:	07e1      	lsls	r1, r4, #31
 8006f32:	d508      	bpl.n	8006f46 <_dtoa_r+0x376>
 8006f34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f3c:	f7f9 facc 	bl	80004d8 <__aeabi_dmul>
 8006f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f44:	3601      	adds	r6, #1
 8006f46:	1064      	asrs	r4, r4, #1
 8006f48:	3508      	adds	r5, #8
 8006f4a:	e7e5      	b.n	8006f18 <_dtoa_r+0x348>
 8006f4c:	f000 80af 	beq.w	80070ae <_dtoa_r+0x4de>
 8006f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f54:	427c      	negs	r4, r7
 8006f56:	4b80      	ldr	r3, [pc, #512]	@ (8007158 <_dtoa_r+0x588>)
 8006f58:	f004 020f 	and.w	r2, r4, #15
 8006f5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fab8 	bl	80004d8 <__aeabi_dmul>
 8006f68:	2602      	movs	r6, #2
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f70:	4d7a      	ldr	r5, [pc, #488]	@ (800715c <_dtoa_r+0x58c>)
 8006f72:	1124      	asrs	r4, r4, #4
 8006f74:	2c00      	cmp	r4, #0
 8006f76:	f040 808f 	bne.w	8007098 <_dtoa_r+0x4c8>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1d3      	bne.n	8006f26 <_dtoa_r+0x356>
 8006f7e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8094 	beq.w	80070b2 <_dtoa_r+0x4e2>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4b73      	ldr	r3, [pc, #460]	@ (8007160 <_dtoa_r+0x590>)
 8006f92:	f7f9 fd13 	bl	80009bc <__aeabi_dcmplt>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f000 808b 	beq.w	80070b2 <_dtoa_r+0x4e2>
 8006f9c:	9b08      	ldr	r3, [sp, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 8087 	beq.w	80070b2 <_dtoa_r+0x4e2>
 8006fa4:	f1bb 0f00 	cmp.w	fp, #0
 8006fa8:	dd34      	ble.n	8007014 <_dtoa_r+0x444>
 8006faa:	4620      	mov	r0, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	4629      	mov	r1, r5
 8006fb0:	4b6c      	ldr	r3, [pc, #432]	@ (8007164 <_dtoa_r+0x594>)
 8006fb2:	f7f9 fa91 	bl	80004d8 <__aeabi_dmul>
 8006fb6:	465c      	mov	r4, fp
 8006fb8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006fbc:	f107 38ff 	add.w	r8, r7, #4294967295
 8006fc0:	3601      	adds	r6, #1
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7f9 fa1e 	bl	8000404 <__aeabi_i2d>
 8006fc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006fcc:	f7f9 fa84 	bl	80004d8 <__aeabi_dmul>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4b65      	ldr	r3, [pc, #404]	@ (8007168 <_dtoa_r+0x598>)
 8006fd4:	f7f9 f8ca 	bl	800016c <__adddf3>
 8006fd8:	4605      	mov	r5, r0
 8006fda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	d16a      	bne.n	80070b8 <_dtoa_r+0x4e8>
 8006fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4b60      	ldr	r3, [pc, #384]	@ (800716c <_dtoa_r+0x59c>)
 8006fea:	f7f9 f8bd 	bl	8000168 <__aeabi_dsub>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff6:	462a      	mov	r2, r5
 8006ff8:	4633      	mov	r3, r6
 8006ffa:	f7f9 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	f040 8298 	bne.w	8007534 <_dtoa_r+0x964>
 8007004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007008:	462a      	mov	r2, r5
 800700a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800700e:	f7f9 fcd5 	bl	80009bc <__aeabi_dcmplt>
 8007012:	bb38      	cbnz	r0, 8007064 <_dtoa_r+0x494>
 8007014:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007018:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800701c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800701e:	2b00      	cmp	r3, #0
 8007020:	f2c0 8157 	blt.w	80072d2 <_dtoa_r+0x702>
 8007024:	2f0e      	cmp	r7, #14
 8007026:	f300 8154 	bgt.w	80072d2 <_dtoa_r+0x702>
 800702a:	4b4b      	ldr	r3, [pc, #300]	@ (8007158 <_dtoa_r+0x588>)
 800702c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007030:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007034:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007038:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800703a:	2b00      	cmp	r3, #0
 800703c:	f280 80e5 	bge.w	800720a <_dtoa_r+0x63a>
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f300 80e1 	bgt.w	800720a <_dtoa_r+0x63a>
 8007048:	d10c      	bne.n	8007064 <_dtoa_r+0x494>
 800704a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800704e:	2200      	movs	r2, #0
 8007050:	4b46      	ldr	r3, [pc, #280]	@ (800716c <_dtoa_r+0x59c>)
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800705a:	f7f9 fcc3 	bl	80009e4 <__aeabi_dcmpge>
 800705e:	2800      	cmp	r0, #0
 8007060:	f000 8266 	beq.w	8007530 <_dtoa_r+0x960>
 8007064:	2400      	movs	r4, #0
 8007066:	4625      	mov	r5, r4
 8007068:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800706a:	4656      	mov	r6, sl
 800706c:	ea6f 0803 	mvn.w	r8, r3
 8007070:	2700      	movs	r7, #0
 8007072:	4621      	mov	r1, r4
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fcbd 	bl	80079f4 <_Bfree>
 800707a:	2d00      	cmp	r5, #0
 800707c:	f000 80bd 	beq.w	80071fa <_dtoa_r+0x62a>
 8007080:	b12f      	cbz	r7, 800708e <_dtoa_r+0x4be>
 8007082:	42af      	cmp	r7, r5
 8007084:	d003      	beq.n	800708e <_dtoa_r+0x4be>
 8007086:	4639      	mov	r1, r7
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fcb3 	bl	80079f4 <_Bfree>
 800708e:	4629      	mov	r1, r5
 8007090:	4648      	mov	r0, r9
 8007092:	f000 fcaf 	bl	80079f4 <_Bfree>
 8007096:	e0b0      	b.n	80071fa <_dtoa_r+0x62a>
 8007098:	07e2      	lsls	r2, r4, #31
 800709a:	d505      	bpl.n	80070a8 <_dtoa_r+0x4d8>
 800709c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070a0:	f7f9 fa1a 	bl	80004d8 <__aeabi_dmul>
 80070a4:	2301      	movs	r3, #1
 80070a6:	3601      	adds	r6, #1
 80070a8:	1064      	asrs	r4, r4, #1
 80070aa:	3508      	adds	r5, #8
 80070ac:	e762      	b.n	8006f74 <_dtoa_r+0x3a4>
 80070ae:	2602      	movs	r6, #2
 80070b0:	e765      	b.n	8006f7e <_dtoa_r+0x3ae>
 80070b2:	46b8      	mov	r8, r7
 80070b4:	9c08      	ldr	r4, [sp, #32]
 80070b6:	e784      	b.n	8006fc2 <_dtoa_r+0x3f2>
 80070b8:	4b27      	ldr	r3, [pc, #156]	@ (8007158 <_dtoa_r+0x588>)
 80070ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80070bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070c4:	4454      	add	r4, sl
 80070c6:	2900      	cmp	r1, #0
 80070c8:	d054      	beq.n	8007174 <_dtoa_r+0x5a4>
 80070ca:	2000      	movs	r0, #0
 80070cc:	4928      	ldr	r1, [pc, #160]	@ (8007170 <_dtoa_r+0x5a0>)
 80070ce:	f7f9 fb2d 	bl	800072c <__aeabi_ddiv>
 80070d2:	4633      	mov	r3, r6
 80070d4:	462a      	mov	r2, r5
 80070d6:	f7f9 f847 	bl	8000168 <__aeabi_dsub>
 80070da:	4656      	mov	r6, sl
 80070dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80070e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e4:	f7f9 fca8 	bl	8000a38 <__aeabi_d2iz>
 80070e8:	4605      	mov	r5, r0
 80070ea:	f7f9 f98b 	bl	8000404 <__aeabi_i2d>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070f6:	f7f9 f837 	bl	8000168 <__aeabi_dsub>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	3530      	adds	r5, #48	@ 0x30
 8007100:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007104:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007108:	f806 5b01 	strb.w	r5, [r6], #1
 800710c:	f7f9 fc56 	bl	80009bc <__aeabi_dcmplt>
 8007110:	2800      	cmp	r0, #0
 8007112:	d172      	bne.n	80071fa <_dtoa_r+0x62a>
 8007114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007118:	2000      	movs	r0, #0
 800711a:	4911      	ldr	r1, [pc, #68]	@ (8007160 <_dtoa_r+0x590>)
 800711c:	f7f9 f824 	bl	8000168 <__aeabi_dsub>
 8007120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007124:	f7f9 fc4a 	bl	80009bc <__aeabi_dcmplt>
 8007128:	2800      	cmp	r0, #0
 800712a:	f040 80b4 	bne.w	8007296 <_dtoa_r+0x6c6>
 800712e:	42a6      	cmp	r6, r4
 8007130:	f43f af70 	beq.w	8007014 <_dtoa_r+0x444>
 8007134:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007138:	2200      	movs	r2, #0
 800713a:	4b0a      	ldr	r3, [pc, #40]	@ (8007164 <_dtoa_r+0x594>)
 800713c:	f7f9 f9cc 	bl	80004d8 <__aeabi_dmul>
 8007140:	2200      	movs	r2, #0
 8007142:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800714a:	4b06      	ldr	r3, [pc, #24]	@ (8007164 <_dtoa_r+0x594>)
 800714c:	f7f9 f9c4 	bl	80004d8 <__aeabi_dmul>
 8007150:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007154:	e7c4      	b.n	80070e0 <_dtoa_r+0x510>
 8007156:	bf00      	nop
 8007158:	0800a420 	.word	0x0800a420
 800715c:	0800a3f8 	.word	0x0800a3f8
 8007160:	3ff00000 	.word	0x3ff00000
 8007164:	40240000 	.word	0x40240000
 8007168:	401c0000 	.word	0x401c0000
 800716c:	40140000 	.word	0x40140000
 8007170:	3fe00000 	.word	0x3fe00000
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	f7f9 f9ae 	bl	80004d8 <__aeabi_dmul>
 800717c:	4656      	mov	r6, sl
 800717e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007182:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007184:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007188:	f7f9 fc56 	bl	8000a38 <__aeabi_d2iz>
 800718c:	4605      	mov	r5, r0
 800718e:	f7f9 f939 	bl	8000404 <__aeabi_i2d>
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800719a:	f7f8 ffe5 	bl	8000168 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	3530      	adds	r5, #48	@ 0x30
 80071a4:	f806 5b01 	strb.w	r5, [r6], #1
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	d124      	bne.n	80071fe <_dtoa_r+0x62e>
 80071b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071b8:	4bae      	ldr	r3, [pc, #696]	@ (8007474 <_dtoa_r+0x8a4>)
 80071ba:	f7f8 ffd7 	bl	800016c <__adddf3>
 80071be:	4602      	mov	r2, r0
 80071c0:	460b      	mov	r3, r1
 80071c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071c6:	f7f9 fc17 	bl	80009f8 <__aeabi_dcmpgt>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d163      	bne.n	8007296 <_dtoa_r+0x6c6>
 80071ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071d2:	2000      	movs	r0, #0
 80071d4:	49a7      	ldr	r1, [pc, #668]	@ (8007474 <_dtoa_r+0x8a4>)
 80071d6:	f7f8 ffc7 	bl	8000168 <__aeabi_dsub>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071e2:	f7f9 fbeb 	bl	80009bc <__aeabi_dcmplt>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f43f af14 	beq.w	8007014 <_dtoa_r+0x444>
 80071ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80071ee:	1e73      	subs	r3, r6, #1
 80071f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80071f6:	2b30      	cmp	r3, #48	@ 0x30
 80071f8:	d0f8      	beq.n	80071ec <_dtoa_r+0x61c>
 80071fa:	4647      	mov	r7, r8
 80071fc:	e03b      	b.n	8007276 <_dtoa_r+0x6a6>
 80071fe:	4b9e      	ldr	r3, [pc, #632]	@ (8007478 <_dtoa_r+0x8a8>)
 8007200:	f7f9 f96a 	bl	80004d8 <__aeabi_dmul>
 8007204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007208:	e7bc      	b.n	8007184 <_dtoa_r+0x5b4>
 800720a:	4656      	mov	r6, sl
 800720c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007214:	4620      	mov	r0, r4
 8007216:	4629      	mov	r1, r5
 8007218:	f7f9 fa88 	bl	800072c <__aeabi_ddiv>
 800721c:	f7f9 fc0c 	bl	8000a38 <__aeabi_d2iz>
 8007220:	4680      	mov	r8, r0
 8007222:	f7f9 f8ef 	bl	8000404 <__aeabi_i2d>
 8007226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800722a:	f7f9 f955 	bl	80004d8 <__aeabi_dmul>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f8 ff97 	bl	8000168 <__aeabi_dsub>
 800723a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800723e:	9d08      	ldr	r5, [sp, #32]
 8007240:	f806 4b01 	strb.w	r4, [r6], #1
 8007244:	eba6 040a 	sub.w	r4, r6, sl
 8007248:	42a5      	cmp	r5, r4
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	d133      	bne.n	80072b8 <_dtoa_r+0x6e8>
 8007250:	f7f8 ff8c 	bl	800016c <__adddf3>
 8007254:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007258:	4604      	mov	r4, r0
 800725a:	460d      	mov	r5, r1
 800725c:	f7f9 fbcc 	bl	80009f8 <__aeabi_dcmpgt>
 8007260:	b9c0      	cbnz	r0, 8007294 <_dtoa_r+0x6c4>
 8007262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fb9d 	bl	80009a8 <__aeabi_dcmpeq>
 800726e:	b110      	cbz	r0, 8007276 <_dtoa_r+0x6a6>
 8007270:	f018 0f01 	tst.w	r8, #1
 8007274:	d10e      	bne.n	8007294 <_dtoa_r+0x6c4>
 8007276:	4648      	mov	r0, r9
 8007278:	9903      	ldr	r1, [sp, #12]
 800727a:	f000 fbbb 	bl	80079f4 <_Bfree>
 800727e:	2300      	movs	r3, #0
 8007280:	7033      	strb	r3, [r6, #0]
 8007282:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007284:	3701      	adds	r7, #1
 8007286:	601f      	str	r7, [r3, #0]
 8007288:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 824b 	beq.w	8007726 <_dtoa_r+0xb56>
 8007290:	601e      	str	r6, [r3, #0]
 8007292:	e248      	b.n	8007726 <_dtoa_r+0xb56>
 8007294:	46b8      	mov	r8, r7
 8007296:	4633      	mov	r3, r6
 8007298:	461e      	mov	r6, r3
 800729a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800729e:	2a39      	cmp	r2, #57	@ 0x39
 80072a0:	d106      	bne.n	80072b0 <_dtoa_r+0x6e0>
 80072a2:	459a      	cmp	sl, r3
 80072a4:	d1f8      	bne.n	8007298 <_dtoa_r+0x6c8>
 80072a6:	2230      	movs	r2, #48	@ 0x30
 80072a8:	f108 0801 	add.w	r8, r8, #1
 80072ac:	f88a 2000 	strb.w	r2, [sl]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	3201      	adds	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e7a0      	b.n	80071fa <_dtoa_r+0x62a>
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b6f      	ldr	r3, [pc, #444]	@ (8007478 <_dtoa_r+0x8a8>)
 80072bc:	f7f9 f90c 	bl	80004d8 <__aeabi_dmul>
 80072c0:	2200      	movs	r2, #0
 80072c2:	2300      	movs	r3, #0
 80072c4:	4604      	mov	r4, r0
 80072c6:	460d      	mov	r5, r1
 80072c8:	f7f9 fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d09f      	beq.n	8007210 <_dtoa_r+0x640>
 80072d0:	e7d1      	b.n	8007276 <_dtoa_r+0x6a6>
 80072d2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	f000 80ea 	beq.w	80074ae <_dtoa_r+0x8de>
 80072da:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072dc:	2a01      	cmp	r2, #1
 80072de:	f300 80cd 	bgt.w	800747c <_dtoa_r+0x8ac>
 80072e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	f000 80c1 	beq.w	800746c <_dtoa_r+0x89c>
 80072ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80072ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072f0:	9e04      	ldr	r6, [sp, #16]
 80072f2:	9a04      	ldr	r2, [sp, #16]
 80072f4:	2101      	movs	r1, #1
 80072f6:	441a      	add	r2, r3
 80072f8:	9204      	str	r2, [sp, #16]
 80072fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fc:	4648      	mov	r0, r9
 80072fe:	441a      	add	r2, r3
 8007300:	9209      	str	r2, [sp, #36]	@ 0x24
 8007302:	f000 fc75 	bl	8007bf0 <__i2b>
 8007306:	4605      	mov	r5, r0
 8007308:	b166      	cbz	r6, 8007324 <_dtoa_r+0x754>
 800730a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	dd09      	ble.n	8007324 <_dtoa_r+0x754>
 8007310:	42b3      	cmp	r3, r6
 8007312:	bfa8      	it	ge
 8007314:	4633      	movge	r3, r6
 8007316:	9a04      	ldr	r2, [sp, #16]
 8007318:	1af6      	subs	r6, r6, r3
 800731a:	1ad2      	subs	r2, r2, r3
 800731c:	9204      	str	r2, [sp, #16]
 800731e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	9309      	str	r3, [sp, #36]	@ 0x24
 8007324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007326:	b30b      	cbz	r3, 800736c <_dtoa_r+0x79c>
 8007328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80c6 	beq.w	80074bc <_dtoa_r+0x8ec>
 8007330:	2c00      	cmp	r4, #0
 8007332:	f000 80c0 	beq.w	80074b6 <_dtoa_r+0x8e6>
 8007336:	4629      	mov	r1, r5
 8007338:	4622      	mov	r2, r4
 800733a:	4648      	mov	r0, r9
 800733c:	f000 fd10 	bl	8007d60 <__pow5mult>
 8007340:	9a03      	ldr	r2, [sp, #12]
 8007342:	4601      	mov	r1, r0
 8007344:	4605      	mov	r5, r0
 8007346:	4648      	mov	r0, r9
 8007348:	f000 fc68 	bl	8007c1c <__multiply>
 800734c:	9903      	ldr	r1, [sp, #12]
 800734e:	4680      	mov	r8, r0
 8007350:	4648      	mov	r0, r9
 8007352:	f000 fb4f 	bl	80079f4 <_Bfree>
 8007356:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007358:	1b1b      	subs	r3, r3, r4
 800735a:	930a      	str	r3, [sp, #40]	@ 0x28
 800735c:	f000 80b1 	beq.w	80074c2 <_dtoa_r+0x8f2>
 8007360:	4641      	mov	r1, r8
 8007362:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007364:	4648      	mov	r0, r9
 8007366:	f000 fcfb 	bl	8007d60 <__pow5mult>
 800736a:	9003      	str	r0, [sp, #12]
 800736c:	2101      	movs	r1, #1
 800736e:	4648      	mov	r0, r9
 8007370:	f000 fc3e 	bl	8007bf0 <__i2b>
 8007374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007376:	4604      	mov	r4, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 81d8 	beq.w	800772e <_dtoa_r+0xb5e>
 800737e:	461a      	mov	r2, r3
 8007380:	4601      	mov	r1, r0
 8007382:	4648      	mov	r0, r9
 8007384:	f000 fcec 	bl	8007d60 <__pow5mult>
 8007388:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800738a:	4604      	mov	r4, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	f300 809f 	bgt.w	80074d0 <_dtoa_r+0x900>
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f040 8097 	bne.w	80074c8 <_dtoa_r+0x8f8>
 800739a:	9b07      	ldr	r3, [sp, #28]
 800739c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 8093 	bne.w	80074cc <_dtoa_r+0x8fc>
 80073a6:	9b07      	ldr	r3, [sp, #28]
 80073a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073ac:	0d1b      	lsrs	r3, r3, #20
 80073ae:	051b      	lsls	r3, r3, #20
 80073b0:	b133      	cbz	r3, 80073c0 <_dtoa_r+0x7f0>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	3301      	adds	r3, #1
 80073b6:	9304      	str	r3, [sp, #16]
 80073b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ba:	3301      	adds	r3, #1
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	2301      	movs	r3, #1
 80073c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 81b8 	beq.w	800773a <_dtoa_r+0xb6a>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80073d0:	6918      	ldr	r0, [r3, #16]
 80073d2:	f000 fbc1 	bl	8007b58 <__hi0bits>
 80073d6:	f1c0 0020 	rsb	r0, r0, #32
 80073da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073dc:	4418      	add	r0, r3
 80073de:	f010 001f 	ands.w	r0, r0, #31
 80073e2:	f000 8082 	beq.w	80074ea <_dtoa_r+0x91a>
 80073e6:	f1c0 0320 	rsb	r3, r0, #32
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	dd73      	ble.n	80074d6 <_dtoa_r+0x906>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	f1c0 001c 	rsb	r0, r0, #28
 80073f4:	4403      	add	r3, r0
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	4406      	add	r6, r0
 80073fc:	4403      	add	r3, r0
 80073fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007400:	9b04      	ldr	r3, [sp, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd05      	ble.n	8007412 <_dtoa_r+0x842>
 8007406:	461a      	mov	r2, r3
 8007408:	4648      	mov	r0, r9
 800740a:	9903      	ldr	r1, [sp, #12]
 800740c:	f000 fd02 	bl	8007e14 <__lshift>
 8007410:	9003      	str	r0, [sp, #12]
 8007412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	dd05      	ble.n	8007424 <_dtoa_r+0x854>
 8007418:	4621      	mov	r1, r4
 800741a:	461a      	mov	r2, r3
 800741c:	4648      	mov	r0, r9
 800741e:	f000 fcf9 	bl	8007e14 <__lshift>
 8007422:	4604      	mov	r4, r0
 8007424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d061      	beq.n	80074ee <_dtoa_r+0x91e>
 800742a:	4621      	mov	r1, r4
 800742c:	9803      	ldr	r0, [sp, #12]
 800742e:	f000 fd5d 	bl	8007eec <__mcmp>
 8007432:	2800      	cmp	r0, #0
 8007434:	da5b      	bge.n	80074ee <_dtoa_r+0x91e>
 8007436:	2300      	movs	r3, #0
 8007438:	220a      	movs	r2, #10
 800743a:	4648      	mov	r0, r9
 800743c:	9903      	ldr	r1, [sp, #12]
 800743e:	f000 fafb 	bl	8007a38 <__multadd>
 8007442:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007444:	f107 38ff 	add.w	r8, r7, #4294967295
 8007448:	9003      	str	r0, [sp, #12]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8177 	beq.w	800773e <_dtoa_r+0xb6e>
 8007450:	4629      	mov	r1, r5
 8007452:	2300      	movs	r3, #0
 8007454:	220a      	movs	r2, #10
 8007456:	4648      	mov	r0, r9
 8007458:	f000 faee 	bl	8007a38 <__multadd>
 800745c:	f1bb 0f00 	cmp.w	fp, #0
 8007460:	4605      	mov	r5, r0
 8007462:	dc6f      	bgt.n	8007544 <_dtoa_r+0x974>
 8007464:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007466:	2b02      	cmp	r3, #2
 8007468:	dc49      	bgt.n	80074fe <_dtoa_r+0x92e>
 800746a:	e06b      	b.n	8007544 <_dtoa_r+0x974>
 800746c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800746e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007472:	e73c      	b.n	80072ee <_dtoa_r+0x71e>
 8007474:	3fe00000 	.word	0x3fe00000
 8007478:	40240000 	.word	0x40240000
 800747c:	9b08      	ldr	r3, [sp, #32]
 800747e:	1e5c      	subs	r4, r3, #1
 8007480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007482:	42a3      	cmp	r3, r4
 8007484:	db09      	blt.n	800749a <_dtoa_r+0x8ca>
 8007486:	1b1c      	subs	r4, r3, r4
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2b00      	cmp	r3, #0
 800748c:	f6bf af30 	bge.w	80072f0 <_dtoa_r+0x720>
 8007490:	9b04      	ldr	r3, [sp, #16]
 8007492:	9a08      	ldr	r2, [sp, #32]
 8007494:	1a9e      	subs	r6, r3, r2
 8007496:	2300      	movs	r3, #0
 8007498:	e72b      	b.n	80072f2 <_dtoa_r+0x722>
 800749a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800749c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800749e:	1ae3      	subs	r3, r4, r3
 80074a0:	441a      	add	r2, r3
 80074a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80074a4:	9e04      	ldr	r6, [sp, #16]
 80074a6:	2400      	movs	r4, #0
 80074a8:	9b08      	ldr	r3, [sp, #32]
 80074aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80074ac:	e721      	b.n	80072f2 <_dtoa_r+0x722>
 80074ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074b0:	9e04      	ldr	r6, [sp, #16]
 80074b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074b4:	e728      	b.n	8007308 <_dtoa_r+0x738>
 80074b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074ba:	e751      	b.n	8007360 <_dtoa_r+0x790>
 80074bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074be:	9903      	ldr	r1, [sp, #12]
 80074c0:	e750      	b.n	8007364 <_dtoa_r+0x794>
 80074c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074c6:	e751      	b.n	800736c <_dtoa_r+0x79c>
 80074c8:	2300      	movs	r3, #0
 80074ca:	e779      	b.n	80073c0 <_dtoa_r+0x7f0>
 80074cc:	9b06      	ldr	r3, [sp, #24]
 80074ce:	e777      	b.n	80073c0 <_dtoa_r+0x7f0>
 80074d0:	2300      	movs	r3, #0
 80074d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d4:	e779      	b.n	80073ca <_dtoa_r+0x7fa>
 80074d6:	d093      	beq.n	8007400 <_dtoa_r+0x830>
 80074d8:	9a04      	ldr	r2, [sp, #16]
 80074da:	331c      	adds	r3, #28
 80074dc:	441a      	add	r2, r3
 80074de:	9204      	str	r2, [sp, #16]
 80074e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e2:	441e      	add	r6, r3
 80074e4:	441a      	add	r2, r3
 80074e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074e8:	e78a      	b.n	8007400 <_dtoa_r+0x830>
 80074ea:	4603      	mov	r3, r0
 80074ec:	e7f4      	b.n	80074d8 <_dtoa_r+0x908>
 80074ee:	9b08      	ldr	r3, [sp, #32]
 80074f0:	46b8      	mov	r8, r7
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc20      	bgt.n	8007538 <_dtoa_r+0x968>
 80074f6:	469b      	mov	fp, r3
 80074f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	dd1e      	ble.n	800753c <_dtoa_r+0x96c>
 80074fe:	f1bb 0f00 	cmp.w	fp, #0
 8007502:	f47f adb1 	bne.w	8007068 <_dtoa_r+0x498>
 8007506:	4621      	mov	r1, r4
 8007508:	465b      	mov	r3, fp
 800750a:	2205      	movs	r2, #5
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fa93 	bl	8007a38 <__multadd>
 8007512:	4601      	mov	r1, r0
 8007514:	4604      	mov	r4, r0
 8007516:	9803      	ldr	r0, [sp, #12]
 8007518:	f000 fce8 	bl	8007eec <__mcmp>
 800751c:	2800      	cmp	r0, #0
 800751e:	f77f ada3 	ble.w	8007068 <_dtoa_r+0x498>
 8007522:	4656      	mov	r6, sl
 8007524:	2331      	movs	r3, #49	@ 0x31
 8007526:	f108 0801 	add.w	r8, r8, #1
 800752a:	f806 3b01 	strb.w	r3, [r6], #1
 800752e:	e59f      	b.n	8007070 <_dtoa_r+0x4a0>
 8007530:	46b8      	mov	r8, r7
 8007532:	9c08      	ldr	r4, [sp, #32]
 8007534:	4625      	mov	r5, r4
 8007536:	e7f4      	b.n	8007522 <_dtoa_r+0x952>
 8007538:	f8dd b020 	ldr.w	fp, [sp, #32]
 800753c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8101 	beq.w	8007746 <_dtoa_r+0xb76>
 8007544:	2e00      	cmp	r6, #0
 8007546:	dd05      	ble.n	8007554 <_dtoa_r+0x984>
 8007548:	4629      	mov	r1, r5
 800754a:	4632      	mov	r2, r6
 800754c:	4648      	mov	r0, r9
 800754e:	f000 fc61 	bl	8007e14 <__lshift>
 8007552:	4605      	mov	r5, r0
 8007554:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d05c      	beq.n	8007614 <_dtoa_r+0xa44>
 800755a:	4648      	mov	r0, r9
 800755c:	6869      	ldr	r1, [r5, #4]
 800755e:	f000 fa09 	bl	8007974 <_Balloc>
 8007562:	4606      	mov	r6, r0
 8007564:	b928      	cbnz	r0, 8007572 <_dtoa_r+0x9a2>
 8007566:	4602      	mov	r2, r0
 8007568:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800756c:	4b80      	ldr	r3, [pc, #512]	@ (8007770 <_dtoa_r+0xba0>)
 800756e:	f7ff bb43 	b.w	8006bf8 <_dtoa_r+0x28>
 8007572:	692a      	ldr	r2, [r5, #16]
 8007574:	f105 010c 	add.w	r1, r5, #12
 8007578:	3202      	adds	r2, #2
 800757a:	0092      	lsls	r2, r2, #2
 800757c:	300c      	adds	r0, #12
 800757e:	f001 ff51 	bl	8009424 <memcpy>
 8007582:	2201      	movs	r2, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4648      	mov	r0, r9
 8007588:	f000 fc44 	bl	8007e14 <__lshift>
 800758c:	462f      	mov	r7, r5
 800758e:	4605      	mov	r5, r0
 8007590:	f10a 0301 	add.w	r3, sl, #1
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	eb0a 030b 	add.w	r3, sl, fp
 800759a:	930a      	str	r3, [sp, #40]	@ 0x28
 800759c:	9b06      	ldr	r3, [sp, #24]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4621      	mov	r1, r4
 80075a8:	9803      	ldr	r0, [sp, #12]
 80075aa:	f103 3bff 	add.w	fp, r3, #4294967295
 80075ae:	f7ff fa85 	bl	8006abc <quorem>
 80075b2:	4603      	mov	r3, r0
 80075b4:	4639      	mov	r1, r7
 80075b6:	3330      	adds	r3, #48	@ 0x30
 80075b8:	9006      	str	r0, [sp, #24]
 80075ba:	9803      	ldr	r0, [sp, #12]
 80075bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075be:	f000 fc95 	bl	8007eec <__mcmp>
 80075c2:	462a      	mov	r2, r5
 80075c4:	9008      	str	r0, [sp, #32]
 80075c6:	4621      	mov	r1, r4
 80075c8:	4648      	mov	r0, r9
 80075ca:	f000 fcab 	bl	8007f24 <__mdiff>
 80075ce:	68c2      	ldr	r2, [r0, #12]
 80075d0:	4606      	mov	r6, r0
 80075d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d4:	bb02      	cbnz	r2, 8007618 <_dtoa_r+0xa48>
 80075d6:	4601      	mov	r1, r0
 80075d8:	9803      	ldr	r0, [sp, #12]
 80075da:	f000 fc87 	bl	8007eec <__mcmp>
 80075de:	4602      	mov	r2, r0
 80075e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e2:	4631      	mov	r1, r6
 80075e4:	4648      	mov	r0, r9
 80075e6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80075ea:	f000 fa03 	bl	80079f4 <_Bfree>
 80075ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80075f2:	9e04      	ldr	r6, [sp, #16]
 80075f4:	ea42 0103 	orr.w	r1, r2, r3
 80075f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075fa:	4319      	orrs	r1, r3
 80075fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fe:	d10d      	bne.n	800761c <_dtoa_r+0xa4c>
 8007600:	2b39      	cmp	r3, #57	@ 0x39
 8007602:	d027      	beq.n	8007654 <_dtoa_r+0xa84>
 8007604:	9a08      	ldr	r2, [sp, #32]
 8007606:	2a00      	cmp	r2, #0
 8007608:	dd01      	ble.n	800760e <_dtoa_r+0xa3e>
 800760a:	9b06      	ldr	r3, [sp, #24]
 800760c:	3331      	adds	r3, #49	@ 0x31
 800760e:	f88b 3000 	strb.w	r3, [fp]
 8007612:	e52e      	b.n	8007072 <_dtoa_r+0x4a2>
 8007614:	4628      	mov	r0, r5
 8007616:	e7b9      	b.n	800758c <_dtoa_r+0x9bc>
 8007618:	2201      	movs	r2, #1
 800761a:	e7e2      	b.n	80075e2 <_dtoa_r+0xa12>
 800761c:	9908      	ldr	r1, [sp, #32]
 800761e:	2900      	cmp	r1, #0
 8007620:	db04      	blt.n	800762c <_dtoa_r+0xa5c>
 8007622:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007624:	4301      	orrs	r1, r0
 8007626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007628:	4301      	orrs	r1, r0
 800762a:	d120      	bne.n	800766e <_dtoa_r+0xa9e>
 800762c:	2a00      	cmp	r2, #0
 800762e:	ddee      	ble.n	800760e <_dtoa_r+0xa3e>
 8007630:	2201      	movs	r2, #1
 8007632:	9903      	ldr	r1, [sp, #12]
 8007634:	4648      	mov	r0, r9
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	f000 fbec 	bl	8007e14 <__lshift>
 800763c:	4621      	mov	r1, r4
 800763e:	9003      	str	r0, [sp, #12]
 8007640:	f000 fc54 	bl	8007eec <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	dc02      	bgt.n	8007650 <_dtoa_r+0xa80>
 800764a:	d1e0      	bne.n	800760e <_dtoa_r+0xa3e>
 800764c:	07da      	lsls	r2, r3, #31
 800764e:	d5de      	bpl.n	800760e <_dtoa_r+0xa3e>
 8007650:	2b39      	cmp	r3, #57	@ 0x39
 8007652:	d1da      	bne.n	800760a <_dtoa_r+0xa3a>
 8007654:	2339      	movs	r3, #57	@ 0x39
 8007656:	f88b 3000 	strb.w	r3, [fp]
 800765a:	4633      	mov	r3, r6
 800765c:	461e      	mov	r6, r3
 800765e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007662:	3b01      	subs	r3, #1
 8007664:	2a39      	cmp	r2, #57	@ 0x39
 8007666:	d04e      	beq.n	8007706 <_dtoa_r+0xb36>
 8007668:	3201      	adds	r2, #1
 800766a:	701a      	strb	r2, [r3, #0]
 800766c:	e501      	b.n	8007072 <_dtoa_r+0x4a2>
 800766e:	2a00      	cmp	r2, #0
 8007670:	dd03      	ble.n	800767a <_dtoa_r+0xaaa>
 8007672:	2b39      	cmp	r3, #57	@ 0x39
 8007674:	d0ee      	beq.n	8007654 <_dtoa_r+0xa84>
 8007676:	3301      	adds	r3, #1
 8007678:	e7c9      	b.n	800760e <_dtoa_r+0xa3e>
 800767a:	9a04      	ldr	r2, [sp, #16]
 800767c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800767e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007682:	428a      	cmp	r2, r1
 8007684:	d028      	beq.n	80076d8 <_dtoa_r+0xb08>
 8007686:	2300      	movs	r3, #0
 8007688:	220a      	movs	r2, #10
 800768a:	9903      	ldr	r1, [sp, #12]
 800768c:	4648      	mov	r0, r9
 800768e:	f000 f9d3 	bl	8007a38 <__multadd>
 8007692:	42af      	cmp	r7, r5
 8007694:	9003      	str	r0, [sp, #12]
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	f04f 020a 	mov.w	r2, #10
 800769e:	4639      	mov	r1, r7
 80076a0:	4648      	mov	r0, r9
 80076a2:	d107      	bne.n	80076b4 <_dtoa_r+0xae4>
 80076a4:	f000 f9c8 	bl	8007a38 <__multadd>
 80076a8:	4607      	mov	r7, r0
 80076aa:	4605      	mov	r5, r0
 80076ac:	9b04      	ldr	r3, [sp, #16]
 80076ae:	3301      	adds	r3, #1
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	e777      	b.n	80075a4 <_dtoa_r+0x9d4>
 80076b4:	f000 f9c0 	bl	8007a38 <__multadd>
 80076b8:	4629      	mov	r1, r5
 80076ba:	4607      	mov	r7, r0
 80076bc:	2300      	movs	r3, #0
 80076be:	220a      	movs	r2, #10
 80076c0:	4648      	mov	r0, r9
 80076c2:	f000 f9b9 	bl	8007a38 <__multadd>
 80076c6:	4605      	mov	r5, r0
 80076c8:	e7f0      	b.n	80076ac <_dtoa_r+0xadc>
 80076ca:	f1bb 0f00 	cmp.w	fp, #0
 80076ce:	bfcc      	ite	gt
 80076d0:	465e      	movgt	r6, fp
 80076d2:	2601      	movle	r6, #1
 80076d4:	2700      	movs	r7, #0
 80076d6:	4456      	add	r6, sl
 80076d8:	2201      	movs	r2, #1
 80076da:	9903      	ldr	r1, [sp, #12]
 80076dc:	4648      	mov	r0, r9
 80076de:	9304      	str	r3, [sp, #16]
 80076e0:	f000 fb98 	bl	8007e14 <__lshift>
 80076e4:	4621      	mov	r1, r4
 80076e6:	9003      	str	r0, [sp, #12]
 80076e8:	f000 fc00 	bl	8007eec <__mcmp>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dcb4      	bgt.n	800765a <_dtoa_r+0xa8a>
 80076f0:	d102      	bne.n	80076f8 <_dtoa_r+0xb28>
 80076f2:	9b04      	ldr	r3, [sp, #16]
 80076f4:	07db      	lsls	r3, r3, #31
 80076f6:	d4b0      	bmi.n	800765a <_dtoa_r+0xa8a>
 80076f8:	4633      	mov	r3, r6
 80076fa:	461e      	mov	r6, r3
 80076fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007700:	2a30      	cmp	r2, #48	@ 0x30
 8007702:	d0fa      	beq.n	80076fa <_dtoa_r+0xb2a>
 8007704:	e4b5      	b.n	8007072 <_dtoa_r+0x4a2>
 8007706:	459a      	cmp	sl, r3
 8007708:	d1a8      	bne.n	800765c <_dtoa_r+0xa8c>
 800770a:	2331      	movs	r3, #49	@ 0x31
 800770c:	f108 0801 	add.w	r8, r8, #1
 8007710:	f88a 3000 	strb.w	r3, [sl]
 8007714:	e4ad      	b.n	8007072 <_dtoa_r+0x4a2>
 8007716:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007718:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007774 <_dtoa_r+0xba4>
 800771c:	b11b      	cbz	r3, 8007726 <_dtoa_r+0xb56>
 800771e:	f10a 0308 	add.w	r3, sl, #8
 8007722:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4650      	mov	r0, sl
 8007728:	b017      	add	sp, #92	@ 0x5c
 800772a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800772e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007730:	2b01      	cmp	r3, #1
 8007732:	f77f ae2e 	ble.w	8007392 <_dtoa_r+0x7c2>
 8007736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007738:	930a      	str	r3, [sp, #40]	@ 0x28
 800773a:	2001      	movs	r0, #1
 800773c:	e64d      	b.n	80073da <_dtoa_r+0x80a>
 800773e:	f1bb 0f00 	cmp.w	fp, #0
 8007742:	f77f aed9 	ble.w	80074f8 <_dtoa_r+0x928>
 8007746:	4656      	mov	r6, sl
 8007748:	4621      	mov	r1, r4
 800774a:	9803      	ldr	r0, [sp, #12]
 800774c:	f7ff f9b6 	bl	8006abc <quorem>
 8007750:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007754:	f806 3b01 	strb.w	r3, [r6], #1
 8007758:	eba6 020a 	sub.w	r2, r6, sl
 800775c:	4593      	cmp	fp, r2
 800775e:	ddb4      	ble.n	80076ca <_dtoa_r+0xafa>
 8007760:	2300      	movs	r3, #0
 8007762:	220a      	movs	r2, #10
 8007764:	4648      	mov	r0, r9
 8007766:	9903      	ldr	r1, [sp, #12]
 8007768:	f000 f966 	bl	8007a38 <__multadd>
 800776c:	9003      	str	r0, [sp, #12]
 800776e:	e7eb      	b.n	8007748 <_dtoa_r+0xb78>
 8007770:	0800a2cb 	.word	0x0800a2cb
 8007774:	0800a24f 	.word	0x0800a24f

08007778 <_free_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4605      	mov	r5, r0
 800777c:	2900      	cmp	r1, #0
 800777e:	d040      	beq.n	8007802 <_free_r+0x8a>
 8007780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007784:	1f0c      	subs	r4, r1, #4
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfb8      	it	lt
 800778a:	18e4      	addlt	r4, r4, r3
 800778c:	f000 f8e6 	bl	800795c <__malloc_lock>
 8007790:	4a1c      	ldr	r2, [pc, #112]	@ (8007804 <_free_r+0x8c>)
 8007792:	6813      	ldr	r3, [r2, #0]
 8007794:	b933      	cbnz	r3, 80077a4 <_free_r+0x2c>
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	6014      	str	r4, [r2, #0]
 800779a:	4628      	mov	r0, r5
 800779c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077a0:	f000 b8e2 	b.w	8007968 <__malloc_unlock>
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d908      	bls.n	80077ba <_free_r+0x42>
 80077a8:	6820      	ldr	r0, [r4, #0]
 80077aa:	1821      	adds	r1, r4, r0
 80077ac:	428b      	cmp	r3, r1
 80077ae:	bf01      	itttt	eq
 80077b0:	6819      	ldreq	r1, [r3, #0]
 80077b2:	685b      	ldreq	r3, [r3, #4]
 80077b4:	1809      	addeq	r1, r1, r0
 80077b6:	6021      	streq	r1, [r4, #0]
 80077b8:	e7ed      	b.n	8007796 <_free_r+0x1e>
 80077ba:	461a      	mov	r2, r3
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	b10b      	cbz	r3, 80077c4 <_free_r+0x4c>
 80077c0:	42a3      	cmp	r3, r4
 80077c2:	d9fa      	bls.n	80077ba <_free_r+0x42>
 80077c4:	6811      	ldr	r1, [r2, #0]
 80077c6:	1850      	adds	r0, r2, r1
 80077c8:	42a0      	cmp	r0, r4
 80077ca:	d10b      	bne.n	80077e4 <_free_r+0x6c>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	4401      	add	r1, r0
 80077d0:	1850      	adds	r0, r2, r1
 80077d2:	4283      	cmp	r3, r0
 80077d4:	6011      	str	r1, [r2, #0]
 80077d6:	d1e0      	bne.n	800779a <_free_r+0x22>
 80077d8:	6818      	ldr	r0, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4408      	add	r0, r1
 80077de:	6010      	str	r0, [r2, #0]
 80077e0:	6053      	str	r3, [r2, #4]
 80077e2:	e7da      	b.n	800779a <_free_r+0x22>
 80077e4:	d902      	bls.n	80077ec <_free_r+0x74>
 80077e6:	230c      	movs	r3, #12
 80077e8:	602b      	str	r3, [r5, #0]
 80077ea:	e7d6      	b.n	800779a <_free_r+0x22>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	1821      	adds	r1, r4, r0
 80077f0:	428b      	cmp	r3, r1
 80077f2:	bf01      	itttt	eq
 80077f4:	6819      	ldreq	r1, [r3, #0]
 80077f6:	685b      	ldreq	r3, [r3, #4]
 80077f8:	1809      	addeq	r1, r1, r0
 80077fa:	6021      	streq	r1, [r4, #0]
 80077fc:	6063      	str	r3, [r4, #4]
 80077fe:	6054      	str	r4, [r2, #4]
 8007800:	e7cb      	b.n	800779a <_free_r+0x22>
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200003ec 	.word	0x200003ec

08007808 <malloc>:
 8007808:	4b02      	ldr	r3, [pc, #8]	@ (8007814 <malloc+0xc>)
 800780a:	4601      	mov	r1, r0
 800780c:	6818      	ldr	r0, [r3, #0]
 800780e:	f000 b825 	b.w	800785c <_malloc_r>
 8007812:	bf00      	nop
 8007814:	20000020 	.word	0x20000020

08007818 <sbrk_aligned>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	4e0f      	ldr	r6, [pc, #60]	@ (8007858 <sbrk_aligned+0x40>)
 800781c:	460c      	mov	r4, r1
 800781e:	6831      	ldr	r1, [r6, #0]
 8007820:	4605      	mov	r5, r0
 8007822:	b911      	cbnz	r1, 800782a <sbrk_aligned+0x12>
 8007824:	f001 fdee 	bl	8009404 <_sbrk_r>
 8007828:	6030      	str	r0, [r6, #0]
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	f001 fde9 	bl	8009404 <_sbrk_r>
 8007832:	1c43      	adds	r3, r0, #1
 8007834:	d103      	bne.n	800783e <sbrk_aligned+0x26>
 8007836:	f04f 34ff 	mov.w	r4, #4294967295
 800783a:	4620      	mov	r0, r4
 800783c:	bd70      	pop	{r4, r5, r6, pc}
 800783e:	1cc4      	adds	r4, r0, #3
 8007840:	f024 0403 	bic.w	r4, r4, #3
 8007844:	42a0      	cmp	r0, r4
 8007846:	d0f8      	beq.n	800783a <sbrk_aligned+0x22>
 8007848:	1a21      	subs	r1, r4, r0
 800784a:	4628      	mov	r0, r5
 800784c:	f001 fdda 	bl	8009404 <_sbrk_r>
 8007850:	3001      	adds	r0, #1
 8007852:	d1f2      	bne.n	800783a <sbrk_aligned+0x22>
 8007854:	e7ef      	b.n	8007836 <sbrk_aligned+0x1e>
 8007856:	bf00      	nop
 8007858:	200003e8 	.word	0x200003e8

0800785c <_malloc_r>:
 800785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007860:	1ccd      	adds	r5, r1, #3
 8007862:	f025 0503 	bic.w	r5, r5, #3
 8007866:	3508      	adds	r5, #8
 8007868:	2d0c      	cmp	r5, #12
 800786a:	bf38      	it	cc
 800786c:	250c      	movcc	r5, #12
 800786e:	2d00      	cmp	r5, #0
 8007870:	4606      	mov	r6, r0
 8007872:	db01      	blt.n	8007878 <_malloc_r+0x1c>
 8007874:	42a9      	cmp	r1, r5
 8007876:	d904      	bls.n	8007882 <_malloc_r+0x26>
 8007878:	230c      	movs	r3, #12
 800787a:	6033      	str	r3, [r6, #0]
 800787c:	2000      	movs	r0, #0
 800787e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007882:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007958 <_malloc_r+0xfc>
 8007886:	f000 f869 	bl	800795c <__malloc_lock>
 800788a:	f8d8 3000 	ldr.w	r3, [r8]
 800788e:	461c      	mov	r4, r3
 8007890:	bb44      	cbnz	r4, 80078e4 <_malloc_r+0x88>
 8007892:	4629      	mov	r1, r5
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff ffbf 	bl	8007818 <sbrk_aligned>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	4604      	mov	r4, r0
 800789e:	d158      	bne.n	8007952 <_malloc_r+0xf6>
 80078a0:	f8d8 4000 	ldr.w	r4, [r8]
 80078a4:	4627      	mov	r7, r4
 80078a6:	2f00      	cmp	r7, #0
 80078a8:	d143      	bne.n	8007932 <_malloc_r+0xd6>
 80078aa:	2c00      	cmp	r4, #0
 80078ac:	d04b      	beq.n	8007946 <_malloc_r+0xea>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	4639      	mov	r1, r7
 80078b2:	4630      	mov	r0, r6
 80078b4:	eb04 0903 	add.w	r9, r4, r3
 80078b8:	f001 fda4 	bl	8009404 <_sbrk_r>
 80078bc:	4581      	cmp	r9, r0
 80078be:	d142      	bne.n	8007946 <_malloc_r+0xea>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	4630      	mov	r0, r6
 80078c4:	1a6d      	subs	r5, r5, r1
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7ff ffa6 	bl	8007818 <sbrk_aligned>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d03a      	beq.n	8007946 <_malloc_r+0xea>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	442b      	add	r3, r5
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	f8d8 3000 	ldr.w	r3, [r8]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	bb62      	cbnz	r2, 8007938 <_malloc_r+0xdc>
 80078de:	f8c8 7000 	str.w	r7, [r8]
 80078e2:	e00f      	b.n	8007904 <_malloc_r+0xa8>
 80078e4:	6822      	ldr	r2, [r4, #0]
 80078e6:	1b52      	subs	r2, r2, r5
 80078e8:	d420      	bmi.n	800792c <_malloc_r+0xd0>
 80078ea:	2a0b      	cmp	r2, #11
 80078ec:	d917      	bls.n	800791e <_malloc_r+0xc2>
 80078ee:	1961      	adds	r1, r4, r5
 80078f0:	42a3      	cmp	r3, r4
 80078f2:	6025      	str	r5, [r4, #0]
 80078f4:	bf18      	it	ne
 80078f6:	6059      	strne	r1, [r3, #4]
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	bf08      	it	eq
 80078fc:	f8c8 1000 	streq.w	r1, [r8]
 8007900:	5162      	str	r2, [r4, r5]
 8007902:	604b      	str	r3, [r1, #4]
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f82f 	bl	8007968 <__malloc_unlock>
 800790a:	f104 000b 	add.w	r0, r4, #11
 800790e:	1d23      	adds	r3, r4, #4
 8007910:	f020 0007 	bic.w	r0, r0, #7
 8007914:	1ac2      	subs	r2, r0, r3
 8007916:	bf1c      	itt	ne
 8007918:	1a1b      	subne	r3, r3, r0
 800791a:	50a3      	strne	r3, [r4, r2]
 800791c:	e7af      	b.n	800787e <_malloc_r+0x22>
 800791e:	6862      	ldr	r2, [r4, #4]
 8007920:	42a3      	cmp	r3, r4
 8007922:	bf0c      	ite	eq
 8007924:	f8c8 2000 	streq.w	r2, [r8]
 8007928:	605a      	strne	r2, [r3, #4]
 800792a:	e7eb      	b.n	8007904 <_malloc_r+0xa8>
 800792c:	4623      	mov	r3, r4
 800792e:	6864      	ldr	r4, [r4, #4]
 8007930:	e7ae      	b.n	8007890 <_malloc_r+0x34>
 8007932:	463c      	mov	r4, r7
 8007934:	687f      	ldr	r7, [r7, #4]
 8007936:	e7b6      	b.n	80078a6 <_malloc_r+0x4a>
 8007938:	461a      	mov	r2, r3
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	42a3      	cmp	r3, r4
 800793e:	d1fb      	bne.n	8007938 <_malloc_r+0xdc>
 8007940:	2300      	movs	r3, #0
 8007942:	6053      	str	r3, [r2, #4]
 8007944:	e7de      	b.n	8007904 <_malloc_r+0xa8>
 8007946:	230c      	movs	r3, #12
 8007948:	4630      	mov	r0, r6
 800794a:	6033      	str	r3, [r6, #0]
 800794c:	f000 f80c 	bl	8007968 <__malloc_unlock>
 8007950:	e794      	b.n	800787c <_malloc_r+0x20>
 8007952:	6005      	str	r5, [r0, #0]
 8007954:	e7d6      	b.n	8007904 <_malloc_r+0xa8>
 8007956:	bf00      	nop
 8007958:	200003ec 	.word	0x200003ec

0800795c <__malloc_lock>:
 800795c:	4801      	ldr	r0, [pc, #4]	@ (8007964 <__malloc_lock+0x8>)
 800795e:	f7ff b898 	b.w	8006a92 <__retarget_lock_acquire_recursive>
 8007962:	bf00      	nop
 8007964:	200003e4 	.word	0x200003e4

08007968 <__malloc_unlock>:
 8007968:	4801      	ldr	r0, [pc, #4]	@ (8007970 <__malloc_unlock+0x8>)
 800796a:	f7ff b893 	b.w	8006a94 <__retarget_lock_release_recursive>
 800796e:	bf00      	nop
 8007970:	200003e4 	.word	0x200003e4

08007974 <_Balloc>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	69c6      	ldr	r6, [r0, #28]
 8007978:	4604      	mov	r4, r0
 800797a:	460d      	mov	r5, r1
 800797c:	b976      	cbnz	r6, 800799c <_Balloc+0x28>
 800797e:	2010      	movs	r0, #16
 8007980:	f7ff ff42 	bl	8007808 <malloc>
 8007984:	4602      	mov	r2, r0
 8007986:	61e0      	str	r0, [r4, #28]
 8007988:	b920      	cbnz	r0, 8007994 <_Balloc+0x20>
 800798a:	216b      	movs	r1, #107	@ 0x6b
 800798c:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <_Balloc+0x78>)
 800798e:	4818      	ldr	r0, [pc, #96]	@ (80079f0 <_Balloc+0x7c>)
 8007990:	f001 fd5c 	bl	800944c <__assert_func>
 8007994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007998:	6006      	str	r6, [r0, #0]
 800799a:	60c6      	str	r6, [r0, #12]
 800799c:	69e6      	ldr	r6, [r4, #28]
 800799e:	68f3      	ldr	r3, [r6, #12]
 80079a0:	b183      	cbz	r3, 80079c4 <_Balloc+0x50>
 80079a2:	69e3      	ldr	r3, [r4, #28]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079aa:	b9b8      	cbnz	r0, 80079dc <_Balloc+0x68>
 80079ac:	2101      	movs	r1, #1
 80079ae:	fa01 f605 	lsl.w	r6, r1, r5
 80079b2:	1d72      	adds	r2, r6, #5
 80079b4:	4620      	mov	r0, r4
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	f001 fd66 	bl	8009488 <_calloc_r>
 80079bc:	b160      	cbz	r0, 80079d8 <_Balloc+0x64>
 80079be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079c2:	e00e      	b.n	80079e2 <_Balloc+0x6e>
 80079c4:	2221      	movs	r2, #33	@ 0x21
 80079c6:	2104      	movs	r1, #4
 80079c8:	4620      	mov	r0, r4
 80079ca:	f001 fd5d 	bl	8009488 <_calloc_r>
 80079ce:	69e3      	ldr	r3, [r4, #28]
 80079d0:	60f0      	str	r0, [r6, #12]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1e4      	bne.n	80079a2 <_Balloc+0x2e>
 80079d8:	2000      	movs	r0, #0
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	6802      	ldr	r2, [r0, #0]
 80079de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079e2:	2300      	movs	r3, #0
 80079e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079e8:	e7f7      	b.n	80079da <_Balloc+0x66>
 80079ea:	bf00      	nop
 80079ec:	0800a25c 	.word	0x0800a25c
 80079f0:	0800a2dc 	.word	0x0800a2dc

080079f4 <_Bfree>:
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	69c6      	ldr	r6, [r0, #28]
 80079f8:	4605      	mov	r5, r0
 80079fa:	460c      	mov	r4, r1
 80079fc:	b976      	cbnz	r6, 8007a1c <_Bfree+0x28>
 80079fe:	2010      	movs	r0, #16
 8007a00:	f7ff ff02 	bl	8007808 <malloc>
 8007a04:	4602      	mov	r2, r0
 8007a06:	61e8      	str	r0, [r5, #28]
 8007a08:	b920      	cbnz	r0, 8007a14 <_Bfree+0x20>
 8007a0a:	218f      	movs	r1, #143	@ 0x8f
 8007a0c:	4b08      	ldr	r3, [pc, #32]	@ (8007a30 <_Bfree+0x3c>)
 8007a0e:	4809      	ldr	r0, [pc, #36]	@ (8007a34 <_Bfree+0x40>)
 8007a10:	f001 fd1c 	bl	800944c <__assert_func>
 8007a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a18:	6006      	str	r6, [r0, #0]
 8007a1a:	60c6      	str	r6, [r0, #12]
 8007a1c:	b13c      	cbz	r4, 8007a2e <_Bfree+0x3a>
 8007a1e:	69eb      	ldr	r3, [r5, #28]
 8007a20:	6862      	ldr	r2, [r4, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a28:	6021      	str	r1, [r4, #0]
 8007a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	0800a25c 	.word	0x0800a25c
 8007a34:	0800a2dc 	.word	0x0800a2dc

08007a38 <__multadd>:
 8007a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	461e      	mov	r6, r3
 8007a42:	2000      	movs	r0, #0
 8007a44:	690d      	ldr	r5, [r1, #16]
 8007a46:	f101 0c14 	add.w	ip, r1, #20
 8007a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a4e:	3001      	adds	r0, #1
 8007a50:	b299      	uxth	r1, r3
 8007a52:	fb02 6101 	mla	r1, r2, r1, r6
 8007a56:	0c1e      	lsrs	r6, r3, #16
 8007a58:	0c0b      	lsrs	r3, r1, #16
 8007a5a:	fb02 3306 	mla	r3, r2, r6, r3
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a64:	4285      	cmp	r5, r0
 8007a66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8007a6e:	dcec      	bgt.n	8007a4a <__multadd+0x12>
 8007a70:	b30e      	cbz	r6, 8007ab6 <__multadd+0x7e>
 8007a72:	68a3      	ldr	r3, [r4, #8]
 8007a74:	42ab      	cmp	r3, r5
 8007a76:	dc19      	bgt.n	8007aac <__multadd+0x74>
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	f7ff ff79 	bl	8007974 <_Balloc>
 8007a82:	4680      	mov	r8, r0
 8007a84:	b928      	cbnz	r0, 8007a92 <__multadd+0x5a>
 8007a86:	4602      	mov	r2, r0
 8007a88:	21ba      	movs	r1, #186	@ 0xba
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007abc <__multadd+0x84>)
 8007a8c:	480c      	ldr	r0, [pc, #48]	@ (8007ac0 <__multadd+0x88>)
 8007a8e:	f001 fcdd 	bl	800944c <__assert_func>
 8007a92:	6922      	ldr	r2, [r4, #16]
 8007a94:	f104 010c 	add.w	r1, r4, #12
 8007a98:	3202      	adds	r2, #2
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	300c      	adds	r0, #12
 8007a9e:	f001 fcc1 	bl	8009424 <memcpy>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff ffa5 	bl	80079f4 <_Bfree>
 8007aaa:	4644      	mov	r4, r8
 8007aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	615e      	str	r6, [r3, #20]
 8007ab4:	6125      	str	r5, [r4, #16]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007abc:	0800a2cb 	.word	0x0800a2cb
 8007ac0:	0800a2dc 	.word	0x0800a2dc

08007ac4 <__s2b>:
 8007ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac8:	4615      	mov	r5, r2
 8007aca:	2209      	movs	r2, #9
 8007acc:	461f      	mov	r7, r3
 8007ace:	3308      	adds	r3, #8
 8007ad0:	460c      	mov	r4, r1
 8007ad2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2100      	movs	r1, #0
 8007adc:	429a      	cmp	r2, r3
 8007ade:	db09      	blt.n	8007af4 <__s2b+0x30>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f7ff ff47 	bl	8007974 <_Balloc>
 8007ae6:	b940      	cbnz	r0, 8007afa <__s2b+0x36>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	21d3      	movs	r1, #211	@ 0xd3
 8007aec:	4b18      	ldr	r3, [pc, #96]	@ (8007b50 <__s2b+0x8c>)
 8007aee:	4819      	ldr	r0, [pc, #100]	@ (8007b54 <__s2b+0x90>)
 8007af0:	f001 fcac 	bl	800944c <__assert_func>
 8007af4:	0052      	lsls	r2, r2, #1
 8007af6:	3101      	adds	r1, #1
 8007af8:	e7f0      	b.n	8007adc <__s2b+0x18>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	2d09      	cmp	r5, #9
 8007afe:	6143      	str	r3, [r0, #20]
 8007b00:	f04f 0301 	mov.w	r3, #1
 8007b04:	6103      	str	r3, [r0, #16]
 8007b06:	dd16      	ble.n	8007b36 <__s2b+0x72>
 8007b08:	f104 0909 	add.w	r9, r4, #9
 8007b0c:	46c8      	mov	r8, r9
 8007b0e:	442c      	add	r4, r5
 8007b10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007b14:	4601      	mov	r1, r0
 8007b16:	220a      	movs	r2, #10
 8007b18:	4630      	mov	r0, r6
 8007b1a:	3b30      	subs	r3, #48	@ 0x30
 8007b1c:	f7ff ff8c 	bl	8007a38 <__multadd>
 8007b20:	45a0      	cmp	r8, r4
 8007b22:	d1f5      	bne.n	8007b10 <__s2b+0x4c>
 8007b24:	f1a5 0408 	sub.w	r4, r5, #8
 8007b28:	444c      	add	r4, r9
 8007b2a:	1b2d      	subs	r5, r5, r4
 8007b2c:	1963      	adds	r3, r4, r5
 8007b2e:	42bb      	cmp	r3, r7
 8007b30:	db04      	blt.n	8007b3c <__s2b+0x78>
 8007b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b36:	2509      	movs	r5, #9
 8007b38:	340a      	adds	r4, #10
 8007b3a:	e7f6      	b.n	8007b2a <__s2b+0x66>
 8007b3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b40:	4601      	mov	r1, r0
 8007b42:	220a      	movs	r2, #10
 8007b44:	4630      	mov	r0, r6
 8007b46:	3b30      	subs	r3, #48	@ 0x30
 8007b48:	f7ff ff76 	bl	8007a38 <__multadd>
 8007b4c:	e7ee      	b.n	8007b2c <__s2b+0x68>
 8007b4e:	bf00      	nop
 8007b50:	0800a2cb 	.word	0x0800a2cb
 8007b54:	0800a2dc 	.word	0x0800a2dc

08007b58 <__hi0bits>:
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b5e:	bf3a      	itte	cc
 8007b60:	0403      	lslcc	r3, r0, #16
 8007b62:	2010      	movcc	r0, #16
 8007b64:	2000      	movcs	r0, #0
 8007b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b6a:	bf3c      	itt	cc
 8007b6c:	021b      	lslcc	r3, r3, #8
 8007b6e:	3008      	addcc	r0, #8
 8007b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b74:	bf3c      	itt	cc
 8007b76:	011b      	lslcc	r3, r3, #4
 8007b78:	3004      	addcc	r0, #4
 8007b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b7e:	bf3c      	itt	cc
 8007b80:	009b      	lslcc	r3, r3, #2
 8007b82:	3002      	addcc	r0, #2
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	db05      	blt.n	8007b94 <__hi0bits+0x3c>
 8007b88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b8c:	f100 0001 	add.w	r0, r0, #1
 8007b90:	bf08      	it	eq
 8007b92:	2020      	moveq	r0, #32
 8007b94:	4770      	bx	lr

08007b96 <__lo0bits>:
 8007b96:	6803      	ldr	r3, [r0, #0]
 8007b98:	4602      	mov	r2, r0
 8007b9a:	f013 0007 	ands.w	r0, r3, #7
 8007b9e:	d00b      	beq.n	8007bb8 <__lo0bits+0x22>
 8007ba0:	07d9      	lsls	r1, r3, #31
 8007ba2:	d421      	bmi.n	8007be8 <__lo0bits+0x52>
 8007ba4:	0798      	lsls	r0, r3, #30
 8007ba6:	bf49      	itett	mi
 8007ba8:	085b      	lsrmi	r3, r3, #1
 8007baa:	089b      	lsrpl	r3, r3, #2
 8007bac:	2001      	movmi	r0, #1
 8007bae:	6013      	strmi	r3, [r2, #0]
 8007bb0:	bf5c      	itt	pl
 8007bb2:	2002      	movpl	r0, #2
 8007bb4:	6013      	strpl	r3, [r2, #0]
 8007bb6:	4770      	bx	lr
 8007bb8:	b299      	uxth	r1, r3
 8007bba:	b909      	cbnz	r1, 8007bc0 <__lo0bits+0x2a>
 8007bbc:	2010      	movs	r0, #16
 8007bbe:	0c1b      	lsrs	r3, r3, #16
 8007bc0:	b2d9      	uxtb	r1, r3
 8007bc2:	b909      	cbnz	r1, 8007bc8 <__lo0bits+0x32>
 8007bc4:	3008      	adds	r0, #8
 8007bc6:	0a1b      	lsrs	r3, r3, #8
 8007bc8:	0719      	lsls	r1, r3, #28
 8007bca:	bf04      	itt	eq
 8007bcc:	091b      	lsreq	r3, r3, #4
 8007bce:	3004      	addeq	r0, #4
 8007bd0:	0799      	lsls	r1, r3, #30
 8007bd2:	bf04      	itt	eq
 8007bd4:	089b      	lsreq	r3, r3, #2
 8007bd6:	3002      	addeq	r0, #2
 8007bd8:	07d9      	lsls	r1, r3, #31
 8007bda:	d403      	bmi.n	8007be4 <__lo0bits+0x4e>
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	d003      	beq.n	8007bec <__lo0bits+0x56>
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	4770      	bx	lr
 8007be8:	2000      	movs	r0, #0
 8007bea:	4770      	bx	lr
 8007bec:	2020      	movs	r0, #32
 8007bee:	4770      	bx	lr

08007bf0 <__i2b>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	f7ff febd 	bl	8007974 <_Balloc>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	b928      	cbnz	r0, 8007c0a <__i2b+0x1a>
 8007bfe:	f240 1145 	movw	r1, #325	@ 0x145
 8007c02:	4b04      	ldr	r3, [pc, #16]	@ (8007c14 <__i2b+0x24>)
 8007c04:	4804      	ldr	r0, [pc, #16]	@ (8007c18 <__i2b+0x28>)
 8007c06:	f001 fc21 	bl	800944c <__assert_func>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	6144      	str	r4, [r0, #20]
 8007c0e:	6103      	str	r3, [r0, #16]
 8007c10:	bd10      	pop	{r4, pc}
 8007c12:	bf00      	nop
 8007c14:	0800a2cb 	.word	0x0800a2cb
 8007c18:	0800a2dc 	.word	0x0800a2dc

08007c1c <__multiply>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	4617      	mov	r7, r2
 8007c22:	690a      	ldr	r2, [r1, #16]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4689      	mov	r9, r1
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	bfa2      	ittt	ge
 8007c2c:	463b      	movge	r3, r7
 8007c2e:	460f      	movge	r7, r1
 8007c30:	4699      	movge	r9, r3
 8007c32:	693d      	ldr	r5, [r7, #16]
 8007c34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	eb05 060a 	add.w	r6, r5, sl
 8007c40:	42b3      	cmp	r3, r6
 8007c42:	b085      	sub	sp, #20
 8007c44:	bfb8      	it	lt
 8007c46:	3101      	addlt	r1, #1
 8007c48:	f7ff fe94 	bl	8007974 <_Balloc>
 8007c4c:	b930      	cbnz	r0, 8007c5c <__multiply+0x40>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c54:	4b40      	ldr	r3, [pc, #256]	@ (8007d58 <__multiply+0x13c>)
 8007c56:	4841      	ldr	r0, [pc, #260]	@ (8007d5c <__multiply+0x140>)
 8007c58:	f001 fbf8 	bl	800944c <__assert_func>
 8007c5c:	f100 0414 	add.w	r4, r0, #20
 8007c60:	4623      	mov	r3, r4
 8007c62:	2200      	movs	r2, #0
 8007c64:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007c68:	4573      	cmp	r3, lr
 8007c6a:	d320      	bcc.n	8007cae <__multiply+0x92>
 8007c6c:	f107 0814 	add.w	r8, r7, #20
 8007c70:	f109 0114 	add.w	r1, r9, #20
 8007c74:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007c78:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007c7c:	9302      	str	r3, [sp, #8]
 8007c7e:	1beb      	subs	r3, r5, r7
 8007c80:	3b15      	subs	r3, #21
 8007c82:	f023 0303 	bic.w	r3, r3, #3
 8007c86:	3304      	adds	r3, #4
 8007c88:	3715      	adds	r7, #21
 8007c8a:	42bd      	cmp	r5, r7
 8007c8c:	bf38      	it	cc
 8007c8e:	2304      	movcc	r3, #4
 8007c90:	9301      	str	r3, [sp, #4]
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	9103      	str	r1, [sp, #12]
 8007c96:	428b      	cmp	r3, r1
 8007c98:	d80c      	bhi.n	8007cb4 <__multiply+0x98>
 8007c9a:	2e00      	cmp	r6, #0
 8007c9c:	dd03      	ble.n	8007ca6 <__multiply+0x8a>
 8007c9e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d055      	beq.n	8007d52 <__multiply+0x136>
 8007ca6:	6106      	str	r6, [r0, #16]
 8007ca8:	b005      	add	sp, #20
 8007caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cae:	f843 2b04 	str.w	r2, [r3], #4
 8007cb2:	e7d9      	b.n	8007c68 <__multiply+0x4c>
 8007cb4:	f8b1 a000 	ldrh.w	sl, [r1]
 8007cb8:	f1ba 0f00 	cmp.w	sl, #0
 8007cbc:	d01f      	beq.n	8007cfe <__multiply+0xe2>
 8007cbe:	46c4      	mov	ip, r8
 8007cc0:	46a1      	mov	r9, r4
 8007cc2:	2700      	movs	r7, #0
 8007cc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007cc8:	f8d9 3000 	ldr.w	r3, [r9]
 8007ccc:	fa1f fb82 	uxth.w	fp, r2
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cd6:	443b      	add	r3, r7
 8007cd8:	f8d9 7000 	ldr.w	r7, [r9]
 8007cdc:	0c12      	lsrs	r2, r2, #16
 8007cde:	0c3f      	lsrs	r7, r7, #16
 8007ce0:	fb0a 7202 	mla	r2, sl, r2, r7
 8007ce4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cee:	4565      	cmp	r5, ip
 8007cf0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007cf4:	f849 3b04 	str.w	r3, [r9], #4
 8007cf8:	d8e4      	bhi.n	8007cc4 <__multiply+0xa8>
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	50e7      	str	r7, [r4, r3]
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	3104      	adds	r1, #4
 8007d02:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007d06:	f1b9 0f00 	cmp.w	r9, #0
 8007d0a:	d020      	beq.n	8007d4e <__multiply+0x132>
 8007d0c:	4647      	mov	r7, r8
 8007d0e:	46a4      	mov	ip, r4
 8007d10:	f04f 0a00 	mov.w	sl, #0
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	f8b7 b000 	ldrh.w	fp, [r7]
 8007d1a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	fb09 220b 	mla	r2, r9, fp, r2
 8007d24:	4452      	add	r2, sl
 8007d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d2a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d2e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d36:	f8bc 3000 	ldrh.w	r3, [ip]
 8007d3a:	42bd      	cmp	r5, r7
 8007d3c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d40:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d48:	d8e5      	bhi.n	8007d16 <__multiply+0xfa>
 8007d4a:	9a01      	ldr	r2, [sp, #4]
 8007d4c:	50a3      	str	r3, [r4, r2]
 8007d4e:	3404      	adds	r4, #4
 8007d50:	e79f      	b.n	8007c92 <__multiply+0x76>
 8007d52:	3e01      	subs	r6, #1
 8007d54:	e7a1      	b.n	8007c9a <__multiply+0x7e>
 8007d56:	bf00      	nop
 8007d58:	0800a2cb 	.word	0x0800a2cb
 8007d5c:	0800a2dc 	.word	0x0800a2dc

08007d60 <__pow5mult>:
 8007d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d64:	4615      	mov	r5, r2
 8007d66:	f012 0203 	ands.w	r2, r2, #3
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	460e      	mov	r6, r1
 8007d6e:	d007      	beq.n	8007d80 <__pow5mult+0x20>
 8007d70:	4c25      	ldr	r4, [pc, #148]	@ (8007e08 <__pow5mult+0xa8>)
 8007d72:	3a01      	subs	r2, #1
 8007d74:	2300      	movs	r3, #0
 8007d76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d7a:	f7ff fe5d 	bl	8007a38 <__multadd>
 8007d7e:	4606      	mov	r6, r0
 8007d80:	10ad      	asrs	r5, r5, #2
 8007d82:	d03d      	beq.n	8007e00 <__pow5mult+0xa0>
 8007d84:	69fc      	ldr	r4, [r7, #28]
 8007d86:	b97c      	cbnz	r4, 8007da8 <__pow5mult+0x48>
 8007d88:	2010      	movs	r0, #16
 8007d8a:	f7ff fd3d 	bl	8007808 <malloc>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	61f8      	str	r0, [r7, #28]
 8007d92:	b928      	cbnz	r0, 8007da0 <__pow5mult+0x40>
 8007d94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d98:	4b1c      	ldr	r3, [pc, #112]	@ (8007e0c <__pow5mult+0xac>)
 8007d9a:	481d      	ldr	r0, [pc, #116]	@ (8007e10 <__pow5mult+0xb0>)
 8007d9c:	f001 fb56 	bl	800944c <__assert_func>
 8007da0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007da4:	6004      	str	r4, [r0, #0]
 8007da6:	60c4      	str	r4, [r0, #12]
 8007da8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007dac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007db0:	b94c      	cbnz	r4, 8007dc6 <__pow5mult+0x66>
 8007db2:	f240 2171 	movw	r1, #625	@ 0x271
 8007db6:	4638      	mov	r0, r7
 8007db8:	f7ff ff1a 	bl	8007bf0 <__i2b>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dc4:	6003      	str	r3, [r0, #0]
 8007dc6:	f04f 0900 	mov.w	r9, #0
 8007dca:	07eb      	lsls	r3, r5, #31
 8007dcc:	d50a      	bpl.n	8007de4 <__pow5mult+0x84>
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4622      	mov	r2, r4
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ff22 	bl	8007c1c <__multiply>
 8007dd8:	4680      	mov	r8, r0
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4638      	mov	r0, r7
 8007dde:	f7ff fe09 	bl	80079f4 <_Bfree>
 8007de2:	4646      	mov	r6, r8
 8007de4:	106d      	asrs	r5, r5, #1
 8007de6:	d00b      	beq.n	8007e00 <__pow5mult+0xa0>
 8007de8:	6820      	ldr	r0, [r4, #0]
 8007dea:	b938      	cbnz	r0, 8007dfc <__pow5mult+0x9c>
 8007dec:	4622      	mov	r2, r4
 8007dee:	4621      	mov	r1, r4
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff ff13 	bl	8007c1c <__multiply>
 8007df6:	6020      	str	r0, [r4, #0]
 8007df8:	f8c0 9000 	str.w	r9, [r0]
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	e7e4      	b.n	8007dca <__pow5mult+0x6a>
 8007e00:	4630      	mov	r0, r6
 8007e02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e06:	bf00      	nop
 8007e08:	0800a3ec 	.word	0x0800a3ec
 8007e0c:	0800a25c 	.word	0x0800a25c
 8007e10:	0800a2dc 	.word	0x0800a2dc

08007e14 <__lshift>:
 8007e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e18:	460c      	mov	r4, r1
 8007e1a:	4607      	mov	r7, r0
 8007e1c:	4691      	mov	r9, r2
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	6849      	ldr	r1, [r1, #4]
 8007e22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e2c:	f108 0601 	add.w	r6, r8, #1
 8007e30:	42b3      	cmp	r3, r6
 8007e32:	db0b      	blt.n	8007e4c <__lshift+0x38>
 8007e34:	4638      	mov	r0, r7
 8007e36:	f7ff fd9d 	bl	8007974 <_Balloc>
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b948      	cbnz	r0, 8007e52 <__lshift+0x3e>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e44:	4b27      	ldr	r3, [pc, #156]	@ (8007ee4 <__lshift+0xd0>)
 8007e46:	4828      	ldr	r0, [pc, #160]	@ (8007ee8 <__lshift+0xd4>)
 8007e48:	f001 fb00 	bl	800944c <__assert_func>
 8007e4c:	3101      	adds	r1, #1
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	e7ee      	b.n	8007e30 <__lshift+0x1c>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f100 0114 	add.w	r1, r0, #20
 8007e58:	f100 0210 	add.w	r2, r0, #16
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	4553      	cmp	r3, sl
 8007e60:	db33      	blt.n	8007eca <__lshift+0xb6>
 8007e62:	6920      	ldr	r0, [r4, #16]
 8007e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e68:	f104 0314 	add.w	r3, r4, #20
 8007e6c:	f019 091f 	ands.w	r9, r9, #31
 8007e70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e78:	d02b      	beq.n	8007ed2 <__lshift+0xbe>
 8007e7a:	468a      	mov	sl, r1
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	fa00 f009 	lsl.w	r0, r0, r9
 8007e88:	4310      	orrs	r0, r2
 8007e8a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e92:	459c      	cmp	ip, r3
 8007e94:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e98:	d8f3      	bhi.n	8007e82 <__lshift+0x6e>
 8007e9a:	ebac 0304 	sub.w	r3, ip, r4
 8007e9e:	3b15      	subs	r3, #21
 8007ea0:	f023 0303 	bic.w	r3, r3, #3
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	f104 0015 	add.w	r0, r4, #21
 8007eaa:	4560      	cmp	r0, ip
 8007eac:	bf88      	it	hi
 8007eae:	2304      	movhi	r3, #4
 8007eb0:	50ca      	str	r2, [r1, r3]
 8007eb2:	b10a      	cbz	r2, 8007eb8 <__lshift+0xa4>
 8007eb4:	f108 0602 	add.w	r6, r8, #2
 8007eb8:	3e01      	subs	r6, #1
 8007eba:	4638      	mov	r0, r7
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	612e      	str	r6, [r5, #16]
 8007ec0:	f7ff fd98 	bl	80079f4 <_Bfree>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ece:	3301      	adds	r3, #1
 8007ed0:	e7c5      	b.n	8007e5e <__lshift+0x4a>
 8007ed2:	3904      	subs	r1, #4
 8007ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed8:	459c      	cmp	ip, r3
 8007eda:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ede:	d8f9      	bhi.n	8007ed4 <__lshift+0xc0>
 8007ee0:	e7ea      	b.n	8007eb8 <__lshift+0xa4>
 8007ee2:	bf00      	nop
 8007ee4:	0800a2cb 	.word	0x0800a2cb
 8007ee8:	0800a2dc 	.word	0x0800a2dc

08007eec <__mcmp>:
 8007eec:	4603      	mov	r3, r0
 8007eee:	690a      	ldr	r2, [r1, #16]
 8007ef0:	6900      	ldr	r0, [r0, #16]
 8007ef2:	b530      	push	{r4, r5, lr}
 8007ef4:	1a80      	subs	r0, r0, r2
 8007ef6:	d10e      	bne.n	8007f16 <__mcmp+0x2a>
 8007ef8:	3314      	adds	r3, #20
 8007efa:	3114      	adds	r1, #20
 8007efc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f0c:	4295      	cmp	r5, r2
 8007f0e:	d003      	beq.n	8007f18 <__mcmp+0x2c>
 8007f10:	d205      	bcs.n	8007f1e <__mcmp+0x32>
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	bd30      	pop	{r4, r5, pc}
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	d3f3      	bcc.n	8007f04 <__mcmp+0x18>
 8007f1c:	e7fb      	b.n	8007f16 <__mcmp+0x2a>
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e7f9      	b.n	8007f16 <__mcmp+0x2a>
	...

08007f24 <__mdiff>:
 8007f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f28:	4689      	mov	r9, r1
 8007f2a:	4606      	mov	r6, r0
 8007f2c:	4611      	mov	r1, r2
 8007f2e:	4648      	mov	r0, r9
 8007f30:	4614      	mov	r4, r2
 8007f32:	f7ff ffdb 	bl	8007eec <__mcmp>
 8007f36:	1e05      	subs	r5, r0, #0
 8007f38:	d112      	bne.n	8007f60 <__mdiff+0x3c>
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7ff fd19 	bl	8007974 <_Balloc>
 8007f42:	4602      	mov	r2, r0
 8007f44:	b928      	cbnz	r0, 8007f52 <__mdiff+0x2e>
 8007f46:	f240 2137 	movw	r1, #567	@ 0x237
 8007f4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008044 <__mdiff+0x120>)
 8007f4c:	483e      	ldr	r0, [pc, #248]	@ (8008048 <__mdiff+0x124>)
 8007f4e:	f001 fa7d 	bl	800944c <__assert_func>
 8007f52:	2301      	movs	r3, #1
 8007f54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f58:	4610      	mov	r0, r2
 8007f5a:	b003      	add	sp, #12
 8007f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f60:	bfbc      	itt	lt
 8007f62:	464b      	movlt	r3, r9
 8007f64:	46a1      	movlt	r9, r4
 8007f66:	4630      	mov	r0, r6
 8007f68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f6c:	bfba      	itte	lt
 8007f6e:	461c      	movlt	r4, r3
 8007f70:	2501      	movlt	r5, #1
 8007f72:	2500      	movge	r5, #0
 8007f74:	f7ff fcfe 	bl	8007974 <_Balloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	b918      	cbnz	r0, 8007f84 <__mdiff+0x60>
 8007f7c:	f240 2145 	movw	r1, #581	@ 0x245
 8007f80:	4b30      	ldr	r3, [pc, #192]	@ (8008044 <__mdiff+0x120>)
 8007f82:	e7e3      	b.n	8007f4c <__mdiff+0x28>
 8007f84:	f100 0b14 	add.w	fp, r0, #20
 8007f88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f8c:	f109 0310 	add.w	r3, r9, #16
 8007f90:	60c5      	str	r5, [r0, #12]
 8007f92:	f04f 0c00 	mov.w	ip, #0
 8007f96:	f109 0514 	add.w	r5, r9, #20
 8007f9a:	46d9      	mov	r9, fp
 8007f9c:	6926      	ldr	r6, [r4, #16]
 8007f9e:	f104 0e14 	add.w	lr, r4, #20
 8007fa2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007fa6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007faa:	9301      	str	r3, [sp, #4]
 8007fac:	9b01      	ldr	r3, [sp, #4]
 8007fae:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007fb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007fb6:	b281      	uxth	r1, r0
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	fa1f f38a 	uxth.w	r3, sl
 8007fbe:	1a5b      	subs	r3, r3, r1
 8007fc0:	0c00      	lsrs	r0, r0, #16
 8007fc2:	4463      	add	r3, ip
 8007fc4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007fc8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fd2:	4576      	cmp	r6, lr
 8007fd4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fd8:	f849 3b04 	str.w	r3, [r9], #4
 8007fdc:	d8e6      	bhi.n	8007fac <__mdiff+0x88>
 8007fde:	1b33      	subs	r3, r6, r4
 8007fe0:	3b15      	subs	r3, #21
 8007fe2:	f023 0303 	bic.w	r3, r3, #3
 8007fe6:	3415      	adds	r4, #21
 8007fe8:	3304      	adds	r3, #4
 8007fea:	42a6      	cmp	r6, r4
 8007fec:	bf38      	it	cc
 8007fee:	2304      	movcc	r3, #4
 8007ff0:	441d      	add	r5, r3
 8007ff2:	445b      	add	r3, fp
 8007ff4:	461e      	mov	r6, r3
 8007ff6:	462c      	mov	r4, r5
 8007ff8:	4544      	cmp	r4, r8
 8007ffa:	d30e      	bcc.n	800801a <__mdiff+0xf6>
 8007ffc:	f108 0103 	add.w	r1, r8, #3
 8008000:	1b49      	subs	r1, r1, r5
 8008002:	f021 0103 	bic.w	r1, r1, #3
 8008006:	3d03      	subs	r5, #3
 8008008:	45a8      	cmp	r8, r5
 800800a:	bf38      	it	cc
 800800c:	2100      	movcc	r1, #0
 800800e:	440b      	add	r3, r1
 8008010:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008014:	b199      	cbz	r1, 800803e <__mdiff+0x11a>
 8008016:	6117      	str	r7, [r2, #16]
 8008018:	e79e      	b.n	8007f58 <__mdiff+0x34>
 800801a:	46e6      	mov	lr, ip
 800801c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008020:	fa1f fc81 	uxth.w	ip, r1
 8008024:	44f4      	add	ip, lr
 8008026:	0c08      	lsrs	r0, r1, #16
 8008028:	4471      	add	r1, lr
 800802a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800802e:	b289      	uxth	r1, r1
 8008030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008034:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008038:	f846 1b04 	str.w	r1, [r6], #4
 800803c:	e7dc      	b.n	8007ff8 <__mdiff+0xd4>
 800803e:	3f01      	subs	r7, #1
 8008040:	e7e6      	b.n	8008010 <__mdiff+0xec>
 8008042:	bf00      	nop
 8008044:	0800a2cb 	.word	0x0800a2cb
 8008048:	0800a2dc 	.word	0x0800a2dc

0800804c <__ulp>:
 800804c:	4b0e      	ldr	r3, [pc, #56]	@ (8008088 <__ulp+0x3c>)
 800804e:	400b      	ands	r3, r1
 8008050:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008054:	2b00      	cmp	r3, #0
 8008056:	dc08      	bgt.n	800806a <__ulp+0x1e>
 8008058:	425b      	negs	r3, r3
 800805a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800805e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008062:	da04      	bge.n	800806e <__ulp+0x22>
 8008064:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008068:	4113      	asrs	r3, r2
 800806a:	2200      	movs	r2, #0
 800806c:	e008      	b.n	8008080 <__ulp+0x34>
 800806e:	f1a2 0314 	sub.w	r3, r2, #20
 8008072:	2b1e      	cmp	r3, #30
 8008074:	bfd6      	itet	le
 8008076:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800807a:	2201      	movgt	r2, #1
 800807c:	40da      	lsrle	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	7ff00000 	.word	0x7ff00000

0800808c <__b2d>:
 800808c:	6902      	ldr	r2, [r0, #16]
 800808e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008090:	f100 0614 	add.w	r6, r0, #20
 8008094:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008098:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800809c:	4f1e      	ldr	r7, [pc, #120]	@ (8008118 <__b2d+0x8c>)
 800809e:	4620      	mov	r0, r4
 80080a0:	f7ff fd5a 	bl	8007b58 <__hi0bits>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f1c0 0020 	rsb	r0, r0, #32
 80080aa:	2b0a      	cmp	r3, #10
 80080ac:	f1a2 0504 	sub.w	r5, r2, #4
 80080b0:	6008      	str	r0, [r1, #0]
 80080b2:	dc12      	bgt.n	80080da <__b2d+0x4e>
 80080b4:	42ae      	cmp	r6, r5
 80080b6:	bf2c      	ite	cs
 80080b8:	2200      	movcs	r2, #0
 80080ba:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80080be:	f1c3 0c0b 	rsb	ip, r3, #11
 80080c2:	3315      	adds	r3, #21
 80080c4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80080c8:	fa04 f303 	lsl.w	r3, r4, r3
 80080cc:	fa22 f20c 	lsr.w	r2, r2, ip
 80080d0:	ea4e 0107 	orr.w	r1, lr, r7
 80080d4:	431a      	orrs	r2, r3
 80080d6:	4610      	mov	r0, r2
 80080d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080da:	42ae      	cmp	r6, r5
 80080dc:	bf36      	itet	cc
 80080de:	f1a2 0508 	subcc.w	r5, r2, #8
 80080e2:	2200      	movcs	r2, #0
 80080e4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80080e8:	3b0b      	subs	r3, #11
 80080ea:	d012      	beq.n	8008112 <__b2d+0x86>
 80080ec:	f1c3 0720 	rsb	r7, r3, #32
 80080f0:	fa22 f107 	lsr.w	r1, r2, r7
 80080f4:	409c      	lsls	r4, r3
 80080f6:	430c      	orrs	r4, r1
 80080f8:	42b5      	cmp	r5, r6
 80080fa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80080fe:	bf94      	ite	ls
 8008100:	2400      	movls	r4, #0
 8008102:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008106:	409a      	lsls	r2, r3
 8008108:	40fc      	lsrs	r4, r7
 800810a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800810e:	4322      	orrs	r2, r4
 8008110:	e7e1      	b.n	80080d6 <__b2d+0x4a>
 8008112:	ea44 0107 	orr.w	r1, r4, r7
 8008116:	e7de      	b.n	80080d6 <__b2d+0x4a>
 8008118:	3ff00000 	.word	0x3ff00000

0800811c <__d2b>:
 800811c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008120:	2101      	movs	r1, #1
 8008122:	4690      	mov	r8, r2
 8008124:	4699      	mov	r9, r3
 8008126:	9e08      	ldr	r6, [sp, #32]
 8008128:	f7ff fc24 	bl	8007974 <_Balloc>
 800812c:	4604      	mov	r4, r0
 800812e:	b930      	cbnz	r0, 800813e <__d2b+0x22>
 8008130:	4602      	mov	r2, r0
 8008132:	f240 310f 	movw	r1, #783	@ 0x30f
 8008136:	4b23      	ldr	r3, [pc, #140]	@ (80081c4 <__d2b+0xa8>)
 8008138:	4823      	ldr	r0, [pc, #140]	@ (80081c8 <__d2b+0xac>)
 800813a:	f001 f987 	bl	800944c <__assert_func>
 800813e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008142:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008146:	b10d      	cbz	r5, 800814c <__d2b+0x30>
 8008148:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f1b8 0300 	subs.w	r3, r8, #0
 8008152:	d024      	beq.n	800819e <__d2b+0x82>
 8008154:	4668      	mov	r0, sp
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	f7ff fd1d 	bl	8007b96 <__lo0bits>
 800815c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008160:	b1d8      	cbz	r0, 800819a <__d2b+0x7e>
 8008162:	f1c0 0320 	rsb	r3, r0, #32
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	430b      	orrs	r3, r1
 800816c:	40c2      	lsrs	r2, r0
 800816e:	6163      	str	r3, [r4, #20]
 8008170:	9201      	str	r2, [sp, #4]
 8008172:	9b01      	ldr	r3, [sp, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bf0c      	ite	eq
 8008178:	2201      	moveq	r2, #1
 800817a:	2202      	movne	r2, #2
 800817c:	61a3      	str	r3, [r4, #24]
 800817e:	6122      	str	r2, [r4, #16]
 8008180:	b1ad      	cbz	r5, 80081ae <__d2b+0x92>
 8008182:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008186:	4405      	add	r5, r0
 8008188:	6035      	str	r5, [r6, #0]
 800818a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	6018      	str	r0, [r3, #0]
 8008192:	4620      	mov	r0, r4
 8008194:	b002      	add	sp, #8
 8008196:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800819a:	6161      	str	r1, [r4, #20]
 800819c:	e7e9      	b.n	8008172 <__d2b+0x56>
 800819e:	a801      	add	r0, sp, #4
 80081a0:	f7ff fcf9 	bl	8007b96 <__lo0bits>
 80081a4:	9b01      	ldr	r3, [sp, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	6163      	str	r3, [r4, #20]
 80081aa:	3020      	adds	r0, #32
 80081ac:	e7e7      	b.n	800817e <__d2b+0x62>
 80081ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80081b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081b6:	6030      	str	r0, [r6, #0]
 80081b8:	6918      	ldr	r0, [r3, #16]
 80081ba:	f7ff fccd 	bl	8007b58 <__hi0bits>
 80081be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081c2:	e7e4      	b.n	800818e <__d2b+0x72>
 80081c4:	0800a2cb 	.word	0x0800a2cb
 80081c8:	0800a2dc 	.word	0x0800a2dc

080081cc <__ratio>:
 80081cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d0:	b085      	sub	sp, #20
 80081d2:	e9cd 1000 	strd	r1, r0, [sp]
 80081d6:	a902      	add	r1, sp, #8
 80081d8:	f7ff ff58 	bl	800808c <__b2d>
 80081dc:	468b      	mov	fp, r1
 80081de:	4606      	mov	r6, r0
 80081e0:	460f      	mov	r7, r1
 80081e2:	9800      	ldr	r0, [sp, #0]
 80081e4:	a903      	add	r1, sp, #12
 80081e6:	f7ff ff51 	bl	800808c <__b2d>
 80081ea:	460d      	mov	r5, r1
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	4689      	mov	r9, r1
 80081f0:	6919      	ldr	r1, [r3, #16]
 80081f2:	9b00      	ldr	r3, [sp, #0]
 80081f4:	4604      	mov	r4, r0
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	4630      	mov	r0, r6
 80081fa:	1ac9      	subs	r1, r1, r3
 80081fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008200:	1a9b      	subs	r3, r3, r2
 8008202:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008206:	2b00      	cmp	r3, #0
 8008208:	bfcd      	iteet	gt
 800820a:	463a      	movgt	r2, r7
 800820c:	462a      	movle	r2, r5
 800820e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008212:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008216:	bfd8      	it	le
 8008218:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800821c:	464b      	mov	r3, r9
 800821e:	4622      	mov	r2, r4
 8008220:	4659      	mov	r1, fp
 8008222:	f7f8 fa83 	bl	800072c <__aeabi_ddiv>
 8008226:	b005      	add	sp, #20
 8008228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822c <__copybits>:
 800822c:	3901      	subs	r1, #1
 800822e:	b570      	push	{r4, r5, r6, lr}
 8008230:	1149      	asrs	r1, r1, #5
 8008232:	6914      	ldr	r4, [r2, #16]
 8008234:	3101      	adds	r1, #1
 8008236:	f102 0314 	add.w	r3, r2, #20
 800823a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800823e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008242:	1f05      	subs	r5, r0, #4
 8008244:	42a3      	cmp	r3, r4
 8008246:	d30c      	bcc.n	8008262 <__copybits+0x36>
 8008248:	1aa3      	subs	r3, r4, r2
 800824a:	3b11      	subs	r3, #17
 800824c:	f023 0303 	bic.w	r3, r3, #3
 8008250:	3211      	adds	r2, #17
 8008252:	42a2      	cmp	r2, r4
 8008254:	bf88      	it	hi
 8008256:	2300      	movhi	r3, #0
 8008258:	4418      	add	r0, r3
 800825a:	2300      	movs	r3, #0
 800825c:	4288      	cmp	r0, r1
 800825e:	d305      	bcc.n	800826c <__copybits+0x40>
 8008260:	bd70      	pop	{r4, r5, r6, pc}
 8008262:	f853 6b04 	ldr.w	r6, [r3], #4
 8008266:	f845 6f04 	str.w	r6, [r5, #4]!
 800826a:	e7eb      	b.n	8008244 <__copybits+0x18>
 800826c:	f840 3b04 	str.w	r3, [r0], #4
 8008270:	e7f4      	b.n	800825c <__copybits+0x30>

08008272 <__any_on>:
 8008272:	f100 0214 	add.w	r2, r0, #20
 8008276:	6900      	ldr	r0, [r0, #16]
 8008278:	114b      	asrs	r3, r1, #5
 800827a:	4298      	cmp	r0, r3
 800827c:	b510      	push	{r4, lr}
 800827e:	db11      	blt.n	80082a4 <__any_on+0x32>
 8008280:	dd0a      	ble.n	8008298 <__any_on+0x26>
 8008282:	f011 011f 	ands.w	r1, r1, #31
 8008286:	d007      	beq.n	8008298 <__any_on+0x26>
 8008288:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800828c:	fa24 f001 	lsr.w	r0, r4, r1
 8008290:	fa00 f101 	lsl.w	r1, r0, r1
 8008294:	428c      	cmp	r4, r1
 8008296:	d10b      	bne.n	80082b0 <__any_on+0x3e>
 8008298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800829c:	4293      	cmp	r3, r2
 800829e:	d803      	bhi.n	80082a8 <__any_on+0x36>
 80082a0:	2000      	movs	r0, #0
 80082a2:	bd10      	pop	{r4, pc}
 80082a4:	4603      	mov	r3, r0
 80082a6:	e7f7      	b.n	8008298 <__any_on+0x26>
 80082a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d0f5      	beq.n	800829c <__any_on+0x2a>
 80082b0:	2001      	movs	r0, #1
 80082b2:	e7f6      	b.n	80082a2 <__any_on+0x30>

080082b4 <sulp>:
 80082b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b8:	460f      	mov	r7, r1
 80082ba:	4690      	mov	r8, r2
 80082bc:	f7ff fec6 	bl	800804c <__ulp>
 80082c0:	4604      	mov	r4, r0
 80082c2:	460d      	mov	r5, r1
 80082c4:	f1b8 0f00 	cmp.w	r8, #0
 80082c8:	d011      	beq.n	80082ee <sulp+0x3a>
 80082ca:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80082ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd0b      	ble.n	80082ee <sulp+0x3a>
 80082d6:	2400      	movs	r4, #0
 80082d8:	051b      	lsls	r3, r3, #20
 80082da:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80082de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80082e2:	4622      	mov	r2, r4
 80082e4:	462b      	mov	r3, r5
 80082e6:	f7f8 f8f7 	bl	80004d8 <__aeabi_dmul>
 80082ea:	4604      	mov	r4, r0
 80082ec:	460d      	mov	r5, r1
 80082ee:	4620      	mov	r0, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080082f8 <_strtod_l>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	b09f      	sub	sp, #124	@ 0x7c
 80082fe:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008300:	2200      	movs	r2, #0
 8008302:	460c      	mov	r4, r1
 8008304:	921a      	str	r2, [sp, #104]	@ 0x68
 8008306:	f04f 0a00 	mov.w	sl, #0
 800830a:	f04f 0b00 	mov.w	fp, #0
 800830e:	460a      	mov	r2, r1
 8008310:	9005      	str	r0, [sp, #20]
 8008312:	9219      	str	r2, [sp, #100]	@ 0x64
 8008314:	7811      	ldrb	r1, [r2, #0]
 8008316:	292b      	cmp	r1, #43	@ 0x2b
 8008318:	d048      	beq.n	80083ac <_strtod_l+0xb4>
 800831a:	d836      	bhi.n	800838a <_strtod_l+0x92>
 800831c:	290d      	cmp	r1, #13
 800831e:	d830      	bhi.n	8008382 <_strtod_l+0x8a>
 8008320:	2908      	cmp	r1, #8
 8008322:	d830      	bhi.n	8008386 <_strtod_l+0x8e>
 8008324:	2900      	cmp	r1, #0
 8008326:	d039      	beq.n	800839c <_strtod_l+0xa4>
 8008328:	2200      	movs	r2, #0
 800832a:	920e      	str	r2, [sp, #56]	@ 0x38
 800832c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800832e:	782a      	ldrb	r2, [r5, #0]
 8008330:	2a30      	cmp	r2, #48	@ 0x30
 8008332:	f040 80b0 	bne.w	8008496 <_strtod_l+0x19e>
 8008336:	786a      	ldrb	r2, [r5, #1]
 8008338:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800833c:	2a58      	cmp	r2, #88	@ 0x58
 800833e:	d16c      	bne.n	800841a <_strtod_l+0x122>
 8008340:	9302      	str	r3, [sp, #8]
 8008342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008344:	4a8f      	ldr	r2, [pc, #572]	@ (8008584 <_strtod_l+0x28c>)
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	ab1a      	add	r3, sp, #104	@ 0x68
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	9805      	ldr	r0, [sp, #20]
 800834e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008350:	a919      	add	r1, sp, #100	@ 0x64
 8008352:	f001 f915 	bl	8009580 <__gethex>
 8008356:	f010 060f 	ands.w	r6, r0, #15
 800835a:	4604      	mov	r4, r0
 800835c:	d005      	beq.n	800836a <_strtod_l+0x72>
 800835e:	2e06      	cmp	r6, #6
 8008360:	d126      	bne.n	80083b0 <_strtod_l+0xb8>
 8008362:	2300      	movs	r3, #0
 8008364:	3501      	adds	r5, #1
 8008366:	9519      	str	r5, [sp, #100]	@ 0x64
 8008368:	930e      	str	r3, [sp, #56]	@ 0x38
 800836a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 8582 	bne.w	8008e76 <_strtod_l+0xb7e>
 8008372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008374:	b1bb      	cbz	r3, 80083a6 <_strtod_l+0xae>
 8008376:	4650      	mov	r0, sl
 8008378:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800837c:	b01f      	add	sp, #124	@ 0x7c
 800837e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008382:	2920      	cmp	r1, #32
 8008384:	d1d0      	bne.n	8008328 <_strtod_l+0x30>
 8008386:	3201      	adds	r2, #1
 8008388:	e7c3      	b.n	8008312 <_strtod_l+0x1a>
 800838a:	292d      	cmp	r1, #45	@ 0x2d
 800838c:	d1cc      	bne.n	8008328 <_strtod_l+0x30>
 800838e:	2101      	movs	r1, #1
 8008390:	910e      	str	r1, [sp, #56]	@ 0x38
 8008392:	1c51      	adds	r1, r2, #1
 8008394:	9119      	str	r1, [sp, #100]	@ 0x64
 8008396:	7852      	ldrb	r2, [r2, #1]
 8008398:	2a00      	cmp	r2, #0
 800839a:	d1c7      	bne.n	800832c <_strtod_l+0x34>
 800839c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800839e:	9419      	str	r4, [sp, #100]	@ 0x64
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 8566 	bne.w	8008e72 <_strtod_l+0xb7a>
 80083a6:	4650      	mov	r0, sl
 80083a8:	4659      	mov	r1, fp
 80083aa:	e7e7      	b.n	800837c <_strtod_l+0x84>
 80083ac:	2100      	movs	r1, #0
 80083ae:	e7ef      	b.n	8008390 <_strtod_l+0x98>
 80083b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80083b2:	b13a      	cbz	r2, 80083c4 <_strtod_l+0xcc>
 80083b4:	2135      	movs	r1, #53	@ 0x35
 80083b6:	a81c      	add	r0, sp, #112	@ 0x70
 80083b8:	f7ff ff38 	bl	800822c <__copybits>
 80083bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083be:	9805      	ldr	r0, [sp, #20]
 80083c0:	f7ff fb18 	bl	80079f4 <_Bfree>
 80083c4:	3e01      	subs	r6, #1
 80083c6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80083c8:	2e04      	cmp	r6, #4
 80083ca:	d806      	bhi.n	80083da <_strtod_l+0xe2>
 80083cc:	e8df f006 	tbb	[pc, r6]
 80083d0:	201d0314 	.word	0x201d0314
 80083d4:	14          	.byte	0x14
 80083d5:	00          	.byte	0x00
 80083d6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80083da:	05e1      	lsls	r1, r4, #23
 80083dc:	bf48      	it	mi
 80083de:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80083e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80083e6:	0d1b      	lsrs	r3, r3, #20
 80083e8:	051b      	lsls	r3, r3, #20
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1bd      	bne.n	800836a <_strtod_l+0x72>
 80083ee:	f7fe fb25 	bl	8006a3c <__errno>
 80083f2:	2322      	movs	r3, #34	@ 0x22
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	e7b8      	b.n	800836a <_strtod_l+0x72>
 80083f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80083fc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008400:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008404:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008408:	e7e7      	b.n	80083da <_strtod_l+0xe2>
 800840a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008588 <_strtod_l+0x290>
 800840e:	e7e4      	b.n	80083da <_strtod_l+0xe2>
 8008410:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008414:	f04f 3aff 	mov.w	sl, #4294967295
 8008418:	e7df      	b.n	80083da <_strtod_l+0xe2>
 800841a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b30      	cmp	r3, #48	@ 0x30
 8008424:	d0f9      	beq.n	800841a <_strtod_l+0x122>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d09f      	beq.n	800836a <_strtod_l+0x72>
 800842a:	2301      	movs	r3, #1
 800842c:	2700      	movs	r7, #0
 800842e:	220a      	movs	r2, #10
 8008430:	46b9      	mov	r9, r7
 8008432:	9308      	str	r3, [sp, #32]
 8008434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008436:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008438:	930c      	str	r3, [sp, #48]	@ 0x30
 800843a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800843c:	7805      	ldrb	r5, [r0, #0]
 800843e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008442:	b2d9      	uxtb	r1, r3
 8008444:	2909      	cmp	r1, #9
 8008446:	d928      	bls.n	800849a <_strtod_l+0x1a2>
 8008448:	2201      	movs	r2, #1
 800844a:	4950      	ldr	r1, [pc, #320]	@ (800858c <_strtod_l+0x294>)
 800844c:	f000 ffc8 	bl	80093e0 <strncmp>
 8008450:	2800      	cmp	r0, #0
 8008452:	d032      	beq.n	80084ba <_strtod_l+0x1c2>
 8008454:	2000      	movs	r0, #0
 8008456:	462a      	mov	r2, r5
 8008458:	4603      	mov	r3, r0
 800845a:	464d      	mov	r5, r9
 800845c:	900a      	str	r0, [sp, #40]	@ 0x28
 800845e:	2a65      	cmp	r2, #101	@ 0x65
 8008460:	d001      	beq.n	8008466 <_strtod_l+0x16e>
 8008462:	2a45      	cmp	r2, #69	@ 0x45
 8008464:	d114      	bne.n	8008490 <_strtod_l+0x198>
 8008466:	b91d      	cbnz	r5, 8008470 <_strtod_l+0x178>
 8008468:	9a08      	ldr	r2, [sp, #32]
 800846a:	4302      	orrs	r2, r0
 800846c:	d096      	beq.n	800839c <_strtod_l+0xa4>
 800846e:	2500      	movs	r5, #0
 8008470:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008472:	1c62      	adds	r2, r4, #1
 8008474:	9219      	str	r2, [sp, #100]	@ 0x64
 8008476:	7862      	ldrb	r2, [r4, #1]
 8008478:	2a2b      	cmp	r2, #43	@ 0x2b
 800847a:	d07a      	beq.n	8008572 <_strtod_l+0x27a>
 800847c:	2a2d      	cmp	r2, #45	@ 0x2d
 800847e:	d07e      	beq.n	800857e <_strtod_l+0x286>
 8008480:	f04f 0c00 	mov.w	ip, #0
 8008484:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008488:	2909      	cmp	r1, #9
 800848a:	f240 8085 	bls.w	8008598 <_strtod_l+0x2a0>
 800848e:	9419      	str	r4, [sp, #100]	@ 0x64
 8008490:	f04f 0800 	mov.w	r8, #0
 8008494:	e0a5      	b.n	80085e2 <_strtod_l+0x2ea>
 8008496:	2300      	movs	r3, #0
 8008498:	e7c8      	b.n	800842c <_strtod_l+0x134>
 800849a:	f1b9 0f08 	cmp.w	r9, #8
 800849e:	bfd8      	it	le
 80084a0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80084a2:	f100 0001 	add.w	r0, r0, #1
 80084a6:	bfd6      	itet	le
 80084a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80084ac:	fb02 3707 	mlagt	r7, r2, r7, r3
 80084b0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80084b2:	f109 0901 	add.w	r9, r9, #1
 80084b6:	9019      	str	r0, [sp, #100]	@ 0x64
 80084b8:	e7bf      	b.n	800843a <_strtod_l+0x142>
 80084ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	9219      	str	r2, [sp, #100]	@ 0x64
 80084c0:	785a      	ldrb	r2, [r3, #1]
 80084c2:	f1b9 0f00 	cmp.w	r9, #0
 80084c6:	d03b      	beq.n	8008540 <_strtod_l+0x248>
 80084c8:	464d      	mov	r5, r9
 80084ca:	900a      	str	r0, [sp, #40]	@ 0x28
 80084cc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d912      	bls.n	80084fa <_strtod_l+0x202>
 80084d4:	2301      	movs	r3, #1
 80084d6:	e7c2      	b.n	800845e <_strtod_l+0x166>
 80084d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084da:	3001      	adds	r0, #1
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	9219      	str	r2, [sp, #100]	@ 0x64
 80084e0:	785a      	ldrb	r2, [r3, #1]
 80084e2:	2a30      	cmp	r2, #48	@ 0x30
 80084e4:	d0f8      	beq.n	80084d8 <_strtod_l+0x1e0>
 80084e6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	f200 84c8 	bhi.w	8008e80 <_strtod_l+0xb88>
 80084f0:	900a      	str	r0, [sp, #40]	@ 0x28
 80084f2:	2000      	movs	r0, #0
 80084f4:	4605      	mov	r5, r0
 80084f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80084fa:	3a30      	subs	r2, #48	@ 0x30
 80084fc:	f100 0301 	add.w	r3, r0, #1
 8008500:	d018      	beq.n	8008534 <_strtod_l+0x23c>
 8008502:	462e      	mov	r6, r5
 8008504:	f04f 0e0a 	mov.w	lr, #10
 8008508:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800850a:	4419      	add	r1, r3
 800850c:	910a      	str	r1, [sp, #40]	@ 0x28
 800850e:	1c71      	adds	r1, r6, #1
 8008510:	eba1 0c05 	sub.w	ip, r1, r5
 8008514:	4563      	cmp	r3, ip
 8008516:	dc15      	bgt.n	8008544 <_strtod_l+0x24c>
 8008518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800851c:	182b      	adds	r3, r5, r0
 800851e:	2b08      	cmp	r3, #8
 8008520:	f105 0501 	add.w	r5, r5, #1
 8008524:	4405      	add	r5, r0
 8008526:	dc1a      	bgt.n	800855e <_strtod_l+0x266>
 8008528:	230a      	movs	r3, #10
 800852a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800852c:	fb03 2301 	mla	r3, r3, r1, r2
 8008530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008532:	2300      	movs	r3, #0
 8008534:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008536:	4618      	mov	r0, r3
 8008538:	1c51      	adds	r1, r2, #1
 800853a:	9119      	str	r1, [sp, #100]	@ 0x64
 800853c:	7852      	ldrb	r2, [r2, #1]
 800853e:	e7c5      	b.n	80084cc <_strtod_l+0x1d4>
 8008540:	4648      	mov	r0, r9
 8008542:	e7ce      	b.n	80084e2 <_strtod_l+0x1ea>
 8008544:	2e08      	cmp	r6, #8
 8008546:	dc05      	bgt.n	8008554 <_strtod_l+0x25c>
 8008548:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800854a:	fb0e f606 	mul.w	r6, lr, r6
 800854e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008550:	460e      	mov	r6, r1
 8008552:	e7dc      	b.n	800850e <_strtod_l+0x216>
 8008554:	2910      	cmp	r1, #16
 8008556:	bfd8      	it	le
 8008558:	fb0e f707 	mulle.w	r7, lr, r7
 800855c:	e7f8      	b.n	8008550 <_strtod_l+0x258>
 800855e:	2b0f      	cmp	r3, #15
 8008560:	bfdc      	itt	le
 8008562:	230a      	movle	r3, #10
 8008564:	fb03 2707 	mlale	r7, r3, r7, r2
 8008568:	e7e3      	b.n	8008532 <_strtod_l+0x23a>
 800856a:	2300      	movs	r3, #0
 800856c:	930a      	str	r3, [sp, #40]	@ 0x28
 800856e:	2301      	movs	r3, #1
 8008570:	e77a      	b.n	8008468 <_strtod_l+0x170>
 8008572:	f04f 0c00 	mov.w	ip, #0
 8008576:	1ca2      	adds	r2, r4, #2
 8008578:	9219      	str	r2, [sp, #100]	@ 0x64
 800857a:	78a2      	ldrb	r2, [r4, #2]
 800857c:	e782      	b.n	8008484 <_strtod_l+0x18c>
 800857e:	f04f 0c01 	mov.w	ip, #1
 8008582:	e7f8      	b.n	8008576 <_strtod_l+0x27e>
 8008584:	0800a4fc 	.word	0x0800a4fc
 8008588:	7ff00000 	.word	0x7ff00000
 800858c:	0800a335 	.word	0x0800a335
 8008590:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008592:	1c51      	adds	r1, r2, #1
 8008594:	9119      	str	r1, [sp, #100]	@ 0x64
 8008596:	7852      	ldrb	r2, [r2, #1]
 8008598:	2a30      	cmp	r2, #48	@ 0x30
 800859a:	d0f9      	beq.n	8008590 <_strtod_l+0x298>
 800859c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80085a0:	2908      	cmp	r1, #8
 80085a2:	f63f af75 	bhi.w	8008490 <_strtod_l+0x198>
 80085a6:	f04f 080a 	mov.w	r8, #10
 80085aa:	3a30      	subs	r2, #48	@ 0x30
 80085ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085b0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80085b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085b4:	1c56      	adds	r6, r2, #1
 80085b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80085b8:	7852      	ldrb	r2, [r2, #1]
 80085ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80085be:	f1be 0f09 	cmp.w	lr, #9
 80085c2:	d939      	bls.n	8008638 <_strtod_l+0x340>
 80085c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80085c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80085ca:	1a76      	subs	r6, r6, r1
 80085cc:	2e08      	cmp	r6, #8
 80085ce:	dc03      	bgt.n	80085d8 <_strtod_l+0x2e0>
 80085d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80085d2:	4588      	cmp	r8, r1
 80085d4:	bfa8      	it	ge
 80085d6:	4688      	movge	r8, r1
 80085d8:	f1bc 0f00 	cmp.w	ip, #0
 80085dc:	d001      	beq.n	80085e2 <_strtod_l+0x2ea>
 80085de:	f1c8 0800 	rsb	r8, r8, #0
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	d14e      	bne.n	8008684 <_strtod_l+0x38c>
 80085e6:	9908      	ldr	r1, [sp, #32]
 80085e8:	4308      	orrs	r0, r1
 80085ea:	f47f aebe 	bne.w	800836a <_strtod_l+0x72>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f47f aed4 	bne.w	800839c <_strtod_l+0xa4>
 80085f4:	2a69      	cmp	r2, #105	@ 0x69
 80085f6:	d028      	beq.n	800864a <_strtod_l+0x352>
 80085f8:	dc25      	bgt.n	8008646 <_strtod_l+0x34e>
 80085fa:	2a49      	cmp	r2, #73	@ 0x49
 80085fc:	d025      	beq.n	800864a <_strtod_l+0x352>
 80085fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8008600:	f47f aecc 	bne.w	800839c <_strtod_l+0xa4>
 8008604:	4999      	ldr	r1, [pc, #612]	@ (800886c <_strtod_l+0x574>)
 8008606:	a819      	add	r0, sp, #100	@ 0x64
 8008608:	f001 f9dc 	bl	80099c4 <__match>
 800860c:	2800      	cmp	r0, #0
 800860e:	f43f aec5 	beq.w	800839c <_strtod_l+0xa4>
 8008612:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	2b28      	cmp	r3, #40	@ 0x28
 8008618:	d12e      	bne.n	8008678 <_strtod_l+0x380>
 800861a:	4995      	ldr	r1, [pc, #596]	@ (8008870 <_strtod_l+0x578>)
 800861c:	aa1c      	add	r2, sp, #112	@ 0x70
 800861e:	a819      	add	r0, sp, #100	@ 0x64
 8008620:	f001 f9e4 	bl	80099ec <__hexnan>
 8008624:	2805      	cmp	r0, #5
 8008626:	d127      	bne.n	8008678 <_strtod_l+0x380>
 8008628:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800862a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800862e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008632:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008636:	e698      	b.n	800836a <_strtod_l+0x72>
 8008638:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800863a:	fb08 2101 	mla	r1, r8, r1, r2
 800863e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008642:	9209      	str	r2, [sp, #36]	@ 0x24
 8008644:	e7b5      	b.n	80085b2 <_strtod_l+0x2ba>
 8008646:	2a6e      	cmp	r2, #110	@ 0x6e
 8008648:	e7da      	b.n	8008600 <_strtod_l+0x308>
 800864a:	498a      	ldr	r1, [pc, #552]	@ (8008874 <_strtod_l+0x57c>)
 800864c:	a819      	add	r0, sp, #100	@ 0x64
 800864e:	f001 f9b9 	bl	80099c4 <__match>
 8008652:	2800      	cmp	r0, #0
 8008654:	f43f aea2 	beq.w	800839c <_strtod_l+0xa4>
 8008658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800865a:	4987      	ldr	r1, [pc, #540]	@ (8008878 <_strtod_l+0x580>)
 800865c:	3b01      	subs	r3, #1
 800865e:	a819      	add	r0, sp, #100	@ 0x64
 8008660:	9319      	str	r3, [sp, #100]	@ 0x64
 8008662:	f001 f9af 	bl	80099c4 <__match>
 8008666:	b910      	cbnz	r0, 800866e <_strtod_l+0x376>
 8008668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800866a:	3301      	adds	r3, #1
 800866c:	9319      	str	r3, [sp, #100]	@ 0x64
 800866e:	f04f 0a00 	mov.w	sl, #0
 8008672:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800887c <_strtod_l+0x584>
 8008676:	e678      	b.n	800836a <_strtod_l+0x72>
 8008678:	4881      	ldr	r0, [pc, #516]	@ (8008880 <_strtod_l+0x588>)
 800867a:	f000 fee1 	bl	8009440 <nan>
 800867e:	4682      	mov	sl, r0
 8008680:	468b      	mov	fp, r1
 8008682:	e672      	b.n	800836a <_strtod_l+0x72>
 8008684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008686:	f1b9 0f00 	cmp.w	r9, #0
 800868a:	bf08      	it	eq
 800868c:	46a9      	moveq	r9, r5
 800868e:	eba8 0303 	sub.w	r3, r8, r3
 8008692:	2d10      	cmp	r5, #16
 8008694:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008696:	462c      	mov	r4, r5
 8008698:	9309      	str	r3, [sp, #36]	@ 0x24
 800869a:	bfa8      	it	ge
 800869c:	2410      	movge	r4, #16
 800869e:	f7f7 fea1 	bl	80003e4 <__aeabi_ui2d>
 80086a2:	2d09      	cmp	r5, #9
 80086a4:	4682      	mov	sl, r0
 80086a6:	468b      	mov	fp, r1
 80086a8:	dc11      	bgt.n	80086ce <_strtod_l+0x3d6>
 80086aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f43f ae5c 	beq.w	800836a <_strtod_l+0x72>
 80086b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b4:	dd76      	ble.n	80087a4 <_strtod_l+0x4ac>
 80086b6:	2b16      	cmp	r3, #22
 80086b8:	dc5d      	bgt.n	8008776 <_strtod_l+0x47e>
 80086ba:	4972      	ldr	r1, [pc, #456]	@ (8008884 <_strtod_l+0x58c>)
 80086bc:	4652      	mov	r2, sl
 80086be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086c2:	465b      	mov	r3, fp
 80086c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086c8:	f7f7 ff06 	bl	80004d8 <__aeabi_dmul>
 80086cc:	e7d7      	b.n	800867e <_strtod_l+0x386>
 80086ce:	4b6d      	ldr	r3, [pc, #436]	@ (8008884 <_strtod_l+0x58c>)
 80086d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80086d8:	f7f7 fefe 	bl	80004d8 <__aeabi_dmul>
 80086dc:	4682      	mov	sl, r0
 80086de:	4638      	mov	r0, r7
 80086e0:	468b      	mov	fp, r1
 80086e2:	f7f7 fe7f 	bl	80003e4 <__aeabi_ui2d>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4650      	mov	r0, sl
 80086ec:	4659      	mov	r1, fp
 80086ee:	f7f7 fd3d 	bl	800016c <__adddf3>
 80086f2:	2d0f      	cmp	r5, #15
 80086f4:	4682      	mov	sl, r0
 80086f6:	468b      	mov	fp, r1
 80086f8:	ddd7      	ble.n	80086aa <_strtod_l+0x3b2>
 80086fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086fc:	1b2c      	subs	r4, r5, r4
 80086fe:	441c      	add	r4, r3
 8008700:	2c00      	cmp	r4, #0
 8008702:	f340 8093 	ble.w	800882c <_strtod_l+0x534>
 8008706:	f014 030f 	ands.w	r3, r4, #15
 800870a:	d00a      	beq.n	8008722 <_strtod_l+0x42a>
 800870c:	495d      	ldr	r1, [pc, #372]	@ (8008884 <_strtod_l+0x58c>)
 800870e:	4652      	mov	r2, sl
 8008710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008718:	465b      	mov	r3, fp
 800871a:	f7f7 fedd 	bl	80004d8 <__aeabi_dmul>
 800871e:	4682      	mov	sl, r0
 8008720:	468b      	mov	fp, r1
 8008722:	f034 040f 	bics.w	r4, r4, #15
 8008726:	d073      	beq.n	8008810 <_strtod_l+0x518>
 8008728:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800872c:	dd49      	ble.n	80087c2 <_strtod_l+0x4ca>
 800872e:	2400      	movs	r4, #0
 8008730:	46a0      	mov	r8, r4
 8008732:	46a1      	mov	r9, r4
 8008734:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008736:	2322      	movs	r3, #34	@ 0x22
 8008738:	f04f 0a00 	mov.w	sl, #0
 800873c:	9a05      	ldr	r2, [sp, #20]
 800873e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800887c <_strtod_l+0x584>
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008746:	2b00      	cmp	r3, #0
 8008748:	f43f ae0f 	beq.w	800836a <_strtod_l+0x72>
 800874c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800874e:	9805      	ldr	r0, [sp, #20]
 8008750:	f7ff f950 	bl	80079f4 <_Bfree>
 8008754:	4649      	mov	r1, r9
 8008756:	9805      	ldr	r0, [sp, #20]
 8008758:	f7ff f94c 	bl	80079f4 <_Bfree>
 800875c:	4641      	mov	r1, r8
 800875e:	9805      	ldr	r0, [sp, #20]
 8008760:	f7ff f948 	bl	80079f4 <_Bfree>
 8008764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008766:	9805      	ldr	r0, [sp, #20]
 8008768:	f7ff f944 	bl	80079f4 <_Bfree>
 800876c:	4621      	mov	r1, r4
 800876e:	9805      	ldr	r0, [sp, #20]
 8008770:	f7ff f940 	bl	80079f4 <_Bfree>
 8008774:	e5f9      	b.n	800836a <_strtod_l+0x72>
 8008776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008778:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800877c:	4293      	cmp	r3, r2
 800877e:	dbbc      	blt.n	80086fa <_strtod_l+0x402>
 8008780:	4c40      	ldr	r4, [pc, #256]	@ (8008884 <_strtod_l+0x58c>)
 8008782:	f1c5 050f 	rsb	r5, r5, #15
 8008786:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800878a:	4652      	mov	r2, sl
 800878c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008790:	465b      	mov	r3, fp
 8008792:	f7f7 fea1 	bl	80004d8 <__aeabi_dmul>
 8008796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008798:	1b5d      	subs	r5, r3, r5
 800879a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800879e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087a2:	e791      	b.n	80086c8 <_strtod_l+0x3d0>
 80087a4:	3316      	adds	r3, #22
 80087a6:	dba8      	blt.n	80086fa <_strtod_l+0x402>
 80087a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087aa:	4650      	mov	r0, sl
 80087ac:	eba3 0808 	sub.w	r8, r3, r8
 80087b0:	4b34      	ldr	r3, [pc, #208]	@ (8008884 <_strtod_l+0x58c>)
 80087b2:	4659      	mov	r1, fp
 80087b4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80087b8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80087bc:	f7f7 ffb6 	bl	800072c <__aeabi_ddiv>
 80087c0:	e75d      	b.n	800867e <_strtod_l+0x386>
 80087c2:	2300      	movs	r3, #0
 80087c4:	4650      	mov	r0, sl
 80087c6:	4659      	mov	r1, fp
 80087c8:	461e      	mov	r6, r3
 80087ca:	4f2f      	ldr	r7, [pc, #188]	@ (8008888 <_strtod_l+0x590>)
 80087cc:	1124      	asrs	r4, r4, #4
 80087ce:	2c01      	cmp	r4, #1
 80087d0:	dc21      	bgt.n	8008816 <_strtod_l+0x51e>
 80087d2:	b10b      	cbz	r3, 80087d8 <_strtod_l+0x4e0>
 80087d4:	4682      	mov	sl, r0
 80087d6:	468b      	mov	fp, r1
 80087d8:	492b      	ldr	r1, [pc, #172]	@ (8008888 <_strtod_l+0x590>)
 80087da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80087de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80087e2:	4652      	mov	r2, sl
 80087e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087e8:	465b      	mov	r3, fp
 80087ea:	f7f7 fe75 	bl	80004d8 <__aeabi_dmul>
 80087ee:	4b23      	ldr	r3, [pc, #140]	@ (800887c <_strtod_l+0x584>)
 80087f0:	460a      	mov	r2, r1
 80087f2:	400b      	ands	r3, r1
 80087f4:	4925      	ldr	r1, [pc, #148]	@ (800888c <_strtod_l+0x594>)
 80087f6:	4682      	mov	sl, r0
 80087f8:	428b      	cmp	r3, r1
 80087fa:	d898      	bhi.n	800872e <_strtod_l+0x436>
 80087fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008800:	428b      	cmp	r3, r1
 8008802:	bf86      	itte	hi
 8008804:	f04f 3aff 	movhi.w	sl, #4294967295
 8008808:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008890 <_strtod_l+0x598>
 800880c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008810:	2300      	movs	r3, #0
 8008812:	9308      	str	r3, [sp, #32]
 8008814:	e076      	b.n	8008904 <_strtod_l+0x60c>
 8008816:	07e2      	lsls	r2, r4, #31
 8008818:	d504      	bpl.n	8008824 <_strtod_l+0x52c>
 800881a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800881e:	f7f7 fe5b 	bl	80004d8 <__aeabi_dmul>
 8008822:	2301      	movs	r3, #1
 8008824:	3601      	adds	r6, #1
 8008826:	1064      	asrs	r4, r4, #1
 8008828:	3708      	adds	r7, #8
 800882a:	e7d0      	b.n	80087ce <_strtod_l+0x4d6>
 800882c:	d0f0      	beq.n	8008810 <_strtod_l+0x518>
 800882e:	4264      	negs	r4, r4
 8008830:	f014 020f 	ands.w	r2, r4, #15
 8008834:	d00a      	beq.n	800884c <_strtod_l+0x554>
 8008836:	4b13      	ldr	r3, [pc, #76]	@ (8008884 <_strtod_l+0x58c>)
 8008838:	4650      	mov	r0, sl
 800883a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800883e:	4659      	mov	r1, fp
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	f7f7 ff72 	bl	800072c <__aeabi_ddiv>
 8008848:	4682      	mov	sl, r0
 800884a:	468b      	mov	fp, r1
 800884c:	1124      	asrs	r4, r4, #4
 800884e:	d0df      	beq.n	8008810 <_strtod_l+0x518>
 8008850:	2c1f      	cmp	r4, #31
 8008852:	dd1f      	ble.n	8008894 <_strtod_l+0x59c>
 8008854:	2400      	movs	r4, #0
 8008856:	46a0      	mov	r8, r4
 8008858:	46a1      	mov	r9, r4
 800885a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800885c:	2322      	movs	r3, #34	@ 0x22
 800885e:	9a05      	ldr	r2, [sp, #20]
 8008860:	f04f 0a00 	mov.w	sl, #0
 8008864:	f04f 0b00 	mov.w	fp, #0
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	e76b      	b.n	8008744 <_strtod_l+0x44c>
 800886c:	0800a223 	.word	0x0800a223
 8008870:	0800a4e8 	.word	0x0800a4e8
 8008874:	0800a21b 	.word	0x0800a21b
 8008878:	0800a252 	.word	0x0800a252
 800887c:	7ff00000 	.word	0x7ff00000
 8008880:	0800a38b 	.word	0x0800a38b
 8008884:	0800a420 	.word	0x0800a420
 8008888:	0800a3f8 	.word	0x0800a3f8
 800888c:	7ca00000 	.word	0x7ca00000
 8008890:	7fefffff 	.word	0x7fefffff
 8008894:	f014 0310 	ands.w	r3, r4, #16
 8008898:	bf18      	it	ne
 800889a:	236a      	movne	r3, #106	@ 0x6a
 800889c:	4650      	mov	r0, sl
 800889e:	9308      	str	r3, [sp, #32]
 80088a0:	4659      	mov	r1, fp
 80088a2:	2300      	movs	r3, #0
 80088a4:	4e77      	ldr	r6, [pc, #476]	@ (8008a84 <_strtod_l+0x78c>)
 80088a6:	07e7      	lsls	r7, r4, #31
 80088a8:	d504      	bpl.n	80088b4 <_strtod_l+0x5bc>
 80088aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ae:	f7f7 fe13 	bl	80004d8 <__aeabi_dmul>
 80088b2:	2301      	movs	r3, #1
 80088b4:	1064      	asrs	r4, r4, #1
 80088b6:	f106 0608 	add.w	r6, r6, #8
 80088ba:	d1f4      	bne.n	80088a6 <_strtod_l+0x5ae>
 80088bc:	b10b      	cbz	r3, 80088c2 <_strtod_l+0x5ca>
 80088be:	4682      	mov	sl, r0
 80088c0:	468b      	mov	fp, r1
 80088c2:	9b08      	ldr	r3, [sp, #32]
 80088c4:	b1b3      	cbz	r3, 80088f4 <_strtod_l+0x5fc>
 80088c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80088ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	4659      	mov	r1, fp
 80088d2:	dd0f      	ble.n	80088f4 <_strtod_l+0x5fc>
 80088d4:	2b1f      	cmp	r3, #31
 80088d6:	dd58      	ble.n	800898a <_strtod_l+0x692>
 80088d8:	2b34      	cmp	r3, #52	@ 0x34
 80088da:	bfd8      	it	le
 80088dc:	f04f 33ff 	movle.w	r3, #4294967295
 80088e0:	f04f 0a00 	mov.w	sl, #0
 80088e4:	bfcf      	iteee	gt
 80088e6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80088ea:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80088ee:	4093      	lslle	r3, r2
 80088f0:	ea03 0b01 	andle.w	fp, r3, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	f7f8 f854 	bl	80009a8 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d1a7      	bne.n	8008854 <_strtod_l+0x55c>
 8008904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008906:	464a      	mov	r2, r9
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800890c:	462b      	mov	r3, r5
 800890e:	9805      	ldr	r0, [sp, #20]
 8008910:	f7ff f8d8 	bl	8007ac4 <__s2b>
 8008914:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f af09 	beq.w	800872e <_strtod_l+0x436>
 800891c:	2400      	movs	r4, #0
 800891e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008922:	2a00      	cmp	r2, #0
 8008924:	eba3 0308 	sub.w	r3, r3, r8
 8008928:	bfa8      	it	ge
 800892a:	2300      	movge	r3, #0
 800892c:	46a0      	mov	r8, r4
 800892e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008930:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008934:	9316      	str	r3, [sp, #88]	@ 0x58
 8008936:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008938:	9805      	ldr	r0, [sp, #20]
 800893a:	6859      	ldr	r1, [r3, #4]
 800893c:	f7ff f81a 	bl	8007974 <_Balloc>
 8008940:	4681      	mov	r9, r0
 8008942:	2800      	cmp	r0, #0
 8008944:	f43f aef7 	beq.w	8008736 <_strtod_l+0x43e>
 8008948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800894a:	300c      	adds	r0, #12
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	f103 010c 	add.w	r1, r3, #12
 8008952:	3202      	adds	r2, #2
 8008954:	0092      	lsls	r2, r2, #2
 8008956:	f000 fd65 	bl	8009424 <memcpy>
 800895a:	ab1c      	add	r3, sp, #112	@ 0x70
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	4652      	mov	r2, sl
 8008964:	465b      	mov	r3, fp
 8008966:	9805      	ldr	r0, [sp, #20]
 8008968:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800896c:	f7ff fbd6 	bl	800811c <__d2b>
 8008970:	901a      	str	r0, [sp, #104]	@ 0x68
 8008972:	2800      	cmp	r0, #0
 8008974:	f43f aedf 	beq.w	8008736 <_strtod_l+0x43e>
 8008978:	2101      	movs	r1, #1
 800897a:	9805      	ldr	r0, [sp, #20]
 800897c:	f7ff f938 	bl	8007bf0 <__i2b>
 8008980:	4680      	mov	r8, r0
 8008982:	b948      	cbnz	r0, 8008998 <_strtod_l+0x6a0>
 8008984:	f04f 0800 	mov.w	r8, #0
 8008988:	e6d5      	b.n	8008736 <_strtod_l+0x43e>
 800898a:	f04f 32ff 	mov.w	r2, #4294967295
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	ea03 0a0a 	and.w	sl, r3, sl
 8008996:	e7ad      	b.n	80088f4 <_strtod_l+0x5fc>
 8008998:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800899a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800899c:	2d00      	cmp	r5, #0
 800899e:	bfab      	itete	ge
 80089a0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80089a2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80089a4:	18ef      	addge	r7, r5, r3
 80089a6:	1b5e      	sublt	r6, r3, r5
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	bfa8      	it	ge
 80089ac:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80089ae:	eba5 0503 	sub.w	r5, r5, r3
 80089b2:	4415      	add	r5, r2
 80089b4:	4b34      	ldr	r3, [pc, #208]	@ (8008a88 <_strtod_l+0x790>)
 80089b6:	f105 35ff 	add.w	r5, r5, #4294967295
 80089ba:	bfb8      	it	lt
 80089bc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80089be:	429d      	cmp	r5, r3
 80089c0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80089c4:	da50      	bge.n	8008a68 <_strtod_l+0x770>
 80089c6:	1b5b      	subs	r3, r3, r5
 80089c8:	2b1f      	cmp	r3, #31
 80089ca:	f04f 0101 	mov.w	r1, #1
 80089ce:	eba2 0203 	sub.w	r2, r2, r3
 80089d2:	dc3d      	bgt.n	8008a50 <_strtod_l+0x758>
 80089d4:	fa01 f303 	lsl.w	r3, r1, r3
 80089d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089da:	2300      	movs	r3, #0
 80089dc:	9310      	str	r3, [sp, #64]	@ 0x40
 80089de:	18bd      	adds	r5, r7, r2
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	42af      	cmp	r7, r5
 80089e4:	4416      	add	r6, r2
 80089e6:	441e      	add	r6, r3
 80089e8:	463b      	mov	r3, r7
 80089ea:	bfa8      	it	ge
 80089ec:	462b      	movge	r3, r5
 80089ee:	42b3      	cmp	r3, r6
 80089f0:	bfa8      	it	ge
 80089f2:	4633      	movge	r3, r6
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bfc2      	ittt	gt
 80089f8:	1aed      	subgt	r5, r5, r3
 80089fa:	1af6      	subgt	r6, r6, r3
 80089fc:	1aff      	subgt	r7, r7, r3
 80089fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	dd16      	ble.n	8008a32 <_strtod_l+0x73a>
 8008a04:	4641      	mov	r1, r8
 8008a06:	461a      	mov	r2, r3
 8008a08:	9805      	ldr	r0, [sp, #20]
 8008a0a:	f7ff f9a9 	bl	8007d60 <__pow5mult>
 8008a0e:	4680      	mov	r8, r0
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0b7      	beq.n	8008984 <_strtod_l+0x68c>
 8008a14:	4601      	mov	r1, r0
 8008a16:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a18:	9805      	ldr	r0, [sp, #20]
 8008a1a:	f7ff f8ff 	bl	8007c1c <__multiply>
 8008a1e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a20:	2800      	cmp	r0, #0
 8008a22:	f43f ae88 	beq.w	8008736 <_strtod_l+0x43e>
 8008a26:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a28:	9805      	ldr	r0, [sp, #20]
 8008a2a:	f7fe ffe3 	bl	80079f4 <_Bfree>
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a30:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	dc1d      	bgt.n	8008a72 <_strtod_l+0x77a>
 8008a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dd27      	ble.n	8008a8c <_strtod_l+0x794>
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008a40:	9805      	ldr	r0, [sp, #20]
 8008a42:	f7ff f98d 	bl	8007d60 <__pow5mult>
 8008a46:	4681      	mov	r9, r0
 8008a48:	bb00      	cbnz	r0, 8008a8c <_strtod_l+0x794>
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	e672      	b.n	8008736 <_strtod_l+0x43e>
 8008a50:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008a54:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008a58:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008a5c:	35e2      	adds	r5, #226	@ 0xe2
 8008a5e:	fa01 f305 	lsl.w	r3, r1, r5
 8008a62:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a64:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008a66:	e7ba      	b.n	80089de <_strtod_l+0x6e6>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a70:	e7b5      	b.n	80089de <_strtod_l+0x6e6>
 8008a72:	462a      	mov	r2, r5
 8008a74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a76:	9805      	ldr	r0, [sp, #20]
 8008a78:	f7ff f9cc 	bl	8007e14 <__lshift>
 8008a7c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d1d9      	bne.n	8008a36 <_strtod_l+0x73e>
 8008a82:	e658      	b.n	8008736 <_strtod_l+0x43e>
 8008a84:	0800a510 	.word	0x0800a510
 8008a88:	fffffc02 	.word	0xfffffc02
 8008a8c:	2e00      	cmp	r6, #0
 8008a8e:	dd07      	ble.n	8008aa0 <_strtod_l+0x7a8>
 8008a90:	4649      	mov	r1, r9
 8008a92:	4632      	mov	r2, r6
 8008a94:	9805      	ldr	r0, [sp, #20]
 8008a96:	f7ff f9bd 	bl	8007e14 <__lshift>
 8008a9a:	4681      	mov	r9, r0
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d0d4      	beq.n	8008a4a <_strtod_l+0x752>
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	dd08      	ble.n	8008ab6 <_strtod_l+0x7be>
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	463a      	mov	r2, r7
 8008aa8:	9805      	ldr	r0, [sp, #20]
 8008aaa:	f7ff f9b3 	bl	8007e14 <__lshift>
 8008aae:	4680      	mov	r8, r0
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	f43f ae40 	beq.w	8008736 <_strtod_l+0x43e>
 8008ab6:	464a      	mov	r2, r9
 8008ab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aba:	9805      	ldr	r0, [sp, #20]
 8008abc:	f7ff fa32 	bl	8007f24 <__mdiff>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f43f ae37 	beq.w	8008736 <_strtod_l+0x43e>
 8008ac8:	68c3      	ldr	r3, [r0, #12]
 8008aca:	4641      	mov	r1, r8
 8008acc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60c3      	str	r3, [r0, #12]
 8008ad2:	f7ff fa0b 	bl	8007eec <__mcmp>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	da3d      	bge.n	8008b56 <_strtod_l+0x85e>
 8008ada:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008adc:	ea53 030a 	orrs.w	r3, r3, sl
 8008ae0:	d163      	bne.n	8008baa <_strtod_l+0x8b2>
 8008ae2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d15f      	bne.n	8008baa <_strtod_l+0x8b2>
 8008aea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008aee:	0d1b      	lsrs	r3, r3, #20
 8008af0:	051b      	lsls	r3, r3, #20
 8008af2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008af6:	d958      	bls.n	8008baa <_strtod_l+0x8b2>
 8008af8:	6963      	ldr	r3, [r4, #20]
 8008afa:	b913      	cbnz	r3, 8008b02 <_strtod_l+0x80a>
 8008afc:	6923      	ldr	r3, [r4, #16]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	dd53      	ble.n	8008baa <_strtod_l+0x8b2>
 8008b02:	4621      	mov	r1, r4
 8008b04:	2201      	movs	r2, #1
 8008b06:	9805      	ldr	r0, [sp, #20]
 8008b08:	f7ff f984 	bl	8007e14 <__lshift>
 8008b0c:	4641      	mov	r1, r8
 8008b0e:	4604      	mov	r4, r0
 8008b10:	f7ff f9ec 	bl	8007eec <__mcmp>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	dd48      	ble.n	8008baa <_strtod_l+0x8b2>
 8008b18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b1c:	9a08      	ldr	r2, [sp, #32]
 8008b1e:	0d1b      	lsrs	r3, r3, #20
 8008b20:	051b      	lsls	r3, r3, #20
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d062      	beq.n	8008bec <_strtod_l+0x8f4>
 8008b26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b2a:	d85f      	bhi.n	8008bec <_strtod_l+0x8f4>
 8008b2c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008b30:	f67f ae94 	bls.w	800885c <_strtod_l+0x564>
 8008b34:	4650      	mov	r0, sl
 8008b36:	4659      	mov	r1, fp
 8008b38:	4ba3      	ldr	r3, [pc, #652]	@ (8008dc8 <_strtod_l+0xad0>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f7f7 fccc 	bl	80004d8 <__aeabi_dmul>
 8008b40:	4ba2      	ldr	r3, [pc, #648]	@ (8008dcc <_strtod_l+0xad4>)
 8008b42:	4682      	mov	sl, r0
 8008b44:	400b      	ands	r3, r1
 8008b46:	468b      	mov	fp, r1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f adff 	bne.w	800874c <_strtod_l+0x454>
 8008b4e:	2322      	movs	r3, #34	@ 0x22
 8008b50:	9a05      	ldr	r2, [sp, #20]
 8008b52:	6013      	str	r3, [r2, #0]
 8008b54:	e5fa      	b.n	800874c <_strtod_l+0x454>
 8008b56:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008b5a:	d165      	bne.n	8008c28 <_strtod_l+0x930>
 8008b5c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b62:	b35a      	cbz	r2, 8008bbc <_strtod_l+0x8c4>
 8008b64:	4a9a      	ldr	r2, [pc, #616]	@ (8008dd0 <_strtod_l+0xad8>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d12b      	bne.n	8008bc2 <_strtod_l+0x8ca>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	4651      	mov	r1, sl
 8008b6e:	b303      	cbz	r3, 8008bb2 <_strtod_l+0x8ba>
 8008b70:	465a      	mov	r2, fp
 8008b72:	4b96      	ldr	r3, [pc, #600]	@ (8008dcc <_strtod_l+0xad4>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	d81b      	bhi.n	8008bb8 <_strtod_l+0x8c0>
 8008b80:	0d1b      	lsrs	r3, r3, #20
 8008b82:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b86:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	d119      	bne.n	8008bc2 <_strtod_l+0x8ca>
 8008b8e:	4b91      	ldr	r3, [pc, #580]	@ (8008dd4 <_strtod_l+0xadc>)
 8008b90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d102      	bne.n	8008b9c <_strtod_l+0x8a4>
 8008b96:	3101      	adds	r1, #1
 8008b98:	f43f adcd 	beq.w	8008736 <_strtod_l+0x43e>
 8008b9c:	f04f 0a00 	mov.w	sl, #0
 8008ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8008dcc <_strtod_l+0xad4>)
 8008ba2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ba4:	401a      	ands	r2, r3
 8008ba6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1c1      	bne.n	8008b34 <_strtod_l+0x83c>
 8008bb0:	e5cc      	b.n	800874c <_strtod_l+0x454>
 8008bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb6:	e7e8      	b.n	8008b8a <_strtod_l+0x892>
 8008bb8:	4613      	mov	r3, r2
 8008bba:	e7e6      	b.n	8008b8a <_strtod_l+0x892>
 8008bbc:	ea53 030a 	orrs.w	r3, r3, sl
 8008bc0:	d0aa      	beq.n	8008b18 <_strtod_l+0x820>
 8008bc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bc4:	b1db      	cbz	r3, 8008bfe <_strtod_l+0x906>
 8008bc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bc8:	4213      	tst	r3, r2
 8008bca:	d0ee      	beq.n	8008baa <_strtod_l+0x8b2>
 8008bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bce:	4650      	mov	r0, sl
 8008bd0:	4659      	mov	r1, fp
 8008bd2:	9a08      	ldr	r2, [sp, #32]
 8008bd4:	b1bb      	cbz	r3, 8008c06 <_strtod_l+0x90e>
 8008bd6:	f7ff fb6d 	bl	80082b4 <sulp>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008be2:	f7f7 fac3 	bl	800016c <__adddf3>
 8008be6:	4682      	mov	sl, r0
 8008be8:	468b      	mov	fp, r1
 8008bea:	e7de      	b.n	8008baa <_strtod_l+0x8b2>
 8008bec:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008bf0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008bf4:	f04f 3aff 	mov.w	sl, #4294967295
 8008bf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008bfc:	e7d5      	b.n	8008baa <_strtod_l+0x8b2>
 8008bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c00:	ea13 0f0a 	tst.w	r3, sl
 8008c04:	e7e1      	b.n	8008bca <_strtod_l+0x8d2>
 8008c06:	f7ff fb55 	bl	80082b4 <sulp>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c12:	f7f7 faa9 	bl	8000168 <__aeabi_dsub>
 8008c16:	2200      	movs	r2, #0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	4682      	mov	sl, r0
 8008c1c:	468b      	mov	fp, r1
 8008c1e:	f7f7 fec3 	bl	80009a8 <__aeabi_dcmpeq>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d0c1      	beq.n	8008baa <_strtod_l+0x8b2>
 8008c26:	e619      	b.n	800885c <_strtod_l+0x564>
 8008c28:	4641      	mov	r1, r8
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff face 	bl	80081cc <__ratio>
 8008c30:	2200      	movs	r2, #0
 8008c32:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c36:	4606      	mov	r6, r0
 8008c38:	460f      	mov	r7, r1
 8008c3a:	f7f7 fec9 	bl	80009d0 <__aeabi_dcmple>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	d06d      	beq.n	8008d1e <_strtod_l+0xa26>
 8008c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d178      	bne.n	8008d3a <_strtod_l+0xa42>
 8008c48:	f1ba 0f00 	cmp.w	sl, #0
 8008c4c:	d156      	bne.n	8008cfc <_strtod_l+0xa04>
 8008c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d158      	bne.n	8008d0a <_strtod_l+0xa12>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4639      	mov	r1, r7
 8008c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8008dd8 <_strtod_l+0xae0>)
 8008c60:	f7f7 feac 	bl	80009bc <__aeabi_dcmplt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d157      	bne.n	8008d18 <_strtod_l+0xa20>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8008ddc <_strtod_l+0xae4>)
 8008c70:	f7f7 fc32 	bl	80004d8 <__aeabi_dmul>
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008c7c:	9606      	str	r6, [sp, #24]
 8008c7e:	9307      	str	r3, [sp, #28]
 8008c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c84:	4d51      	ldr	r5, [pc, #324]	@ (8008dcc <_strtod_l+0xad4>)
 8008c86:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c8c:	401d      	ands	r5, r3
 8008c8e:	4b54      	ldr	r3, [pc, #336]	@ (8008de0 <_strtod_l+0xae8>)
 8008c90:	429d      	cmp	r5, r3
 8008c92:	f040 80ab 	bne.w	8008dec <_strtod_l+0xaf4>
 8008c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c98:	4650      	mov	r0, sl
 8008c9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008c9e:	4659      	mov	r1, fp
 8008ca0:	f7ff f9d4 	bl	800804c <__ulp>
 8008ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ca8:	f7f7 fc16 	bl	80004d8 <__aeabi_dmul>
 8008cac:	4652      	mov	r2, sl
 8008cae:	465b      	mov	r3, fp
 8008cb0:	f7f7 fa5c 	bl	800016c <__adddf3>
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4945      	ldr	r1, [pc, #276]	@ (8008dcc <_strtod_l+0xad4>)
 8008cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8008de4 <_strtod_l+0xaec>)
 8008cba:	4019      	ands	r1, r3
 8008cbc:	4291      	cmp	r1, r2
 8008cbe:	4682      	mov	sl, r0
 8008cc0:	d942      	bls.n	8008d48 <_strtod_l+0xa50>
 8008cc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cc4:	4b43      	ldr	r3, [pc, #268]	@ (8008dd4 <_strtod_l+0xadc>)
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d103      	bne.n	8008cd2 <_strtod_l+0x9da>
 8008cca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f43f ad32 	beq.w	8008736 <_strtod_l+0x43e>
 8008cd2:	f04f 3aff 	mov.w	sl, #4294967295
 8008cd6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008dd4 <_strtod_l+0xadc>
 8008cda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cdc:	9805      	ldr	r0, [sp, #20]
 8008cde:	f7fe fe89 	bl	80079f4 <_Bfree>
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	f7fe fe85 	bl	80079f4 <_Bfree>
 8008cea:	4641      	mov	r1, r8
 8008cec:	9805      	ldr	r0, [sp, #20]
 8008cee:	f7fe fe81 	bl	80079f4 <_Bfree>
 8008cf2:	4621      	mov	r1, r4
 8008cf4:	9805      	ldr	r0, [sp, #20]
 8008cf6:	f7fe fe7d 	bl	80079f4 <_Bfree>
 8008cfa:	e61c      	b.n	8008936 <_strtod_l+0x63e>
 8008cfc:	f1ba 0f01 	cmp.w	sl, #1
 8008d00:	d103      	bne.n	8008d0a <_strtod_l+0xa12>
 8008d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f43f ada9 	beq.w	800885c <_strtod_l+0x564>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4b36      	ldr	r3, [pc, #216]	@ (8008de8 <_strtod_l+0xaf0>)
 8008d0e:	2600      	movs	r6, #0
 8008d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d14:	4f30      	ldr	r7, [pc, #192]	@ (8008dd8 <_strtod_l+0xae0>)
 8008d16:	e7b3      	b.n	8008c80 <_strtod_l+0x988>
 8008d18:	2600      	movs	r6, #0
 8008d1a:	4f30      	ldr	r7, [pc, #192]	@ (8008ddc <_strtod_l+0xae4>)
 8008d1c:	e7ac      	b.n	8008c78 <_strtod_l+0x980>
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	4b2e      	ldr	r3, [pc, #184]	@ (8008ddc <_strtod_l+0xae4>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	f7f7 fbd7 	bl	80004d8 <__aeabi_dmul>
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0a1      	beq.n	8008c78 <_strtod_l+0x980>
 8008d34:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008d38:	e7a2      	b.n	8008c80 <_strtod_l+0x988>
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4b26      	ldr	r3, [pc, #152]	@ (8008dd8 <_strtod_l+0xae0>)
 8008d3e:	4616      	mov	r6, r2
 8008d40:	461f      	mov	r7, r3
 8008d42:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d46:	e79b      	b.n	8008c80 <_strtod_l+0x988>
 8008d48:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1c1      	bne.n	8008cda <_strtod_l+0x9e2>
 8008d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d5a:	0d1b      	lsrs	r3, r3, #20
 8008d5c:	051b      	lsls	r3, r3, #20
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	d1bb      	bne.n	8008cda <_strtod_l+0x9e2>
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f8 f95d 	bl	8001024 <__aeabi_d2lz>
 8008d6a:	f7f7 fb87 	bl	800047c <__aeabi_l2d>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	460b      	mov	r3, r1
 8008d72:	4630      	mov	r0, r6
 8008d74:	4639      	mov	r1, r7
 8008d76:	f7f7 f9f7 	bl	8000168 <__aeabi_dsub>
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008d82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008d86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d88:	ea46 060a 	orr.w	r6, r6, sl
 8008d8c:	431e      	orrs	r6, r3
 8008d8e:	d06a      	beq.n	8008e66 <_strtod_l+0xb6e>
 8008d90:	a309      	add	r3, pc, #36	@ (adr r3, 8008db8 <_strtod_l+0xac0>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fe11 	bl	80009bc <__aeabi_dcmplt>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f47f acd6 	bne.w	800874c <_strtod_l+0x454>
 8008da0:	a307      	add	r3, pc, #28	@ (adr r3, 8008dc0 <_strtod_l+0xac8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008daa:	f7f7 fe25 	bl	80009f8 <__aeabi_dcmpgt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d093      	beq.n	8008cda <_strtod_l+0x9e2>
 8008db2:	e4cb      	b.n	800874c <_strtod_l+0x454>
 8008db4:	f3af 8000 	nop.w
 8008db8:	94a03595 	.word	0x94a03595
 8008dbc:	3fdfffff 	.word	0x3fdfffff
 8008dc0:	35afe535 	.word	0x35afe535
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	39500000 	.word	0x39500000
 8008dcc:	7ff00000 	.word	0x7ff00000
 8008dd0:	000fffff 	.word	0x000fffff
 8008dd4:	7fefffff 	.word	0x7fefffff
 8008dd8:	3ff00000 	.word	0x3ff00000
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	7fe00000 	.word	0x7fe00000
 8008de4:	7c9fffff 	.word	0x7c9fffff
 8008de8:	bff00000 	.word	0xbff00000
 8008dec:	9b08      	ldr	r3, [sp, #32]
 8008dee:	b323      	cbz	r3, 8008e3a <_strtod_l+0xb42>
 8008df0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008df4:	d821      	bhi.n	8008e3a <_strtod_l+0xb42>
 8008df6:	a328      	add	r3, pc, #160	@ (adr r3, 8008e98 <_strtod_l+0xba0>)
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	4639      	mov	r1, r7
 8008e00:	f7f7 fde6 	bl	80009d0 <__aeabi_dcmple>
 8008e04:	b1a0      	cbz	r0, 8008e30 <_strtod_l+0xb38>
 8008e06:	4639      	mov	r1, r7
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f7f7 fe3d 	bl	8000a88 <__aeabi_d2uiz>
 8008e0e:	2801      	cmp	r0, #1
 8008e10:	bf38      	it	cc
 8008e12:	2001      	movcc	r0, #1
 8008e14:	f7f7 fae6 	bl	80003e4 <__aeabi_ui2d>
 8008e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1a:	4606      	mov	r6, r0
 8008e1c:	460f      	mov	r7, r1
 8008e1e:	b9fb      	cbnz	r3, 8008e60 <_strtod_l+0xb68>
 8008e20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e24:	9014      	str	r0, [sp, #80]	@ 0x50
 8008e26:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008e2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008e30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008e36:	1b5b      	subs	r3, r3, r5
 8008e38:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008e42:	f7ff f903 	bl	800804c <__ulp>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	4659      	mov	r1, fp
 8008e4e:	f7f7 fb43 	bl	80004d8 <__aeabi_dmul>
 8008e52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008e56:	f7f7 f989 	bl	800016c <__adddf3>
 8008e5a:	4682      	mov	sl, r0
 8008e5c:	468b      	mov	fp, r1
 8008e5e:	e775      	b.n	8008d4c <_strtod_l+0xa54>
 8008e60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008e64:	e7e0      	b.n	8008e28 <_strtod_l+0xb30>
 8008e66:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ea0 <_strtod_l+0xba8>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fda6 	bl	80009bc <__aeabi_dcmplt>
 8008e70:	e79d      	b.n	8008dae <_strtod_l+0xab6>
 8008e72:	2300      	movs	r3, #0
 8008e74:	930e      	str	r3, [sp, #56]	@ 0x38
 8008e76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e78:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	f7ff ba79 	b.w	8008372 <_strtod_l+0x7a>
 8008e80:	2a65      	cmp	r2, #101	@ 0x65
 8008e82:	f43f ab72 	beq.w	800856a <_strtod_l+0x272>
 8008e86:	2a45      	cmp	r2, #69	@ 0x45
 8008e88:	f43f ab6f 	beq.w	800856a <_strtod_l+0x272>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f7ff bbaa 	b.w	80085e6 <_strtod_l+0x2ee>
 8008e92:	bf00      	nop
 8008e94:	f3af 8000 	nop.w
 8008e98:	ffc00000 	.word	0xffc00000
 8008e9c:	41dfffff 	.word	0x41dfffff
 8008ea0:	94a03595 	.word	0x94a03595
 8008ea4:	3fcfffff 	.word	0x3fcfffff

08008ea8 <_strtod_r>:
 8008ea8:	4b01      	ldr	r3, [pc, #4]	@ (8008eb0 <_strtod_r+0x8>)
 8008eaa:	f7ff ba25 	b.w	80082f8 <_strtod_l>
 8008eae:	bf00      	nop
 8008eb0:	20000070 	.word	0x20000070

08008eb4 <_strtol_l.isra.0>:
 8008eb4:	2b24      	cmp	r3, #36	@ 0x24
 8008eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eba:	4686      	mov	lr, r0
 8008ebc:	4690      	mov	r8, r2
 8008ebe:	d801      	bhi.n	8008ec4 <_strtol_l.isra.0+0x10>
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d106      	bne.n	8008ed2 <_strtol_l.isra.0+0x1e>
 8008ec4:	f7fd fdba 	bl	8006a3c <__errno>
 8008ec8:	2316      	movs	r3, #22
 8008eca:	6003      	str	r3, [r0, #0]
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	460d      	mov	r5, r1
 8008ed4:	4833      	ldr	r0, [pc, #204]	@ (8008fa4 <_strtol_l.isra.0+0xf0>)
 8008ed6:	462a      	mov	r2, r5
 8008ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008edc:	5d06      	ldrb	r6, [r0, r4]
 8008ede:	f016 0608 	ands.w	r6, r6, #8
 8008ee2:	d1f8      	bne.n	8008ed6 <_strtol_l.isra.0+0x22>
 8008ee4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ee6:	d110      	bne.n	8008f0a <_strtol_l.isra.0+0x56>
 8008ee8:	2601      	movs	r6, #1
 8008eea:	782c      	ldrb	r4, [r5, #0]
 8008eec:	1c95      	adds	r5, r2, #2
 8008eee:	f033 0210 	bics.w	r2, r3, #16
 8008ef2:	d115      	bne.n	8008f20 <_strtol_l.isra.0+0x6c>
 8008ef4:	2c30      	cmp	r4, #48	@ 0x30
 8008ef6:	d10d      	bne.n	8008f14 <_strtol_l.isra.0+0x60>
 8008ef8:	782a      	ldrb	r2, [r5, #0]
 8008efa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008efe:	2a58      	cmp	r2, #88	@ 0x58
 8008f00:	d108      	bne.n	8008f14 <_strtol_l.isra.0+0x60>
 8008f02:	786c      	ldrb	r4, [r5, #1]
 8008f04:	3502      	adds	r5, #2
 8008f06:	2310      	movs	r3, #16
 8008f08:	e00a      	b.n	8008f20 <_strtol_l.isra.0+0x6c>
 8008f0a:	2c2b      	cmp	r4, #43	@ 0x2b
 8008f0c:	bf04      	itt	eq
 8008f0e:	782c      	ldrbeq	r4, [r5, #0]
 8008f10:	1c95      	addeq	r5, r2, #2
 8008f12:	e7ec      	b.n	8008eee <_strtol_l.isra.0+0x3a>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f6      	bne.n	8008f06 <_strtol_l.isra.0+0x52>
 8008f18:	2c30      	cmp	r4, #48	@ 0x30
 8008f1a:	bf14      	ite	ne
 8008f1c:	230a      	movne	r3, #10
 8008f1e:	2308      	moveq	r3, #8
 8008f20:	2200      	movs	r2, #0
 8008f22:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008f26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f2a:	fbbc f9f3 	udiv	r9, ip, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008f38:	2f09      	cmp	r7, #9
 8008f3a:	d80f      	bhi.n	8008f5c <_strtol_l.isra.0+0xa8>
 8008f3c:	463c      	mov	r4, r7
 8008f3e:	42a3      	cmp	r3, r4
 8008f40:	dd1b      	ble.n	8008f7a <_strtol_l.isra.0+0xc6>
 8008f42:	1c57      	adds	r7, r2, #1
 8008f44:	d007      	beq.n	8008f56 <_strtol_l.isra.0+0xa2>
 8008f46:	4581      	cmp	r9, r0
 8008f48:	d314      	bcc.n	8008f74 <_strtol_l.isra.0+0xc0>
 8008f4a:	d101      	bne.n	8008f50 <_strtol_l.isra.0+0x9c>
 8008f4c:	45a2      	cmp	sl, r4
 8008f4e:	db11      	blt.n	8008f74 <_strtol_l.isra.0+0xc0>
 8008f50:	2201      	movs	r2, #1
 8008f52:	fb00 4003 	mla	r0, r0, r3, r4
 8008f56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f5a:	e7eb      	b.n	8008f34 <_strtol_l.isra.0+0x80>
 8008f5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008f60:	2f19      	cmp	r7, #25
 8008f62:	d801      	bhi.n	8008f68 <_strtol_l.isra.0+0xb4>
 8008f64:	3c37      	subs	r4, #55	@ 0x37
 8008f66:	e7ea      	b.n	8008f3e <_strtol_l.isra.0+0x8a>
 8008f68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008f6c:	2f19      	cmp	r7, #25
 8008f6e:	d804      	bhi.n	8008f7a <_strtol_l.isra.0+0xc6>
 8008f70:	3c57      	subs	r4, #87	@ 0x57
 8008f72:	e7e4      	b.n	8008f3e <_strtol_l.isra.0+0x8a>
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	e7ed      	b.n	8008f56 <_strtol_l.isra.0+0xa2>
 8008f7a:	1c53      	adds	r3, r2, #1
 8008f7c:	d108      	bne.n	8008f90 <_strtol_l.isra.0+0xdc>
 8008f7e:	2322      	movs	r3, #34	@ 0x22
 8008f80:	4660      	mov	r0, ip
 8008f82:	f8ce 3000 	str.w	r3, [lr]
 8008f86:	f1b8 0f00 	cmp.w	r8, #0
 8008f8a:	d0a0      	beq.n	8008ece <_strtol_l.isra.0+0x1a>
 8008f8c:	1e69      	subs	r1, r5, #1
 8008f8e:	e006      	b.n	8008f9e <_strtol_l.isra.0+0xea>
 8008f90:	b106      	cbz	r6, 8008f94 <_strtol_l.isra.0+0xe0>
 8008f92:	4240      	negs	r0, r0
 8008f94:	f1b8 0f00 	cmp.w	r8, #0
 8008f98:	d099      	beq.n	8008ece <_strtol_l.isra.0+0x1a>
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	d1f6      	bne.n	8008f8c <_strtol_l.isra.0+0xd8>
 8008f9e:	f8c8 1000 	str.w	r1, [r8]
 8008fa2:	e794      	b.n	8008ece <_strtol_l.isra.0+0x1a>
 8008fa4:	0800a539 	.word	0x0800a539

08008fa8 <_strtol_r>:
 8008fa8:	f7ff bf84 	b.w	8008eb4 <_strtol_l.isra.0>

08008fac <__ssputs_r>:
 8008fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb0:	461f      	mov	r7, r3
 8008fb2:	688e      	ldr	r6, [r1, #8]
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	42be      	cmp	r6, r7
 8008fb8:	460c      	mov	r4, r1
 8008fba:	4690      	mov	r8, r2
 8008fbc:	680b      	ldr	r3, [r1, #0]
 8008fbe:	d82d      	bhi.n	800901c <__ssputs_r+0x70>
 8008fc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008fc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008fc8:	d026      	beq.n	8009018 <__ssputs_r+0x6c>
 8008fca:	6965      	ldr	r5, [r4, #20]
 8008fcc:	6909      	ldr	r1, [r1, #16]
 8008fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd2:	eba3 0901 	sub.w	r9, r3, r1
 8008fd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fda:	1c7b      	adds	r3, r7, #1
 8008fdc:	444b      	add	r3, r9
 8008fde:	106d      	asrs	r5, r5, #1
 8008fe0:	429d      	cmp	r5, r3
 8008fe2:	bf38      	it	cc
 8008fe4:	461d      	movcc	r5, r3
 8008fe6:	0553      	lsls	r3, r2, #21
 8008fe8:	d527      	bpl.n	800903a <__ssputs_r+0x8e>
 8008fea:	4629      	mov	r1, r5
 8008fec:	f7fe fc36 	bl	800785c <_malloc_r>
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	b360      	cbz	r0, 800904e <__ssputs_r+0xa2>
 8008ff4:	464a      	mov	r2, r9
 8008ff6:	6921      	ldr	r1, [r4, #16]
 8008ff8:	f000 fa14 	bl	8009424 <memcpy>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6126      	str	r6, [r4, #16]
 800900a:	444e      	add	r6, r9
 800900c:	6026      	str	r6, [r4, #0]
 800900e:	463e      	mov	r6, r7
 8009010:	6165      	str	r5, [r4, #20]
 8009012:	eba5 0509 	sub.w	r5, r5, r9
 8009016:	60a5      	str	r5, [r4, #8]
 8009018:	42be      	cmp	r6, r7
 800901a:	d900      	bls.n	800901e <__ssputs_r+0x72>
 800901c:	463e      	mov	r6, r7
 800901e:	4632      	mov	r2, r6
 8009020:	4641      	mov	r1, r8
 8009022:	6820      	ldr	r0, [r4, #0]
 8009024:	f000 f9c2 	bl	80093ac <memmove>
 8009028:	2000      	movs	r0, #0
 800902a:	68a3      	ldr	r3, [r4, #8]
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	60a3      	str	r3, [r4, #8]
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	4433      	add	r3, r6
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903a:	462a      	mov	r2, r5
 800903c:	f000 fd83 	bl	8009b46 <_realloc_r>
 8009040:	4606      	mov	r6, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d1e0      	bne.n	8009008 <__ssputs_r+0x5c>
 8009046:	4650      	mov	r0, sl
 8009048:	6921      	ldr	r1, [r4, #16]
 800904a:	f7fe fb95 	bl	8007778 <_free_r>
 800904e:	230c      	movs	r3, #12
 8009050:	f8ca 3000 	str.w	r3, [sl]
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	e7e9      	b.n	8009036 <__ssputs_r+0x8a>
	...

08009064 <_svfiprintf_r>:
 8009064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009068:	4698      	mov	r8, r3
 800906a:	898b      	ldrh	r3, [r1, #12]
 800906c:	4607      	mov	r7, r0
 800906e:	061b      	lsls	r3, r3, #24
 8009070:	460d      	mov	r5, r1
 8009072:	4614      	mov	r4, r2
 8009074:	b09d      	sub	sp, #116	@ 0x74
 8009076:	d510      	bpl.n	800909a <_svfiprintf_r+0x36>
 8009078:	690b      	ldr	r3, [r1, #16]
 800907a:	b973      	cbnz	r3, 800909a <_svfiprintf_r+0x36>
 800907c:	2140      	movs	r1, #64	@ 0x40
 800907e:	f7fe fbed 	bl	800785c <_malloc_r>
 8009082:	6028      	str	r0, [r5, #0]
 8009084:	6128      	str	r0, [r5, #16]
 8009086:	b930      	cbnz	r0, 8009096 <_svfiprintf_r+0x32>
 8009088:	230c      	movs	r3, #12
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	b01d      	add	sp, #116	@ 0x74
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009096:	2340      	movs	r3, #64	@ 0x40
 8009098:	616b      	str	r3, [r5, #20]
 800909a:	2300      	movs	r3, #0
 800909c:	9309      	str	r3, [sp, #36]	@ 0x24
 800909e:	2320      	movs	r3, #32
 80090a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090a4:	2330      	movs	r3, #48	@ 0x30
 80090a6:	f04f 0901 	mov.w	r9, #1
 80090aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80090ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009248 <_svfiprintf_r+0x1e4>
 80090b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090b6:	4623      	mov	r3, r4
 80090b8:	469a      	mov	sl, r3
 80090ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090be:	b10a      	cbz	r2, 80090c4 <_svfiprintf_r+0x60>
 80090c0:	2a25      	cmp	r2, #37	@ 0x25
 80090c2:	d1f9      	bne.n	80090b8 <_svfiprintf_r+0x54>
 80090c4:	ebba 0b04 	subs.w	fp, sl, r4
 80090c8:	d00b      	beq.n	80090e2 <_svfiprintf_r+0x7e>
 80090ca:	465b      	mov	r3, fp
 80090cc:	4622      	mov	r2, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff ff6b 	bl	8008fac <__ssputs_r>
 80090d6:	3001      	adds	r0, #1
 80090d8:	f000 80a7 	beq.w	800922a <_svfiprintf_r+0x1c6>
 80090dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090de:	445a      	add	r2, fp
 80090e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 809f 	beq.w	800922a <_svfiprintf_r+0x1c6>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295
 80090f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f6:	f10a 0a01 	add.w	sl, sl, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	9307      	str	r3, [sp, #28]
 80090fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009102:	931a      	str	r3, [sp, #104]	@ 0x68
 8009104:	4654      	mov	r4, sl
 8009106:	2205      	movs	r2, #5
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	484e      	ldr	r0, [pc, #312]	@ (8009248 <_svfiprintf_r+0x1e4>)
 800910e:	f7fd fcc2 	bl	8006a96 <memchr>
 8009112:	9a04      	ldr	r2, [sp, #16]
 8009114:	b9d8      	cbnz	r0, 800914e <_svfiprintf_r+0xea>
 8009116:	06d0      	lsls	r0, r2, #27
 8009118:	bf44      	itt	mi
 800911a:	2320      	movmi	r3, #32
 800911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009120:	0711      	lsls	r1, r2, #28
 8009122:	bf44      	itt	mi
 8009124:	232b      	movmi	r3, #43	@ 0x2b
 8009126:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800912a:	f89a 3000 	ldrb.w	r3, [sl]
 800912e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009130:	d015      	beq.n	800915e <_svfiprintf_r+0xfa>
 8009132:	4654      	mov	r4, sl
 8009134:	2000      	movs	r0, #0
 8009136:	f04f 0c0a 	mov.w	ip, #10
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	4621      	mov	r1, r4
 800913e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009142:	3b30      	subs	r3, #48	@ 0x30
 8009144:	2b09      	cmp	r3, #9
 8009146:	d94b      	bls.n	80091e0 <_svfiprintf_r+0x17c>
 8009148:	b1b0      	cbz	r0, 8009178 <_svfiprintf_r+0x114>
 800914a:	9207      	str	r2, [sp, #28]
 800914c:	e014      	b.n	8009178 <_svfiprintf_r+0x114>
 800914e:	eba0 0308 	sub.w	r3, r0, r8
 8009152:	fa09 f303 	lsl.w	r3, r9, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	46a2      	mov	sl, r4
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	e7d2      	b.n	8009104 <_svfiprintf_r+0xa0>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	1d19      	adds	r1, r3, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	9103      	str	r1, [sp, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfbb      	ittet	lt
 800916a:	425b      	neglt	r3, r3
 800916c:	f042 0202 	orrlt.w	r2, r2, #2
 8009170:	9307      	strge	r3, [sp, #28]
 8009172:	9307      	strlt	r3, [sp, #28]
 8009174:	bfb8      	it	lt
 8009176:	9204      	strlt	r2, [sp, #16]
 8009178:	7823      	ldrb	r3, [r4, #0]
 800917a:	2b2e      	cmp	r3, #46	@ 0x2e
 800917c:	d10a      	bne.n	8009194 <_svfiprintf_r+0x130>
 800917e:	7863      	ldrb	r3, [r4, #1]
 8009180:	2b2a      	cmp	r3, #42	@ 0x2a
 8009182:	d132      	bne.n	80091ea <_svfiprintf_r+0x186>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	3402      	adds	r4, #2
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	9203      	str	r2, [sp, #12]
 800918e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009192:	9305      	str	r3, [sp, #20]
 8009194:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800924c <_svfiprintf_r+0x1e8>
 8009198:	2203      	movs	r2, #3
 800919a:	4650      	mov	r0, sl
 800919c:	7821      	ldrb	r1, [r4, #0]
 800919e:	f7fd fc7a 	bl	8006a96 <memchr>
 80091a2:	b138      	cbz	r0, 80091b4 <_svfiprintf_r+0x150>
 80091a4:	2240      	movs	r2, #64	@ 0x40
 80091a6:	9b04      	ldr	r3, [sp, #16]
 80091a8:	eba0 000a 	sub.w	r0, r0, sl
 80091ac:	4082      	lsls	r2, r0
 80091ae:	4313      	orrs	r3, r2
 80091b0:	3401      	adds	r4, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b8:	2206      	movs	r2, #6
 80091ba:	4825      	ldr	r0, [pc, #148]	@ (8009250 <_svfiprintf_r+0x1ec>)
 80091bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c0:	f7fd fc69 	bl	8006a96 <memchr>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d036      	beq.n	8009236 <_svfiprintf_r+0x1d2>
 80091c8:	4b22      	ldr	r3, [pc, #136]	@ (8009254 <_svfiprintf_r+0x1f0>)
 80091ca:	bb1b      	cbnz	r3, 8009214 <_svfiprintf_r+0x1b0>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	3307      	adds	r3, #7
 80091d0:	f023 0307 	bic.w	r3, r3, #7
 80091d4:	3308      	adds	r3, #8
 80091d6:	9303      	str	r3, [sp, #12]
 80091d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091da:	4433      	add	r3, r6
 80091dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091de:	e76a      	b.n	80090b6 <_svfiprintf_r+0x52>
 80091e0:	460c      	mov	r4, r1
 80091e2:	2001      	movs	r0, #1
 80091e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091e8:	e7a8      	b.n	800913c <_svfiprintf_r+0xd8>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f04f 0c0a 	mov.w	ip, #10
 80091f0:	4619      	mov	r1, r3
 80091f2:	3401      	adds	r4, #1
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	4620      	mov	r0, r4
 80091f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091fc:	3a30      	subs	r2, #48	@ 0x30
 80091fe:	2a09      	cmp	r2, #9
 8009200:	d903      	bls.n	800920a <_svfiprintf_r+0x1a6>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0c6      	beq.n	8009194 <_svfiprintf_r+0x130>
 8009206:	9105      	str	r1, [sp, #20]
 8009208:	e7c4      	b.n	8009194 <_svfiprintf_r+0x130>
 800920a:	4604      	mov	r4, r0
 800920c:	2301      	movs	r3, #1
 800920e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009212:	e7f0      	b.n	80091f6 <_svfiprintf_r+0x192>
 8009214:	ab03      	add	r3, sp, #12
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	462a      	mov	r2, r5
 800921a:	4638      	mov	r0, r7
 800921c:	4b0e      	ldr	r3, [pc, #56]	@ (8009258 <_svfiprintf_r+0x1f4>)
 800921e:	a904      	add	r1, sp, #16
 8009220:	f7fc fccc 	bl	8005bbc <_printf_float>
 8009224:	1c42      	adds	r2, r0, #1
 8009226:	4606      	mov	r6, r0
 8009228:	d1d6      	bne.n	80091d8 <_svfiprintf_r+0x174>
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	065b      	lsls	r3, r3, #25
 800922e:	f53f af2d 	bmi.w	800908c <_svfiprintf_r+0x28>
 8009232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009234:	e72c      	b.n	8009090 <_svfiprintf_r+0x2c>
 8009236:	ab03      	add	r3, sp, #12
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	462a      	mov	r2, r5
 800923c:	4638      	mov	r0, r7
 800923e:	4b06      	ldr	r3, [pc, #24]	@ (8009258 <_svfiprintf_r+0x1f4>)
 8009240:	a904      	add	r1, sp, #16
 8009242:	f7fc ff59 	bl	80060f8 <_printf_i>
 8009246:	e7ed      	b.n	8009224 <_svfiprintf_r+0x1c0>
 8009248:	0800a337 	.word	0x0800a337
 800924c:	0800a33d 	.word	0x0800a33d
 8009250:	0800a341 	.word	0x0800a341
 8009254:	08005bbd 	.word	0x08005bbd
 8009258:	08008fad 	.word	0x08008fad

0800925c <__sflush_r>:
 800925c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009262:	0716      	lsls	r6, r2, #28
 8009264:	4605      	mov	r5, r0
 8009266:	460c      	mov	r4, r1
 8009268:	d454      	bmi.n	8009314 <__sflush_r+0xb8>
 800926a:	684b      	ldr	r3, [r1, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	dc02      	bgt.n	8009276 <__sflush_r+0x1a>
 8009270:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009272:	2b00      	cmp	r3, #0
 8009274:	dd48      	ble.n	8009308 <__sflush_r+0xac>
 8009276:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009278:	2e00      	cmp	r6, #0
 800927a:	d045      	beq.n	8009308 <__sflush_r+0xac>
 800927c:	2300      	movs	r3, #0
 800927e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009282:	682f      	ldr	r7, [r5, #0]
 8009284:	6a21      	ldr	r1, [r4, #32]
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	d030      	beq.n	80092ec <__sflush_r+0x90>
 800928a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800928c:	89a3      	ldrh	r3, [r4, #12]
 800928e:	0759      	lsls	r1, r3, #29
 8009290:	d505      	bpl.n	800929e <__sflush_r+0x42>
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009298:	b10b      	cbz	r3, 800929e <__sflush_r+0x42>
 800929a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800929c:	1ad2      	subs	r2, r2, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	4628      	mov	r0, r5
 80092a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80092a4:	6a21      	ldr	r1, [r4, #32]
 80092a6:	47b0      	blx	r6
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	89a3      	ldrh	r3, [r4, #12]
 80092ac:	d106      	bne.n	80092bc <__sflush_r+0x60>
 80092ae:	6829      	ldr	r1, [r5, #0]
 80092b0:	291d      	cmp	r1, #29
 80092b2:	d82b      	bhi.n	800930c <__sflush_r+0xb0>
 80092b4:	4a28      	ldr	r2, [pc, #160]	@ (8009358 <__sflush_r+0xfc>)
 80092b6:	40ca      	lsrs	r2, r1
 80092b8:	07d6      	lsls	r6, r2, #31
 80092ba:	d527      	bpl.n	800930c <__sflush_r+0xb0>
 80092bc:	2200      	movs	r2, #0
 80092be:	6062      	str	r2, [r4, #4]
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	04d9      	lsls	r1, r3, #19
 80092c4:	6022      	str	r2, [r4, #0]
 80092c6:	d504      	bpl.n	80092d2 <__sflush_r+0x76>
 80092c8:	1c42      	adds	r2, r0, #1
 80092ca:	d101      	bne.n	80092d0 <__sflush_r+0x74>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b903      	cbnz	r3, 80092d2 <__sflush_r+0x76>
 80092d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80092d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092d4:	602f      	str	r7, [r5, #0]
 80092d6:	b1b9      	cbz	r1, 8009308 <__sflush_r+0xac>
 80092d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092dc:	4299      	cmp	r1, r3
 80092de:	d002      	beq.n	80092e6 <__sflush_r+0x8a>
 80092e0:	4628      	mov	r0, r5
 80092e2:	f7fe fa49 	bl	8007778 <_free_r>
 80092e6:	2300      	movs	r3, #0
 80092e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80092ea:	e00d      	b.n	8009308 <__sflush_r+0xac>
 80092ec:	2301      	movs	r3, #1
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b0      	blx	r6
 80092f2:	4602      	mov	r2, r0
 80092f4:	1c50      	adds	r0, r2, #1
 80092f6:	d1c9      	bne.n	800928c <__sflush_r+0x30>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c6      	beq.n	800928c <__sflush_r+0x30>
 80092fe:	2b1d      	cmp	r3, #29
 8009300:	d001      	beq.n	8009306 <__sflush_r+0xaa>
 8009302:	2b16      	cmp	r3, #22
 8009304:	d11d      	bne.n	8009342 <__sflush_r+0xe6>
 8009306:	602f      	str	r7, [r5, #0]
 8009308:	2000      	movs	r0, #0
 800930a:	e021      	b.n	8009350 <__sflush_r+0xf4>
 800930c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009310:	b21b      	sxth	r3, r3
 8009312:	e01a      	b.n	800934a <__sflush_r+0xee>
 8009314:	690f      	ldr	r7, [r1, #16]
 8009316:	2f00      	cmp	r7, #0
 8009318:	d0f6      	beq.n	8009308 <__sflush_r+0xac>
 800931a:	0793      	lsls	r3, r2, #30
 800931c:	bf18      	it	ne
 800931e:	2300      	movne	r3, #0
 8009320:	680e      	ldr	r6, [r1, #0]
 8009322:	bf08      	it	eq
 8009324:	694b      	ldreq	r3, [r1, #20]
 8009326:	1bf6      	subs	r6, r6, r7
 8009328:	600f      	str	r7, [r1, #0]
 800932a:	608b      	str	r3, [r1, #8]
 800932c:	2e00      	cmp	r6, #0
 800932e:	ddeb      	ble.n	8009308 <__sflush_r+0xac>
 8009330:	4633      	mov	r3, r6
 8009332:	463a      	mov	r2, r7
 8009334:	4628      	mov	r0, r5
 8009336:	6a21      	ldr	r1, [r4, #32]
 8009338:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800933c:	47e0      	blx	ip
 800933e:	2800      	cmp	r0, #0
 8009340:	dc07      	bgt.n	8009352 <__sflush_r+0xf6>
 8009342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009352:	4407      	add	r7, r0
 8009354:	1a36      	subs	r6, r6, r0
 8009356:	e7e9      	b.n	800932c <__sflush_r+0xd0>
 8009358:	20400001 	.word	0x20400001

0800935c <_fflush_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	690b      	ldr	r3, [r1, #16]
 8009360:	4605      	mov	r5, r0
 8009362:	460c      	mov	r4, r1
 8009364:	b913      	cbnz	r3, 800936c <_fflush_r+0x10>
 8009366:	2500      	movs	r5, #0
 8009368:	4628      	mov	r0, r5
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	b118      	cbz	r0, 8009376 <_fflush_r+0x1a>
 800936e:	6a03      	ldr	r3, [r0, #32]
 8009370:	b90b      	cbnz	r3, 8009376 <_fflush_r+0x1a>
 8009372:	f7fd fa75 	bl	8006860 <__sinit>
 8009376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0f3      	beq.n	8009366 <_fflush_r+0xa>
 800937e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009380:	07d0      	lsls	r0, r2, #31
 8009382:	d404      	bmi.n	800938e <_fflush_r+0x32>
 8009384:	0599      	lsls	r1, r3, #22
 8009386:	d402      	bmi.n	800938e <_fflush_r+0x32>
 8009388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800938a:	f7fd fb82 	bl	8006a92 <__retarget_lock_acquire_recursive>
 800938e:	4628      	mov	r0, r5
 8009390:	4621      	mov	r1, r4
 8009392:	f7ff ff63 	bl	800925c <__sflush_r>
 8009396:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009398:	4605      	mov	r5, r0
 800939a:	07da      	lsls	r2, r3, #31
 800939c:	d4e4      	bmi.n	8009368 <_fflush_r+0xc>
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	059b      	lsls	r3, r3, #22
 80093a2:	d4e1      	bmi.n	8009368 <_fflush_r+0xc>
 80093a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093a6:	f7fd fb75 	bl	8006a94 <__retarget_lock_release_recursive>
 80093aa:	e7dd      	b.n	8009368 <_fflush_r+0xc>

080093ac <memmove>:
 80093ac:	4288      	cmp	r0, r1
 80093ae:	b510      	push	{r4, lr}
 80093b0:	eb01 0402 	add.w	r4, r1, r2
 80093b4:	d902      	bls.n	80093bc <memmove+0x10>
 80093b6:	4284      	cmp	r4, r0
 80093b8:	4623      	mov	r3, r4
 80093ba:	d807      	bhi.n	80093cc <memmove+0x20>
 80093bc:	1e43      	subs	r3, r0, #1
 80093be:	42a1      	cmp	r1, r4
 80093c0:	d008      	beq.n	80093d4 <memmove+0x28>
 80093c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093ca:	e7f8      	b.n	80093be <memmove+0x12>
 80093cc:	4601      	mov	r1, r0
 80093ce:	4402      	add	r2, r0
 80093d0:	428a      	cmp	r2, r1
 80093d2:	d100      	bne.n	80093d6 <memmove+0x2a>
 80093d4:	bd10      	pop	{r4, pc}
 80093d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093de:	e7f7      	b.n	80093d0 <memmove+0x24>

080093e0 <strncmp>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	b16a      	cbz	r2, 8009400 <strncmp+0x20>
 80093e4:	3901      	subs	r1, #1
 80093e6:	1884      	adds	r4, r0, r2
 80093e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d103      	bne.n	80093fc <strncmp+0x1c>
 80093f4:	42a0      	cmp	r0, r4
 80093f6:	d001      	beq.n	80093fc <strncmp+0x1c>
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	d1f5      	bne.n	80093e8 <strncmp+0x8>
 80093fc:	1ad0      	subs	r0, r2, r3
 80093fe:	bd10      	pop	{r4, pc}
 8009400:	4610      	mov	r0, r2
 8009402:	e7fc      	b.n	80093fe <strncmp+0x1e>

08009404 <_sbrk_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	2300      	movs	r3, #0
 8009408:	4d05      	ldr	r5, [pc, #20]	@ (8009420 <_sbrk_r+0x1c>)
 800940a:	4604      	mov	r4, r0
 800940c:	4608      	mov	r0, r1
 800940e:	602b      	str	r3, [r5, #0]
 8009410:	f7f8 f9f0 	bl	80017f4 <_sbrk>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_sbrk_r+0x1a>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_sbrk_r+0x1a>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	200003e0 	.word	0x200003e0

08009424 <memcpy>:
 8009424:	440a      	add	r2, r1
 8009426:	4291      	cmp	r1, r2
 8009428:	f100 33ff 	add.w	r3, r0, #4294967295
 800942c:	d100      	bne.n	8009430 <memcpy+0xc>
 800942e:	4770      	bx	lr
 8009430:	b510      	push	{r4, lr}
 8009432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009436:	4291      	cmp	r1, r2
 8009438:	f803 4f01 	strb.w	r4, [r3, #1]!
 800943c:	d1f9      	bne.n	8009432 <memcpy+0xe>
 800943e:	bd10      	pop	{r4, pc}

08009440 <nan>:
 8009440:	2000      	movs	r0, #0
 8009442:	4901      	ldr	r1, [pc, #4]	@ (8009448 <nan+0x8>)
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	7ff80000 	.word	0x7ff80000

0800944c <__assert_func>:
 800944c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800944e:	4614      	mov	r4, r2
 8009450:	461a      	mov	r2, r3
 8009452:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <__assert_func+0x2c>)
 8009454:	4605      	mov	r5, r0
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68d8      	ldr	r0, [r3, #12]
 800945a:	b14c      	cbz	r4, 8009470 <__assert_func+0x24>
 800945c:	4b07      	ldr	r3, [pc, #28]	@ (800947c <__assert_func+0x30>)
 800945e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009462:	9100      	str	r1, [sp, #0]
 8009464:	462b      	mov	r3, r5
 8009466:	4906      	ldr	r1, [pc, #24]	@ (8009480 <__assert_func+0x34>)
 8009468:	f000 fba8 	bl	8009bbc <fiprintf>
 800946c:	f000 fbb8 	bl	8009be0 <abort>
 8009470:	4b04      	ldr	r3, [pc, #16]	@ (8009484 <__assert_func+0x38>)
 8009472:	461c      	mov	r4, r3
 8009474:	e7f3      	b.n	800945e <__assert_func+0x12>
 8009476:	bf00      	nop
 8009478:	20000020 	.word	0x20000020
 800947c:	0800a350 	.word	0x0800a350
 8009480:	0800a35d 	.word	0x0800a35d
 8009484:	0800a38b 	.word	0x0800a38b

08009488 <_calloc_r>:
 8009488:	b570      	push	{r4, r5, r6, lr}
 800948a:	fba1 5402 	umull	r5, r4, r1, r2
 800948e:	b934      	cbnz	r4, 800949e <_calloc_r+0x16>
 8009490:	4629      	mov	r1, r5
 8009492:	f7fe f9e3 	bl	800785c <_malloc_r>
 8009496:	4606      	mov	r6, r0
 8009498:	b928      	cbnz	r0, 80094a6 <_calloc_r+0x1e>
 800949a:	4630      	mov	r0, r6
 800949c:	bd70      	pop	{r4, r5, r6, pc}
 800949e:	220c      	movs	r2, #12
 80094a0:	2600      	movs	r6, #0
 80094a2:	6002      	str	r2, [r0, #0]
 80094a4:	e7f9      	b.n	800949a <_calloc_r+0x12>
 80094a6:	462a      	mov	r2, r5
 80094a8:	4621      	mov	r1, r4
 80094aa:	f7fd fa74 	bl	8006996 <memset>
 80094ae:	e7f4      	b.n	800949a <_calloc_r+0x12>

080094b0 <rshift>:
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80094ba:	f100 0414 	add.w	r4, r0, #20
 80094be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80094c2:	dd46      	ble.n	8009552 <rshift+0xa2>
 80094c4:	f011 011f 	ands.w	r1, r1, #31
 80094c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80094cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80094d0:	d10c      	bne.n	80094ec <rshift+0x3c>
 80094d2:	4629      	mov	r1, r5
 80094d4:	f100 0710 	add.w	r7, r0, #16
 80094d8:	42b1      	cmp	r1, r6
 80094da:	d335      	bcc.n	8009548 <rshift+0x98>
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	1eea      	subs	r2, r5, #3
 80094e2:	4296      	cmp	r6, r2
 80094e4:	bf38      	it	cc
 80094e6:	2300      	movcc	r3, #0
 80094e8:	4423      	add	r3, r4
 80094ea:	e015      	b.n	8009518 <rshift+0x68>
 80094ec:	46a1      	mov	r9, r4
 80094ee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80094f2:	f1c1 0820 	rsb	r8, r1, #32
 80094f6:	40cf      	lsrs	r7, r1
 80094f8:	f105 0e04 	add.w	lr, r5, #4
 80094fc:	4576      	cmp	r6, lr
 80094fe:	46f4      	mov	ip, lr
 8009500:	d816      	bhi.n	8009530 <rshift+0x80>
 8009502:	1a9a      	subs	r2, r3, r2
 8009504:	0092      	lsls	r2, r2, #2
 8009506:	3a04      	subs	r2, #4
 8009508:	3501      	adds	r5, #1
 800950a:	42ae      	cmp	r6, r5
 800950c:	bf38      	it	cc
 800950e:	2200      	movcc	r2, #0
 8009510:	18a3      	adds	r3, r4, r2
 8009512:	50a7      	str	r7, [r4, r2]
 8009514:	b107      	cbz	r7, 8009518 <rshift+0x68>
 8009516:	3304      	adds	r3, #4
 8009518:	42a3      	cmp	r3, r4
 800951a:	eba3 0204 	sub.w	r2, r3, r4
 800951e:	bf08      	it	eq
 8009520:	2300      	moveq	r3, #0
 8009522:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009526:	6102      	str	r2, [r0, #16]
 8009528:	bf08      	it	eq
 800952a:	6143      	streq	r3, [r0, #20]
 800952c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009530:	f8dc c000 	ldr.w	ip, [ip]
 8009534:	fa0c fc08 	lsl.w	ip, ip, r8
 8009538:	ea4c 0707 	orr.w	r7, ip, r7
 800953c:	f849 7b04 	str.w	r7, [r9], #4
 8009540:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009544:	40cf      	lsrs	r7, r1
 8009546:	e7d9      	b.n	80094fc <rshift+0x4c>
 8009548:	f851 cb04 	ldr.w	ip, [r1], #4
 800954c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009550:	e7c2      	b.n	80094d8 <rshift+0x28>
 8009552:	4623      	mov	r3, r4
 8009554:	e7e0      	b.n	8009518 <rshift+0x68>

08009556 <__hexdig_fun>:
 8009556:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800955a:	2b09      	cmp	r3, #9
 800955c:	d802      	bhi.n	8009564 <__hexdig_fun+0xe>
 800955e:	3820      	subs	r0, #32
 8009560:	b2c0      	uxtb	r0, r0
 8009562:	4770      	bx	lr
 8009564:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009568:	2b05      	cmp	r3, #5
 800956a:	d801      	bhi.n	8009570 <__hexdig_fun+0x1a>
 800956c:	3847      	subs	r0, #71	@ 0x47
 800956e:	e7f7      	b.n	8009560 <__hexdig_fun+0xa>
 8009570:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009574:	2b05      	cmp	r3, #5
 8009576:	d801      	bhi.n	800957c <__hexdig_fun+0x26>
 8009578:	3827      	subs	r0, #39	@ 0x27
 800957a:	e7f1      	b.n	8009560 <__hexdig_fun+0xa>
 800957c:	2000      	movs	r0, #0
 800957e:	4770      	bx	lr

08009580 <__gethex>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	468a      	mov	sl, r1
 8009586:	4690      	mov	r8, r2
 8009588:	b085      	sub	sp, #20
 800958a:	9302      	str	r3, [sp, #8]
 800958c:	680b      	ldr	r3, [r1, #0]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	1c9c      	adds	r4, r3, #2
 8009592:	46a1      	mov	r9, r4
 8009594:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009598:	2830      	cmp	r0, #48	@ 0x30
 800959a:	d0fa      	beq.n	8009592 <__gethex+0x12>
 800959c:	eba9 0303 	sub.w	r3, r9, r3
 80095a0:	f1a3 0b02 	sub.w	fp, r3, #2
 80095a4:	f7ff ffd7 	bl	8009556 <__hexdig_fun>
 80095a8:	4605      	mov	r5, r0
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d168      	bne.n	8009680 <__gethex+0x100>
 80095ae:	2201      	movs	r2, #1
 80095b0:	4648      	mov	r0, r9
 80095b2:	499f      	ldr	r1, [pc, #636]	@ (8009830 <__gethex+0x2b0>)
 80095b4:	f7ff ff14 	bl	80093e0 <strncmp>
 80095b8:	4607      	mov	r7, r0
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d167      	bne.n	800968e <__gethex+0x10e>
 80095be:	f899 0001 	ldrb.w	r0, [r9, #1]
 80095c2:	4626      	mov	r6, r4
 80095c4:	f7ff ffc7 	bl	8009556 <__hexdig_fun>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d062      	beq.n	8009692 <__gethex+0x112>
 80095cc:	4623      	mov	r3, r4
 80095ce:	7818      	ldrb	r0, [r3, #0]
 80095d0:	4699      	mov	r9, r3
 80095d2:	2830      	cmp	r0, #48	@ 0x30
 80095d4:	f103 0301 	add.w	r3, r3, #1
 80095d8:	d0f9      	beq.n	80095ce <__gethex+0x4e>
 80095da:	f7ff ffbc 	bl	8009556 <__hexdig_fun>
 80095de:	fab0 f580 	clz	r5, r0
 80095e2:	f04f 0b01 	mov.w	fp, #1
 80095e6:	096d      	lsrs	r5, r5, #5
 80095e8:	464a      	mov	r2, r9
 80095ea:	4616      	mov	r6, r2
 80095ec:	7830      	ldrb	r0, [r6, #0]
 80095ee:	3201      	adds	r2, #1
 80095f0:	f7ff ffb1 	bl	8009556 <__hexdig_fun>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1f8      	bne.n	80095ea <__gethex+0x6a>
 80095f8:	2201      	movs	r2, #1
 80095fa:	4630      	mov	r0, r6
 80095fc:	498c      	ldr	r1, [pc, #560]	@ (8009830 <__gethex+0x2b0>)
 80095fe:	f7ff feef 	bl	80093e0 <strncmp>
 8009602:	2800      	cmp	r0, #0
 8009604:	d13f      	bne.n	8009686 <__gethex+0x106>
 8009606:	b944      	cbnz	r4, 800961a <__gethex+0x9a>
 8009608:	1c74      	adds	r4, r6, #1
 800960a:	4622      	mov	r2, r4
 800960c:	4616      	mov	r6, r2
 800960e:	7830      	ldrb	r0, [r6, #0]
 8009610:	3201      	adds	r2, #1
 8009612:	f7ff ffa0 	bl	8009556 <__hexdig_fun>
 8009616:	2800      	cmp	r0, #0
 8009618:	d1f8      	bne.n	800960c <__gethex+0x8c>
 800961a:	1ba4      	subs	r4, r4, r6
 800961c:	00a7      	lsls	r7, r4, #2
 800961e:	7833      	ldrb	r3, [r6, #0]
 8009620:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009624:	2b50      	cmp	r3, #80	@ 0x50
 8009626:	d13e      	bne.n	80096a6 <__gethex+0x126>
 8009628:	7873      	ldrb	r3, [r6, #1]
 800962a:	2b2b      	cmp	r3, #43	@ 0x2b
 800962c:	d033      	beq.n	8009696 <__gethex+0x116>
 800962e:	2b2d      	cmp	r3, #45	@ 0x2d
 8009630:	d034      	beq.n	800969c <__gethex+0x11c>
 8009632:	2400      	movs	r4, #0
 8009634:	1c71      	adds	r1, r6, #1
 8009636:	7808      	ldrb	r0, [r1, #0]
 8009638:	f7ff ff8d 	bl	8009556 <__hexdig_fun>
 800963c:	1e43      	subs	r3, r0, #1
 800963e:	b2db      	uxtb	r3, r3
 8009640:	2b18      	cmp	r3, #24
 8009642:	d830      	bhi.n	80096a6 <__gethex+0x126>
 8009644:	f1a0 0210 	sub.w	r2, r0, #16
 8009648:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800964c:	f7ff ff83 	bl	8009556 <__hexdig_fun>
 8009650:	f100 3cff 	add.w	ip, r0, #4294967295
 8009654:	fa5f fc8c 	uxtb.w	ip, ip
 8009658:	f1bc 0f18 	cmp.w	ip, #24
 800965c:	f04f 030a 	mov.w	r3, #10
 8009660:	d91e      	bls.n	80096a0 <__gethex+0x120>
 8009662:	b104      	cbz	r4, 8009666 <__gethex+0xe6>
 8009664:	4252      	negs	r2, r2
 8009666:	4417      	add	r7, r2
 8009668:	f8ca 1000 	str.w	r1, [sl]
 800966c:	b1ed      	cbz	r5, 80096aa <__gethex+0x12a>
 800966e:	f1bb 0f00 	cmp.w	fp, #0
 8009672:	bf0c      	ite	eq
 8009674:	2506      	moveq	r5, #6
 8009676:	2500      	movne	r5, #0
 8009678:	4628      	mov	r0, r5
 800967a:	b005      	add	sp, #20
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	2500      	movs	r5, #0
 8009682:	462c      	mov	r4, r5
 8009684:	e7b0      	b.n	80095e8 <__gethex+0x68>
 8009686:	2c00      	cmp	r4, #0
 8009688:	d1c7      	bne.n	800961a <__gethex+0x9a>
 800968a:	4627      	mov	r7, r4
 800968c:	e7c7      	b.n	800961e <__gethex+0x9e>
 800968e:	464e      	mov	r6, r9
 8009690:	462f      	mov	r7, r5
 8009692:	2501      	movs	r5, #1
 8009694:	e7c3      	b.n	800961e <__gethex+0x9e>
 8009696:	2400      	movs	r4, #0
 8009698:	1cb1      	adds	r1, r6, #2
 800969a:	e7cc      	b.n	8009636 <__gethex+0xb6>
 800969c:	2401      	movs	r4, #1
 800969e:	e7fb      	b.n	8009698 <__gethex+0x118>
 80096a0:	fb03 0002 	mla	r0, r3, r2, r0
 80096a4:	e7ce      	b.n	8009644 <__gethex+0xc4>
 80096a6:	4631      	mov	r1, r6
 80096a8:	e7de      	b.n	8009668 <__gethex+0xe8>
 80096aa:	4629      	mov	r1, r5
 80096ac:	eba6 0309 	sub.w	r3, r6, r9
 80096b0:	3b01      	subs	r3, #1
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	dc0a      	bgt.n	80096cc <__gethex+0x14c>
 80096b6:	9801      	ldr	r0, [sp, #4]
 80096b8:	f7fe f95c 	bl	8007974 <_Balloc>
 80096bc:	4604      	mov	r4, r0
 80096be:	b940      	cbnz	r0, 80096d2 <__gethex+0x152>
 80096c0:	4602      	mov	r2, r0
 80096c2:	21e4      	movs	r1, #228	@ 0xe4
 80096c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009834 <__gethex+0x2b4>)
 80096c6:	485c      	ldr	r0, [pc, #368]	@ (8009838 <__gethex+0x2b8>)
 80096c8:	f7ff fec0 	bl	800944c <__assert_func>
 80096cc:	3101      	adds	r1, #1
 80096ce:	105b      	asrs	r3, r3, #1
 80096d0:	e7ef      	b.n	80096b2 <__gethex+0x132>
 80096d2:	2300      	movs	r3, #0
 80096d4:	f100 0a14 	add.w	sl, r0, #20
 80096d8:	4655      	mov	r5, sl
 80096da:	469b      	mov	fp, r3
 80096dc:	45b1      	cmp	r9, r6
 80096de:	d337      	bcc.n	8009750 <__gethex+0x1d0>
 80096e0:	f845 bb04 	str.w	fp, [r5], #4
 80096e4:	eba5 050a 	sub.w	r5, r5, sl
 80096e8:	10ad      	asrs	r5, r5, #2
 80096ea:	6125      	str	r5, [r4, #16]
 80096ec:	4658      	mov	r0, fp
 80096ee:	f7fe fa33 	bl	8007b58 <__hi0bits>
 80096f2:	016d      	lsls	r5, r5, #5
 80096f4:	f8d8 6000 	ldr.w	r6, [r8]
 80096f8:	1a2d      	subs	r5, r5, r0
 80096fa:	42b5      	cmp	r5, r6
 80096fc:	dd54      	ble.n	80097a8 <__gethex+0x228>
 80096fe:	1bad      	subs	r5, r5, r6
 8009700:	4629      	mov	r1, r5
 8009702:	4620      	mov	r0, r4
 8009704:	f7fe fdb5 	bl	8008272 <__any_on>
 8009708:	4681      	mov	r9, r0
 800970a:	b178      	cbz	r0, 800972c <__gethex+0x1ac>
 800970c:	f04f 0901 	mov.w	r9, #1
 8009710:	1e6b      	subs	r3, r5, #1
 8009712:	1159      	asrs	r1, r3, #5
 8009714:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009718:	f003 021f 	and.w	r2, r3, #31
 800971c:	fa09 f202 	lsl.w	r2, r9, r2
 8009720:	420a      	tst	r2, r1
 8009722:	d003      	beq.n	800972c <__gethex+0x1ac>
 8009724:	454b      	cmp	r3, r9
 8009726:	dc36      	bgt.n	8009796 <__gethex+0x216>
 8009728:	f04f 0902 	mov.w	r9, #2
 800972c:	4629      	mov	r1, r5
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff febe 	bl	80094b0 <rshift>
 8009734:	442f      	add	r7, r5
 8009736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800973a:	42bb      	cmp	r3, r7
 800973c:	da42      	bge.n	80097c4 <__gethex+0x244>
 800973e:	4621      	mov	r1, r4
 8009740:	9801      	ldr	r0, [sp, #4]
 8009742:	f7fe f957 	bl	80079f4 <_Bfree>
 8009746:	2300      	movs	r3, #0
 8009748:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800974a:	25a3      	movs	r5, #163	@ 0xa3
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	e793      	b.n	8009678 <__gethex+0xf8>
 8009750:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009754:	2a2e      	cmp	r2, #46	@ 0x2e
 8009756:	d012      	beq.n	800977e <__gethex+0x1fe>
 8009758:	2b20      	cmp	r3, #32
 800975a:	d104      	bne.n	8009766 <__gethex+0x1e6>
 800975c:	f845 bb04 	str.w	fp, [r5], #4
 8009760:	f04f 0b00 	mov.w	fp, #0
 8009764:	465b      	mov	r3, fp
 8009766:	7830      	ldrb	r0, [r6, #0]
 8009768:	9303      	str	r3, [sp, #12]
 800976a:	f7ff fef4 	bl	8009556 <__hexdig_fun>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	f000 000f 	and.w	r0, r0, #15
 8009774:	4098      	lsls	r0, r3
 8009776:	ea4b 0b00 	orr.w	fp, fp, r0
 800977a:	3304      	adds	r3, #4
 800977c:	e7ae      	b.n	80096dc <__gethex+0x15c>
 800977e:	45b1      	cmp	r9, r6
 8009780:	d8ea      	bhi.n	8009758 <__gethex+0x1d8>
 8009782:	2201      	movs	r2, #1
 8009784:	4630      	mov	r0, r6
 8009786:	492a      	ldr	r1, [pc, #168]	@ (8009830 <__gethex+0x2b0>)
 8009788:	9303      	str	r3, [sp, #12]
 800978a:	f7ff fe29 	bl	80093e0 <strncmp>
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	2800      	cmp	r0, #0
 8009792:	d1e1      	bne.n	8009758 <__gethex+0x1d8>
 8009794:	e7a2      	b.n	80096dc <__gethex+0x15c>
 8009796:	4620      	mov	r0, r4
 8009798:	1ea9      	subs	r1, r5, #2
 800979a:	f7fe fd6a 	bl	8008272 <__any_on>
 800979e:	2800      	cmp	r0, #0
 80097a0:	d0c2      	beq.n	8009728 <__gethex+0x1a8>
 80097a2:	f04f 0903 	mov.w	r9, #3
 80097a6:	e7c1      	b.n	800972c <__gethex+0x1ac>
 80097a8:	da09      	bge.n	80097be <__gethex+0x23e>
 80097aa:	1b75      	subs	r5, r6, r5
 80097ac:	4621      	mov	r1, r4
 80097ae:	462a      	mov	r2, r5
 80097b0:	9801      	ldr	r0, [sp, #4]
 80097b2:	f7fe fb2f 	bl	8007e14 <__lshift>
 80097b6:	4604      	mov	r4, r0
 80097b8:	1b7f      	subs	r7, r7, r5
 80097ba:	f100 0a14 	add.w	sl, r0, #20
 80097be:	f04f 0900 	mov.w	r9, #0
 80097c2:	e7b8      	b.n	8009736 <__gethex+0x1b6>
 80097c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80097c8:	42bd      	cmp	r5, r7
 80097ca:	dd6f      	ble.n	80098ac <__gethex+0x32c>
 80097cc:	1bed      	subs	r5, r5, r7
 80097ce:	42ae      	cmp	r6, r5
 80097d0:	dc34      	bgt.n	800983c <__gethex+0x2bc>
 80097d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d022      	beq.n	8009820 <__gethex+0x2a0>
 80097da:	2b03      	cmp	r3, #3
 80097dc:	d024      	beq.n	8009828 <__gethex+0x2a8>
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d115      	bne.n	800980e <__gethex+0x28e>
 80097e2:	42ae      	cmp	r6, r5
 80097e4:	d113      	bne.n	800980e <__gethex+0x28e>
 80097e6:	2e01      	cmp	r6, #1
 80097e8:	d10b      	bne.n	8009802 <__gethex+0x282>
 80097ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80097ee:	9a02      	ldr	r2, [sp, #8]
 80097f0:	2562      	movs	r5, #98	@ 0x62
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	2301      	movs	r3, #1
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	f8ca 3000 	str.w	r3, [sl]
 80097fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097fe:	601c      	str	r4, [r3, #0]
 8009800:	e73a      	b.n	8009678 <__gethex+0xf8>
 8009802:	4620      	mov	r0, r4
 8009804:	1e71      	subs	r1, r6, #1
 8009806:	f7fe fd34 	bl	8008272 <__any_on>
 800980a:	2800      	cmp	r0, #0
 800980c:	d1ed      	bne.n	80097ea <__gethex+0x26a>
 800980e:	4621      	mov	r1, r4
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	f7fe f8ef 	bl	80079f4 <_Bfree>
 8009816:	2300      	movs	r3, #0
 8009818:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800981a:	2550      	movs	r5, #80	@ 0x50
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	e72b      	b.n	8009678 <__gethex+0xf8>
 8009820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f3      	bne.n	800980e <__gethex+0x28e>
 8009826:	e7e0      	b.n	80097ea <__gethex+0x26a>
 8009828:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1dd      	bne.n	80097ea <__gethex+0x26a>
 800982e:	e7ee      	b.n	800980e <__gethex+0x28e>
 8009830:	0800a335 	.word	0x0800a335
 8009834:	0800a2cb 	.word	0x0800a2cb
 8009838:	0800a38c 	.word	0x0800a38c
 800983c:	1e6f      	subs	r7, r5, #1
 800983e:	f1b9 0f00 	cmp.w	r9, #0
 8009842:	d130      	bne.n	80098a6 <__gethex+0x326>
 8009844:	b127      	cbz	r7, 8009850 <__gethex+0x2d0>
 8009846:	4639      	mov	r1, r7
 8009848:	4620      	mov	r0, r4
 800984a:	f7fe fd12 	bl	8008272 <__any_on>
 800984e:	4681      	mov	r9, r0
 8009850:	2301      	movs	r3, #1
 8009852:	4629      	mov	r1, r5
 8009854:	1b76      	subs	r6, r6, r5
 8009856:	2502      	movs	r5, #2
 8009858:	117a      	asrs	r2, r7, #5
 800985a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800985e:	f007 071f 	and.w	r7, r7, #31
 8009862:	40bb      	lsls	r3, r7
 8009864:	4213      	tst	r3, r2
 8009866:	4620      	mov	r0, r4
 8009868:	bf18      	it	ne
 800986a:	f049 0902 	orrne.w	r9, r9, #2
 800986e:	f7ff fe1f 	bl	80094b0 <rshift>
 8009872:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009876:	f1b9 0f00 	cmp.w	r9, #0
 800987a:	d047      	beq.n	800990c <__gethex+0x38c>
 800987c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d015      	beq.n	80098b0 <__gethex+0x330>
 8009884:	2b03      	cmp	r3, #3
 8009886:	d017      	beq.n	80098b8 <__gethex+0x338>
 8009888:	2b01      	cmp	r3, #1
 800988a:	d109      	bne.n	80098a0 <__gethex+0x320>
 800988c:	f019 0f02 	tst.w	r9, #2
 8009890:	d006      	beq.n	80098a0 <__gethex+0x320>
 8009892:	f8da 3000 	ldr.w	r3, [sl]
 8009896:	ea49 0903 	orr.w	r9, r9, r3
 800989a:	f019 0f01 	tst.w	r9, #1
 800989e:	d10e      	bne.n	80098be <__gethex+0x33e>
 80098a0:	f045 0510 	orr.w	r5, r5, #16
 80098a4:	e032      	b.n	800990c <__gethex+0x38c>
 80098a6:	f04f 0901 	mov.w	r9, #1
 80098aa:	e7d1      	b.n	8009850 <__gethex+0x2d0>
 80098ac:	2501      	movs	r5, #1
 80098ae:	e7e2      	b.n	8009876 <__gethex+0x2f6>
 80098b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b2:	f1c3 0301 	rsb	r3, r3, #1
 80098b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0f0      	beq.n	80098a0 <__gethex+0x320>
 80098be:	f04f 0c00 	mov.w	ip, #0
 80098c2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80098c6:	f104 0314 	add.w	r3, r4, #20
 80098ca:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80098ce:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80098dc:	d01b      	beq.n	8009916 <__gethex+0x396>
 80098de:	3201      	adds	r2, #1
 80098e0:	6002      	str	r2, [r0, #0]
 80098e2:	2d02      	cmp	r5, #2
 80098e4:	f104 0314 	add.w	r3, r4, #20
 80098e8:	d13c      	bne.n	8009964 <__gethex+0x3e4>
 80098ea:	f8d8 2000 	ldr.w	r2, [r8]
 80098ee:	3a01      	subs	r2, #1
 80098f0:	42b2      	cmp	r2, r6
 80098f2:	d109      	bne.n	8009908 <__gethex+0x388>
 80098f4:	2201      	movs	r2, #1
 80098f6:	1171      	asrs	r1, r6, #5
 80098f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098fc:	f006 061f 	and.w	r6, r6, #31
 8009900:	fa02 f606 	lsl.w	r6, r2, r6
 8009904:	421e      	tst	r6, r3
 8009906:	d13a      	bne.n	800997e <__gethex+0x3fe>
 8009908:	f045 0520 	orr.w	r5, r5, #32
 800990c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800990e:	601c      	str	r4, [r3, #0]
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	601f      	str	r7, [r3, #0]
 8009914:	e6b0      	b.n	8009678 <__gethex+0xf8>
 8009916:	4299      	cmp	r1, r3
 8009918:	f843 cc04 	str.w	ip, [r3, #-4]
 800991c:	d8d9      	bhi.n	80098d2 <__gethex+0x352>
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	459b      	cmp	fp, r3
 8009922:	db17      	blt.n	8009954 <__gethex+0x3d4>
 8009924:	6861      	ldr	r1, [r4, #4]
 8009926:	9801      	ldr	r0, [sp, #4]
 8009928:	3101      	adds	r1, #1
 800992a:	f7fe f823 	bl	8007974 <_Balloc>
 800992e:	4681      	mov	r9, r0
 8009930:	b918      	cbnz	r0, 800993a <__gethex+0x3ba>
 8009932:	4602      	mov	r2, r0
 8009934:	2184      	movs	r1, #132	@ 0x84
 8009936:	4b19      	ldr	r3, [pc, #100]	@ (800999c <__gethex+0x41c>)
 8009938:	e6c5      	b.n	80096c6 <__gethex+0x146>
 800993a:	6922      	ldr	r2, [r4, #16]
 800993c:	f104 010c 	add.w	r1, r4, #12
 8009940:	3202      	adds	r2, #2
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	300c      	adds	r0, #12
 8009946:	f7ff fd6d 	bl	8009424 <memcpy>
 800994a:	4621      	mov	r1, r4
 800994c:	9801      	ldr	r0, [sp, #4]
 800994e:	f7fe f851 	bl	80079f4 <_Bfree>
 8009952:	464c      	mov	r4, r9
 8009954:	6923      	ldr	r3, [r4, #16]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	6122      	str	r2, [r4, #16]
 800995a:	2201      	movs	r2, #1
 800995c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009960:	615a      	str	r2, [r3, #20]
 8009962:	e7be      	b.n	80098e2 <__gethex+0x362>
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	455a      	cmp	r2, fp
 8009968:	dd0b      	ble.n	8009982 <__gethex+0x402>
 800996a:	2101      	movs	r1, #1
 800996c:	4620      	mov	r0, r4
 800996e:	f7ff fd9f 	bl	80094b0 <rshift>
 8009972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009976:	3701      	adds	r7, #1
 8009978:	42bb      	cmp	r3, r7
 800997a:	f6ff aee0 	blt.w	800973e <__gethex+0x1be>
 800997e:	2501      	movs	r5, #1
 8009980:	e7c2      	b.n	8009908 <__gethex+0x388>
 8009982:	f016 061f 	ands.w	r6, r6, #31
 8009986:	d0fa      	beq.n	800997e <__gethex+0x3fe>
 8009988:	4453      	add	r3, sl
 800998a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800998e:	f7fe f8e3 	bl	8007b58 <__hi0bits>
 8009992:	f1c6 0620 	rsb	r6, r6, #32
 8009996:	42b0      	cmp	r0, r6
 8009998:	dbe7      	blt.n	800996a <__gethex+0x3ea>
 800999a:	e7f0      	b.n	800997e <__gethex+0x3fe>
 800999c:	0800a2cb 	.word	0x0800a2cb

080099a0 <L_shift>:
 80099a0:	f1c2 0208 	rsb	r2, r2, #8
 80099a4:	0092      	lsls	r2, r2, #2
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	f1c2 0620 	rsb	r6, r2, #32
 80099ac:	6843      	ldr	r3, [r0, #4]
 80099ae:	6804      	ldr	r4, [r0, #0]
 80099b0:	fa03 f506 	lsl.w	r5, r3, r6
 80099b4:	432c      	orrs	r4, r5
 80099b6:	40d3      	lsrs	r3, r2
 80099b8:	6004      	str	r4, [r0, #0]
 80099ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80099be:	4288      	cmp	r0, r1
 80099c0:	d3f4      	bcc.n	80099ac <L_shift+0xc>
 80099c2:	bd70      	pop	{r4, r5, r6, pc}

080099c4 <__match>:
 80099c4:	b530      	push	{r4, r5, lr}
 80099c6:	6803      	ldr	r3, [r0, #0]
 80099c8:	3301      	adds	r3, #1
 80099ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ce:	b914      	cbnz	r4, 80099d6 <__match+0x12>
 80099d0:	6003      	str	r3, [r0, #0]
 80099d2:	2001      	movs	r0, #1
 80099d4:	bd30      	pop	{r4, r5, pc}
 80099d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099da:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80099de:	2d19      	cmp	r5, #25
 80099e0:	bf98      	it	ls
 80099e2:	3220      	addls	r2, #32
 80099e4:	42a2      	cmp	r2, r4
 80099e6:	d0f0      	beq.n	80099ca <__match+0x6>
 80099e8:	2000      	movs	r0, #0
 80099ea:	e7f3      	b.n	80099d4 <__match+0x10>

080099ec <__hexnan>:
 80099ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f0:	2500      	movs	r5, #0
 80099f2:	680b      	ldr	r3, [r1, #0]
 80099f4:	4682      	mov	sl, r0
 80099f6:	115e      	asrs	r6, r3, #5
 80099f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80099fc:	f013 031f 	ands.w	r3, r3, #31
 8009a00:	bf18      	it	ne
 8009a02:	3604      	addne	r6, #4
 8009a04:	1f37      	subs	r7, r6, #4
 8009a06:	4690      	mov	r8, r2
 8009a08:	46b9      	mov	r9, r7
 8009a0a:	463c      	mov	r4, r7
 8009a0c:	46ab      	mov	fp, r5
 8009a0e:	b087      	sub	sp, #28
 8009a10:	6801      	ldr	r1, [r0, #0]
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	f846 5c04 	str.w	r5, [r6, #-4]
 8009a18:	9502      	str	r5, [sp, #8]
 8009a1a:	784a      	ldrb	r2, [r1, #1]
 8009a1c:	1c4b      	adds	r3, r1, #1
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	b342      	cbz	r2, 8009a74 <__hexnan+0x88>
 8009a22:	4610      	mov	r0, r2
 8009a24:	9105      	str	r1, [sp, #20]
 8009a26:	9204      	str	r2, [sp, #16]
 8009a28:	f7ff fd95 	bl	8009556 <__hexdig_fun>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	d151      	bne.n	8009ad4 <__hexnan+0xe8>
 8009a30:	9a04      	ldr	r2, [sp, #16]
 8009a32:	9905      	ldr	r1, [sp, #20]
 8009a34:	2a20      	cmp	r2, #32
 8009a36:	d818      	bhi.n	8009a6a <__hexnan+0x7e>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	459b      	cmp	fp, r3
 8009a3c:	dd13      	ble.n	8009a66 <__hexnan+0x7a>
 8009a3e:	454c      	cmp	r4, r9
 8009a40:	d206      	bcs.n	8009a50 <__hexnan+0x64>
 8009a42:	2d07      	cmp	r5, #7
 8009a44:	dc04      	bgt.n	8009a50 <__hexnan+0x64>
 8009a46:	462a      	mov	r2, r5
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff ffa8 	bl	80099a0 <L_shift>
 8009a50:	4544      	cmp	r4, r8
 8009a52:	d952      	bls.n	8009afa <__hexnan+0x10e>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f1a4 0904 	sub.w	r9, r4, #4
 8009a5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a5e:	461d      	mov	r5, r3
 8009a60:	464c      	mov	r4, r9
 8009a62:	f8cd b008 	str.w	fp, [sp, #8]
 8009a66:	9903      	ldr	r1, [sp, #12]
 8009a68:	e7d7      	b.n	8009a1a <__hexnan+0x2e>
 8009a6a:	2a29      	cmp	r2, #41	@ 0x29
 8009a6c:	d157      	bne.n	8009b1e <__hexnan+0x132>
 8009a6e:	3102      	adds	r1, #2
 8009a70:	f8ca 1000 	str.w	r1, [sl]
 8009a74:	f1bb 0f00 	cmp.w	fp, #0
 8009a78:	d051      	beq.n	8009b1e <__hexnan+0x132>
 8009a7a:	454c      	cmp	r4, r9
 8009a7c:	d206      	bcs.n	8009a8c <__hexnan+0xa0>
 8009a7e:	2d07      	cmp	r5, #7
 8009a80:	dc04      	bgt.n	8009a8c <__hexnan+0xa0>
 8009a82:	462a      	mov	r2, r5
 8009a84:	4649      	mov	r1, r9
 8009a86:	4620      	mov	r0, r4
 8009a88:	f7ff ff8a 	bl	80099a0 <L_shift>
 8009a8c:	4544      	cmp	r4, r8
 8009a8e:	d936      	bls.n	8009afe <__hexnan+0x112>
 8009a90:	4623      	mov	r3, r4
 8009a92:	f1a8 0204 	sub.w	r2, r8, #4
 8009a96:	f853 1b04 	ldr.w	r1, [r3], #4
 8009a9a:	429f      	cmp	r7, r3
 8009a9c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009aa0:	d2f9      	bcs.n	8009a96 <__hexnan+0xaa>
 8009aa2:	1b3b      	subs	r3, r7, r4
 8009aa4:	f023 0303 	bic.w	r3, r3, #3
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	3401      	adds	r4, #1
 8009aac:	3e03      	subs	r6, #3
 8009aae:	42b4      	cmp	r4, r6
 8009ab0:	bf88      	it	hi
 8009ab2:	2304      	movhi	r3, #4
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	4443      	add	r3, r8
 8009ab8:	f843 2b04 	str.w	r2, [r3], #4
 8009abc:	429f      	cmp	r7, r3
 8009abe:	d2fb      	bcs.n	8009ab8 <__hexnan+0xcc>
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	b91b      	cbnz	r3, 8009acc <__hexnan+0xe0>
 8009ac4:	4547      	cmp	r7, r8
 8009ac6:	d128      	bne.n	8009b1a <__hexnan+0x12e>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	2005      	movs	r0, #5
 8009ace:	b007      	add	sp, #28
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	3501      	adds	r5, #1
 8009ad6:	2d08      	cmp	r5, #8
 8009ad8:	f10b 0b01 	add.w	fp, fp, #1
 8009adc:	dd06      	ble.n	8009aec <__hexnan+0x100>
 8009ade:	4544      	cmp	r4, r8
 8009ae0:	d9c1      	bls.n	8009a66 <__hexnan+0x7a>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	2501      	movs	r5, #1
 8009ae6:	f844 3c04 	str.w	r3, [r4, #-4]
 8009aea:	3c04      	subs	r4, #4
 8009aec:	6822      	ldr	r2, [r4, #0]
 8009aee:	f000 000f 	and.w	r0, r0, #15
 8009af2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009af6:	6020      	str	r0, [r4, #0]
 8009af8:	e7b5      	b.n	8009a66 <__hexnan+0x7a>
 8009afa:	2508      	movs	r5, #8
 8009afc:	e7b3      	b.n	8009a66 <__hexnan+0x7a>
 8009afe:	9b01      	ldr	r3, [sp, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d0dd      	beq.n	8009ac0 <__hexnan+0xd4>
 8009b04:	f04f 32ff 	mov.w	r2, #4294967295
 8009b08:	f1c3 0320 	rsb	r3, r3, #32
 8009b0c:	40da      	lsrs	r2, r3
 8009b0e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009b12:	4013      	ands	r3, r2
 8009b14:	f846 3c04 	str.w	r3, [r6, #-4]
 8009b18:	e7d2      	b.n	8009ac0 <__hexnan+0xd4>
 8009b1a:	3f04      	subs	r7, #4
 8009b1c:	e7d0      	b.n	8009ac0 <__hexnan+0xd4>
 8009b1e:	2004      	movs	r0, #4
 8009b20:	e7d5      	b.n	8009ace <__hexnan+0xe2>

08009b22 <__ascii_mbtowc>:
 8009b22:	b082      	sub	sp, #8
 8009b24:	b901      	cbnz	r1, 8009b28 <__ascii_mbtowc+0x6>
 8009b26:	a901      	add	r1, sp, #4
 8009b28:	b142      	cbz	r2, 8009b3c <__ascii_mbtowc+0x1a>
 8009b2a:	b14b      	cbz	r3, 8009b40 <__ascii_mbtowc+0x1e>
 8009b2c:	7813      	ldrb	r3, [r2, #0]
 8009b2e:	600b      	str	r3, [r1, #0]
 8009b30:	7812      	ldrb	r2, [r2, #0]
 8009b32:	1e10      	subs	r0, r2, #0
 8009b34:	bf18      	it	ne
 8009b36:	2001      	movne	r0, #1
 8009b38:	b002      	add	sp, #8
 8009b3a:	4770      	bx	lr
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	e7fb      	b.n	8009b38 <__ascii_mbtowc+0x16>
 8009b40:	f06f 0001 	mvn.w	r0, #1
 8009b44:	e7f8      	b.n	8009b38 <__ascii_mbtowc+0x16>

08009b46 <_realloc_r>:
 8009b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	460d      	mov	r5, r1
 8009b50:	b921      	cbnz	r1, 8009b5c <_realloc_r+0x16>
 8009b52:	4611      	mov	r1, r2
 8009b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b58:	f7fd be80 	b.w	800785c <_malloc_r>
 8009b5c:	b92a      	cbnz	r2, 8009b6a <_realloc_r+0x24>
 8009b5e:	f7fd fe0b 	bl	8007778 <_free_r>
 8009b62:	4625      	mov	r5, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b6a:	f000 f840 	bl	8009bee <_malloc_usable_size_r>
 8009b6e:	4284      	cmp	r4, r0
 8009b70:	4606      	mov	r6, r0
 8009b72:	d802      	bhi.n	8009b7a <_realloc_r+0x34>
 8009b74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b78:	d8f4      	bhi.n	8009b64 <_realloc_r+0x1e>
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f7fd fe6d 	bl	800785c <_malloc_r>
 8009b82:	4680      	mov	r8, r0
 8009b84:	b908      	cbnz	r0, 8009b8a <_realloc_r+0x44>
 8009b86:	4645      	mov	r5, r8
 8009b88:	e7ec      	b.n	8009b64 <_realloc_r+0x1e>
 8009b8a:	42b4      	cmp	r4, r6
 8009b8c:	4622      	mov	r2, r4
 8009b8e:	4629      	mov	r1, r5
 8009b90:	bf28      	it	cs
 8009b92:	4632      	movcs	r2, r6
 8009b94:	f7ff fc46 	bl	8009424 <memcpy>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f7fd fdec 	bl	8007778 <_free_r>
 8009ba0:	e7f1      	b.n	8009b86 <_realloc_r+0x40>

08009ba2 <__ascii_wctomb>:
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	b141      	cbz	r1, 8009bba <__ascii_wctomb+0x18>
 8009ba8:	2aff      	cmp	r2, #255	@ 0xff
 8009baa:	d904      	bls.n	8009bb6 <__ascii_wctomb+0x14>
 8009bac:	228a      	movs	r2, #138	@ 0x8a
 8009bae:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	4770      	bx	lr
 8009bb6:	2001      	movs	r0, #1
 8009bb8:	700a      	strb	r2, [r1, #0]
 8009bba:	4770      	bx	lr

08009bbc <fiprintf>:
 8009bbc:	b40e      	push	{r1, r2, r3}
 8009bbe:	b503      	push	{r0, r1, lr}
 8009bc0:	4601      	mov	r1, r0
 8009bc2:	ab03      	add	r3, sp, #12
 8009bc4:	4805      	ldr	r0, [pc, #20]	@ (8009bdc <fiprintf+0x20>)
 8009bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	f000 f83d 	bl	8009c4c <_vfiprintf_r>
 8009bd2:	b002      	add	sp, #8
 8009bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bd8:	b003      	add	sp, #12
 8009bda:	4770      	bx	lr
 8009bdc:	20000020 	.word	0x20000020

08009be0 <abort>:
 8009be0:	2006      	movs	r0, #6
 8009be2:	b508      	push	{r3, lr}
 8009be4:	f000 fa06 	bl	8009ff4 <raise>
 8009be8:	2001      	movs	r0, #1
 8009bea:	f7f7 fd8e 	bl	800170a <_exit>

08009bee <_malloc_usable_size_r>:
 8009bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf2:	1f18      	subs	r0, r3, #4
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbc      	itt	lt
 8009bf8:	580b      	ldrlt	r3, [r1, r0]
 8009bfa:	18c0      	addlt	r0, r0, r3
 8009bfc:	4770      	bx	lr

08009bfe <__sfputc_r>:
 8009bfe:	6893      	ldr	r3, [r2, #8]
 8009c00:	b410      	push	{r4}
 8009c02:	3b01      	subs	r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	6093      	str	r3, [r2, #8]
 8009c08:	da07      	bge.n	8009c1a <__sfputc_r+0x1c>
 8009c0a:	6994      	ldr	r4, [r2, #24]
 8009c0c:	42a3      	cmp	r3, r4
 8009c0e:	db01      	blt.n	8009c14 <__sfputc_r+0x16>
 8009c10:	290a      	cmp	r1, #10
 8009c12:	d102      	bne.n	8009c1a <__sfputc_r+0x1c>
 8009c14:	bc10      	pop	{r4}
 8009c16:	f000 b931 	b.w	8009e7c <__swbuf_r>
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	1c58      	adds	r0, r3, #1
 8009c1e:	6010      	str	r0, [r2, #0]
 8009c20:	7019      	strb	r1, [r3, #0]
 8009c22:	4608      	mov	r0, r1
 8009c24:	bc10      	pop	{r4}
 8009c26:	4770      	bx	lr

08009c28 <__sfputs_r>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4614      	mov	r4, r2
 8009c30:	18d5      	adds	r5, r2, r3
 8009c32:	42ac      	cmp	r4, r5
 8009c34:	d101      	bne.n	8009c3a <__sfputs_r+0x12>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e007      	b.n	8009c4a <__sfputs_r+0x22>
 8009c3a:	463a      	mov	r2, r7
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c42:	f7ff ffdc 	bl	8009bfe <__sfputc_r>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d1f3      	bne.n	8009c32 <__sfputs_r+0xa>
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c4c <_vfiprintf_r>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	4614      	mov	r4, r2
 8009c54:	4698      	mov	r8, r3
 8009c56:	4606      	mov	r6, r0
 8009c58:	b09d      	sub	sp, #116	@ 0x74
 8009c5a:	b118      	cbz	r0, 8009c64 <_vfiprintf_r+0x18>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <_vfiprintf_r+0x18>
 8009c60:	f7fc fdfe 	bl	8006860 <__sinit>
 8009c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c66:	07d9      	lsls	r1, r3, #31
 8009c68:	d405      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c72:	f7fc ff0e 	bl	8006a92 <__retarget_lock_acquire_recursive>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	071b      	lsls	r3, r3, #28
 8009c7a:	d501      	bpl.n	8009c80 <_vfiprintf_r+0x34>
 8009c7c:	692b      	ldr	r3, [r5, #16]
 8009c7e:	b99b      	cbnz	r3, 8009ca8 <_vfiprintf_r+0x5c>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f938 	bl	8009ef8 <__swsetup_r>
 8009c88:	b170      	cbz	r0, 8009ca8 <_vfiprintf_r+0x5c>
 8009c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8c:	07dc      	lsls	r4, r3, #31
 8009c8e:	d504      	bpl.n	8009c9a <_vfiprintf_r+0x4e>
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	b01d      	add	sp, #116	@ 0x74
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	0598      	lsls	r0, r3, #22
 8009c9e:	d4f7      	bmi.n	8009c90 <_vfiprintf_r+0x44>
 8009ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ca2:	f7fc fef7 	bl	8006a94 <__retarget_lock_release_recursive>
 8009ca6:	e7f3      	b.n	8009c90 <_vfiprintf_r+0x44>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cac:	2320      	movs	r3, #32
 8009cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cb2:	2330      	movs	r3, #48	@ 0x30
 8009cb4:	f04f 0901 	mov.w	r9, #1
 8009cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cbc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009e68 <_vfiprintf_r+0x21c>
 8009cc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	469a      	mov	sl, r3
 8009cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ccc:	b10a      	cbz	r2, 8009cd2 <_vfiprintf_r+0x86>
 8009cce:	2a25      	cmp	r2, #37	@ 0x25
 8009cd0:	d1f9      	bne.n	8009cc6 <_vfiprintf_r+0x7a>
 8009cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd6:	d00b      	beq.n	8009cf0 <_vfiprintf_r+0xa4>
 8009cd8:	465b      	mov	r3, fp
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ffa2 	bl	8009c28 <__sfputs_r>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f000 80a7 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cec:	445a      	add	r2, fp
 8009cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 809f 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d04:	f10a 0a01 	add.w	sl, sl, #1
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	9307      	str	r3, [sp, #28]
 8009d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d12:	4654      	mov	r4, sl
 8009d14:	2205      	movs	r2, #5
 8009d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1a:	4853      	ldr	r0, [pc, #332]	@ (8009e68 <_vfiprintf_r+0x21c>)
 8009d1c:	f7fc febb 	bl	8006a96 <memchr>
 8009d20:	9a04      	ldr	r2, [sp, #16]
 8009d22:	b9d8      	cbnz	r0, 8009d5c <_vfiprintf_r+0x110>
 8009d24:	06d1      	lsls	r1, r2, #27
 8009d26:	bf44      	itt	mi
 8009d28:	2320      	movmi	r3, #32
 8009d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2e:	0713      	lsls	r3, r2, #28
 8009d30:	bf44      	itt	mi
 8009d32:	232b      	movmi	r3, #43	@ 0x2b
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d38:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d3e:	d015      	beq.n	8009d6c <_vfiprintf_r+0x120>
 8009d40:	4654      	mov	r4, sl
 8009d42:	2000      	movs	r0, #0
 8009d44:	f04f 0c0a 	mov.w	ip, #10
 8009d48:	9a07      	ldr	r2, [sp, #28]
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d50:	3b30      	subs	r3, #48	@ 0x30
 8009d52:	2b09      	cmp	r3, #9
 8009d54:	d94b      	bls.n	8009dee <_vfiprintf_r+0x1a2>
 8009d56:	b1b0      	cbz	r0, 8009d86 <_vfiprintf_r+0x13a>
 8009d58:	9207      	str	r2, [sp, #28]
 8009d5a:	e014      	b.n	8009d86 <_vfiprintf_r+0x13a>
 8009d5c:	eba0 0308 	sub.w	r3, r0, r8
 8009d60:	fa09 f303 	lsl.w	r3, r9, r3
 8009d64:	4313      	orrs	r3, r2
 8009d66:	46a2      	mov	sl, r4
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	e7d2      	b.n	8009d12 <_vfiprintf_r+0xc6>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	1d19      	adds	r1, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	9103      	str	r1, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfbb      	ittet	lt
 8009d78:	425b      	neglt	r3, r3
 8009d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7e:	9307      	strge	r3, [sp, #28]
 8009d80:	9307      	strlt	r3, [sp, #28]
 8009d82:	bfb8      	it	lt
 8009d84:	9204      	strlt	r2, [sp, #16]
 8009d86:	7823      	ldrb	r3, [r4, #0]
 8009d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d8a:	d10a      	bne.n	8009da2 <_vfiprintf_r+0x156>
 8009d8c:	7863      	ldrb	r3, [r4, #1]
 8009d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d90:	d132      	bne.n	8009df8 <_vfiprintf_r+0x1ac>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	3402      	adds	r4, #2
 8009d96:	1d1a      	adds	r2, r3, #4
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	9203      	str	r2, [sp, #12]
 8009d9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009e6c <_vfiprintf_r+0x220>
 8009da6:	2203      	movs	r2, #3
 8009da8:	4650      	mov	r0, sl
 8009daa:	7821      	ldrb	r1, [r4, #0]
 8009dac:	f7fc fe73 	bl	8006a96 <memchr>
 8009db0:	b138      	cbz	r0, 8009dc2 <_vfiprintf_r+0x176>
 8009db2:	2240      	movs	r2, #64	@ 0x40
 8009db4:	9b04      	ldr	r3, [sp, #16]
 8009db6:	eba0 000a 	sub.w	r0, r0, sl
 8009dba:	4082      	lsls	r2, r0
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc6:	2206      	movs	r2, #6
 8009dc8:	4829      	ldr	r0, [pc, #164]	@ (8009e70 <_vfiprintf_r+0x224>)
 8009dca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dce:	f7fc fe62 	bl	8006a96 <memchr>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d03f      	beq.n	8009e56 <_vfiprintf_r+0x20a>
 8009dd6:	4b27      	ldr	r3, [pc, #156]	@ (8009e74 <_vfiprintf_r+0x228>)
 8009dd8:	bb1b      	cbnz	r3, 8009e22 <_vfiprintf_r+0x1d6>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	3307      	adds	r3, #7
 8009dde:	f023 0307 	bic.w	r3, r3, #7
 8009de2:	3308      	adds	r3, #8
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de8:	443b      	add	r3, r7
 8009dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dec:	e76a      	b.n	8009cc4 <_vfiprintf_r+0x78>
 8009dee:	460c      	mov	r4, r1
 8009df0:	2001      	movs	r0, #1
 8009df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df6:	e7a8      	b.n	8009d4a <_vfiprintf_r+0xfe>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f04f 0c0a 	mov.w	ip, #10
 8009dfe:	4619      	mov	r1, r3
 8009e00:	3401      	adds	r4, #1
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	4620      	mov	r0, r4
 8009e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0a:	3a30      	subs	r2, #48	@ 0x30
 8009e0c:	2a09      	cmp	r2, #9
 8009e0e:	d903      	bls.n	8009e18 <_vfiprintf_r+0x1cc>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0c6      	beq.n	8009da2 <_vfiprintf_r+0x156>
 8009e14:	9105      	str	r1, [sp, #20]
 8009e16:	e7c4      	b.n	8009da2 <_vfiprintf_r+0x156>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e20:	e7f0      	b.n	8009e04 <_vfiprintf_r+0x1b8>
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462a      	mov	r2, r5
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4b13      	ldr	r3, [pc, #76]	@ (8009e78 <_vfiprintf_r+0x22c>)
 8009e2c:	a904      	add	r1, sp, #16
 8009e2e:	f7fb fec5 	bl	8005bbc <_printf_float>
 8009e32:	4607      	mov	r7, r0
 8009e34:	1c78      	adds	r0, r7, #1
 8009e36:	d1d6      	bne.n	8009de6 <_vfiprintf_r+0x19a>
 8009e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e46:	f7fc fe25 	bl	8006a94 <__retarget_lock_release_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	065b      	lsls	r3, r3, #25
 8009e4e:	f53f af1f 	bmi.w	8009c90 <_vfiprintf_r+0x44>
 8009e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e54:	e71e      	b.n	8009c94 <_vfiprintf_r+0x48>
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	4b06      	ldr	r3, [pc, #24]	@ (8009e78 <_vfiprintf_r+0x22c>)
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	f7fc f949 	bl	80060f8 <_printf_i>
 8009e66:	e7e4      	b.n	8009e32 <_vfiprintf_r+0x1e6>
 8009e68:	0800a337 	.word	0x0800a337
 8009e6c:	0800a33d 	.word	0x0800a33d
 8009e70:	0800a341 	.word	0x0800a341
 8009e74:	08005bbd 	.word	0x08005bbd
 8009e78:	08009c29 	.word	0x08009c29

08009e7c <__swbuf_r>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	460e      	mov	r6, r1
 8009e80:	4614      	mov	r4, r2
 8009e82:	4605      	mov	r5, r0
 8009e84:	b118      	cbz	r0, 8009e8e <__swbuf_r+0x12>
 8009e86:	6a03      	ldr	r3, [r0, #32]
 8009e88:	b90b      	cbnz	r3, 8009e8e <__swbuf_r+0x12>
 8009e8a:	f7fc fce9 	bl	8006860 <__sinit>
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d501      	bpl.n	8009e9c <__swbuf_r+0x20>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b943      	cbnz	r3, 8009eae <__swbuf_r+0x32>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f82a 	bl	8009ef8 <__swsetup_r>
 8009ea4:	b118      	cbz	r0, 8009eae <__swbuf_r+0x32>
 8009ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8009eaa:	4638      	mov	r0, r7
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	b2f6      	uxtb	r6, r6
 8009eb4:	1a98      	subs	r0, r3, r2
 8009eb6:	6963      	ldr	r3, [r4, #20]
 8009eb8:	4637      	mov	r7, r6
 8009eba:	4283      	cmp	r3, r0
 8009ebc:	dc05      	bgt.n	8009eca <__swbuf_r+0x4e>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7ff fa4b 	bl	800935c <_fflush_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1ed      	bne.n	8009ea6 <__swbuf_r+0x2a>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	60a3      	str	r3, [r4, #8]
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	701e      	strb	r6, [r3, #0]
 8009ed8:	6962      	ldr	r2, [r4, #20]
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d004      	beq.n	8009eea <__swbuf_r+0x6e>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	07db      	lsls	r3, r3, #31
 8009ee4:	d5e1      	bpl.n	8009eaa <__swbuf_r+0x2e>
 8009ee6:	2e0a      	cmp	r6, #10
 8009ee8:	d1df      	bne.n	8009eaa <__swbuf_r+0x2e>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7ff fa35 	bl	800935c <_fflush_r>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0d9      	beq.n	8009eaa <__swbuf_r+0x2e>
 8009ef6:	e7d6      	b.n	8009ea6 <__swbuf_r+0x2a>

08009ef8 <__swsetup_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4b29      	ldr	r3, [pc, #164]	@ (8009fa0 <__swsetup_r+0xa8>)
 8009efc:	4605      	mov	r5, r0
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	460c      	mov	r4, r1
 8009f02:	b118      	cbz	r0, 8009f0c <__swsetup_r+0x14>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <__swsetup_r+0x14>
 8009f08:	f7fc fcaa 	bl	8006860 <__sinit>
 8009f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f10:	0719      	lsls	r1, r3, #28
 8009f12:	d422      	bmi.n	8009f5a <__swsetup_r+0x62>
 8009f14:	06da      	lsls	r2, r3, #27
 8009f16:	d407      	bmi.n	8009f28 <__swsetup_r+0x30>
 8009f18:	2209      	movs	r2, #9
 8009f1a:	602a      	str	r2, [r5, #0]
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	e033      	b.n	8009f90 <__swsetup_r+0x98>
 8009f28:	0758      	lsls	r0, r3, #29
 8009f2a:	d512      	bpl.n	8009f52 <__swsetup_r+0x5a>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f2e:	b141      	cbz	r1, 8009f42 <__swsetup_r+0x4a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__swsetup_r+0x46>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7fd fc1d 	bl	8007778 <_free_r>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <__swsetup_r+0x7a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f68:	d003      	beq.n	8009f72 <__swsetup_r+0x7a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 f882 	bl	800a076 <__smakebuf_r>
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	f013 0201 	ands.w	r2, r3, #1
 8009f7a:	d00a      	beq.n	8009f92 <__swsetup_r+0x9a>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	60a2      	str	r2, [r4, #8]
 8009f80:	6962      	ldr	r2, [r4, #20]
 8009f82:	4252      	negs	r2, r2
 8009f84:	61a2      	str	r2, [r4, #24]
 8009f86:	6922      	ldr	r2, [r4, #16]
 8009f88:	b942      	cbnz	r2, 8009f9c <__swsetup_r+0xa4>
 8009f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f8e:	d1c5      	bne.n	8009f1c <__swsetup_r+0x24>
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	0799      	lsls	r1, r3, #30
 8009f94:	bf58      	it	pl
 8009f96:	6962      	ldrpl	r2, [r4, #20]
 8009f98:	60a2      	str	r2, [r4, #8]
 8009f9a:	e7f4      	b.n	8009f86 <__swsetup_r+0x8e>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e7f7      	b.n	8009f90 <__swsetup_r+0x98>
 8009fa0:	20000020 	.word	0x20000020

08009fa4 <_raise_r>:
 8009fa4:	291f      	cmp	r1, #31
 8009fa6:	b538      	push	{r3, r4, r5, lr}
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	d904      	bls.n	8009fb8 <_raise_r+0x14>
 8009fae:	2316      	movs	r3, #22
 8009fb0:	6003      	str	r3, [r0, #0]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fba:	b112      	cbz	r2, 8009fc2 <_raise_r+0x1e>
 8009fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fc0:	b94b      	cbnz	r3, 8009fd6 <_raise_r+0x32>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f830 	bl	800a028 <_getpid_r>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4601      	mov	r1, r0
 8009fcc:	4628      	mov	r0, r5
 8009fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd2:	f000 b817 	b.w	800a004 <_kill_r>
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d00a      	beq.n	8009ff0 <_raise_r+0x4c>
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	d103      	bne.n	8009fe6 <_raise_r+0x42>
 8009fde:	2316      	movs	r3, #22
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7e7      	b.n	8009fb6 <_raise_r+0x12>
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fee:	4798      	blx	r3
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7e0      	b.n	8009fb6 <_raise_r+0x12>

08009ff4 <raise>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	@ (800a000 <raise+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f7ff bfd3 	b.w	8009fa4 <_raise_r>
 8009ffe:	bf00      	nop
 800a000:	20000020 	.word	0x20000020

0800a004 <_kill_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	2300      	movs	r3, #0
 800a008:	4d06      	ldr	r5, [pc, #24]	@ (800a024 <_kill_r+0x20>)
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f7 fb6a 	bl	80016ea <_kill>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_kill_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_kill_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	200003e0 	.word	0x200003e0

0800a028 <_getpid_r>:
 800a028:	f7f7 bb58 	b.w	80016dc <_getpid>

0800a02c <__swhatbuf_r>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	460c      	mov	r4, r1
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	4615      	mov	r5, r2
 800a036:	2900      	cmp	r1, #0
 800a038:	461e      	mov	r6, r3
 800a03a:	b096      	sub	sp, #88	@ 0x58
 800a03c:	da0c      	bge.n	800a058 <__swhatbuf_r+0x2c>
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	2100      	movs	r1, #0
 800a042:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a046:	bf14      	ite	ne
 800a048:	2340      	movne	r3, #64	@ 0x40
 800a04a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a04e:	2000      	movs	r0, #0
 800a050:	6031      	str	r1, [r6, #0]
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	b016      	add	sp, #88	@ 0x58
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	466a      	mov	r2, sp
 800a05a:	f000 f849 	bl	800a0f0 <_fstat_r>
 800a05e:	2800      	cmp	r0, #0
 800a060:	dbed      	blt.n	800a03e <__swhatbuf_r+0x12>
 800a062:	9901      	ldr	r1, [sp, #4]
 800a064:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a068:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a06c:	4259      	negs	r1, r3
 800a06e:	4159      	adcs	r1, r3
 800a070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a074:	e7eb      	b.n	800a04e <__swhatbuf_r+0x22>

0800a076 <__smakebuf_r>:
 800a076:	898b      	ldrh	r3, [r1, #12]
 800a078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a07a:	079d      	lsls	r5, r3, #30
 800a07c:	4606      	mov	r6, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	d507      	bpl.n	800a092 <__smakebuf_r+0x1c>
 800a082:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	2301      	movs	r3, #1
 800a08c:	6163      	str	r3, [r4, #20]
 800a08e:	b003      	add	sp, #12
 800a090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a092:	466a      	mov	r2, sp
 800a094:	ab01      	add	r3, sp, #4
 800a096:	f7ff ffc9 	bl	800a02c <__swhatbuf_r>
 800a09a:	9f00      	ldr	r7, [sp, #0]
 800a09c:	4605      	mov	r5, r0
 800a09e:	4639      	mov	r1, r7
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7fd fbdb 	bl	800785c <_malloc_r>
 800a0a6:	b948      	cbnz	r0, 800a0bc <__smakebuf_r+0x46>
 800a0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ac:	059a      	lsls	r2, r3, #22
 800a0ae:	d4ee      	bmi.n	800a08e <__smakebuf_r+0x18>
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	f043 0302 	orr.w	r3, r3, #2
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	e7e2      	b.n	800a082 <__smakebuf_r+0xc>
 800a0bc:	89a3      	ldrh	r3, [r4, #12]
 800a0be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	6020      	str	r0, [r4, #0]
 800a0cc:	b15b      	cbz	r3, 800a0e6 <__smakebuf_r+0x70>
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d4:	f000 f81e 	bl	800a114 <_isatty_r>
 800a0d8:	b128      	cbz	r0, 800a0e6 <__smakebuf_r+0x70>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f023 0303 	bic.w	r3, r3, #3
 800a0e0:	f043 0301 	orr.w	r3, r3, #1
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	431d      	orrs	r5, r3
 800a0ea:	81a5      	strh	r5, [r4, #12]
 800a0ec:	e7cf      	b.n	800a08e <__smakebuf_r+0x18>
	...

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	4d06      	ldr	r5, [pc, #24]	@ (800a110 <_fstat_r+0x20>)
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f7 fb53 	bl	80017a8 <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	200003e0 	.word	0x200003e0

0800a114 <_isatty_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	2300      	movs	r3, #0
 800a118:	4d05      	ldr	r5, [pc, #20]	@ (800a130 <_isatty_r+0x1c>)
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f7 fb51 	bl	80017c6 <_isatty>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_isatty_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_isatty_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	200003e0 	.word	0x200003e0

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
