
STM32_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a270  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a5c  0800a380  0800a380  0000b380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800addc  0800addc  0000c1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800addc  0800addc  0000bddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ade4  0800ade4  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ade4  0800ade4  0000bde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ade8  0800ade8  0000bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800adec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  200001dc  0800afc8  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000878  0800afc8  0000c878  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c15e  00000000  00000000  0000c205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e3  00000000  00000000  00018363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0001a748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f7  00000000  00000000  0001b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bf5  00000000  00000000  0001bbdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbe3  00000000  00000000  000347d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000871f5  00000000  00000000  000443b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb5ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b0  00000000  00000000  000cb5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000cf9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a368 	.word	0x0800a368

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a368 	.word	0x0800a368

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <AHT20_Init>:
 */
//状态机
volatile  AHT20_State AHT20_STATE = FREE;
static uint8_t readBuffer[6] = {0};
void AHT20_Init()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af02      	add	r7, sp, #8
    AHT20_STATE=INIT;
 8001096:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <AHT20_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  uint8_t readBuffer;
  HAL_Delay(40);
 800109c:	2028      	movs	r0, #40	@ 0x28
 800109e:	f001 f87d 	bl	800219c <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, AHT20_ADDRESS, &readBuffer, 1, 1000);
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2170      	movs	r1, #112	@ 0x70
 80010ae:	4812      	ldr	r0, [pc, #72]	@ (80010f8 <AHT20_Init+0x68>)
 80010b0:	f001 fe06 	bl	8002cc0 <HAL_I2C_Master_Receive>
  if ((readBuffer & 0x08) == 0x00)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d113      	bne.n	80010e6 <AHT20_Init+0x56>
  {
    uint8_t sendBuffer[3] = {0xBE, 0x08, 0x00};
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <AHT20_Init+0x6c>)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	8019      	strh	r1, [r3, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	0c12      	lsrs	r2, r2, #16
 80010cc:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, AHT20_ADDRESS, sendBuffer, 3, 1000);
 80010ce:	1d3a      	adds	r2, r7, #4
 80010d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2303      	movs	r3, #3
 80010d8:	2170      	movs	r1, #112	@ 0x70
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <AHT20_Init+0x68>)
 80010dc:	f001 fcf2 	bl	8002ac4 <HAL_I2C_Master_Transmit>
      HAL_Delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f001 f85b 	bl	800219c <HAL_Delay>
  }
    AHT20_STATE=FREE;
 80010e6:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <AHT20_Init+0x64>)
 80010e8:	2206      	movs	r2, #6
 80010ea:	701a      	strb	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000200 	.word	0x20000200
 80010fc:	0800a380 	.word	0x0800a380

08001100 <AHT20_Measure>:
 * @param  Temperature: 存储获取到的温度
 * @param  Humidity: 存储获取到的湿度
 */

void AHT20_Measure()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    AHT20_STATE=MEASURING;
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <AHT20_Measure+0x20>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
    static uint8_t sendBuffer[3] = {0xAC, 0x33, 0x00};
    //中断发送函数不会等待，有可能还没发送完成sendBuffer就已经被释放了，需要让它变成静态的避免发送错误数据
    HAL_I2C_Master_Transmit_IT(&hi2c1, AHT20_ADDRESS, sendBuffer, 3);
 800110a:	2303      	movs	r3, #3
 800110c:	4a05      	ldr	r2, [pc, #20]	@ (8001124 <AHT20_Measure+0x24>)
 800110e:	2170      	movs	r1, #112	@ 0x70
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <AHT20_Measure+0x28>)
 8001112:	f002 f841 	bl	8003198 <HAL_I2C_Master_Transmit_IT>
    HAL_Delay(75);
 8001116:	204b      	movs	r0, #75	@ 0x4b
 8001118:	f001 f840 	bl	800219c <HAL_Delay>

}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004
 8001128:	20000200 	.word	0x20000200

0800112c <AHT20_Get>:

void AHT20_Get()
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    if(AHT20_STATE==MEASURE_DONE){
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <AHT20_Get+0x24>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d108      	bne.n	800114c <AHT20_Get+0x20>
        AHT20_STATE=GETTING;
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <AHT20_Get+0x24>)
 800113c:	2203      	movs	r2, #3
 800113e:	701a      	strb	r2, [r3, #0]
        HAL_I2C_Master_Receive_IT(&hi2c1, AHT20_ADDRESS, readBuffer, 6);
 8001140:	2306      	movs	r3, #6
 8001142:	4a04      	ldr	r2, [pc, #16]	@ (8001154 <AHT20_Get+0x28>)
 8001144:	2170      	movs	r1, #112	@ 0x70
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <AHT20_Get+0x2c>)
 8001148:	f002 f8c6 	bl	80032d8 <HAL_I2C_Master_Receive_IT>
    }


}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	200001f8 	.word	0x200001f8
 8001158:	20000200 	.word	0x20000200

0800115c <AHT20_FIGURE>:
void AHT20_FIGURE(float *Temperature, float *Humidity)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	if (AHT20_STATE==GET_DONE) {
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <AHT20_FIGURE+0xb8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b04      	cmp	r3, #4
 800116e:	d14d      	bne.n	800120c <AHT20_FIGURE+0xb0>

	        if ((readBuffer[0] & 0x80) == 0x00) {
 8001170:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <AHT20_FIGURE+0xbc>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	db45      	blt.n	8001206 <AHT20_FIGURE+0xaa>
	            uint32_t data = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
	            data = ((uint32_t) readBuffer[3] >> 4) + ((uint32_t) readBuffer[2] << 4) + ((uint32_t) readBuffer[1] << 12);
 800117e:	4b26      	ldr	r3, [pc, #152]	@ (8001218 <AHT20_FIGURE+0xbc>)
 8001180:	78db      	ldrb	r3, [r3, #3]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	b2db      	uxtb	r3, r3
 8001186:	461a      	mov	r2, r3
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <AHT20_FIGURE+0xbc>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	441a      	add	r2, r3
 8001190:	4b21      	ldr	r3, [pc, #132]	@ (8001218 <AHT20_FIGURE+0xbc>)
 8001192:	785b      	ldrb	r3, [r3, #1]
 8001194:	031b      	lsls	r3, r3, #12
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
	            *Humidity = data * 100.0f / (1 << 20);
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f7ff fd9a 	bl	8000cd4 <__aeabi_ui2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	491e      	ldr	r1, [pc, #120]	@ (800121c <AHT20_FIGURE+0xc0>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fded 	bl	8000d84 <__aeabi_fmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fe9b 	bl	8000eec <__aeabi_fdiv>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	601a      	str	r2, [r3, #0]

	            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <AHT20_FIGURE+0xbc>)
 80011c0:	78db      	ldrb	r3, [r3, #3]
 80011c2:	041b      	lsls	r3, r3, #16
 80011c4:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 80011c8:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <AHT20_FIGURE+0xbc>)
 80011ca:	791b      	ldrb	r3, [r3, #4]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	4413      	add	r3, r2
	                   (uint32_t) readBuffer[5];
 80011d0:	4a11      	ldr	r2, [pc, #68]	@ (8001218 <AHT20_FIGURE+0xbc>)
 80011d2:	7952      	ldrb	r2, [r2, #5]
	            data = (((uint32_t) readBuffer[3] & 0x0F) << 16) + ((uint32_t) readBuffer[4] << 8) +
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
	            *Temperature = data * 200.0f / (1 << 20) - 50;
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fd7b 	bl	8000cd4 <__aeabi_ui2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	490f      	ldr	r1, [pc, #60]	@ (8001220 <AHT20_FIGURE+0xc4>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fdce 	bl	8000d84 <__aeabi_fmul>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fe7c 	bl	8000eec <__aeabi_fdiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	490b      	ldr	r1, [pc, #44]	@ (8001224 <AHT20_FIGURE+0xc8>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fcb9 	bl	8000b70 <__aeabi_fsub>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
	        }
	        AHT20_STATE=READY;
 8001206:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <AHT20_FIGURE+0xb8>)
 8001208:	2205      	movs	r2, #5
 800120a:	701a      	strb	r2, [r3, #0]
	    }
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000000 	.word	0x20000000
 8001218:	200001f8 	.word	0x200001f8
 800121c:	42c80000 	.word	0x42c80000
 8001220:	43480000 	.word	0x43480000
 8001224:	42480000 	.word	0x42480000

08001228 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d108      	bne.n	800124a <HAL_I2C_MasterTxCpltCallback+0x22>
        if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 8001238:	4806      	ldr	r0, [pc, #24]	@ (8001254 <HAL_I2C_MasterTxCpltCallback+0x2c>)
 800123a:	f002 fab2 	bl	80037a2 <HAL_I2C_GetState>
 800123e:	4603      	mov	r3, r0
 8001240:	2b20      	cmp	r3, #32
 8001242:	d102      	bne.n	800124a <HAL_I2C_MasterTxCpltCallback+0x22>
        AHT20_STATE=MEASURE_DONE;
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <HAL_I2C_MasterTxCpltCallback+0x30>)
 8001246:	2202      	movs	r2, #2
 8001248:	701a      	strb	r2, [r3, #0]
    }

}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000200 	.word	0x20000200
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    if (hi2c==&hi2c1){
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d108      	bne.n	800127e <HAL_I2C_MasterRxCpltCallback+0x22>
        if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 800126c:	4806      	ldr	r0, [pc, #24]	@ (8001288 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 800126e:	f002 fa98 	bl	80037a2 <HAL_I2C_GetState>
 8001272:	4603      	mov	r3, r0
 8001274:	2b20      	cmp	r3, #32
 8001276:	d102      	bne.n	800127e <HAL_I2C_MasterRxCpltCallback+0x22>
        AHT20_STATE=GET_DONE;
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_I2C_MasterRxCpltCallback+0x30>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
    }

}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000200 	.word	0x20000200
 800128c:	20000000 	.word	0x20000000

08001290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_GPIO_Init+0x58>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4a13      	ldr	r2, [pc, #76]	@ (80012e8 <MX_GPIO_Init+0x58>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6193      	str	r3, [r2, #24]
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	4a0d      	ldr	r2, [pc, #52]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6193      	str	r3, [r2, #24]
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	4a07      	ldr	r2, [pc, #28]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6193      	str	r3, [r2, #24]
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <MX_GPIO_Init+0x58>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	@ (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_I2C1_Init+0x50>)
 800132a:	f001 fa73 	bl	8002814 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f921 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000200 	.word	0x20000200
 8001340:	40005400 	.word	0x40005400
 8001344:	00061a80 	.word	0x00061a80

08001348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_I2C_MspInit+0x80>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d12b      	bne.n	80013c0 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001380:	23c0      	movs	r3, #192	@ 0xc0
 8001382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001384:	2312      	movs	r3, #18
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4619      	mov	r1, r3
 8001392:	480f      	ldr	r0, [pc, #60]	@ (80013d0 <HAL_I2C_MspInit+0x88>)
 8001394:	f001 f8ba 	bl	800250c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 800139e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013a2:	61d3      	str	r3, [r2, #28]
 80013a4:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_I2C_MspInit+0x84>)
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	201f      	movs	r0, #31
 80013b6:	f000 ffec 	bl	8002392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013ba:	201f      	movs	r0, #31
 80013bc:	f001 f805 	bl	80023ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40005400 	.word	0x40005400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b096      	sub	sp, #88	@ 0x58
 80013d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f000 fe7d 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f887 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f7ff ff55 	bl	8001290 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013e6:	f7ff ff81 	bl	80012ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013ea:	f000 fddb 	bl	8001fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //延迟上电
  HAL_Delay(20);
 80013ee:	2014      	movs	r0, #20
 80013f0:	f000 fed4 	bl	800219c <HAL_Delay>
  OLED_Init();
 80013f4:	f000 f8f0 	bl	80015d8 <OLED_Init>
    AHT20_Init();                // 初始化 AHT20
 80013f8:	f7ff fe4a 	bl	8001090 <AHT20_Init>
    float temperature, humidity; // 温度和湿度变量
    char message_T[30];            // 要发送的字符串T
    char message_H[30];            // 要发送的字符串TH
    //初始化OLED成功
    for (int i = 0; i < 32; ++i) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001400:	e018      	b.n	8001434 <main+0x60>

        OLED_Clean();
 8001402:	f000 f97f 	bl	8001704 <OLED_Clean>
        OLED_DrawCircle(64,32,4*i,OLED_COLOR_NORMAL);
 8001406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001408:	b2db      	uxtb	r3, r3
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	b2da      	uxtb	r2, r3
 800140e:	2300      	movs	r3, #0
 8001410:	2120      	movs	r1, #32
 8001412:	2040      	movs	r0, #64	@ 0x40
 8001414:	f000 fb63 	bl	8001ade <OLED_DrawCircle>
        OLED_DrawCircle(64,32,2*i,OLED_COLOR_NORMAL);
 8001418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800141a:	b2db      	uxtb	r3, r3
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	2300      	movs	r3, #0
 8001422:	2120      	movs	r1, #32
 8001424:	2040      	movs	r0, #64	@ 0x40
 8001426:	f000 fb5a 	bl	8001ade <OLED_DrawCircle>
        OLED_ShowFrame();
 800142a:	f000 f937 	bl	800169c <OLED_ShowFrame>
    for (int i = 0; i < 32; ++i) {
 800142e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001430:	3301      	adds	r3, #1
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001436:	2b1f      	cmp	r3, #31
 8001438:	dde3      	ble.n	8001402 <main+0x2e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      switch (AHT20_STATE) {
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <main+0x10c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b06      	cmp	r3, #6
 8001442:	d006      	beq.n	8001452 <main+0x7e>
 8001444:	2b06      	cmp	r3, #6
 8001446:	dc13      	bgt.n	8001470 <main+0x9c>
 8001448:	2b02      	cmp	r3, #2
 800144a:	d005      	beq.n	8001458 <main+0x84>
 800144c:	2b04      	cmp	r3, #4
 800144e:	d006      	beq.n	800145e <main+0x8a>
              break;
          case GET_DONE:
              AHT20_FIGURE(&temperature, &humidity);
              break;
          default:
              break;
 8001450:	e00e      	b.n	8001470 <main+0x9c>
              AHT20_Measure();
 8001452:	f7ff fe55 	bl	8001100 <AHT20_Measure>
              break;
 8001456:	e00c      	b.n	8001472 <main+0x9e>
              AHT20_Get();
 8001458:	f7ff fe68 	bl	800112c <AHT20_Get>
              break;
 800145c:	e009      	b.n	8001472 <main+0x9e>
              AHT20_FIGURE(&temperature, &humidity);
 800145e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001462:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe77 	bl	800115c <AHT20_FIGURE>
              break;
 800146e:	e000      	b.n	8001472 <main+0x9e>
              break;
 8001470:	bf00      	nop
      }
      if(AHT20_STATE==READY)
 8001472:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <main+0x10c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b05      	cmp	r3, #5
 800147a:	d1de      	bne.n	800143a <main+0x66>
      {
          sprintf(message_T,"T:%.1f",temperature);
 800147c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe ffd2 	bl	8000428 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800148c:	4915      	ldr	r1, [pc, #84]	@ (80014e4 <main+0x110>)
 800148e:	f005 fb37 	bl	8006b00 <siprintf>
          sprintf(message_H,"H:%.1f",humidity);
 8001492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001494:	4618      	mov	r0, r3
 8001496:	f7fe ffc7 	bl	8000428 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	1d38      	adds	r0, r7, #4
 80014a0:	4911      	ldr	r1, [pc, #68]	@ (80014e8 <main+0x114>)
 80014a2:	f005 fb2d 	bl	8006b00 <siprintf>
          OLED_Clean();
 80014a6:	f000 f92d 	bl	8001704 <OLED_Clean>
          OLED_PrintASCIIString(0,16,message_T,&afont16x8,OLED_COLOR_NORMAL);
 80014aa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80014ae:	2300      	movs	r3, #0
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <main+0x118>)
 80014b4:	2110      	movs	r1, #16
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 fc1c 	bl	8001cf4 <OLED_PrintASCIIString>
          OLED_PrintASCIIString(0,48,message_H,&afont16x8,OLED_COLOR_NORMAL);
 80014bc:	1d3a      	adds	r2, r7, #4
 80014be:	2300      	movs	r3, #0
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <main+0x118>)
 80014c4:	2130      	movs	r1, #48	@ 0x30
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 fc14 	bl	8001cf4 <OLED_PrintASCIIString>
          OLED_ShowFrame();
 80014cc:	f000 f8e6 	bl	800169c <OLED_ShowFrame>
          HAL_Delay(1000);
 80014d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014d4:	f000 fe62 	bl	800219c <HAL_Delay>
          AHT20_STATE = FREE;
 80014d8:	4b01      	ldr	r3, [pc, #4]	@ (80014e0 <main+0x10c>)
 80014da:	2206      	movs	r2, #6
 80014dc:	701a      	strb	r2, [r3, #0]
      switch (AHT20_STATE) {
 80014de:	e7ac      	b.n	800143a <main+0x66>
 80014e0:	20000000 	.word	0x20000000
 80014e4:	0800a384 	.word	0x0800a384
 80014e8:	0800a38c 	.word	0x0800a38c
 80014ec:	0800a984 	.word	0x0800a984

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b090      	sub	sp, #64	@ 0x40
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0318 	add.w	r3, r7, #24
 80014fa:	2228      	movs	r2, #40	@ 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fb63 	bl	8006bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001516:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800151a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001524:	2302      	movs	r3, #2
 8001526:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001528:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800152e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001534:	f107 0318 	add.w	r3, r7, #24
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fecd 	bl	80052d8 <HAL_RCC_OscConfig>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001544:	f000 f819 	bl	800157a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001548:	230f      	movs	r3, #15
 800154a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800154c:	2302      	movs	r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001554:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001558:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2102      	movs	r1, #2
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f93a 	bl	80057dc <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800156e:	f000 f804 	bl	800157a <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3740      	adds	r7, #64	@ 0x40
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800157e:	b672      	cpsid	i
}
 8001580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001582:	bf00      	nop
 8001584:	e7fd      	b.n	8001582 <Error_Handler+0x8>
	...

08001588 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af02      	add	r7, sp, #8
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	9200      	str	r2, [sp, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	217a      	movs	r1, #122	@ 0x7a
 80015a2:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <OLED_Send+0x28>)
 80015a4:	f001 fa8e 	bl	8002ac4 <HAL_I2C_Master_Transmit>
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000200 	.word	0x20000200

080015b4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <OLED_SendCmd+0x20>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80015c4:	2102      	movs	r1, #2
 80015c6:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <OLED_SendCmd+0x20>)
 80015c8:	f7ff ffde 	bl	8001588 <OLED_Send>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000654 	.word	0x20000654

080015d8 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80015dc:	20ae      	movs	r0, #174	@ 0xae
 80015de:	f7ff ffe9 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80015e2:	2002      	movs	r0, #2
 80015e4:	f7ff ffe6 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80015e8:	2010      	movs	r0, #16
 80015ea:	f7ff ffe3 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80015ee:	2040      	movs	r0, #64	@ 0x40
 80015f0:	f7ff ffe0 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80015f4:	20b0      	movs	r0, #176	@ 0xb0
 80015f6:	f7ff ffdd 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80015fa:	2081      	movs	r0, #129	@ 0x81
 80015fc:	f7ff ffda 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8001600:	20cf      	movs	r0, #207	@ 0xcf
 8001602:	f7ff ffd7 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8001606:	20a1      	movs	r0, #161	@ 0xa1
 8001608:	f7ff ffd4 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800160c:	20a6      	movs	r0, #166	@ 0xa6
 800160e:	f7ff ffd1 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8001612:	20a8      	movs	r0, #168	@ 0xa8
 8001614:	f7ff ffce 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8001618:	203f      	movs	r0, #63	@ 0x3f
 800161a:	f7ff ffcb 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800161e:	20ad      	movs	r0, #173	@ 0xad
 8001620:	f7ff ffc8 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8001624:	208b      	movs	r0, #139	@ 0x8b
 8001626:	f7ff ffc5 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800162a:	2033      	movs	r0, #51	@ 0x33
 800162c:	f7ff ffc2 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8001630:	20c8      	movs	r0, #200	@ 0xc8
 8001632:	f7ff ffbf 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8001636:	20d3      	movs	r0, #211	@ 0xd3
 8001638:	f7ff ffbc 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ffb9 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8001642:	20d5      	movs	r0, #213	@ 0xd5
 8001644:	f7ff ffb6 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8001648:	20c0      	movs	r0, #192	@ 0xc0
 800164a:	f7ff ffb3 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800164e:	20d9      	movs	r0, #217	@ 0xd9
 8001650:	f7ff ffb0 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8001654:	201f      	movs	r0, #31
 8001656:	f7ff ffad 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800165a:	20da      	movs	r0, #218	@ 0xda
 800165c:	f7ff ffaa 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001660:	2012      	movs	r0, #18
 8001662:	f7ff ffa7 	bl	80015b4 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 8001666:	20db      	movs	r0, #219	@ 0xdb
 8001668:	f7ff ffa4 	bl	80015b4 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 800166c:	2040      	movs	r0, #64	@ 0x40
 800166e:	f7ff ffa1 	bl	80015b4 <OLED_SendCmd>

  OLED_NewFrame();
 8001672:	f000 f807 	bl	8001684 <OLED_NewFrame>
  OLED_ShowFrame();
 8001676:	f000 f811 	bl	800169c <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800167a:	20af      	movs	r0, #175	@ 0xaf
 800167c:	f7ff ff9a 	bl	80015b4 <OLED_SendCmd>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001688:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168c:	2100      	movs	r1, #0
 800168e:	4802      	ldr	r0, [pc, #8]	@ (8001698 <OLED_NewFrame+0x14>)
 8001690:	f005 fa9b 	bl	8006bca <memset>
  
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000254 	.word	0x20000254

0800169c <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <OLED_ShowFrame+0x5c>)
 80016a4:	2240      	movs	r2, #64	@ 0x40
 80016a6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	e01b      	b.n	80016e6 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	3b50      	subs	r3, #80	@ 0x50
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff7d 	bl	80015b4 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80016ba:	2002      	movs	r0, #2
 80016bc:	f7ff ff7a 	bl	80015b4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80016c0:	2010      	movs	r0, #16
 80016c2:	f7ff ff77 	bl	80015b4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <OLED_ShowFrame+0x60>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	01db      	lsls	r3, r3, #7
 80016cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001700 <OLED_ShowFrame+0x64>)
 80016ce:	4413      	add	r3, r2
 80016d0:	2280      	movs	r2, #128	@ 0x80
 80016d2:	4619      	mov	r1, r3
 80016d4:	f005 fb07 	bl	8006ce6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80016d8:	2181      	movs	r1, #129	@ 0x81
 80016da:	4807      	ldr	r0, [pc, #28]	@ (80016f8 <OLED_ShowFrame+0x5c>)
 80016dc:	f7ff ff54 	bl	8001588 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	3301      	adds	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b07      	cmp	r3, #7
 80016ea:	d9e0      	bls.n	80016ae <OLED_ShowFrame+0x12>
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000658 	.word	0x20000658
 80016fc:	20000659 	.word	0x20000659
 8001700:	20000254 	.word	0x20000254

08001704 <OLED_Clean>:

//清屏
void OLED_Clean()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8001708:	f7ff ffbc 	bl	8001684 <OLED_NewFrame>
    OLED_ShowFrame();
 800170c:	f7ff ffc6 	bl	800169c <OLED_ShowFrame>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	460b      	mov	r3, r1
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	4613      	mov	r3, r2
 8001724:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db43      	blt.n	80017b6 <OLED_SetPixel+0xa2>
 800172e:	79bb      	ldrb	r3, [r7, #6]
 8001730:	2b3f      	cmp	r3, #63	@ 0x3f
 8001732:	d840      	bhi.n	80017b6 <OLED_SetPixel+0xa2>
  if (!color) {
 8001734:	797b      	ldrb	r3, [r7, #5]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d11d      	bne.n	8001776 <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	b2d8      	uxtb	r0, r3
 8001740:	4602      	mov	r2, r0
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	491e      	ldr	r1, [pc, #120]	@ (80017c0 <OLED_SetPixel+0xac>)
 8001746:	01d2      	lsls	r2, r2, #7
 8001748:	440a      	add	r2, r1
 800174a:	4413      	add	r3, r2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25a      	sxtb	r2, r3
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b259      	sxtb	r1, r3
 8001762:	4602      	mov	r2, r0
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	b2c8      	uxtb	r0, r1
 8001768:	4915      	ldr	r1, [pc, #84]	@ (80017c0 <OLED_SetPixel+0xac>)
 800176a:	01d2      	lsls	r2, r2, #7
 800176c:	440a      	add	r2, r1
 800176e:	4413      	add	r3, r2
 8001770:	4602      	mov	r2, r0
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e020      	b.n	80017b8 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 8001776:	79bb      	ldrb	r3, [r7, #6]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	b2d8      	uxtb	r0, r3
 800177c:	4602      	mov	r2, r0
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	490f      	ldr	r1, [pc, #60]	@ (80017c0 <OLED_SetPixel+0xac>)
 8001782:	01d2      	lsls	r2, r2, #7
 8001784:	440a      	add	r2, r1
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b25a      	sxtb	r2, r3
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	2101      	movs	r1, #1
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	b25b      	sxtb	r3, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	b25b      	sxtb	r3, r3
 800179e:	4013      	ands	r3, r2
 80017a0:	b259      	sxtb	r1, r3
 80017a2:	4602      	mov	r2, r0
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	b2c8      	uxtb	r0, r1
 80017a8:	4905      	ldr	r1, [pc, #20]	@ (80017c0 <OLED_SetPixel+0xac>)
 80017aa:	01d2      	lsls	r2, r2, #7
 80017ac:	440a      	add	r2, r1
 80017ae:	4413      	add	r3, r2
 80017b0:	4602      	mov	r2, r0
 80017b2:	701a      	strb	r2, [r3, #0]
 80017b4:	e000      	b.n	80017b8 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 80017b6:	bf00      	nop
  }
}
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	20000254 	.word	0x20000254

080017c4 <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 80017c4:	b490      	push	{r4, r7}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4604      	mov	r4, r0
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4623      	mov	r3, r4
 80017d4:	71fb      	strb	r3, [r7, #7]
 80017d6:	4603      	mov	r3, r0
 80017d8:	71bb      	strb	r3, [r7, #6]
 80017da:	460b      	mov	r3, r1
 80017dc:	717b      	strb	r3, [r7, #5]
 80017de:	4613      	mov	r3, r2
 80017e0:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b07      	cmp	r3, #7
 80017e6:	d85f      	bhi.n	80018a8 <OLED_SetByte_Fine+0xe4>
 80017e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db5b      	blt.n	80018a8 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 80017f0:	7d3b      	ldrb	r3, [r7, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <OLED_SetByte_Fine+0x38>
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80017fc:	7c3b      	ldrb	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	22ff      	movs	r2, #255	@ 0xff
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	b25a      	sxtb	r2, r3
 8001808:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800180c:	4313      	orrs	r3, r2
 800180e:	b25a      	sxtb	r2, r3
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	f1c3 0308 	rsb	r3, r3, #8
 8001816:	21ff      	movs	r1, #255	@ 0xff
 8001818:	fa41 f303 	asr.w	r3, r1, r3
 800181c:	b25b      	sxtb	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b25b      	sxtb	r3, r3
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b23      	ldr	r3, [pc, #140]	@ (80018b4 <OLED_SetByte_Fine+0xf0>)
 8001826:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	4922      	ldr	r1, [pc, #136]	@ (80018b8 <OLED_SetByte_Fine+0xf4>)
 800182e:	01d2      	lsls	r2, r2, #7
 8001830:	440a      	add	r2, r1
 8001832:	4413      	add	r3, r2
 8001834:	7818      	ldrb	r0, [r3, #0]
 8001836:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <OLED_SetByte_Fine+0xf0>)
 8001838:	7819      	ldrb	r1, [r3, #0]
 800183a:	79fa      	ldrb	r2, [r7, #7]
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	4001      	ands	r1, r0
 8001840:	b2c8      	uxtb	r0, r1
 8001842:	491d      	ldr	r1, [pc, #116]	@ (80018b8 <OLED_SetByte_Fine+0xf4>)
 8001844:	01d2      	lsls	r2, r2, #7
 8001846:	440a      	add	r2, r1
 8001848:	4413      	add	r3, r2
 800184a:	4602      	mov	r2, r0
 800184c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800184e:	7c3b      	ldrb	r3, [r7, #16]
 8001850:	3301      	adds	r3, #1
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	b25b      	sxtb	r3, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	b25a      	sxtb	r2, r3
 800185e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001862:	4013      	ands	r3, r2
 8001864:	b25a      	sxtb	r2, r3
 8001866:	793b      	ldrb	r3, [r7, #4]
 8001868:	f1c3 0308 	rsb	r3, r3, #8
 800186c:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8001870:	fa41 f303 	asr.w	r3, r1, r3
 8001874:	b25b      	sxtb	r3, r3
 8001876:	4013      	ands	r3, r2
 8001878:	b25b      	sxtb	r3, r3
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b0d      	ldr	r3, [pc, #52]	@ (80018b4 <OLED_SetByte_Fine+0xf0>)
 800187e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001880:	79fa      	ldrb	r2, [r7, #7]
 8001882:	79bb      	ldrb	r3, [r7, #6]
 8001884:	490c      	ldr	r1, [pc, #48]	@ (80018b8 <OLED_SetByte_Fine+0xf4>)
 8001886:	01d2      	lsls	r2, r2, #7
 8001888:	440a      	add	r2, r1
 800188a:	4413      	add	r3, r2
 800188c:	7818      	ldrb	r0, [r3, #0]
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <OLED_SetByte_Fine+0xf0>)
 8001890:	7819      	ldrb	r1, [r3, #0]
 8001892:	79fa      	ldrb	r2, [r7, #7]
 8001894:	79bb      	ldrb	r3, [r7, #6]
 8001896:	4301      	orrs	r1, r0
 8001898:	b2c8      	uxtb	r0, r1
 800189a:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <OLED_SetByte_Fine+0xf4>)
 800189c:	01d2      	lsls	r2, r2, #7
 800189e:	440a      	add	r2, r1
 80018a0:	4413      	add	r3, r2
 80018a2:	4602      	mov	r2, r0
 80018a4:	701a      	strb	r2, [r3, #0]
 80018a6:	e000      	b.n	80018aa <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80018a8:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc90      	pop	{r4, r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200006d9 	.word	0x200006d9
 80018b8:	20000254 	.word	0x20000254

080018bc <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80018bc:	b5b0      	push	{r4, r5, r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	4603      	mov	r3, r0
 80018d0:	71bb      	strb	r3, [r7, #6]
 80018d2:	460b      	mov	r3, r1
 80018d4:	717b      	strb	r3, [r7, #5]
 80018d6:	4613      	mov	r3, r2
 80018d8:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80018e0:	79bb      	ldrb	r3, [r7, #6]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 80018e8:	7bba      	ldrb	r2, [r7, #14]
 80018ea:	793b      	ldrb	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	dd29      	ble.n	8001946 <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80018f2:	797a      	ldrb	r2, [r7, #5]
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	7bbc      	ldrb	r4, [r7, #14]
 80018fe:	79f9      	ldrb	r1, [r7, #7]
 8001900:	7bf8      	ldrb	r0, [r7, #15]
 8001902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2307      	movs	r3, #7
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4623      	mov	r3, r4
 800190e:	f7ff ff59 	bl	80017c4 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	3301      	adds	r3, #1
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	797a      	ldrb	r2, [r7, #5]
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	f1c3 0308 	rsb	r3, r3, #8
 8001920:	fa42 f303 	asr.w	r3, r2, r3
 8001924:	b2dc      	uxtb	r4, r3
 8001926:	793a      	ldrb	r2, [r7, #4]
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	4413      	add	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b09      	subs	r3, #9
 8001930:	b2db      	uxtb	r3, r3
 8001932:	79f9      	ldrb	r1, [r7, #7]
 8001934:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001938:	9201      	str	r2, [sp, #4]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2300      	movs	r3, #0
 800193e:	4622      	mov	r2, r4
 8001940:	f7ff ff40 	bl	80017c4 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8001944:	e015      	b.n	8001972 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8001946:	797a      	ldrb	r2, [r7, #5]
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	b2dc      	uxtb	r4, r3
 8001950:	7bba      	ldrb	r2, [r7, #14]
 8001952:	793b      	ldrb	r3, [r7, #4]
 8001954:	4413      	add	r3, r2
 8001956:	b2db      	uxtb	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	7bbd      	ldrb	r5, [r7, #14]
 800195e:	79f9      	ldrb	r1, [r7, #7]
 8001960:	7bf8      	ldrb	r0, [r7, #15]
 8001962:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	462b      	mov	r3, r5
 800196c:	4622      	mov	r2, r4
 800196e:	f7ff ff29 	bl	80017c4 <OLED_SetByte_Fine>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bdb0      	pop	{r4, r5, r7, pc}

0800197a <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 800197a:	b590      	push	{r4, r7, lr}
 800197c:	b087      	sub	sp, #28
 800197e:	af02      	add	r7, sp, #8
 8001980:	4604      	mov	r4, r0
 8001982:	4608      	mov	r0, r1
 8001984:	4611      	mov	r1, r2
 8001986:	461a      	mov	r2, r3
 8001988:	4623      	mov	r3, r4
 800198a:	71fb      	strb	r3, [r7, #7]
 800198c:	4603      	mov	r3, r0
 800198e:	71bb      	strb	r3, [r7, #6]
 8001990:	460b      	mov	r3, r1
 8001992:	717b      	strb	r3, [r7, #5]
 8001994:	4613      	mov	r3, r2
 8001996:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 800199e:	79bb      	ldrb	r3, [r7, #6]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80019a6:	797a      	ldrb	r2, [r7, #5]
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	7bbc      	ldrb	r4, [r7, #14]
 80019b2:	79f9      	ldrb	r1, [r7, #7]
 80019b4:	7bf8      	ldrb	r0, [r7, #15]
 80019b6:	793b      	ldrb	r3, [r7, #4]
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	2307      	movs	r3, #7
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	f7ff ff00 	bl	80017c4 <OLED_SetByte_Fine>
  if (bit) {
 80019c4:	7bbb      	ldrb	r3, [r7, #14]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d014      	beq.n	80019f4 <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	3301      	adds	r3, #1
 80019ce:	b2d8      	uxtb	r0, r3
 80019d0:	797a      	ldrb	r2, [r7, #5]
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	f1c3 0308 	rsb	r3, r3, #8
 80019d8:	fa42 f303 	asr.w	r3, r2, r3
 80019dc:	b2dc      	uxtb	r4, r3
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	79f9      	ldrb	r1, [r7, #7]
 80019e6:	793a      	ldrb	r2, [r7, #4]
 80019e8:	9201      	str	r2, [sp, #4]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	4622      	mov	r2, r4
 80019f0:	f7ff fee8 	bl	80017c4 <OLED_SetByte_Fine>
  }
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd90      	pop	{r4, r7, pc}

080019fc <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af02      	add	r7, sp, #8
 8001a02:	603a      	str	r2, [r7, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	71bb      	strb	r3, [r7, #6]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001a12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e025      	b.n	8001a76 <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
 8001a2e:	e01b      	b.n	8001a68 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001a30:	79fa      	ldrb	r2, [r7, #7]
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	4413      	add	r3, r2
 8001a36:	b2d8      	uxtb	r0, r3
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	4413      	add	r3, r2
 8001a42:	b2dc      	uxtb	r4, r3
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	7979      	ldrb	r1, [r7, #5]
 8001a4a:	fb01 f303 	mul.w	r3, r1, r3
 8001a4e:	4413      	add	r3, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	781a      	ldrb	r2, [r3, #0]
 8001a58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	f7ff ff8c 	bl	800197a <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	3301      	adds	r3, #1
 8001a66:	73bb      	strb	r3, [r7, #14]
 8001a68:	7bba      	ldrb	r2, [r7, #14]
 8001a6a:	7b3b      	ldrb	r3, [r7, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d3df      	bcc.n	8001a30 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	3301      	adds	r3, #1
 8001a74:	73fb      	strb	r3, [r7, #15]
 8001a76:	7bfa      	ldrb	r2, [r7, #15]
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3d5      	bcc.n	8001a2a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d028      	beq.n	8001ad6 <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8001a84:	797b      	ldrb	r3, [r7, #5]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	7b3a      	ldrb	r2, [r7, #12]
 8001a8a:	b292      	uxth	r2, r2
 8001a8c:	fb02 f303 	mul.w	r3, r2, r3
 8001a90:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 8001a92:	2300      	movs	r3, #0
 8001a94:	737b      	strb	r3, [r7, #13]
 8001a96:	e01a      	b.n	8001ace <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001a98:	79fa      	ldrb	r2, [r7, #7]
 8001a9a:	7b7b      	ldrb	r3, [r7, #13]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	b2d8      	uxtb	r0, r3
 8001aa0:	7b3b      	ldrb	r3, [r7, #12]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2d9      	uxtb	r1, r3
 8001aac:	893a      	ldrh	r2, [r7, #8]
 8001aae:	7b7b      	ldrb	r3, [r7, #13]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	781a      	ldrb	r2, [r3, #0]
 8001aba:	7afc      	ldrb	r4, [r7, #11]
 8001abc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	f7ff fefa 	bl	80018bc <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8001ac8:	7b7b      	ldrb	r3, [r7, #13]
 8001aca:	3301      	adds	r3, #1
 8001acc:	737b      	strb	r3, [r7, #13]
 8001ace:	7b7a      	ldrb	r2, [r7, #13]
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d3e0      	bcc.n	8001a98 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd90      	pop	{r4, r7, pc}

08001ade <OLED_DrawCircle>:
 * @param y 圆心纵坐标
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color) {
 8001ade:	b590      	push	{r4, r7, lr}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	4608      	mov	r0, r1
 8001ae8:	4611      	mov	r1, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4623      	mov	r3, r4
 8001aee:	71fb      	strb	r3, [r7, #7]
 8001af0:	4603      	mov	r3, r0
 8001af2:	71bb      	strb	r3, [r7, #6]
 8001af4:	460b      	mov	r3, r1
 8001af6:	717b      	strb	r3, [r7, #5]
 8001af8:	4613      	mov	r3, r2
 8001afa:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 8001afc:	2300      	movs	r3, #0
 8001afe:	81fb      	strh	r3, [r7, #14]
 8001b00:	797b      	ldrb	r3, [r7, #5]
 8001b02:	81bb      	strh	r3, [r7, #12]
 8001b04:	797b      	ldrb	r3, [r7, #5]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f1c3 0303 	rsb	r3, r3, #3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	817b      	strh	r3, [r7, #10]
  while (a <= b) {
 8001b14:	e0b3      	b.n	8001c7e <OLED_DrawCircle+0x1a0>
    OLED_SetPixel(x - b, y - a, color);
 8001b16:	89bb      	ldrh	r3, [r7, #12]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	79fa      	ldrb	r2, [r7, #7]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b2d8      	uxtb	r0, r3
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	79ba      	ldrb	r2, [r7, #6]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	793a      	ldrb	r2, [r7, #4]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	f7ff fdf1 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8001b32:	89bb      	ldrh	r3, [r7, #12]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4413      	add	r3, r2
 8001b3a:	b2d8      	uxtb	r0, r3
 8001b3c:	89fb      	ldrh	r3, [r7, #14]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	79ba      	ldrb	r2, [r7, #6]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	793a      	ldrb	r2, [r7, #4]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7ff fde3 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8001b4e:	89fb      	ldrh	r3, [r7, #14]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	b2d8      	uxtb	r0, r3
 8001b58:	89bb      	ldrh	r3, [r7, #12]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	793a      	ldrb	r2, [r7, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff fdd5 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b2d8      	uxtb	r0, r3
 8001b74:	89fb      	ldrh	r3, [r7, #14]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	79ba      	ldrb	r2, [r7, #6]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	793a      	ldrb	r2, [r7, #4]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7ff fdc7 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8001b86:	89fb      	ldrh	r3, [r7, #14]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b2d8      	uxtb	r0, r3
 8001b90:	89bb      	ldrh	r3, [r7, #12]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	79ba      	ldrb	r2, [r7, #6]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	793a      	ldrb	r2, [r7, #4]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff fdb9 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 8001ba2:	89bb      	ldrh	r3, [r7, #12]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	4413      	add	r3, r2
 8001baa:	b2d8      	uxtb	r0, r3
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	79bb      	ldrb	r3, [r7, #6]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	793a      	ldrb	r2, [r7, #4]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff fdab 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	89bb      	ldrh	r3, [r7, #12]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	79ba      	ldrb	r2, [r7, #6]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	793a      	ldrb	r2, [r7, #4]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff fd9d 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 8001bda:	89fb      	ldrh	r3, [r7, #14]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	4413      	add	r3, r2
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	89bb      	ldrh	r3, [r7, #12]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	79bb      	ldrb	r3, [r7, #6]
 8001bea:	4413      	add	r3, r2
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	793a      	ldrb	r2, [r7, #4]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7ff fd8f 	bl	8001714 <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8001bf6:	89bb      	ldrh	r3, [r7, #12]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	b2d8      	uxtb	r0, r3
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	79bb      	ldrb	r3, [r7, #6]
 8001c06:	4413      	add	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	793a      	ldrb	r2, [r7, #4]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7ff fd81 	bl	8001714 <OLED_SetPixel>
    a++;
 8001c12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	81fb      	strh	r3, [r7, #14]
    if (di < 0) {
 8001c1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da09      	bge.n	8001c3a <OLED_DrawCircle+0x15c>
      di += 4 * a + 6;
 8001c26:	89fb      	ldrh	r3, [r7, #14]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	897b      	ldrh	r3, [r7, #10]
 8001c2e:	4413      	add	r3, r2
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3306      	adds	r3, #6
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	817b      	strh	r3, [r7, #10]
 8001c38:	e013      	b.n	8001c62 <OLED_DrawCircle+0x184>
    } else {
      di += 10 + 4 * (a - b);
 8001c3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	330a      	adds	r3, #10
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	817b      	strh	r3, [r7, #10]
      b--;
 8001c56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b2d8      	uxtb	r0, r3
 8001c6c:	89bb      	ldrh	r3, [r7, #12]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	4413      	add	r3, r2
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	793a      	ldrb	r2, [r7, #4]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7ff fd4b 	bl	8001714 <OLED_SetPixel>
  while (a <= b) {
 8001c7e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001c82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	f77f af45 	ble.w	8001b16 <OLED_DrawCircle+0x38>
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}

08001c96 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8001c96:	b5b0      	push	{r4, r5, r7, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af02      	add	r7, sp, #8
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	71bb      	strb	r3, [r7, #6]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	797b      	ldrb	r3, [r7, #5]
 8001cb0:	f1a3 0120 	sub.w	r1, r3, #32
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	3307      	adds	r3, #7
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	da00      	bge.n	8001cc0 <OLED_PrintASCIIChar+0x2a>
 8001cbe:	3307      	adds	r3, #7
 8001cc0:	10db      	asrs	r3, r3, #3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	785b      	ldrb	r3, [r3, #1]
 8001cc8:	fb00 f303 	mul.w	r3, r0, r3
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	18d4      	adds	r4, r2, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	785d      	ldrb	r5, [r3, #1]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	79b9      	ldrb	r1, [r7, #6]
 8001cdc:	79f8      	ldrb	r0, [r7, #7]
 8001cde:	7e3a      	ldrb	r2, [r7, #24]
 8001ce0:	9201      	str	r2, [sp, #4]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	462b      	mov	r3, r5
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	f7ff fe88 	bl	80019fc <OLED_SetBlock>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}

08001cf4 <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af02      	add	r7, sp, #8
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4603      	mov	r3, r0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	460b      	mov	r3, r1
 8001d04:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 8001d0a:	e011      	b.n	8001d30 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	7bb9      	ldrb	r1, [r7, #14]
 8001d12:	7df8      	ldrb	r0, [r7, #23]
 8001d14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f7ff ffbb 	bl	8001c96 <OLED_PrintASCIIChar>
    x0 += font->w;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	785a      	ldrb	r2, [r3, #1]
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	4413      	add	r3, r2
 8001d28:	75fb      	strb	r3, [r7, #23]
    str++;
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e9      	bne.n	8001d0c <OLED_PrintASCIIString+0x18>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6193      	str	r3, [r2, #24]
 8001d56:	4b12      	ldr	r3, [pc, #72]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_MspInit+0x5c>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <HAL_MspInit+0x60>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4a04      	ldr	r2, [pc, #16]	@ (8001da4 <HAL_MspInit+0x60>)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40010000 	.word	0x40010000

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <NMI_Handler+0x4>

08001db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <HardFault_Handler+0x4>

08001db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <MemManage_Handler+0x4>

08001dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df8:	f000 f9b4 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e04:	4802      	ldr	r0, [pc, #8]	@ (8001e10 <I2C1_EV_IRQHandler+0x10>)
 8001e06:	f001 fb0f 	bl	8003428 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000200 	.word	0x20000200

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_kill>:

int _kill(int pid, int sig)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e2c:	f004 ff20 	bl	8006c70 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2216      	movs	r2, #22
 8001e34:	601a      	str	r2, [r3, #0]
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_exit>:

void _exit (int status)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffe7 	bl	8001e22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <_exit+0x12>

08001e58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	e00a      	b.n	8001e80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6a:	f3af 8000 	nop.w
 8001e6e:	4601      	mov	r1, r0
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	60ba      	str	r2, [r7, #8]
 8001e76:	b2ca      	uxtb	r2, r1
 8001e78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dbf0      	blt.n	8001e6a <_read+0x12>
  }

  return len;
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b086      	sub	sp, #24
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e009      	b.n	8001eb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	dbf1      	blt.n	8001ea4 <_write+0x12>
  }
  return len;
 8001ec0:	687b      	ldr	r3, [r7, #4]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <_close>:

int _close(int file)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ef0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <_isatty>:

int _isatty(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bc80      	pop	{r7}
 8001f28:	4770      	bx	lr
	...

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	@ (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	@ (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f004 fe88 	bl	8006c70 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	@ (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20005000 	.word	0x20005000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	200006dc 	.word	0x200006dc
 8001f94:	20000878 	.word	0x20000878

08001f98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001faa:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <MX_USART2_UART_Init+0x50>)
 8001fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fae:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fca:	220c      	movs	r2, #12
 8001fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	@ (8001ff0 <MX_USART2_UART_Init+0x4c>)
 8001fdc:	f003 fd8c 	bl	8005af8 <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fe6:	f7ff fac8 	bl	800157a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200006e0 	.word	0x200006e0
 8001ff4:	40004400 	.word	0x40004400

08001ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0310 	add.w	r3, r7, #16
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1b      	ldr	r2, [pc, #108]	@ (8002080 <HAL_UART_MspInit+0x88>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12f      	bne.n	8002078 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 800201e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002022:	61d3      	str	r3, [r2, #28]
 8002024:	4b17      	ldr	r3, [pc, #92]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002030:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	4a13      	ldr	r2, [pc, #76]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6193      	str	r3, [r2, #24]
 800203c:	4b11      	ldr	r3, [pc, #68]	@ (8002084 <HAL_UART_MspInit+0x8c>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002048:	2304      	movs	r3, #4
 800204a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4619      	mov	r1, r3
 800205a:	480b      	ldr	r0, [pc, #44]	@ (8002088 <HAL_UART_MspInit+0x90>)
 800205c:	f000 fa56 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002060:	2308      	movs	r3, #8
 8002062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4619      	mov	r1, r3
 8002072:	4805      	ldr	r0, [pc, #20]	@ (8002088 <HAL_UART_MspInit+0x90>)
 8002074:	f000 fa4a 	bl	800250c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40004400 	.word	0x40004400
 8002084:	40021000 	.word	0x40021000
 8002088:	40010800 	.word	0x40010800

0800208c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800208c:	f7ff ff84 	bl	8001f98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002090:	480b      	ldr	r0, [pc, #44]	@ (80020c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002092:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002094:	4a0c      	ldr	r2, [pc, #48]	@ (80020c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002098:	e002      	b.n	80020a0 <LoopCopyDataInit>

0800209a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800209a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800209c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800209e:	3304      	adds	r3, #4

080020a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020a4:	d3f9      	bcc.n	800209a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020a6:	4a09      	ldr	r2, [pc, #36]	@ (80020cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80020a8:	4c09      	ldr	r4, [pc, #36]	@ (80020d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ac:	e001      	b.n	80020b2 <LoopFillZerobss>

080020ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b0:	3204      	adds	r2, #4

080020b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020b4:	d3fb      	bcc.n	80020ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020b6:	f004 fde1 	bl	8006c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ba:	f7ff f98b 	bl	80013d4 <main>
  bx lr
 80020be:	4770      	bx	lr
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80020c8:	0800adec 	.word	0x0800adec
  ldr r2, =_sbss
 80020cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80020d0:	20000878 	.word	0x20000878

080020d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC1_2_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_Init+0x28>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_Init+0x28>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 f947 	bl	800237c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	200f      	movs	r0, #15
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fe26 	bl	8001d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f95f 	bl	80023e6 <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 f927 	bl	8002392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000008 	.word	0x20000008
 800215c:	20000010 	.word	0x20000010
 8002160:	2000000c 	.word	0x2000000c

08002164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_IncTick+0x1c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_IncTick+0x20>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a03      	ldr	r2, [pc, #12]	@ (8002184 <HAL_IncTick+0x20>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr
 8002180:	20000010 	.word	0x20000010
 8002184:	20000728 	.word	0x20000728

08002188 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return uwTick;
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <HAL_GetTick+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000728 	.word	0x20000728

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fff0 	bl	8002188 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b6:	4b0a      	ldr	r3, [pc, #40]	@ (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffe0 	bl	8002188 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000010 	.word	0x20000010

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4906      	ldr	r1, [pc, #24]	@ (800227c <__NVIC_EnableIRQ+0x34>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	e000e100 	.word	0xe000e100

08002280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	6039      	str	r1, [r7, #0]
 800228a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002290:	2b00      	cmp	r3, #0
 8002292:	db0a      	blt.n	80022aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	b2da      	uxtb	r2, r3
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <__NVIC_SetPriority+0x4c>)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	440b      	add	r3, r1
 80022a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022a8:	e00a      	b.n	80022c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4908      	ldr	r1, [pc, #32]	@ (80022d0 <__NVIC_SetPriority+0x50>)
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3b04      	subs	r3, #4
 80022b8:	0112      	lsls	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	440b      	add	r3, r1
 80022be:	761a      	strb	r2, [r3, #24]
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b089      	sub	sp, #36	@ 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f1c3 0307 	rsb	r3, r3, #7
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	bf28      	it	cs
 80022f2:	2304      	movcs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3304      	adds	r3, #4
 80022fa:	2b06      	cmp	r3, #6
 80022fc:	d902      	bls.n	8002304 <NVIC_EncodePriority+0x30>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3b03      	subs	r3, #3
 8002302:	e000      	b.n	8002306 <NVIC_EncodePriority+0x32>
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002308:	f04f 32ff 	mov.w	r2, #4294967295
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	401a      	ands	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800231c:	f04f 31ff 	mov.w	r1, #4294967295
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	43d9      	mvns	r1, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	4313      	orrs	r3, r2
         );
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002348:	d301      	bcc.n	800234e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800234a:	2301      	movs	r3, #1
 800234c:	e00f      	b.n	800236e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800234e:	4a0a      	ldr	r2, [pc, #40]	@ (8002378 <SysTick_Config+0x40>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002356:	210f      	movs	r1, #15
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	f7ff ff90 	bl	8002280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <SysTick_Config+0x40>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002366:	4b04      	ldr	r3, [pc, #16]	@ (8002378 <SysTick_Config+0x40>)
 8002368:	2207      	movs	r2, #7
 800236a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	e000e010 	.word	0xe000e010

0800237c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff2d 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023a4:	f7ff ff42 	bl	800222c <__NVIC_GetPriorityGrouping>
 80023a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f7ff ff90 	bl	80022d4 <NVIC_EncodePriority>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff5f 	bl	8002280 <__NVIC_SetPriority>
}
 80023c2:	bf00      	nop
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff35 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffa2 	bl	8002338 <SysTick_Config>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2300      	movs	r3, #0
 800240a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d005      	beq.n	8002424 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2204      	movs	r2, #4
 800241c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e051      	b.n	80024c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 020e 	bic.w	r2, r2, #14
 8002432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0201 	bic.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <HAL_DMA_Abort_IT+0xd4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d029      	beq.n	80024a2 <HAL_DMA_Abort_IT+0xa2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_DMA_Abort_IT+0xd8>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d022      	beq.n	800249e <HAL_DMA_Abort_IT+0x9e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <HAL_DMA_Abort_IT+0xdc>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d01a      	beq.n	8002498 <HAL_DMA_Abort_IT+0x98>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <HAL_DMA_Abort_IT+0xe0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d012      	beq.n	8002492 <HAL_DMA_Abort_IT+0x92>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1c      	ldr	r2, [pc, #112]	@ (80024e4 <HAL_DMA_Abort_IT+0xe4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00a      	beq.n	800248c <HAL_DMA_Abort_IT+0x8c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1b      	ldr	r2, [pc, #108]	@ (80024e8 <HAL_DMA_Abort_IT+0xe8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d102      	bne.n	8002486 <HAL_DMA_Abort_IT+0x86>
 8002480:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002484:	e00e      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 8002486:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800248a:	e00b      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 800248c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002490:	e008      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 8002492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002496:	e005      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 8002498:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800249c:	e002      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 800249e:	2310      	movs	r3, #16
 80024a0:	e000      	b.n	80024a4 <HAL_DMA_Abort_IT+0xa4>
 80024a2:	2301      	movs	r3, #1
 80024a4:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_DMA_Abort_IT+0xec>)
 80024a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
    } 
  }
  return status;
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40020008 	.word	0x40020008
 80024d8:	4002001c 	.word	0x4002001c
 80024dc:	40020030 	.word	0x40020030
 80024e0:	40020044 	.word	0x40020044
 80024e4:	40020058 	.word	0x40020058
 80024e8:	4002006c 	.word	0x4002006c
 80024ec:	40020000 	.word	0x40020000

080024f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024fe:	b2db      	uxtb	r3, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b08b      	sub	sp, #44	@ 0x2c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002516:	2300      	movs	r3, #0
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800251e:	e169      	b.n	80027f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002520:	2201      	movs	r2, #1
 8002522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69fa      	ldr	r2, [r7, #28]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	429a      	cmp	r2, r3
 800253a:	f040 8158 	bne.w	80027ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4a9a      	ldr	r2, [pc, #616]	@ (80027ac <HAL_GPIO_Init+0x2a0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d05e      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002548:	4a98      	ldr	r2, [pc, #608]	@ (80027ac <HAL_GPIO_Init+0x2a0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d875      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800254e:	4a98      	ldr	r2, [pc, #608]	@ (80027b0 <HAL_GPIO_Init+0x2a4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d058      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002554:	4a96      	ldr	r2, [pc, #600]	@ (80027b0 <HAL_GPIO_Init+0x2a4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d86f      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800255a:	4a96      	ldr	r2, [pc, #600]	@ (80027b4 <HAL_GPIO_Init+0x2a8>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d052      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002560:	4a94      	ldr	r2, [pc, #592]	@ (80027b4 <HAL_GPIO_Init+0x2a8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d869      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002566:	4a94      	ldr	r2, [pc, #592]	@ (80027b8 <HAL_GPIO_Init+0x2ac>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d04c      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 800256c:	4a92      	ldr	r2, [pc, #584]	@ (80027b8 <HAL_GPIO_Init+0x2ac>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d863      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002572:	4a92      	ldr	r2, [pc, #584]	@ (80027bc <HAL_GPIO_Init+0x2b0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d046      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
 8002578:	4a90      	ldr	r2, [pc, #576]	@ (80027bc <HAL_GPIO_Init+0x2b0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d85d      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 800257e:	2b12      	cmp	r3, #18
 8002580:	d82a      	bhi.n	80025d8 <HAL_GPIO_Init+0xcc>
 8002582:	2b12      	cmp	r3, #18
 8002584:	d859      	bhi.n	800263a <HAL_GPIO_Init+0x12e>
 8002586:	a201      	add	r2, pc, #4	@ (adr r2, 800258c <HAL_GPIO_Init+0x80>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	08002607 	.word	0x08002607
 8002590:	080025e1 	.word	0x080025e1
 8002594:	080025f3 	.word	0x080025f3
 8002598:	08002635 	.word	0x08002635
 800259c:	0800263b 	.word	0x0800263b
 80025a0:	0800263b 	.word	0x0800263b
 80025a4:	0800263b 	.word	0x0800263b
 80025a8:	0800263b 	.word	0x0800263b
 80025ac:	0800263b 	.word	0x0800263b
 80025b0:	0800263b 	.word	0x0800263b
 80025b4:	0800263b 	.word	0x0800263b
 80025b8:	0800263b 	.word	0x0800263b
 80025bc:	0800263b 	.word	0x0800263b
 80025c0:	0800263b 	.word	0x0800263b
 80025c4:	0800263b 	.word	0x0800263b
 80025c8:	0800263b 	.word	0x0800263b
 80025cc:	0800263b 	.word	0x0800263b
 80025d0:	080025e9 	.word	0x080025e9
 80025d4:	080025fd 	.word	0x080025fd
 80025d8:	4a79      	ldr	r2, [pc, #484]	@ (80027c0 <HAL_GPIO_Init+0x2b4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025de:	e02c      	b.n	800263a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	623b      	str	r3, [r7, #32]
          break;
 80025e6:	e029      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	3304      	adds	r3, #4
 80025ee:	623b      	str	r3, [r7, #32]
          break;
 80025f0:	e024      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	3308      	adds	r3, #8
 80025f8:	623b      	str	r3, [r7, #32]
          break;
 80025fa:	e01f      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	330c      	adds	r3, #12
 8002602:	623b      	str	r3, [r7, #32]
          break;
 8002604:	e01a      	b.n	800263c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800260e:	2304      	movs	r3, #4
 8002610:	623b      	str	r3, [r7, #32]
          break;
 8002612:	e013      	b.n	800263c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d105      	bne.n	8002628 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261c:	2308      	movs	r3, #8
 800261e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	611a      	str	r2, [r3, #16]
          break;
 8002626:	e009      	b.n	800263c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002628:	2308      	movs	r3, #8
 800262a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69fa      	ldr	r2, [r7, #28]
 8002630:	615a      	str	r2, [r3, #20]
          break;
 8002632:	e003      	b.n	800263c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002634:	2300      	movs	r3, #0
 8002636:	623b      	str	r3, [r7, #32]
          break;
 8002638:	e000      	b.n	800263c <HAL_GPIO_Init+0x130>
          break;
 800263a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2bff      	cmp	r3, #255	@ 0xff
 8002640:	d801      	bhi.n	8002646 <HAL_GPIO_Init+0x13a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	e001      	b.n	800264a <HAL_GPIO_Init+0x13e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2bff      	cmp	r3, #255	@ 0xff
 8002650:	d802      	bhi.n	8002658 <HAL_GPIO_Init+0x14c>
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x152>
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3b08      	subs	r3, #8
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	210f      	movs	r1, #15
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	401a      	ands	r2, r3
 8002670:	6a39      	ldr	r1, [r7, #32]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	431a      	orrs	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80b1 	beq.w	80027ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800268c:	4b4d      	ldr	r3, [pc, #308]	@ (80027c4 <HAL_GPIO_Init+0x2b8>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a4c      	ldr	r2, [pc, #304]	@ (80027c4 <HAL_GPIO_Init+0x2b8>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b4a      	ldr	r3, [pc, #296]	@ (80027c4 <HAL_GPIO_Init+0x2b8>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026a4:	4a48      	ldr	r2, [pc, #288]	@ (80027c8 <HAL_GPIO_Init+0x2bc>)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a40      	ldr	r2, [pc, #256]	@ (80027cc <HAL_GPIO_Init+0x2c0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d013      	beq.n	80026f8 <HAL_GPIO_Init+0x1ec>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a3f      	ldr	r2, [pc, #252]	@ (80027d0 <HAL_GPIO_Init+0x2c4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00d      	beq.n	80026f4 <HAL_GPIO_Init+0x1e8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a3e      	ldr	r2, [pc, #248]	@ (80027d4 <HAL_GPIO_Init+0x2c8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d007      	beq.n	80026f0 <HAL_GPIO_Init+0x1e4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a3d      	ldr	r2, [pc, #244]	@ (80027d8 <HAL_GPIO_Init+0x2cc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d101      	bne.n	80026ec <HAL_GPIO_Init+0x1e0>
 80026e8:	2303      	movs	r3, #3
 80026ea:	e006      	b.n	80026fa <HAL_GPIO_Init+0x1ee>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e004      	b.n	80026fa <HAL_GPIO_Init+0x1ee>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e002      	b.n	80026fa <HAL_GPIO_Init+0x1ee>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <HAL_GPIO_Init+0x1ee>
 80026f8:	2300      	movs	r3, #0
 80026fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026fc:	f002 0203 	and.w	r2, r2, #3
 8002700:	0092      	lsls	r2, r2, #2
 8002702:	4093      	lsls	r3, r2
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800270a:	492f      	ldr	r1, [pc, #188]	@ (80027c8 <HAL_GPIO_Init+0x2bc>)
 800270c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270e:	089b      	lsrs	r3, r3, #2
 8002710:	3302      	adds	r3, #2
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002724:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	492c      	ldr	r1, [pc, #176]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002732:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	43db      	mvns	r3, r3
 800273a:	4928      	ldr	r1, [pc, #160]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800273c:	4013      	ands	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d006      	beq.n	800275a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800274c:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	4922      	ldr	r1, [pc, #136]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
 8002758:	e006      	b.n	8002768 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800275a:	4b20      	ldr	r3, [pc, #128]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	43db      	mvns	r3, r3
 8002762:	491e      	ldr	r1, [pc, #120]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002764:	4013      	ands	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	4918      	ldr	r1, [pc, #96]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
 8002780:	e006      	b.n	8002790 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	43db      	mvns	r3, r3
 800278a:	4914      	ldr	r1, [pc, #80]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800278c:	4013      	ands	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d021      	beq.n	80027e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800279c:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	490e      	ldr	r1, [pc, #56]	@ (80027dc <HAL_GPIO_Init+0x2d0>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e021      	b.n	80027ee <HAL_GPIO_Init+0x2e2>
 80027aa:	bf00      	nop
 80027ac:	10320000 	.word	0x10320000
 80027b0:	10310000 	.word	0x10310000
 80027b4:	10220000 	.word	0x10220000
 80027b8:	10210000 	.word	0x10210000
 80027bc:	10120000 	.word	0x10120000
 80027c0:	10110000 	.word	0x10110000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40010800 	.word	0x40010800
 80027d0:	40010c00 	.word	0x40010c00
 80027d4:	40011000 	.word	0x40011000
 80027d8:	40011400 	.word	0x40011400
 80027dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	4909      	ldr	r1, [pc, #36]	@ (8002810 <HAL_GPIO_Init+0x304>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	fa22 f303 	lsr.w	r3, r2, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f47f ae8e 	bne.w	8002520 <HAL_GPIO_Init+0x14>
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	372c      	adds	r7, #44	@ 0x2c
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12b      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fe fd84 	bl	8001348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	@ 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002878:	f003 f8f8 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a81      	ldr	r2, [pc, #516]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d807      	bhi.n	8002898 <HAL_I2C_Init+0x84>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a80      	ldr	r2, [pc, #512]	@ (8002a8c <HAL_I2C_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e006      	b.n	80028a6 <HAL_I2C_Init+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a90 <HAL_I2C_Init+0x27c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e7      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a78      	ldr	r2, [pc, #480]	@ (8002a94 <HAL_I2C_Init+0x280>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a88 <HAL_I2C_Init+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e009      	b.n	80028fc <HAL_I2C_Init+0xe8>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a69      	ldr	r2, [pc, #420]	@ (8002a98 <HAL_I2C_Init+0x284>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800290e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	495c      	ldr	r1, [pc, #368]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d819      	bhi.n	8002950 <HAL_I2C_Init+0x13c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_I2C_Init+0x138>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e59      	subs	r1, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	e051      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e04f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_I2C_Init+0x168>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_I2C_Init+0x18e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x196>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_I2C_Init+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e58      	subs	r0, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6911      	ldr	r1, [r2, #16]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	001e847f 	.word	0x001e847f
 8002a90:	003d08ff 	.word	0x003d08ff
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aae:	2b80      	cmp	r3, #128	@ 0x80
 8002ab0:	d103      	bne.n	8002aba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff fb56 	bl	8002188 <HAL_GetTick>
 8002adc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	f040 80e0 	bne.w	8002cac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2319      	movs	r3, #25
 8002af2:	2201      	movs	r2, #1
 8002af4:	4970      	ldr	r1, [pc, #448]	@ (8002cb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f002 f96c 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b02:	2302      	movs	r3, #2
 8002b04:	e0d3      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x50>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0cc      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d007      	beq.n	8002b3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2221      	movs	r2, #33	@ 0x21
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2210      	movs	r2, #16
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	893a      	ldrh	r2, [r7, #8]
 8002b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a50      	ldr	r2, [pc, #320]	@ (8002cbc <HAL_I2C_Master_Transmit+0x1f8>)
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f001 ff2e 	bl	80049e4 <I2C_MasterRequestWrite>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e08d      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ba8:	e066      	b.n	8002c78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	6a39      	ldr	r1, [r7, #32]
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f002 fa2a 	bl	8005008 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00d      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d107      	bne.n	8002bd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06b      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	781a      	ldrb	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d11b      	bne.n	8002c4c <HAL_I2C_Master_Transmit+0x188>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6a39      	ldr	r1, [r7, #32]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f002 fa21 	bl	8005098 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d107      	bne.n	8002c74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e01a      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d194      	bne.n	8002baa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e000      	b.n	8002cae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
  }
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	00100002 	.word	0x00100002
 8002cbc:	ffff0000 	.word	0xffff0000

08002cc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	@ 0x30
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	460b      	mov	r3, r1
 8002cce:	817b      	strh	r3, [r7, #10]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff fa56 	bl	8002188 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	f040 824b 	bne.w	8003182 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	497f      	ldr	r1, [pc, #508]	@ (8002ef4 <HAL_I2C_Master_Receive+0x234>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f002 f86c 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e23e      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2C_Master_Receive+0x54>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e237      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d007      	beq.n	8002d3a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2222      	movs	r2, #34	@ 0x22
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef8 <HAL_I2C_Master_Receive+0x238>)
 8002d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d7c:	8979      	ldrh	r1, [r7, #10]
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f001 feb0 	bl	8004ae8 <I2C_MasterRequestRead>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1f8      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d113      	bne.n	8002dc2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	e1cc      	b.n	800315c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d11e      	bne.n	8002e08 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dda:	b672      	cpsid	i
}
 8002ddc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e02:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e04:	b662      	cpsie	i
}
 8002e06:	e035      	b.n	8002e74 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d11e      	bne.n	8002e4e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4a:	b662      	cpsie	i
}
 8002e4c:	e012      	b.n	8002e74 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002e74:	e172      	b.n	800315c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	f200 811f 	bhi.w	80030be <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d123      	bne.n	8002ed0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f002 f97d 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e173      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ece:	e145      	b.n	800315c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d152      	bne.n	8002f7e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	2200      	movs	r2, #0
 8002ee0:	4906      	ldr	r1, [pc, #24]	@ (8002efc <HAL_I2C_Master_Receive+0x23c>)
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f001 ff76 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e148      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
 8002ef2:	bf00      	nop
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000
 8002efc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f00:	b672      	cpsid	i
}
 8002f02:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	b2d2      	uxtb	r2, r2
 8002f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f46:	b662      	cpsie	i
}
 8002f48:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f7c:	e0ee      	b.n	800315c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	2200      	movs	r2, #0
 8002f86:	4981      	ldr	r1, [pc, #516]	@ (800318c <HAL_I2C_Master_Receive+0x4cc>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f001 ff23 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0f5      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fa8:	b672      	cpsid	i
}
 8002faa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fde:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_I2C_Master_Receive+0x4d0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	4a6b      	ldr	r2, [pc, #428]	@ (8003194 <HAL_I2C_Master_Receive+0x4d4>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0a1a      	lsrs	r2, r3, #8
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00da      	lsls	r2, r3, #3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d118      	bne.n	8003036 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003026:	b662      	cpsie	i
}
 8003028:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e0a6      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d1d9      	bne.n	8002ff8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003052:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003086:	b662      	cpsie	i
}
 8003088:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	3b01      	subs	r3, #1
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030bc:	e04e      	b.n	800315c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f002 f862 	bl	800518c <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e058      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d124      	bne.n	800315c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003128:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	f47f ae88 	bne.w	8002e76 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003182:	2302      	movs	r3, #2
  }
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	@ 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	00010004 	.word	0x00010004
 8003190:	20000008 	.word	0x20000008
 8003194:	14f8b589 	.word	0x14f8b589

08003198 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	461a      	mov	r2, r3
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b20      	cmp	r3, #32
 80031ba:	f040 8081 	bne.w	80032c0 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80031be:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_I2C_Master_Transmit_IT+0x134>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	08db      	lsrs	r3, r3, #3
 80031c4:	4a42      	ldr	r2, [pc, #264]	@ (80032d0 <HAL_I2C_Master_Transmit_IT+0x138>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a1a      	lsrs	r2, r3, #8
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009a      	lsls	r2, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	3b01      	subs	r3, #1
 80031dc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d112      	bne.n	800320a <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	f043 0220 	orr.w	r2, r3, #32
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e05b      	b.n	80032c2 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b02      	cmp	r3, #2
 8003216:	d0df      	beq.n	80031d8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800321e:	2b01      	cmp	r3, #1
 8003220:	d101      	bne.n	8003226 <HAL_I2C_Master_Transmit_IT+0x8e>
 8003222:	2302      	movs	r3, #2
 8003224:	e04d      	b.n	80032c2 <HAL_I2C_Master_Transmit_IT+0x12a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d007      	beq.n	800324c <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800325a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2221      	movs	r2, #33	@ 0x21
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2210      	movs	r2, #16
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	893a      	ldrh	r2, [r7, #8]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <HAL_I2C_Master_Transmit_IT+0x13c>)
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800328e:	897a      	ldrh	r2, [r7, #10]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80032aa:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80032bc:	2300      	movs	r3, #0
 80032be:	e000      	b.n	80032c2 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032c0:	2302      	movs	r3, #2
  }
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	371c      	adds	r7, #28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	20000008 	.word	0x20000008
 80032d0:	14f8b589 	.word	0x14f8b589
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	817b      	strh	r3, [r7, #10]
 80032e8:	4613      	mov	r3, r2
 80032ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	f040 8089 	bne.w	8003410 <HAL_I2C_Master_Receive_IT+0x138>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <HAL_I2C_Master_Receive_IT+0x144>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	08db      	lsrs	r3, r3, #3
 8003304:	4a46      	ldr	r2, [pc, #280]	@ (8003420 <HAL_I2C_Master_Receive_IT+0x148>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	0a1a      	lsrs	r2, r3, #8
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3b01      	subs	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d112      	bne.n	800334a <HAL_I2C_Master_Receive_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	e063      	b.n	8003412 <HAL_I2C_Master_Receive_IT+0x13a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d0df      	beq.n	8003318 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Master_Receive_IT+0x8e>
 8003362:	2302      	movs	r3, #2
 8003364:	e055      	b.n	8003412 <HAL_I2C_Master_Receive_IT+0x13a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d007      	beq.n	800338c <HAL_I2C_Master_Receive_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2222      	movs	r2, #34	@ 0x22
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2210      	movs	r2, #16
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	893a      	ldrh	r2, [r7, #8]
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <HAL_I2C_Master_Receive_IT+0x14c>)
 80033cc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80033ce:	897a      	ldrh	r2, [r7, #10]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	645a      	str	r2, [r3, #68]	@ 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80033ea:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033fa:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800340a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	e000      	b.n	8003412 <HAL_I2C_Master_Receive_IT+0x13a>
  }
  else
  {
    return HAL_BUSY;
 8003410:	2302      	movs	r3, #2
  }
}
 8003412:	4618      	mov	r0, r3
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	bc80      	pop	{r7}
 800341a:	4770      	bx	lr
 800341c:	20000008 	.word	0x20000008
 8003420:	14f8b589 	.word	0x14f8b589
 8003424:	ffff0000 	.word	0xffff0000

08003428 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003448:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003450:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d003      	beq.n	8003460 <HAL_I2C_EV_IRQHandler+0x38>
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b40      	cmp	r3, #64	@ 0x40
 800345c:	f040 80c1 	bne.w	80035e2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <HAL_I2C_EV_IRQHandler+0x6e>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003480:	d003      	beq.n	800348a <HAL_I2C_EV_IRQHandler+0x62>
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003488:	d101      	bne.n	800348e <HAL_I2C_EV_IRQHandler+0x66>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_I2C_EV_IRQHandler+0x68>
 800348e:	2300      	movs	r3, #0
 8003490:	2b01      	cmp	r3, #1
 8003492:	f000 8132 	beq.w	80036fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00c      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x92>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	0a5b      	lsrs	r3, r3, #9
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f001 fef8 	bl	80052a2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fce5 	bl	8003e82 <I2C_Master_SB>
 80034b8:	e092      	b.n	80035e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0xb2>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	0a5b      	lsrs	r3, r3, #9
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fd5a 	bl	8003f8c <I2C_Master_ADD10>
 80034d8:	e082      	b.n	80035e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <HAL_I2C_EV_IRQHandler+0xd2>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	0a5b      	lsrs	r3, r3, #9
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fd73 	bl	8003fde <I2C_Master_ADDR>
 80034f8:	e072      	b.n	80035e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03b      	beq.n	800357e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003514:	f000 80f3 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	09db      	lsrs	r3, r3, #7
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00f      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x11c>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	0a9b      	lsrs	r3, r3, #10
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_I2C_EV_IRQHandler+0x11c>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f93d 	bl	80037bc <I2C_MasterTransmit_TXE>
 8003542:	e04d      	b.n	80035e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80d6 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	0a5b      	lsrs	r3, r3, #9
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80cf 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003560:	7bbb      	ldrb	r3, [r7, #14]
 8003562:	2b21      	cmp	r3, #33	@ 0x21
 8003564:	d103      	bne.n	800356e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9c4 	bl	80038f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800356c:	e0c7      	b.n	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b40      	cmp	r3, #64	@ 0x40
 8003572:	f040 80c4 	bne.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa32 	bl	80039e0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800357c:	e0bf      	b.n	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358c:	f000 80b7 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00f      	beq.n	80035bc <HAL_I2C_EV_IRQHandler+0x194>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	0a9b      	lsrs	r3, r3, #10
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <HAL_I2C_EV_IRQHandler+0x194>
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 faab 	bl	8003b10 <I2C_MasterReceive_RXNE>
 80035ba:	e011      	b.n	80035e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	089b      	lsrs	r3, r3, #2
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 809a 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	0a5b      	lsrs	r3, r3, #9
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 8093 	beq.w	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb61 	bl	8003ca0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035de:	e08e      	b.n	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80035e0:	e08d      	b.n	80036fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	e007      	b.n	8003604 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d012      	beq.n	8003636 <HAL_I2C_EV_IRQHandler+0x20e>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0a5b      	lsrs	r3, r3, #9
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800362c:	69b9      	ldr	r1, [r7, #24]
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 ff2c 	bl	800448c <I2C_Slave_ADDR>
 8003634:	e066      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_I2C_EV_IRQHandler+0x22e>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	0a5b      	lsrs	r3, r3, #9
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 ff66 	bl	8004520 <I2C_Slave_STOPF>
 8003654:	e056      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003656:	7bbb      	ldrb	r3, [r7, #14]
 8003658:	2b21      	cmp	r3, #33	@ 0x21
 800365a:	d002      	beq.n	8003662 <HAL_I2C_EV_IRQHandler+0x23a>
 800365c:	7bbb      	ldrb	r3, [r7, #14]
 800365e:	2b29      	cmp	r3, #41	@ 0x29
 8003660:	d125      	bne.n	80036ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	09db      	lsrs	r3, r3, #7
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00f      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x266>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	0a9b      	lsrs	r3, r3, #10
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <HAL_I2C_EV_IRQHandler+0x266>
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d103      	bne.n	800368e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fe44 	bl	8004314 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800368c:	e039      	b.n	8003702 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d033      	beq.n	8003702 <HAL_I2C_EV_IRQHandler+0x2da>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	0a5b      	lsrs	r3, r3, #9
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d02d      	beq.n	8003702 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fe71 	bl	800438e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036ac:	e029      	b.n	8003702 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	099b      	lsrs	r3, r3, #6
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00f      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x2b2>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	0a9b      	lsrs	r3, r3, #10
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_I2C_EV_IRQHandler+0x2b2>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	089b      	lsrs	r3, r3, #2
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fe7b 	bl	80043ce <I2C_SlaveReceive_RXNE>
 80036d8:	e014      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	0a5b      	lsrs	r3, r3, #9
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d008      	beq.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fea9 	bl	800444a <I2C_SlaveReceive_BTF>
 80036f8:	e004      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80036fa:	bf00      	nop
 80036fc:	e002      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fe:	bf00      	nop
 8003700:	e000      	b.n	8003704 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003702:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003704:	3720      	adds	r7, #32
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	70fb      	strb	r3, [r7, #3]
 800373a:	4613      	mov	r3, r2
 800373c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80037a2:	b480      	push	{r7}
 80037a4:	b083      	sub	sp, #12
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d150      	bne.n	8003884 <I2C_MasterTransmit_TXE+0xc8>
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	2b21      	cmp	r3, #33	@ 0x21
 80037e6:	d14d      	bne.n	8003884 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d01d      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d01a      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037fa:	d016      	beq.n	800382a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800380a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2211      	movs	r2, #17
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7fd fd00 	bl	8001228 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003828:	e060      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003838:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003848:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b40      	cmp	r3, #64	@ 0x40
 8003862:	d107      	bne.n	8003874 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff ff74 	bl	800375a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003872:	e03b      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7fd fcd3 	bl	8001228 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003882:	e033      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b21      	cmp	r3, #33	@ 0x21
 8003888:	d005      	beq.n	8003896 <I2C_MasterTransmit_TXE+0xda>
 800388a:	7bbb      	ldrb	r3, [r7, #14]
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d12d      	bne.n	80038ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b22      	cmp	r3, #34	@ 0x22
 8003894:	d12a      	bne.n	80038ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038b0:	e01c      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d103      	bne.n	80038c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f88e 	bl	80039e0 <I2C_MemoryTransmit_TXE_BTF>
}
 80038c4:	e012      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038ea:	e7ff      	b.n	80038ec <I2C_MasterTransmit_TXE+0x130>
 80038ec:	bf00      	nop
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003900:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b21      	cmp	r3, #33	@ 0x21
 800390c:	d164      	bne.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	3b01      	subs	r3, #1
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800393c:	e04c      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b08      	cmp	r3, #8
 8003942:	d01d      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b20      	cmp	r3, #32
 8003948:	d01a      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003950:	d016      	beq.n	8003980 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003960:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2211      	movs	r2, #17
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fd fc55 	bl	8001228 <HAL_I2C_MasterTxCpltCallback>
}
 800397e:	e02b      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800398e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800399e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b40      	cmp	r3, #64	@ 0x40
 80039b8:	d107      	bne.n	80039ca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fec9 	bl	800375a <HAL_I2C_MemTxCpltCallback>
}
 80039c8:	e006      	b.n	80039d8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fc28 	bl	8001228 <HAL_I2C_MasterTxCpltCallback>
}
 80039d8:	bf00      	nop
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10b      	bne.n	8003a18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003a16:	e077      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	121b      	asrs	r3, r3, #8
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a32:	e069      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10b      	bne.n	8003a54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a52:	e059      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d152      	bne.n	8003b02 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b22      	cmp	r3, #34	@ 0x22
 8003a60:	d10d      	bne.n	8003a7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a7c:	e044      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b21      	cmp	r3, #33	@ 0x21
 8003a8c:	d112      	bne.n	8003ab4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003ab2:	e029      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d124      	bne.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	2b21      	cmp	r3, #33	@ 0x21
 8003ac2:	d121      	bne.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ad2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fe2d 	bl	800375a <HAL_I2C_MemTxCpltCallback>
}
 8003b00:	e002      	b.n	8003b08 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fe ffca 	bl	8002a9c <I2C_Flush_DR>
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b22      	cmp	r3, #34	@ 0x22
 8003b22:	f040 80b9 	bne.w	8003c98 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d921      	bls.n	8003b7e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	f040 8096 	bne.w	8003c98 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003b7c:	e08c      	b.n	8003c98 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d07f      	beq.n	8003c86 <I2C_MasterReceive_RXNE+0x176>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <I2C_MasterReceive_RXNE+0x82>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d179      	bne.n	8003c86 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f001 fac8 	bl	8005128 <I2C_WaitOnSTOPRequestThroughIT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d14c      	bne.n	8003c38 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003bbc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b40      	cmp	r3, #64	@ 0x40
 8003bf6:	d10a      	bne.n	8003c0e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fdb0 	bl	800376c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c0c:	e044      	b.n	8003c98 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d002      	beq.n	8003c22 <I2C_MasterReceive_RXNE+0x112>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d103      	bne.n	8003c2a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c28:	e002      	b.n	8003c30 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2212      	movs	r2, #18
 8003c2e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7fd fb13 	bl	800125c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c36:	e02f      	b.n	8003c98 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c46:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fd7d 	bl	800377e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003c84:	e008      	b.n	8003c98 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c94:	605a      	str	r2, [r3, #4]
}
 8003c96:	e7ff      	b.n	8003c98 <I2C_MasterReceive_RXNE+0x188>
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11b      	bne.n	8003cf0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003cee:	e0c4      	b.n	8003e7a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d129      	bne.n	8003d4e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d08:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00a      	beq.n	8003d26 <I2C_MasterReceive_BTF+0x86>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d007      	beq.n	8003d26 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d24:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d4c:	e095      	b.n	8003e7a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d17d      	bne.n	8003e54 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d002      	beq.n	8003d64 <I2C_MasterReceive_BTF+0xc4>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d108      	bne.n	8003d76 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e016      	b.n	8003da4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d002      	beq.n	8003d82 <I2C_MasterReceive_BTF+0xe2>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d108      	bne.n	8003d94 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e007      	b.n	8003da4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	1c5a      	adds	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dfe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b40      	cmp	r3, #64	@ 0x40
 8003e12:	d10a      	bne.n	8003e2a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff fca2 	bl	800376c <HAL_I2C_MemRxCpltCallback>
}
 8003e28:	e027      	b.n	8003e7a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d002      	beq.n	8003e3e <I2C_MasterReceive_BTF+0x19e>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d103      	bne.n	8003e46 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e44:	e002      	b.n	8003e4c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2212      	movs	r2, #18
 8003e4a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fa05 	bl	800125c <HAL_I2C_MasterRxCpltCallback>
}
 8003e52:	e012      	b.n	8003e7a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b40      	cmp	r3, #64	@ 0x40
 8003e94:	d117      	bne.n	8003ec6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003eb0:	e067      	b.n	8003f82 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]
}
 8003ec4:	e05d      	b.n	8003f82 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ece:	d133      	bne.n	8003f38 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b21      	cmp	r3, #33	@ 0x21
 8003eda:	d109      	bne.n	8003ef0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e008      	b.n	8003f02 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <I2C_Master_SB+0x92>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d108      	bne.n	8003f26 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d032      	beq.n	8003f82 <I2C_Master_SB+0x100>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02d      	beq.n	8003f82 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f34:	605a      	str	r2, [r3, #4]
}
 8003f36:	e024      	b.n	8003f82 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10e      	bne.n	8003f5e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	11db      	asrs	r3, r3, #7
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	f003 0306 	and.w	r3, r3, #6
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f063 030f 	orn	r3, r3, #15
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]
}
 8003f5c:	e011      	b.n	8003f82 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d10d      	bne.n	8003f82 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	11db      	asrs	r3, r3, #7
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	f003 0306 	and.w	r3, r3, #6
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f063 030e 	orn	r3, r3, #14
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	611a      	str	r2, [r3, #16]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d004      	beq.n	8003fb2 <I2C_Master_ADD10+0x26>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <I2C_Master_ADD10+0x48>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d007      	beq.n	8003fd4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd2:	605a      	str	r2, [r3, #4]
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b091      	sub	sp, #68	@ 0x44
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b22      	cmp	r3, #34	@ 0x22
 8004006:	f040 8174 	bne.w	80042f2 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <I2C_Master_ADDR+0x54>
 8004012:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d10b      	bne.n	8004032 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	633b      	str	r3, [r7, #48]	@ 0x30
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	e16b      	b.n	800430a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11d      	bne.n	8004076 <I2C_Master_ADDR+0x98>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004042:	d118      	bne.n	8004076 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004044:	2300      	movs	r3, #0
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004068:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	651a      	str	r2, [r3, #80]	@ 0x50
 8004074:	e149      	b.n	800430a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d113      	bne.n	80040a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004080:	2300      	movs	r3, #0
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e120      	b.n	80042ea <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	f040 808a 	bne.w	80041c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040ba:	d137      	bne.n	800412c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040da:	d113      	bne.n	8004104 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	e0f2      	b.n	80042ea <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004104:	2300      	movs	r3, #0
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	623b      	str	r3, [r7, #32]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	e0de      	b.n	80042ea <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412e:	2b08      	cmp	r3, #8
 8004130:	d02e      	beq.n	8004190 <I2C_Master_ADDR+0x1b2>
 8004132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004134:	2b20      	cmp	r3, #32
 8004136:	d02b      	beq.n	8004190 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	2b12      	cmp	r3, #18
 800413c:	d102      	bne.n	8004144 <I2C_Master_ADDR+0x166>
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	2b01      	cmp	r3, #1
 8004142:	d125      	bne.n	8004190 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004146:	2b04      	cmp	r3, #4
 8004148:	d00e      	beq.n	8004168 <I2C_Master_ADDR+0x18a>
 800414a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414c:	2b02      	cmp	r3, #2
 800414e:	d00b      	beq.n	8004168 <I2C_Master_ADDR+0x18a>
 8004150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004152:	2b10      	cmp	r3, #16
 8004154:	d008      	beq.n	8004168 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	e007      	b.n	8004178 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004176:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	e0ac      	b.n	80042ea <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e090      	b.n	80042ea <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d158      	bne.n	8004284 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d021      	beq.n	800421c <I2C_Master_ADDR+0x23e>
 80041d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d01e      	beq.n	800421c <I2C_Master_ADDR+0x23e>
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d01b      	beq.n	800421c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e012      	b.n	8004242 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800422a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004250:	d14b      	bne.n	80042ea <I2C_Master_ADDR+0x30c>
 8004252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004254:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004258:	d00b      	beq.n	8004272 <I2C_Master_ADDR+0x294>
 800425a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425c:	2b01      	cmp	r3, #1
 800425e:	d008      	beq.n	8004272 <I2C_Master_ADDR+0x294>
 8004260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004262:	2b08      	cmp	r3, #8
 8004264:	d005      	beq.n	8004272 <I2C_Master_ADDR+0x294>
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	2b10      	cmp	r3, #16
 800426a:	d002      	beq.n	8004272 <I2C_Master_ADDR+0x294>
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	2b20      	cmp	r3, #32
 8004270:	d13b      	bne.n	80042ea <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	e032      	b.n	80042ea <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004292:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a2:	d117      	bne.n	80042d4 <I2C_Master_ADDR+0x2f6>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042aa:	d00b      	beq.n	80042c4 <I2C_Master_ADDR+0x2e6>
 80042ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d008      	beq.n	80042c4 <I2C_Master_ADDR+0x2e6>
 80042b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d005      	beq.n	80042c4 <I2C_Master_ADDR+0x2e6>
 80042b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d002      	beq.n	80042c4 <I2C_Master_ADDR+0x2e6>
 80042be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d107      	bne.n	80042d4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042d2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80042f0:	e00b      	b.n	800430a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
}
 8004308:	e7ff      	b.n	800430a <I2C_Master_ADDR+0x32c>
 800430a:	bf00      	nop
 800430c:	3744      	adds	r7, #68	@ 0x44
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d02b      	beq.n	8004386 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	781a      	ldrb	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d114      	bne.n	8004386 <I2C_SlaveTransmit_TXE+0x72>
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b29      	cmp	r3, #41	@ 0x29
 8004360:	d111      	bne.n	8004386 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004370:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2221      	movs	r2, #33	@ 0x21
 8004376:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2228      	movs	r2, #40	@ 0x28
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff f9c2 	bl	800370a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d011      	beq.n	80043c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	781a      	ldrb	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02c      	beq.n	8004442 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d114      	bne.n	8004442 <I2C_SlaveReceive_RXNE+0x74>
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b2a      	cmp	r3, #42	@ 0x2a
 800441c:	d111      	bne.n	8004442 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2222      	movs	r2, #34	@ 0x22
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2228      	movs	r2, #40	@ 0x28
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7ff f96d 	bl	800371c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d012      	beq.n	8004482 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80044a6:	2b28      	cmp	r3, #40	@ 0x28
 80044a8:	d127      	bne.n	80044fa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	089b      	lsrs	r3, r3, #2
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	09db      	lsrs	r3, r3, #7
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	81bb      	strh	r3, [r7, #12]
 80044dc:	e002      	b.n	80044e4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80044ec:	89ba      	ldrh	r2, [r7, #12]
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff f91b 	bl	800372e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044f8:	e00e      	b.n	8004518 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	d172      	bne.n	8004664 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800457e:	7bfb      	ldrb	r3, [r7, #15]
 8004580:	2b22      	cmp	r3, #34	@ 0x22
 8004582:	d002      	beq.n	800458a <I2C_Slave_STOPF+0x6a>
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b2a      	cmp	r3, #42	@ 0x2a
 8004588:	d135      	bne.n	80045f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd ff94 	bl	80024f0 <HAL_DMA_GetState>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d049      	beq.n	8004662 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d2:	4a69      	ldr	r2, [pc, #420]	@ (8004778 <I2C_Slave_STOPF+0x258>)
 80045d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd ff10 	bl	8002400 <HAL_DMA_Abort_IT>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d03d      	beq.n	8004662 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80045f0:	4610      	mov	r0, r2
 80045f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80045f4:	e035      	b.n	8004662 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	f043 0204 	orr.w	r2, r3, #4
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800462e:	4618      	mov	r0, r3
 8004630:	f7fd ff5e 	bl	80024f0 <HAL_DMA_GetState>
 8004634:	4603      	mov	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d014      	beq.n	8004664 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	4a4e      	ldr	r2, [pc, #312]	@ (8004778 <I2C_Slave_STOPF+0x258>)
 8004640:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004646:	4618      	mov	r0, r3
 8004648:	f7fd feda 	bl	8002400 <HAL_DMA_Abort_IT>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3
 8004660:	e000      	b.n	8004664 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004662:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d03e      	beq.n	80046ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d112      	bne.n	80046a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ac:	2b40      	cmp	r3, #64	@ 0x40
 80046ae:	d112      	bne.n	80046d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	f043 0204 	orr.w	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f843 	bl	8004780 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80046fa:	e039      	b.n	8004770 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004700:	d109      	bne.n	8004716 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2228      	movs	r2, #40	@ 0x28
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff f803 	bl	800371c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b28      	cmp	r3, #40	@ 0x28
 8004720:	d111      	bne.n	8004746 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a15      	ldr	r2, [pc, #84]	@ (800477c <I2C_Slave_STOPF+0x25c>)
 8004726:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff f802 	bl	8003748 <HAL_I2C_ListenCpltCallback>
}
 8004744:	e014      	b.n	8004770 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474a:	2b22      	cmp	r3, #34	@ 0x22
 800474c:	d002      	beq.n	8004754 <I2C_Slave_STOPF+0x234>
 800474e:	7bfb      	ldrb	r3, [r7, #15]
 8004750:	2b22      	cmp	r3, #34	@ 0x22
 8004752:	d10d      	bne.n	8004770 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fe ffd6 	bl	800371c <HAL_I2C_SlaveRxCpltCallback>
}
 8004770:	bf00      	nop
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	08004c85 	.word	0x08004c85
 800477c:	ffff0000 	.word	0xffff0000

08004780 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004796:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2b10      	cmp	r3, #16
 800479c:	d002      	beq.n	80047a4 <I2C_ITError+0x24>
 800479e:	7bbb      	ldrb	r3, [r7, #14]
 80047a0:	2b40      	cmp	r3, #64	@ 0x40
 80047a2:	d10a      	bne.n	80047ba <I2C_ITError+0x3a>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	2b22      	cmp	r3, #34	@ 0x22
 80047a8:	d107      	bne.n	80047ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80047c0:	2b28      	cmp	r3, #40	@ 0x28
 80047c2:	d107      	bne.n	80047d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2228      	movs	r2, #40	@ 0x28
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047d2:	e015      	b.n	8004800 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e2:	d00a      	beq.n	80047fa <I2C_ITError+0x7a>
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	2b60      	cmp	r3, #96	@ 0x60
 80047e8:	d007      	beq.n	80047fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480e:	d162      	bne.n	80048d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800481e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004824:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d020      	beq.n	8004870 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	4a6a      	ldr	r2, [pc, #424]	@ (80049dc <I2C_ITError+0x25c>)
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fde0 	bl	8002400 <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8089 	beq.w	800495a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800486a:	4610      	mov	r0, r2
 800486c:	4798      	blx	r3
 800486e:	e074      	b.n	800495a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	4a59      	ldr	r2, [pc, #356]	@ (80049dc <I2C_ITError+0x25c>)
 8004876:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fdbf 	bl	8002400 <HAL_DMA_Abort_IT>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d068      	beq.n	800495a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b40      	cmp	r3, #64	@ 0x40
 8004894:	d10b      	bne.n	80048ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048d0:	4610      	mov	r0, r2
 80048d2:	4798      	blx	r3
 80048d4:	e041      	b.n	800495a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b60      	cmp	r3, #96	@ 0x60
 80048e0:	d125      	bne.n	800492e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d10b      	bne.n	8004916 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fe ff32 	bl	8003790 <HAL_I2C_AbortCpltCallback>
 800492c:	e015      	b.n	800495a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b40      	cmp	r3, #64	@ 0x40
 800493a:	d10b      	bne.n	8004954 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fe ff12 	bl	800377e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004984:	2b00      	cmp	r3, #0
 8004986:	d007      	beq.n	8004998 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004996:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d113      	bne.n	80049d4 <I2C_ITError+0x254>
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b28      	cmp	r3, #40	@ 0x28
 80049b0:	d110      	bne.n	80049d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <I2C_ITError+0x260>)
 80049b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fe feba 	bl	8003748 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08004c85 	.word	0x08004c85
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	460b      	mov	r3, r1
 80049f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d006      	beq.n	8004a0e <I2C_MasterRequestWrite+0x2a>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d003      	beq.n	8004a0e <I2C_MasterRequestWrite+0x2a>
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a0c:	d108      	bne.n	8004a20 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e00b      	b.n	8004a38 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a24:	2b12      	cmp	r3, #18
 8004a26:	d107      	bne.n	8004a38 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a36:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f9c5 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00d      	beq.n	8004a6c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a5e:	d103      	bne.n	8004a68 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e035      	b.n	8004ad8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a74:	d108      	bne.n	8004a88 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a84:	611a      	str	r2, [r3, #16]
 8004a86:	e01b      	b.n	8004ac0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004a88:	897b      	ldrh	r3, [r7, #10]
 8004a8a:	11db      	asrs	r3, r3, #7
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f003 0306 	and.w	r3, r3, #6
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f063 030f 	orn	r3, r3, #15
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	490e      	ldr	r1, [pc, #56]	@ (8004ae0 <I2C_MasterRequestWrite+0xfc>)
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 fa0e 	bl	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e010      	b.n	8004ad8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4907      	ldr	r1, [pc, #28]	@ (8004ae4 <I2C_MasterRequestWrite+0x100>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f9fe 	bl	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3718      	adds	r7, #24
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	00010008 	.word	0x00010008
 8004ae4:	00010002 	.word	0x00010002

08004ae8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d006      	beq.n	8004b22 <I2C_MasterRequestRead+0x3a>
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d003      	beq.n	8004b22 <I2C_MasterRequestRead+0x3a>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b20:	d108      	bne.n	8004b34 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	e00b      	b.n	8004b4c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	2b11      	cmp	r3, #17
 8004b3a:	d107      	bne.n	8004b4c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	9300      	str	r3, [sp, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 f93b 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00d      	beq.n	8004b80 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b72:	d103      	bne.n	8004b7c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e079      	b.n	8004c74 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b88:	d108      	bne.n	8004b9c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]
 8004b9a:	e05f      	b.n	8004c5c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b9c:	897b      	ldrh	r3, [r7, #10]
 8004b9e:	11db      	asrs	r3, r3, #7
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	f003 0306 	and.w	r3, r3, #6
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f063 030f 	orn	r3, r3, #15
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4930      	ldr	r1, [pc, #192]	@ (8004c7c <I2C_MasterRequestRead+0x194>)
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f984 	bl	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e054      	b.n	8004c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bca:	897b      	ldrh	r3, [r7, #10]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4929      	ldr	r1, [pc, #164]	@ (8004c80 <I2C_MasterRequestRead+0x198>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 f974 	bl	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e044      	b.n	8004c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f8d9 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00d      	beq.n	8004c44 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d103      	bne.n	8004c40 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c3e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e017      	b.n	8004c74 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	11db      	asrs	r3, r3, #7
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f003 0306 	and.w	r3, r3, #6
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f063 030e 	orn	r3, r3, #14
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	4907      	ldr	r1, [pc, #28]	@ (8004c80 <I2C_MasterRequestRead+0x198>)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f930 	bl	8004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	00010008 	.word	0x00010008
 8004c80:	00010002 	.word	0x00010002

08004c84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8004dcc <I2C_DMAAbort+0x148>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	08db      	lsrs	r3, r3, #3
 8004ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd0 <I2C_DMAAbort+0x14c>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	0a1a      	lsrs	r2, r3, #8
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	00da      	lsls	r2, r3, #3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004cca:	e00a      	b.n	8004ce2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ce0:	d0ea      	beq.n	8004cb8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cee:	2200      	movs	r2, #0
 8004cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	2200      	movs	r2, #0
 8004d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2200      	movs	r2, #0
 8004d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d24:	2200      	movs	r2, #0
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	2200      	movs	r2, #0
 8004d36:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 0201 	bic.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b60      	cmp	r3, #96	@ 0x60
 8004d52:	d10e      	bne.n	8004d72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	2200      	movs	r2, #0
 8004d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7fe fd10 	bl	8003790 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d70:	e027      	b.n	8004dc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d72:	7cfb      	ldrb	r3, [r7, #19]
 8004d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d78:	2b28      	cmp	r3, #40	@ 0x28
 8004d7a:	d117      	bne.n	8004dac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2228      	movs	r2, #40	@ 0x28
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004daa:	e007      	b.n	8004dbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004dbc:	6978      	ldr	r0, [r7, #20]
 8004dbe:	f7fe fcde 	bl	800377e <HAL_I2C_ErrorCallback>
}
 8004dc2:	bf00      	nop
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000008 	.word	0x20000008
 8004dd0:	14f8b589 	.word	0x14f8b589

08004dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de4:	e048      	b.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d044      	beq.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fd f9cb 	bl	8002188 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d139      	bne.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d10d      	bne.n	8004e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	43da      	mvns	r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf0c      	ite	eq
 8004e20:	2301      	moveq	r3, #1
 8004e22:	2300      	movne	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	e00c      	b.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	43da      	mvns	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d116      	bne.n	8004e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e023      	b.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	0c1b      	lsrs	r3, r3, #16
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d10d      	bne.n	8004e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf0c      	ite	eq
 8004e94:	2301      	moveq	r3, #1
 8004e96:	2300      	movne	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	e00c      	b.n	8004eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	43da      	mvns	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	bf0c      	ite	eq
 8004eb0:	2301      	moveq	r3, #1
 8004eb2:	2300      	movne	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d093      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed6:	e071      	b.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee6:	d123      	bne.n	8004f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	f043 0204 	orr.w	r2, r3, #4
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e067      	b.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f36:	d041      	beq.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f38:	f7fd f926 	bl	8002188 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d136      	bne.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d10c      	bne.n	8004f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	43da      	mvns	r2, r3
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4013      	ands	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bf14      	ite	ne
 8004f6a:	2301      	movne	r3, #1
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	e00b      	b.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	43da      	mvns	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bf14      	ite	ne
 8004f84:	2301      	movne	r3, #1
 8004f86:	2300      	moveq	r3, #0
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa8:	f043 0220 	orr.w	r2, r3, #32
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e021      	b.n	8005000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10c      	bne.n	8004fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf14      	ite	ne
 8004fd8:	2301      	movne	r3, #1
 8004fda:	2300      	moveq	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	e00b      	b.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f47f af6d 	bne.w	8004ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005014:	e034      	b.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f915 	bl	8005246 <I2C_IsAcknowledgeFailed>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e034      	b.n	8005090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d028      	beq.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fd f8ab 	bl	8002188 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11d      	bne.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504e:	2b80      	cmp	r3, #128	@ 0x80
 8005050:	d016      	beq.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d1c3      	bne.n	8005016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050a4:	e034      	b.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f8cd 	bl	8005246 <I2C_IsAcknowledgeFailed>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e034      	b.n	8005120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050bc:	d028      	beq.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	f7fd f863 	bl	8002188 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d302      	bcc.n	80050d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d11d      	bne.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b04      	cmp	r3, #4
 80050e0:	d016      	beq.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e007      	b.n	8005120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d1c3      	bne.n	80050a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	4a13      	ldr	r2, [pc, #76]	@ (8005188 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800513c:	fba2 2303 	umull	r2, r3, r2, r3
 8005140:	0a1a      	lsrs	r2, r3, #8
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b01      	subs	r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e008      	b.n	8005178 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005174:	d0e9      	beq.n	800514a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008
 8005188:	14f8b589 	.word	0x14f8b589

0800518c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005198:	e049      	b.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	f003 0310 	and.w	r3, r3, #16
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d119      	bne.n	80051dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0210 	mvn.w	r2, #16
 80051b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e030      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051dc:	f7fc ffd4 	bl	8002188 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d302      	bcc.n	80051f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d11d      	bne.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b40      	cmp	r3, #64	@ 0x40
 80051fe:	d016      	beq.n	800522e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f043 0220 	orr.w	r2, r3, #32
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e007      	b.n	800523e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005238:	2b40      	cmp	r3, #64	@ 0x40
 800523a:	d1ae      	bne.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800525c:	d11b      	bne.n	8005296 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005266:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr

080052a2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80052b2:	d103      	bne.n	80052bc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80052ba:	e007      	b.n	80052cc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80052c4:	d102      	bne.n	80052cc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2208      	movs	r2, #8
 80052ca:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
	...

080052d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e272      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8087 	beq.w	8005406 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f8:	4b92      	ldr	r3, [pc, #584]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 030c 	and.w	r3, r3, #12
 8005300:	2b04      	cmp	r3, #4
 8005302:	d00c      	beq.n	800531e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005304:	4b8f      	ldr	r3, [pc, #572]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f003 030c 	and.w	r3, r3, #12
 800530c:	2b08      	cmp	r3, #8
 800530e:	d112      	bne.n	8005336 <HAL_RCC_OscConfig+0x5e>
 8005310:	4b8c      	ldr	r3, [pc, #560]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d10b      	bne.n	8005336 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800531e:	4b89      	ldr	r3, [pc, #548]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d06c      	beq.n	8005404 <HAL_RCC_OscConfig+0x12c>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d168      	bne.n	8005404 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e24c      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800533e:	d106      	bne.n	800534e <HAL_RCC_OscConfig+0x76>
 8005340:	4b80      	ldr	r3, [pc, #512]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a7f      	ldr	r2, [pc, #508]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	e02e      	b.n	80053ac <HAL_RCC_OscConfig+0xd4>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <HAL_RCC_OscConfig+0x98>
 8005356:	4b7b      	ldr	r3, [pc, #492]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a7a      	ldr	r2, [pc, #488]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800535c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	4b78      	ldr	r3, [pc, #480]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a77      	ldr	r2, [pc, #476]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005368:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	e01d      	b.n	80053ac <HAL_RCC_OscConfig+0xd4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005378:	d10c      	bne.n	8005394 <HAL_RCC_OscConfig+0xbc>
 800537a:	4b72      	ldr	r3, [pc, #456]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a71      	ldr	r2, [pc, #452]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	4b6f      	ldr	r3, [pc, #444]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a6e      	ldr	r2, [pc, #440]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800538c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e00b      	b.n	80053ac <HAL_RCC_OscConfig+0xd4>
 8005394:	4b6b      	ldr	r3, [pc, #428]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a6a      	ldr	r2, [pc, #424]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800539a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	4b68      	ldr	r3, [pc, #416]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a67      	ldr	r2, [pc, #412]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d013      	beq.n	80053dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fc fee8 	bl	8002188 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053bc:	f7fc fee4 	bl	8002188 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b64      	cmp	r3, #100	@ 0x64
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e200      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0f0      	beq.n	80053bc <HAL_RCC_OscConfig+0xe4>
 80053da:	e014      	b.n	8005406 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fc fed4 	bl	8002188 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fc fed0 	bl	8002188 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	@ 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1ec      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f6:	4b53      	ldr	r3, [pc, #332]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x10c>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d063      	beq.n	80054da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005412:	4b4c      	ldr	r3, [pc, #304]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f003 030c 	and.w	r3, r3, #12
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800541e:	4b49      	ldr	r3, [pc, #292]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 030c 	and.w	r3, r3, #12
 8005426:	2b08      	cmp	r3, #8
 8005428:	d11c      	bne.n	8005464 <HAL_RCC_OscConfig+0x18c>
 800542a:	4b46      	ldr	r3, [pc, #280]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d116      	bne.n	8005464 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005436:	4b43      	ldr	r3, [pc, #268]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_RCC_OscConfig+0x176>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d001      	beq.n	800544e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e1c0      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800544e:	4b3d      	ldr	r3, [pc, #244]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4939      	ldr	r1, [pc, #228]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005462:	e03a      	b.n	80054da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800546c:	4b36      	ldr	r3, [pc, #216]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 800546e:	2201      	movs	r2, #1
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fc fe89 	bl	8002188 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800547a:	f7fc fe85 	bl	8002188 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e1a1      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	4b2d      	ldr	r3, [pc, #180]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005498:	4b2a      	ldr	r3, [pc, #168]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	4927      	ldr	r1, [pc, #156]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	e015      	b.n	80054da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ae:	4b26      	ldr	r3, [pc, #152]	@ (8005548 <HAL_RCC_OscConfig+0x270>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b4:	f7fc fe68 	bl	8002188 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054bc:	f7fc fe64 	bl	8002188 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e180      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1f0      	bne.n	80054bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d03a      	beq.n	800555c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d019      	beq.n	8005522 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ee:	4b17      	ldr	r3, [pc, #92]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054f4:	f7fc fe48 	bl	8002188 <HAL_GetTick>
 80054f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054fa:	e008      	b.n	800550e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054fc:	f7fc fe44 	bl	8002188 <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d901      	bls.n	800550e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e160      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <HAL_RCC_OscConfig+0x26c>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0f0      	beq.n	80054fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800551a:	2001      	movs	r0, #1
 800551c:	f000 face 	bl	8005abc <RCC_Delay>
 8005520:	e01c      	b.n	800555c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005522:	4b0a      	ldr	r3, [pc, #40]	@ (800554c <HAL_RCC_OscConfig+0x274>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005528:	f7fc fe2e 	bl	8002188 <HAL_GetTick>
 800552c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800552e:	e00f      	b.n	8005550 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005530:	f7fc fe2a 	bl	8002188 <HAL_GetTick>
 8005534:	4602      	mov	r2, r0
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d908      	bls.n	8005550 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e146      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
 8005542:	bf00      	nop
 8005544:	40021000 	.word	0x40021000
 8005548:	42420000 	.word	0x42420000
 800554c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005550:	4b92      	ldr	r3, [pc, #584]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e9      	bne.n	8005530 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80a6 	beq.w	80056b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800556a:	2300      	movs	r3, #0
 800556c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800556e:	4b8b      	ldr	r3, [pc, #556]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557a:	4b88      	ldr	r3, [pc, #544]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4a87      	ldr	r2, [pc, #540]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005584:	61d3      	str	r3, [r2, #28]
 8005586:	4b85      	ldr	r3, [pc, #532]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005596:	4b82      	ldr	r3, [pc, #520]	@ (80057a0 <HAL_RCC_OscConfig+0x4c8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d118      	bne.n	80055d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055a2:	4b7f      	ldr	r3, [pc, #508]	@ (80057a0 <HAL_RCC_OscConfig+0x4c8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a7e      	ldr	r2, [pc, #504]	@ (80057a0 <HAL_RCC_OscConfig+0x4c8>)
 80055a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055ae:	f7fc fdeb 	bl	8002188 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	e008      	b.n	80055c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b6:	f7fc fde7 	bl	8002188 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b64      	cmp	r3, #100	@ 0x64
 80055c2:	d901      	bls.n	80055c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e103      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c8:	4b75      	ldr	r3, [pc, #468]	@ (80057a0 <HAL_RCC_OscConfig+0x4c8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0f0      	beq.n	80055b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d106      	bne.n	80055ea <HAL_RCC_OscConfig+0x312>
 80055dc:	4b6f      	ldr	r3, [pc, #444]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	4a6e      	ldr	r2, [pc, #440]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	6213      	str	r3, [r2, #32]
 80055e8:	e02d      	b.n	8005646 <HAL_RCC_OscConfig+0x36e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <HAL_RCC_OscConfig+0x334>
 80055f2:	4b6a      	ldr	r3, [pc, #424]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	4a69      	ldr	r2, [pc, #420]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80055f8:	f023 0301 	bic.w	r3, r3, #1
 80055fc:	6213      	str	r3, [r2, #32]
 80055fe:	4b67      	ldr	r3, [pc, #412]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	4a66      	ldr	r2, [pc, #408]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	6213      	str	r3, [r2, #32]
 800560a:	e01c      	b.n	8005646 <HAL_RCC_OscConfig+0x36e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	2b05      	cmp	r3, #5
 8005612:	d10c      	bne.n	800562e <HAL_RCC_OscConfig+0x356>
 8005614:	4b61      	ldr	r3, [pc, #388]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	4a60      	ldr	r2, [pc, #384]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800561a:	f043 0304 	orr.w	r3, r3, #4
 800561e:	6213      	str	r3, [r2, #32]
 8005620:	4b5e      	ldr	r3, [pc, #376]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	4a5d      	ldr	r2, [pc, #372]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6213      	str	r3, [r2, #32]
 800562c:	e00b      	b.n	8005646 <HAL_RCC_OscConfig+0x36e>
 800562e:	4b5b      	ldr	r3, [pc, #364]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	4a5a      	ldr	r2, [pc, #360]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	6213      	str	r3, [r2, #32]
 800563a:	4b58      	ldr	r3, [pc, #352]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	4a57      	ldr	r2, [pc, #348]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005640:	f023 0304 	bic.w	r3, r3, #4
 8005644:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d015      	beq.n	800567a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564e:	f7fc fd9b 	bl	8002188 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fc fd97 	bl	8002188 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0b1      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b4b      	ldr	r3, [pc, #300]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCC_OscConfig+0x37e>
 8005678:	e014      	b.n	80056a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567a:	f7fc fd85 	bl	8002188 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005680:	e00a      	b.n	8005698 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fc fd81 	bl	8002188 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e09b      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005698:	4b40      	ldr	r3, [pc, #256]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ee      	bne.n	8005682 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b3c      	ldr	r3, [pc, #240]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	4a3b      	ldr	r2, [pc, #236]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 8087 	beq.w	80057ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056c0:	4b36      	ldr	r3, [pc, #216]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 030c 	and.w	r3, r3, #12
 80056c8:	2b08      	cmp	r3, #8
 80056ca:	d061      	beq.n	8005790 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d146      	bne.n	8005762 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d4:	4b33      	ldr	r3, [pc, #204]	@ (80057a4 <HAL_RCC_OscConfig+0x4cc>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056da:	f7fc fd55 	bl	8002188 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fc fd51 	bl	8002188 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e06d      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056f4:	4b29      	ldr	r3, [pc, #164]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005708:	d108      	bne.n	800571c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800570a:	4b24      	ldr	r3, [pc, #144]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4921      	ldr	r1, [pc, #132]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005718:	4313      	orrs	r3, r2
 800571a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571c:	4b1f      	ldr	r3, [pc, #124]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a19      	ldr	r1, [r3, #32]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572c:	430b      	orrs	r3, r1
 800572e:	491b      	ldr	r1, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005734:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <HAL_RCC_OscConfig+0x4cc>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573a:	f7fc fd25 	bl	8002188 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005742:	f7fc fd21 	bl	8002188 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e03d      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005754:	4b11      	ldr	r3, [pc, #68]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x46a>
 8005760:	e035      	b.n	80057ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005762:	4b10      	ldr	r3, [pc, #64]	@ (80057a4 <HAL_RCC_OscConfig+0x4cc>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fc fd0e 	bl	8002188 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005770:	f7fc fd0a 	bl	8002188 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e026      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005782:	4b06      	ldr	r3, [pc, #24]	@ (800579c <HAL_RCC_OscConfig+0x4c4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x498>
 800578e:	e01e      	b.n	80057ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69db      	ldr	r3, [r3, #28]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d107      	bne.n	80057a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e019      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
 800579c:	40021000 	.word	0x40021000
 80057a0:	40007000 	.word	0x40007000
 80057a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	@ (80057d8 <HAL_RCC_OscConfig+0x500>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d106      	bne.n	80057ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d001      	beq.n	80057ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40021000 	.word	0x40021000

080057dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0d0      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d910      	bls.n	8005820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	4b67      	ldr	r3, [pc, #412]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f023 0207 	bic.w	r2, r3, #7
 8005806:	4965      	ldr	r1, [pc, #404]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	4313      	orrs	r3, r2
 800580c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580e:	4b63      	ldr	r3, [pc, #396]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d001      	beq.n	8005820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e0b8      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d020      	beq.n	800586e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005838:	4b59      	ldr	r3, [pc, #356]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a58      	ldr	r2, [pc, #352]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800583e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005850:	4b53      	ldr	r3, [pc, #332]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a52      	ldr	r2, [pc, #328]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005856:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800585a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800585c:	4b50      	ldr	r3, [pc, #320]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	494d      	ldr	r1, [pc, #308]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800586a:	4313      	orrs	r3, r2
 800586c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	d040      	beq.n	80058fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d107      	bne.n	8005892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	4b47      	ldr	r3, [pc, #284]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d115      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e07f      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d107      	bne.n	80058aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800589a:	4b41      	ldr	r3, [pc, #260]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e073      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058aa:	4b3d      	ldr	r3, [pc, #244]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e06b      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ba:	4b39      	ldr	r3, [pc, #228]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f023 0203 	bic.w	r2, r3, #3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4936      	ldr	r1, [pc, #216]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058cc:	f7fc fc5c 	bl	8002188 <HAL_GetTick>
 80058d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d2:	e00a      	b.n	80058ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058d4:	f7fc fc58 	bl	8002188 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d901      	bls.n	80058ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e053      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ea:	4b2d      	ldr	r3, [pc, #180]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 020c 	and.w	r2, r3, #12
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d1eb      	bne.n	80058d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058fc:	4b27      	ldr	r3, [pc, #156]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0307 	and.w	r3, r3, #7
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d210      	bcs.n	800592c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590a:	4b24      	ldr	r3, [pc, #144]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f023 0207 	bic.w	r2, r3, #7
 8005912:	4922      	ldr	r1, [pc, #136]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	4b20      	ldr	r3, [pc, #128]	@ (800599c <HAL_RCC_ClockConfig+0x1c0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d001      	beq.n	800592c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e032      	b.n	8005992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005938:	4b19      	ldr	r3, [pc, #100]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4916      	ldr	r1, [pc, #88]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005956:	4b12      	ldr	r3, [pc, #72]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	490e      	ldr	r1, [pc, #56]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005966:	4313      	orrs	r3, r2
 8005968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800596a:	f000 f821 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 800596e:	4602      	mov	r2, r0
 8005970:	4b0b      	ldr	r3, [pc, #44]	@ (80059a0 <HAL_RCC_ClockConfig+0x1c4>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	490a      	ldr	r1, [pc, #40]	@ (80059a4 <HAL_RCC_ClockConfig+0x1c8>)
 800597c:	5ccb      	ldrb	r3, [r1, r3]
 800597e:	fa22 f303 	lsr.w	r3, r2, r3
 8005982:	4a09      	ldr	r2, [pc, #36]	@ (80059a8 <HAL_RCC_ClockConfig+0x1cc>)
 8005984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005986:	4b09      	ldr	r3, [pc, #36]	@ (80059ac <HAL_RCC_ClockConfig+0x1d0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7fc fbba 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40022000 	.word	0x40022000
 80059a0:	40021000 	.word	0x40021000
 80059a4:	0800a98c 	.word	0x0800a98c
 80059a8:	20000008 	.word	0x20000008
 80059ac:	2000000c 	.word	0x2000000c

080059b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80059ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x94>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 030c 	and.w	r3, r3, #12
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d002      	beq.n	80059e0 <HAL_RCC_GetSysClockFreq+0x30>
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d003      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0x36>
 80059de:	e027      	b.n	8005a30 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059e0:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x98>)
 80059e2:	613b      	str	r3, [r7, #16]
      break;
 80059e4:	e027      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	0c9b      	lsrs	r3, r3, #18
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	4a17      	ldr	r2, [pc, #92]	@ (8005a4c <HAL_RCC_GetSysClockFreq+0x9c>)
 80059f0:	5cd3      	ldrb	r3, [r2, r3]
 80059f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80059fe:	4b11      	ldr	r3, [pc, #68]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	0c5b      	lsrs	r3, r3, #17
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	4a11      	ldr	r2, [pc, #68]	@ (8005a50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a0a:	5cd3      	ldrb	r3, [r2, r3]
 8005a0c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a0d      	ldr	r2, [pc, #52]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a12:	fb03 f202 	mul.w	r2, r3, r2
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	e004      	b.n	8005a2a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0c      	ldr	r2, [pc, #48]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	613b      	str	r3, [r7, #16]
      break;
 8005a2e:	e002      	b.n	8005a36 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a30:	4b05      	ldr	r3, [pc, #20]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x98>)
 8005a32:	613b      	str	r3, [r7, #16]
      break;
 8005a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a36:	693b      	ldr	r3, [r7, #16]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40021000 	.word	0x40021000
 8005a48:	007a1200 	.word	0x007a1200
 8005a4c:	0800a9a4 	.word	0x0800a9a4
 8005a50:	0800a9b4 	.word	0x0800a9b4
 8005a54:	003d0900 	.word	0x003d0900

08005a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b02      	ldr	r3, [pc, #8]	@ (8005a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bc80      	pop	{r7}
 8005a66:	4770      	bx	lr
 8005a68:	20000008 	.word	0x20000008

08005a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a70:	f7ff fff2 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a74:	4602      	mov	r2, r0
 8005a76:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	4903      	ldr	r1, [pc, #12]	@ (8005a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a82:	5ccb      	ldrb	r3, [r1, r3]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40021000 	.word	0x40021000
 8005a90:	0800a99c 	.word	0x0800a99c

08005a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a98:	f7ff ffde 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	0adb      	lsrs	r3, r3, #11
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	4903      	ldr	r1, [pc, #12]	@ (8005ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aaa:	5ccb      	ldrb	r3, [r1, r3]
 8005aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	0800a99c 	.word	0x0800a99c

08005abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <RCC_Delay+0x34>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8005af4 <RCC_Delay+0x38>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0a5b      	lsrs	r3, r3, #9
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ad8:	bf00      	nop
  }
  while (Delay --);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1e5a      	subs	r2, r3, #1
 8005ade:	60fa      	str	r2, [r7, #12]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1f9      	bne.n	8005ad8 <RCC_Delay+0x1c>
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	20000008 	.word	0x20000008
 8005af4:	10624dd3 	.word	0x10624dd3

08005af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e042      	b.n	8005b90 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fc fa6a 	bl	8001ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f82b 	bl	8005b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bd2:	f023 030c 	bic.w	r3, r3, #12
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005cac <UART_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d103      	bne.n	8005c08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c00:	f7ff ff48 	bl	8005a94 <HAL_RCC_GetPCLK2Freq>
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	e002      	b.n	8005c0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c08:	f7ff ff30 	bl	8005a6c <HAL_RCC_GetPCLK1Freq>
 8005c0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009a      	lsls	r2, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	4a22      	ldr	r2, [pc, #136]	@ (8005cb0 <UART_SetConfig+0x118>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	0119      	lsls	r1, r3, #4
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009a      	lsls	r2, r3, #2
 8005c38:	441a      	add	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <UART_SetConfig+0x118>)
 8005c46:	fba3 0302 	umull	r0, r3, r3, r2
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2064      	movs	r0, #100	@ 0x64
 8005c4e:	fb00 f303 	mul.w	r3, r0, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	3332      	adds	r3, #50	@ 0x32
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <UART_SetConfig+0x118>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c64:	4419      	add	r1, r3
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009a      	lsls	r2, r3, #2
 8005c70:	441a      	add	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <UART_SetConfig+0x118>)
 8005c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	2064      	movs	r0, #100	@ 0x64
 8005c86:	fb00 f303 	mul.w	r3, r0, r3
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	011b      	lsls	r3, r3, #4
 8005c8e:	3332      	adds	r3, #50	@ 0x32
 8005c90:	4a07      	ldr	r2, [pc, #28]	@ (8005cb0 <UART_SetConfig+0x118>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	51eb851f 	.word	0x51eb851f

08005cb4 <__cvt>:
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cba:	461d      	mov	r5, r3
 8005cbc:	bfbb      	ittet	lt
 8005cbe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005cc2:	461d      	movlt	r5, r3
 8005cc4:	2300      	movge	r3, #0
 8005cc6:	232d      	movlt	r3, #45	@ 0x2d
 8005cc8:	b088      	sub	sp, #32
 8005cca:	4614      	mov	r4, r2
 8005ccc:	bfb8      	it	lt
 8005cce:	4614      	movlt	r4, r2
 8005cd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cd2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005cd4:	7013      	strb	r3, [r2, #0]
 8005cd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005cd8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005cdc:	f023 0820 	bic.w	r8, r3, #32
 8005ce0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ce4:	d005      	beq.n	8005cf2 <__cvt+0x3e>
 8005ce6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005cea:	d100      	bne.n	8005cee <__cvt+0x3a>
 8005cec:	3601      	adds	r6, #1
 8005cee:	2302      	movs	r3, #2
 8005cf0:	e000      	b.n	8005cf4 <__cvt+0x40>
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	aa07      	add	r2, sp, #28
 8005cf6:	9204      	str	r2, [sp, #16]
 8005cf8:	aa06      	add	r2, sp, #24
 8005cfa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005cfe:	e9cd 3600 	strd	r3, r6, [sp]
 8005d02:	4622      	mov	r2, r4
 8005d04:	462b      	mov	r3, r5
 8005d06:	f001 f88b 	bl	8006e20 <_dtoa_r>
 8005d0a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d0e:	4607      	mov	r7, r0
 8005d10:	d119      	bne.n	8005d46 <__cvt+0x92>
 8005d12:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d14:	07db      	lsls	r3, r3, #31
 8005d16:	d50e      	bpl.n	8005d36 <__cvt+0x82>
 8005d18:	eb00 0906 	add.w	r9, r0, r6
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4620      	mov	r0, r4
 8005d22:	4629      	mov	r1, r5
 8005d24:	f7fa fe40 	bl	80009a8 <__aeabi_dcmpeq>
 8005d28:	b108      	cbz	r0, 8005d2e <__cvt+0x7a>
 8005d2a:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d2e:	2230      	movs	r2, #48	@ 0x30
 8005d30:	9b07      	ldr	r3, [sp, #28]
 8005d32:	454b      	cmp	r3, r9
 8005d34:	d31e      	bcc.n	8005d74 <__cvt+0xc0>
 8005d36:	4638      	mov	r0, r7
 8005d38:	9b07      	ldr	r3, [sp, #28]
 8005d3a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005d3c:	1bdb      	subs	r3, r3, r7
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	b008      	add	sp, #32
 8005d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d46:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d4a:	eb00 0906 	add.w	r9, r0, r6
 8005d4e:	d1e5      	bne.n	8005d1c <__cvt+0x68>
 8005d50:	7803      	ldrb	r3, [r0, #0]
 8005d52:	2b30      	cmp	r3, #48	@ 0x30
 8005d54:	d10a      	bne.n	8005d6c <__cvt+0xb8>
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fe23 	bl	80009a8 <__aeabi_dcmpeq>
 8005d62:	b918      	cbnz	r0, 8005d6c <__cvt+0xb8>
 8005d64:	f1c6 0601 	rsb	r6, r6, #1
 8005d68:	f8ca 6000 	str.w	r6, [sl]
 8005d6c:	f8da 3000 	ldr.w	r3, [sl]
 8005d70:	4499      	add	r9, r3
 8005d72:	e7d3      	b.n	8005d1c <__cvt+0x68>
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	9107      	str	r1, [sp, #28]
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e7d9      	b.n	8005d30 <__cvt+0x7c>

08005d7c <__exponent>:
 8005d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	bfb6      	itet	lt
 8005d82:	232d      	movlt	r3, #45	@ 0x2d
 8005d84:	232b      	movge	r3, #43	@ 0x2b
 8005d86:	4249      	neglt	r1, r1
 8005d88:	2909      	cmp	r1, #9
 8005d8a:	7002      	strb	r2, [r0, #0]
 8005d8c:	7043      	strb	r3, [r0, #1]
 8005d8e:	dd29      	ble.n	8005de4 <__exponent+0x68>
 8005d90:	f10d 0307 	add.w	r3, sp, #7
 8005d94:	461d      	mov	r5, r3
 8005d96:	270a      	movs	r7, #10
 8005d98:	fbb1 f6f7 	udiv	r6, r1, r7
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	fb07 1416 	mls	r4, r7, r6, r1
 8005da2:	3430      	adds	r4, #48	@ 0x30
 8005da4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005da8:	460c      	mov	r4, r1
 8005daa:	2c63      	cmp	r4, #99	@ 0x63
 8005dac:	4631      	mov	r1, r6
 8005dae:	f103 33ff 	add.w	r3, r3, #4294967295
 8005db2:	dcf1      	bgt.n	8005d98 <__exponent+0x1c>
 8005db4:	3130      	adds	r1, #48	@ 0x30
 8005db6:	1e94      	subs	r4, r2, #2
 8005db8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005dbc:	4623      	mov	r3, r4
 8005dbe:	1c41      	adds	r1, r0, #1
 8005dc0:	42ab      	cmp	r3, r5
 8005dc2:	d30a      	bcc.n	8005dda <__exponent+0x5e>
 8005dc4:	f10d 0309 	add.w	r3, sp, #9
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	42ac      	cmp	r4, r5
 8005dcc:	bf88      	it	hi
 8005dce:	2300      	movhi	r3, #0
 8005dd0:	3302      	adds	r3, #2
 8005dd2:	4403      	add	r3, r0
 8005dd4:	1a18      	subs	r0, r3, r0
 8005dd6:	b003      	add	sp, #12
 8005dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dda:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005dde:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005de2:	e7ed      	b.n	8005dc0 <__exponent+0x44>
 8005de4:	2330      	movs	r3, #48	@ 0x30
 8005de6:	3130      	adds	r1, #48	@ 0x30
 8005de8:	7083      	strb	r3, [r0, #2]
 8005dea:	70c1      	strb	r1, [r0, #3]
 8005dec:	1d03      	adds	r3, r0, #4
 8005dee:	e7f1      	b.n	8005dd4 <__exponent+0x58>

08005df0 <_printf_float>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	b091      	sub	sp, #68	@ 0x44
 8005df6:	460c      	mov	r4, r1
 8005df8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005dfc:	4616      	mov	r6, r2
 8005dfe:	461f      	mov	r7, r3
 8005e00:	4605      	mov	r5, r0
 8005e02:	f000 feeb 	bl	8006bdc <_localeconv_r>
 8005e06:	6803      	ldr	r3, [r0, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	9308      	str	r3, [sp, #32]
 8005e0c:	f7fa f9a0 	bl	8000150 <strlen>
 8005e10:	2300      	movs	r3, #0
 8005e12:	930e      	str	r3, [sp, #56]	@ 0x38
 8005e14:	f8d8 3000 	ldr.w	r3, [r8]
 8005e18:	9009      	str	r0, [sp, #36]	@ 0x24
 8005e1a:	3307      	adds	r3, #7
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	f103 0208 	add.w	r2, r3, #8
 8005e24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005e28:	f8d4 b000 	ldr.w	fp, [r4]
 8005e2c:	f8c8 2000 	str.w	r2, [r8]
 8005e30:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e34:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e3a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80060bc <_printf_float+0x2cc>)
 8005e4c:	f7fa fdde 	bl	8000a0c <__aeabi_dcmpun>
 8005e50:	bb70      	cbnz	r0, 8005eb0 <_printf_float+0xc0>
 8005e52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	4b98      	ldr	r3, [pc, #608]	@ (80060bc <_printf_float+0x2cc>)
 8005e5c:	f7fa fdb8 	bl	80009d0 <__aeabi_dcmple>
 8005e60:	bb30      	cbnz	r0, 8005eb0 <_printf_float+0xc0>
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	4640      	mov	r0, r8
 8005e68:	4649      	mov	r1, r9
 8005e6a:	f7fa fda7 	bl	80009bc <__aeabi_dcmplt>
 8005e6e:	b110      	cbz	r0, 8005e76 <_printf_float+0x86>
 8005e70:	232d      	movs	r3, #45	@ 0x2d
 8005e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e76:	4a92      	ldr	r2, [pc, #584]	@ (80060c0 <_printf_float+0x2d0>)
 8005e78:	4b92      	ldr	r3, [pc, #584]	@ (80060c4 <_printf_float+0x2d4>)
 8005e7a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005e7e:	bf8c      	ite	hi
 8005e80:	4690      	movhi	r8, r2
 8005e82:	4698      	movls	r8, r3
 8005e84:	2303      	movs	r3, #3
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	6123      	str	r3, [r4, #16]
 8005e8c:	f02b 0304 	bic.w	r3, fp, #4
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	4633      	mov	r3, r6
 8005e94:	4621      	mov	r1, r4
 8005e96:	4628      	mov	r0, r5
 8005e98:	9700      	str	r7, [sp, #0]
 8005e9a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005e9c:	f000 f9d4 	bl	8006248 <_printf_common>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	f040 8090 	bne.w	8005fc6 <_printf_float+0x1d6>
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8005eaa:	b011      	add	sp, #68	@ 0x44
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	4640      	mov	r0, r8
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	f7fa fda8 	bl	8000a0c <__aeabi_dcmpun>
 8005ebc:	b148      	cbz	r0, 8005ed2 <_printf_float+0xe2>
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	bfb8      	it	lt
 8005ec4:	232d      	movlt	r3, #45	@ 0x2d
 8005ec6:	4a80      	ldr	r2, [pc, #512]	@ (80060c8 <_printf_float+0x2d8>)
 8005ec8:	bfb8      	it	lt
 8005eca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005ece:	4b7f      	ldr	r3, [pc, #508]	@ (80060cc <_printf_float+0x2dc>)
 8005ed0:	e7d3      	b.n	8005e7a <_printf_float+0x8a>
 8005ed2:	6863      	ldr	r3, [r4, #4]
 8005ed4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	d13f      	bne.n	8005f5c <_printf_float+0x16c>
 8005edc:	2306      	movs	r3, #6
 8005ede:	6063      	str	r3, [r4, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	9206      	str	r2, [sp, #24]
 8005eea:	aa0e      	add	r2, sp, #56	@ 0x38
 8005eec:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005ef0:	aa0d      	add	r2, sp, #52	@ 0x34
 8005ef2:	9203      	str	r2, [sp, #12]
 8005ef4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005ef8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005efc:	6863      	ldr	r3, [r4, #4]
 8005efe:	4642      	mov	r2, r8
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	4628      	mov	r0, r5
 8005f04:	464b      	mov	r3, r9
 8005f06:	910a      	str	r1, [sp, #40]	@ 0x28
 8005f08:	f7ff fed4 	bl	8005cb4 <__cvt>
 8005f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f0e:	4680      	mov	r8, r0
 8005f10:	2947      	cmp	r1, #71	@ 0x47
 8005f12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005f14:	d128      	bne.n	8005f68 <_printf_float+0x178>
 8005f16:	1cc8      	adds	r0, r1, #3
 8005f18:	db02      	blt.n	8005f20 <_printf_float+0x130>
 8005f1a:	6863      	ldr	r3, [r4, #4]
 8005f1c:	4299      	cmp	r1, r3
 8005f1e:	dd40      	ble.n	8005fa2 <_printf_float+0x1b2>
 8005f20:	f1aa 0a02 	sub.w	sl, sl, #2
 8005f24:	fa5f fa8a 	uxtb.w	sl, sl
 8005f28:	4652      	mov	r2, sl
 8005f2a:	3901      	subs	r1, #1
 8005f2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005f30:	910d      	str	r1, [sp, #52]	@ 0x34
 8005f32:	f7ff ff23 	bl	8005d7c <__exponent>
 8005f36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f38:	4681      	mov	r9, r0
 8005f3a:	1813      	adds	r3, r2, r0
 8005f3c:	2a01      	cmp	r2, #1
 8005f3e:	6123      	str	r3, [r4, #16]
 8005f40:	dc02      	bgt.n	8005f48 <_printf_float+0x158>
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	07d2      	lsls	r2, r2, #31
 8005f46:	d501      	bpl.n	8005f4c <_printf_float+0x15c>
 8005f48:	3301      	adds	r3, #1
 8005f4a:	6123      	str	r3, [r4, #16]
 8005f4c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d09e      	beq.n	8005e92 <_printf_float+0xa2>
 8005f54:	232d      	movs	r3, #45	@ 0x2d
 8005f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f5a:	e79a      	b.n	8005e92 <_printf_float+0xa2>
 8005f5c:	2947      	cmp	r1, #71	@ 0x47
 8005f5e:	d1bf      	bne.n	8005ee0 <_printf_float+0xf0>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1bd      	bne.n	8005ee0 <_printf_float+0xf0>
 8005f64:	2301      	movs	r3, #1
 8005f66:	e7ba      	b.n	8005ede <_printf_float+0xee>
 8005f68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005f6c:	d9dc      	bls.n	8005f28 <_printf_float+0x138>
 8005f6e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005f72:	d118      	bne.n	8005fa6 <_printf_float+0x1b6>
 8005f74:	2900      	cmp	r1, #0
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	dd0b      	ble.n	8005f92 <_printf_float+0x1a2>
 8005f7a:	6121      	str	r1, [r4, #16]
 8005f7c:	b913      	cbnz	r3, 8005f84 <_printf_float+0x194>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	07d0      	lsls	r0, r2, #31
 8005f82:	d502      	bpl.n	8005f8a <_printf_float+0x19a>
 8005f84:	3301      	adds	r3, #1
 8005f86:	440b      	add	r3, r1
 8005f88:	6123      	str	r3, [r4, #16]
 8005f8a:	f04f 0900 	mov.w	r9, #0
 8005f8e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005f90:	e7dc      	b.n	8005f4c <_printf_float+0x15c>
 8005f92:	b913      	cbnz	r3, 8005f9a <_printf_float+0x1aa>
 8005f94:	6822      	ldr	r2, [r4, #0]
 8005f96:	07d2      	lsls	r2, r2, #31
 8005f98:	d501      	bpl.n	8005f9e <_printf_float+0x1ae>
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	e7f4      	b.n	8005f88 <_printf_float+0x198>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7f2      	b.n	8005f88 <_printf_float+0x198>
 8005fa2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005fa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	db05      	blt.n	8005fb8 <_printf_float+0x1c8>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	6121      	str	r1, [r4, #16]
 8005fb0:	07d8      	lsls	r0, r3, #31
 8005fb2:	d5ea      	bpl.n	8005f8a <_printf_float+0x19a>
 8005fb4:	1c4b      	adds	r3, r1, #1
 8005fb6:	e7e7      	b.n	8005f88 <_printf_float+0x198>
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	bfcc      	ite	gt
 8005fbc:	2201      	movgt	r2, #1
 8005fbe:	f1c1 0202 	rsble	r2, r1, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	e7e0      	b.n	8005f88 <_printf_float+0x198>
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	055a      	lsls	r2, r3, #21
 8005fca:	d407      	bmi.n	8005fdc <_printf_float+0x1ec>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	4642      	mov	r2, r8
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d12b      	bne.n	8006032 <_printf_float+0x242>
 8005fda:	e764      	b.n	8005ea6 <_printf_float+0xb6>
 8005fdc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005fe0:	f240 80dc 	bls.w	800619c <_printf_float+0x3ac>
 8005fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2300      	movs	r3, #0
 8005fec:	f7fa fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d033      	beq.n	800605c <_printf_float+0x26c>
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	4a35      	ldr	r2, [pc, #212]	@ (80060d0 <_printf_float+0x2e0>)
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f af51 	beq.w	8005ea6 <_printf_float+0xb6>
 8006004:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006008:	4543      	cmp	r3, r8
 800600a:	db02      	blt.n	8006012 <_printf_float+0x222>
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	07d8      	lsls	r0, r3, #31
 8006010:	d50f      	bpl.n	8006032 <_printf_float+0x242>
 8006012:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006016:	4631      	mov	r1, r6
 8006018:	4628      	mov	r0, r5
 800601a:	47b8      	blx	r7
 800601c:	3001      	adds	r0, #1
 800601e:	f43f af42 	beq.w	8005ea6 <_printf_float+0xb6>
 8006022:	f04f 0900 	mov.w	r9, #0
 8006026:	f108 38ff 	add.w	r8, r8, #4294967295
 800602a:	f104 0a1a 	add.w	sl, r4, #26
 800602e:	45c8      	cmp	r8, r9
 8006030:	dc09      	bgt.n	8006046 <_printf_float+0x256>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	079b      	lsls	r3, r3, #30
 8006036:	f100 8102 	bmi.w	800623e <_printf_float+0x44e>
 800603a:	68e0      	ldr	r0, [r4, #12]
 800603c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800603e:	4298      	cmp	r0, r3
 8006040:	bfb8      	it	lt
 8006042:	4618      	movlt	r0, r3
 8006044:	e731      	b.n	8005eaa <_printf_float+0xba>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	f43f af28 	beq.w	8005ea6 <_printf_float+0xb6>
 8006056:	f109 0901 	add.w	r9, r9, #1
 800605a:	e7e8      	b.n	800602e <_printf_float+0x23e>
 800605c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800605e:	2b00      	cmp	r3, #0
 8006060:	dc38      	bgt.n	80060d4 <_printf_float+0x2e4>
 8006062:	2301      	movs	r3, #1
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	4a19      	ldr	r2, [pc, #100]	@ (80060d0 <_printf_float+0x2e0>)
 800606a:	47b8      	blx	r7
 800606c:	3001      	adds	r0, #1
 800606e:	f43f af1a 	beq.w	8005ea6 <_printf_float+0xb6>
 8006072:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006076:	ea59 0303 	orrs.w	r3, r9, r3
 800607a:	d102      	bne.n	8006082 <_printf_float+0x292>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	07d9      	lsls	r1, r3, #31
 8006080:	d5d7      	bpl.n	8006032 <_printf_float+0x242>
 8006082:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	47b8      	blx	r7
 800608c:	3001      	adds	r0, #1
 800608e:	f43f af0a 	beq.w	8005ea6 <_printf_float+0xb6>
 8006092:	f04f 0a00 	mov.w	sl, #0
 8006096:	f104 0b1a 	add.w	fp, r4, #26
 800609a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800609c:	425b      	negs	r3, r3
 800609e:	4553      	cmp	r3, sl
 80060a0:	dc01      	bgt.n	80060a6 <_printf_float+0x2b6>
 80060a2:	464b      	mov	r3, r9
 80060a4:	e793      	b.n	8005fce <_printf_float+0x1de>
 80060a6:	2301      	movs	r3, #1
 80060a8:	465a      	mov	r2, fp
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f aef8 	beq.w	8005ea6 <_printf_float+0xb6>
 80060b6:	f10a 0a01 	add.w	sl, sl, #1
 80060ba:	e7ee      	b.n	800609a <_printf_float+0x2aa>
 80060bc:	7fefffff 	.word	0x7fefffff
 80060c0:	0800a9ba 	.word	0x0800a9ba
 80060c4:	0800a9b6 	.word	0x0800a9b6
 80060c8:	0800a9c2 	.word	0x0800a9c2
 80060cc:	0800a9be 	.word	0x0800a9be
 80060d0:	0800a9c6 	.word	0x0800a9c6
 80060d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060d6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80060da:	4553      	cmp	r3, sl
 80060dc:	bfa8      	it	ge
 80060de:	4653      	movge	r3, sl
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	4699      	mov	r9, r3
 80060e4:	dc36      	bgt.n	8006154 <_printf_float+0x364>
 80060e6:	f04f 0b00 	mov.w	fp, #0
 80060ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060ee:	f104 021a 	add.w	r2, r4, #26
 80060f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80060f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f6:	eba3 0309 	sub.w	r3, r3, r9
 80060fa:	455b      	cmp	r3, fp
 80060fc:	dc31      	bgt.n	8006162 <_printf_float+0x372>
 80060fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006100:	459a      	cmp	sl, r3
 8006102:	dc3a      	bgt.n	800617a <_printf_float+0x38a>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	07da      	lsls	r2, r3, #31
 8006108:	d437      	bmi.n	800617a <_printf_float+0x38a>
 800610a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800610c:	ebaa 0903 	sub.w	r9, sl, r3
 8006110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006112:	ebaa 0303 	sub.w	r3, sl, r3
 8006116:	4599      	cmp	r9, r3
 8006118:	bfa8      	it	ge
 800611a:	4699      	movge	r9, r3
 800611c:	f1b9 0f00 	cmp.w	r9, #0
 8006120:	dc33      	bgt.n	800618a <_printf_float+0x39a>
 8006122:	f04f 0800 	mov.w	r8, #0
 8006126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800612a:	f104 0b1a 	add.w	fp, r4, #26
 800612e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006130:	ebaa 0303 	sub.w	r3, sl, r3
 8006134:	eba3 0309 	sub.w	r3, r3, r9
 8006138:	4543      	cmp	r3, r8
 800613a:	f77f af7a 	ble.w	8006032 <_printf_float+0x242>
 800613e:	2301      	movs	r3, #1
 8006140:	465a      	mov	r2, fp
 8006142:	4631      	mov	r1, r6
 8006144:	4628      	mov	r0, r5
 8006146:	47b8      	blx	r7
 8006148:	3001      	adds	r0, #1
 800614a:	f43f aeac 	beq.w	8005ea6 <_printf_float+0xb6>
 800614e:	f108 0801 	add.w	r8, r8, #1
 8006152:	e7ec      	b.n	800612e <_printf_float+0x33e>
 8006154:	4642      	mov	r2, r8
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	d1c2      	bne.n	80060e6 <_printf_float+0x2f6>
 8006160:	e6a1      	b.n	8005ea6 <_printf_float+0xb6>
 8006162:	2301      	movs	r3, #1
 8006164:	4631      	mov	r1, r6
 8006166:	4628      	mov	r0, r5
 8006168:	920a      	str	r2, [sp, #40]	@ 0x28
 800616a:	47b8      	blx	r7
 800616c:	3001      	adds	r0, #1
 800616e:	f43f ae9a 	beq.w	8005ea6 <_printf_float+0xb6>
 8006172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006174:	f10b 0b01 	add.w	fp, fp, #1
 8006178:	e7bb      	b.n	80060f2 <_printf_float+0x302>
 800617a:	4631      	mov	r1, r6
 800617c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d1c0      	bne.n	800610a <_printf_float+0x31a>
 8006188:	e68d      	b.n	8005ea6 <_printf_float+0xb6>
 800618a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800618c:	464b      	mov	r3, r9
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	4442      	add	r2, r8
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	d1c3      	bne.n	8006122 <_printf_float+0x332>
 800619a:	e684      	b.n	8005ea6 <_printf_float+0xb6>
 800619c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80061a0:	f1ba 0f01 	cmp.w	sl, #1
 80061a4:	dc01      	bgt.n	80061aa <_printf_float+0x3ba>
 80061a6:	07db      	lsls	r3, r3, #31
 80061a8:	d536      	bpl.n	8006218 <_printf_float+0x428>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4642      	mov	r2, r8
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	f43f ae76 	beq.w	8005ea6 <_printf_float+0xb6>
 80061ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	f43f ae6e 	beq.w	8005ea6 <_printf_float+0xb6>
 80061ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80061ce:	2200      	movs	r2, #0
 80061d0:	2300      	movs	r3, #0
 80061d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80061d6:	f7fa fbe7 	bl	80009a8 <__aeabi_dcmpeq>
 80061da:	b9c0      	cbnz	r0, 800620e <_printf_float+0x41e>
 80061dc:	4653      	mov	r3, sl
 80061de:	f108 0201 	add.w	r2, r8, #1
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	d10c      	bne.n	8006206 <_printf_float+0x416>
 80061ec:	e65b      	b.n	8005ea6 <_printf_float+0xb6>
 80061ee:	2301      	movs	r3, #1
 80061f0:	465a      	mov	r2, fp
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f ae54 	beq.w	8005ea6 <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	45d0      	cmp	r8, sl
 8006204:	dbf3      	blt.n	80061ee <_printf_float+0x3fe>
 8006206:	464b      	mov	r3, r9
 8006208:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800620c:	e6e0      	b.n	8005fd0 <_printf_float+0x1e0>
 800620e:	f04f 0800 	mov.w	r8, #0
 8006212:	f104 0b1a 	add.w	fp, r4, #26
 8006216:	e7f4      	b.n	8006202 <_printf_float+0x412>
 8006218:	2301      	movs	r3, #1
 800621a:	4642      	mov	r2, r8
 800621c:	e7e1      	b.n	80061e2 <_printf_float+0x3f2>
 800621e:	2301      	movs	r3, #1
 8006220:	464a      	mov	r2, r9
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	f43f ae3c 	beq.w	8005ea6 <_printf_float+0xb6>
 800622e:	f108 0801 	add.w	r8, r8, #1
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006236:	1a5b      	subs	r3, r3, r1
 8006238:	4543      	cmp	r3, r8
 800623a:	dcf0      	bgt.n	800621e <_printf_float+0x42e>
 800623c:	e6fd      	b.n	800603a <_printf_float+0x24a>
 800623e:	f04f 0800 	mov.w	r8, #0
 8006242:	f104 0919 	add.w	r9, r4, #25
 8006246:	e7f4      	b.n	8006232 <_printf_float+0x442>

08006248 <_printf_common>:
 8006248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624c:	4616      	mov	r6, r2
 800624e:	4698      	mov	r8, r3
 8006250:	688a      	ldr	r2, [r1, #8]
 8006252:	690b      	ldr	r3, [r1, #16]
 8006254:	4607      	mov	r7, r0
 8006256:	4293      	cmp	r3, r2
 8006258:	bfb8      	it	lt
 800625a:	4613      	movlt	r3, r2
 800625c:	6033      	str	r3, [r6, #0]
 800625e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006262:	460c      	mov	r4, r1
 8006264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006268:	b10a      	cbz	r2, 800626e <_printf_common+0x26>
 800626a:	3301      	adds	r3, #1
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	0699      	lsls	r1, r3, #26
 8006272:	bf42      	ittt	mi
 8006274:	6833      	ldrmi	r3, [r6, #0]
 8006276:	3302      	addmi	r3, #2
 8006278:	6033      	strmi	r3, [r6, #0]
 800627a:	6825      	ldr	r5, [r4, #0]
 800627c:	f015 0506 	ands.w	r5, r5, #6
 8006280:	d106      	bne.n	8006290 <_printf_common+0x48>
 8006282:	f104 0a19 	add.w	sl, r4, #25
 8006286:	68e3      	ldr	r3, [r4, #12]
 8006288:	6832      	ldr	r2, [r6, #0]
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	42ab      	cmp	r3, r5
 800628e:	dc2b      	bgt.n	80062e8 <_printf_common+0xa0>
 8006290:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	3b00      	subs	r3, #0
 8006298:	bf18      	it	ne
 800629a:	2301      	movne	r3, #1
 800629c:	0692      	lsls	r2, r2, #26
 800629e:	d430      	bmi.n	8006302 <_printf_common+0xba>
 80062a0:	4641      	mov	r1, r8
 80062a2:	4638      	mov	r0, r7
 80062a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80062a8:	47c8      	blx	r9
 80062aa:	3001      	adds	r0, #1
 80062ac:	d023      	beq.n	80062f6 <_printf_common+0xae>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	6922      	ldr	r2, [r4, #16]
 80062b2:	f003 0306 	and.w	r3, r3, #6
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	bf14      	ite	ne
 80062ba:	2500      	movne	r5, #0
 80062bc:	6833      	ldreq	r3, [r6, #0]
 80062be:	f04f 0600 	mov.w	r6, #0
 80062c2:	bf08      	it	eq
 80062c4:	68e5      	ldreq	r5, [r4, #12]
 80062c6:	f104 041a 	add.w	r4, r4, #26
 80062ca:	bf08      	it	eq
 80062cc:	1aed      	subeq	r5, r5, r3
 80062ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80062d2:	bf08      	it	eq
 80062d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062d8:	4293      	cmp	r3, r2
 80062da:	bfc4      	itt	gt
 80062dc:	1a9b      	subgt	r3, r3, r2
 80062de:	18ed      	addgt	r5, r5, r3
 80062e0:	42b5      	cmp	r5, r6
 80062e2:	d11a      	bne.n	800631a <_printf_common+0xd2>
 80062e4:	2000      	movs	r0, #0
 80062e6:	e008      	b.n	80062fa <_printf_common+0xb2>
 80062e8:	2301      	movs	r3, #1
 80062ea:	4652      	mov	r2, sl
 80062ec:	4641      	mov	r1, r8
 80062ee:	4638      	mov	r0, r7
 80062f0:	47c8      	blx	r9
 80062f2:	3001      	adds	r0, #1
 80062f4:	d103      	bne.n	80062fe <_printf_common+0xb6>
 80062f6:	f04f 30ff 	mov.w	r0, #4294967295
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	3501      	adds	r5, #1
 8006300:	e7c1      	b.n	8006286 <_printf_common+0x3e>
 8006302:	2030      	movs	r0, #48	@ 0x30
 8006304:	18e1      	adds	r1, r4, r3
 8006306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006310:	4422      	add	r2, r4
 8006312:	3302      	adds	r3, #2
 8006314:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006318:	e7c2      	b.n	80062a0 <_printf_common+0x58>
 800631a:	2301      	movs	r3, #1
 800631c:	4622      	mov	r2, r4
 800631e:	4641      	mov	r1, r8
 8006320:	4638      	mov	r0, r7
 8006322:	47c8      	blx	r9
 8006324:	3001      	adds	r0, #1
 8006326:	d0e6      	beq.n	80062f6 <_printf_common+0xae>
 8006328:	3601      	adds	r6, #1
 800632a:	e7d9      	b.n	80062e0 <_printf_common+0x98>

0800632c <_printf_i>:
 800632c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	7e0f      	ldrb	r7, [r1, #24]
 8006332:	4691      	mov	r9, r2
 8006334:	2f78      	cmp	r7, #120	@ 0x78
 8006336:	4680      	mov	r8, r0
 8006338:	460c      	mov	r4, r1
 800633a:	469a      	mov	sl, r3
 800633c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800633e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006342:	d807      	bhi.n	8006354 <_printf_i+0x28>
 8006344:	2f62      	cmp	r7, #98	@ 0x62
 8006346:	d80a      	bhi.n	800635e <_printf_i+0x32>
 8006348:	2f00      	cmp	r7, #0
 800634a:	f000 80d1 	beq.w	80064f0 <_printf_i+0x1c4>
 800634e:	2f58      	cmp	r7, #88	@ 0x58
 8006350:	f000 80b8 	beq.w	80064c4 <_printf_i+0x198>
 8006354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800635c:	e03a      	b.n	80063d4 <_printf_i+0xa8>
 800635e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006362:	2b15      	cmp	r3, #21
 8006364:	d8f6      	bhi.n	8006354 <_printf_i+0x28>
 8006366:	a101      	add	r1, pc, #4	@ (adr r1, 800636c <_printf_i+0x40>)
 8006368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800636c:	080063c5 	.word	0x080063c5
 8006370:	080063d9 	.word	0x080063d9
 8006374:	08006355 	.word	0x08006355
 8006378:	08006355 	.word	0x08006355
 800637c:	08006355 	.word	0x08006355
 8006380:	08006355 	.word	0x08006355
 8006384:	080063d9 	.word	0x080063d9
 8006388:	08006355 	.word	0x08006355
 800638c:	08006355 	.word	0x08006355
 8006390:	08006355 	.word	0x08006355
 8006394:	08006355 	.word	0x08006355
 8006398:	080064d7 	.word	0x080064d7
 800639c:	08006403 	.word	0x08006403
 80063a0:	08006491 	.word	0x08006491
 80063a4:	08006355 	.word	0x08006355
 80063a8:	08006355 	.word	0x08006355
 80063ac:	080064f9 	.word	0x080064f9
 80063b0:	08006355 	.word	0x08006355
 80063b4:	08006403 	.word	0x08006403
 80063b8:	08006355 	.word	0x08006355
 80063bc:	08006355 	.word	0x08006355
 80063c0:	08006499 	.word	0x08006499
 80063c4:	6833      	ldr	r3, [r6, #0]
 80063c6:	1d1a      	adds	r2, r3, #4
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6032      	str	r2, [r6, #0]
 80063cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063d4:	2301      	movs	r3, #1
 80063d6:	e09c      	b.n	8006512 <_printf_i+0x1e6>
 80063d8:	6833      	ldr	r3, [r6, #0]
 80063da:	6820      	ldr	r0, [r4, #0]
 80063dc:	1d19      	adds	r1, r3, #4
 80063de:	6031      	str	r1, [r6, #0]
 80063e0:	0606      	lsls	r6, r0, #24
 80063e2:	d501      	bpl.n	80063e8 <_printf_i+0xbc>
 80063e4:	681d      	ldr	r5, [r3, #0]
 80063e6:	e003      	b.n	80063f0 <_printf_i+0xc4>
 80063e8:	0645      	lsls	r5, r0, #25
 80063ea:	d5fb      	bpl.n	80063e4 <_printf_i+0xb8>
 80063ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	da03      	bge.n	80063fc <_printf_i+0xd0>
 80063f4:	232d      	movs	r3, #45	@ 0x2d
 80063f6:	426d      	negs	r5, r5
 80063f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063fc:	230a      	movs	r3, #10
 80063fe:	4858      	ldr	r0, [pc, #352]	@ (8006560 <_printf_i+0x234>)
 8006400:	e011      	b.n	8006426 <_printf_i+0xfa>
 8006402:	6821      	ldr	r1, [r4, #0]
 8006404:	6833      	ldr	r3, [r6, #0]
 8006406:	0608      	lsls	r0, r1, #24
 8006408:	f853 5b04 	ldr.w	r5, [r3], #4
 800640c:	d402      	bmi.n	8006414 <_printf_i+0xe8>
 800640e:	0649      	lsls	r1, r1, #25
 8006410:	bf48      	it	mi
 8006412:	b2ad      	uxthmi	r5, r5
 8006414:	2f6f      	cmp	r7, #111	@ 0x6f
 8006416:	6033      	str	r3, [r6, #0]
 8006418:	bf14      	ite	ne
 800641a:	230a      	movne	r3, #10
 800641c:	2308      	moveq	r3, #8
 800641e:	4850      	ldr	r0, [pc, #320]	@ (8006560 <_printf_i+0x234>)
 8006420:	2100      	movs	r1, #0
 8006422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006426:	6866      	ldr	r6, [r4, #4]
 8006428:	2e00      	cmp	r6, #0
 800642a:	60a6      	str	r6, [r4, #8]
 800642c:	db05      	blt.n	800643a <_printf_i+0x10e>
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	432e      	orrs	r6, r5
 8006432:	f021 0104 	bic.w	r1, r1, #4
 8006436:	6021      	str	r1, [r4, #0]
 8006438:	d04b      	beq.n	80064d2 <_printf_i+0x1a6>
 800643a:	4616      	mov	r6, r2
 800643c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006440:	fb03 5711 	mls	r7, r3, r1, r5
 8006444:	5dc7      	ldrb	r7, [r0, r7]
 8006446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800644a:	462f      	mov	r7, r5
 800644c:	42bb      	cmp	r3, r7
 800644e:	460d      	mov	r5, r1
 8006450:	d9f4      	bls.n	800643c <_printf_i+0x110>
 8006452:	2b08      	cmp	r3, #8
 8006454:	d10b      	bne.n	800646e <_printf_i+0x142>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	07df      	lsls	r7, r3, #31
 800645a:	d508      	bpl.n	800646e <_printf_i+0x142>
 800645c:	6923      	ldr	r3, [r4, #16]
 800645e:	6861      	ldr	r1, [r4, #4]
 8006460:	4299      	cmp	r1, r3
 8006462:	bfde      	ittt	le
 8006464:	2330      	movle	r3, #48	@ 0x30
 8006466:	f806 3c01 	strble.w	r3, [r6, #-1]
 800646a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800646e:	1b92      	subs	r2, r2, r6
 8006470:	6122      	str	r2, [r4, #16]
 8006472:	464b      	mov	r3, r9
 8006474:	4621      	mov	r1, r4
 8006476:	4640      	mov	r0, r8
 8006478:	f8cd a000 	str.w	sl, [sp]
 800647c:	aa03      	add	r2, sp, #12
 800647e:	f7ff fee3 	bl	8006248 <_printf_common>
 8006482:	3001      	adds	r0, #1
 8006484:	d14a      	bne.n	800651c <_printf_i+0x1f0>
 8006486:	f04f 30ff 	mov.w	r0, #4294967295
 800648a:	b004      	add	sp, #16
 800648c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	f043 0320 	orr.w	r3, r3, #32
 8006496:	6023      	str	r3, [r4, #0]
 8006498:	2778      	movs	r7, #120	@ 0x78
 800649a:	4832      	ldr	r0, [pc, #200]	@ (8006564 <_printf_i+0x238>)
 800649c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	6831      	ldr	r1, [r6, #0]
 80064a4:	061f      	lsls	r7, r3, #24
 80064a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80064aa:	d402      	bmi.n	80064b2 <_printf_i+0x186>
 80064ac:	065f      	lsls	r7, r3, #25
 80064ae:	bf48      	it	mi
 80064b0:	b2ad      	uxthmi	r5, r5
 80064b2:	6031      	str	r1, [r6, #0]
 80064b4:	07d9      	lsls	r1, r3, #31
 80064b6:	bf44      	itt	mi
 80064b8:	f043 0320 	orrmi.w	r3, r3, #32
 80064bc:	6023      	strmi	r3, [r4, #0]
 80064be:	b11d      	cbz	r5, 80064c8 <_printf_i+0x19c>
 80064c0:	2310      	movs	r3, #16
 80064c2:	e7ad      	b.n	8006420 <_printf_i+0xf4>
 80064c4:	4826      	ldr	r0, [pc, #152]	@ (8006560 <_printf_i+0x234>)
 80064c6:	e7e9      	b.n	800649c <_printf_i+0x170>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	f023 0320 	bic.w	r3, r3, #32
 80064ce:	6023      	str	r3, [r4, #0]
 80064d0:	e7f6      	b.n	80064c0 <_printf_i+0x194>
 80064d2:	4616      	mov	r6, r2
 80064d4:	e7bd      	b.n	8006452 <_printf_i+0x126>
 80064d6:	6833      	ldr	r3, [r6, #0]
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1d18      	adds	r0, r3, #4
 80064dc:	6961      	ldr	r1, [r4, #20]
 80064de:	6030      	str	r0, [r6, #0]
 80064e0:	062e      	lsls	r6, r5, #24
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	d501      	bpl.n	80064ea <_printf_i+0x1be>
 80064e6:	6019      	str	r1, [r3, #0]
 80064e8:	e002      	b.n	80064f0 <_printf_i+0x1c4>
 80064ea:	0668      	lsls	r0, r5, #25
 80064ec:	d5fb      	bpl.n	80064e6 <_printf_i+0x1ba>
 80064ee:	8019      	strh	r1, [r3, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	4616      	mov	r6, r2
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	e7bc      	b.n	8006472 <_printf_i+0x146>
 80064f8:	6833      	ldr	r3, [r6, #0]
 80064fa:	2100      	movs	r1, #0
 80064fc:	1d1a      	adds	r2, r3, #4
 80064fe:	6032      	str	r2, [r6, #0]
 8006500:	681e      	ldr	r6, [r3, #0]
 8006502:	6862      	ldr	r2, [r4, #4]
 8006504:	4630      	mov	r0, r6
 8006506:	f000 fbe0 	bl	8006cca <memchr>
 800650a:	b108      	cbz	r0, 8006510 <_printf_i+0x1e4>
 800650c:	1b80      	subs	r0, r0, r6
 800650e:	6060      	str	r0, [r4, #4]
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2300      	movs	r3, #0
 8006516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800651a:	e7aa      	b.n	8006472 <_printf_i+0x146>
 800651c:	4632      	mov	r2, r6
 800651e:	4649      	mov	r1, r9
 8006520:	4640      	mov	r0, r8
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	47d0      	blx	sl
 8006526:	3001      	adds	r0, #1
 8006528:	d0ad      	beq.n	8006486 <_printf_i+0x15a>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	d413      	bmi.n	8006558 <_printf_i+0x22c>
 8006530:	68e0      	ldr	r0, [r4, #12]
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	4298      	cmp	r0, r3
 8006536:	bfb8      	it	lt
 8006538:	4618      	movlt	r0, r3
 800653a:	e7a6      	b.n	800648a <_printf_i+0x15e>
 800653c:	2301      	movs	r3, #1
 800653e:	4632      	mov	r2, r6
 8006540:	4649      	mov	r1, r9
 8006542:	4640      	mov	r0, r8
 8006544:	47d0      	blx	sl
 8006546:	3001      	adds	r0, #1
 8006548:	d09d      	beq.n	8006486 <_printf_i+0x15a>
 800654a:	3501      	adds	r5, #1
 800654c:	68e3      	ldr	r3, [r4, #12]
 800654e:	9903      	ldr	r1, [sp, #12]
 8006550:	1a5b      	subs	r3, r3, r1
 8006552:	42ab      	cmp	r3, r5
 8006554:	dcf2      	bgt.n	800653c <_printf_i+0x210>
 8006556:	e7eb      	b.n	8006530 <_printf_i+0x204>
 8006558:	2500      	movs	r5, #0
 800655a:	f104 0619 	add.w	r6, r4, #25
 800655e:	e7f5      	b.n	800654c <_printf_i+0x220>
 8006560:	0800a9c8 	.word	0x0800a9c8
 8006564:	0800a9d9 	.word	0x0800a9d9

08006568 <_scanf_float>:
 8006568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656c:	b087      	sub	sp, #28
 800656e:	9303      	str	r3, [sp, #12]
 8006570:	688b      	ldr	r3, [r1, #8]
 8006572:	4691      	mov	r9, r2
 8006574:	1e5a      	subs	r2, r3, #1
 8006576:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800657a:	bf82      	ittt	hi
 800657c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006580:	eb03 0b05 	addhi.w	fp, r3, r5
 8006584:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006588:	460a      	mov	r2, r1
 800658a:	f04f 0500 	mov.w	r5, #0
 800658e:	bf88      	it	hi
 8006590:	608b      	strhi	r3, [r1, #8]
 8006592:	680b      	ldr	r3, [r1, #0]
 8006594:	4680      	mov	r8, r0
 8006596:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800659a:	f842 3b1c 	str.w	r3, [r2], #28
 800659e:	460c      	mov	r4, r1
 80065a0:	bf98      	it	ls
 80065a2:	f04f 0b00 	movls.w	fp, #0
 80065a6:	4616      	mov	r6, r2
 80065a8:	46aa      	mov	sl, r5
 80065aa:	462f      	mov	r7, r5
 80065ac:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80065b0:	9201      	str	r2, [sp, #4]
 80065b2:	9502      	str	r5, [sp, #8]
 80065b4:	68a2      	ldr	r2, [r4, #8]
 80065b6:	b15a      	cbz	r2, 80065d0 <_scanf_float+0x68>
 80065b8:	f8d9 3000 	ldr.w	r3, [r9]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b4e      	cmp	r3, #78	@ 0x4e
 80065c0:	d862      	bhi.n	8006688 <_scanf_float+0x120>
 80065c2:	2b40      	cmp	r3, #64	@ 0x40
 80065c4:	d83a      	bhi.n	800663c <_scanf_float+0xd4>
 80065c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80065ca:	b2c8      	uxtb	r0, r1
 80065cc:	280e      	cmp	r0, #14
 80065ce:	d938      	bls.n	8006642 <_scanf_float+0xda>
 80065d0:	b11f      	cbz	r7, 80065da <_scanf_float+0x72>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80065de:	f1ba 0f01 	cmp.w	sl, #1
 80065e2:	f200 8114 	bhi.w	800680e <_scanf_float+0x2a6>
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	429e      	cmp	r6, r3
 80065ea:	f200 8105 	bhi.w	80067f8 <_scanf_float+0x290>
 80065ee:	2001      	movs	r0, #1
 80065f0:	b007      	add	sp, #28
 80065f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80065fa:	2a0d      	cmp	r2, #13
 80065fc:	d8e8      	bhi.n	80065d0 <_scanf_float+0x68>
 80065fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006604 <_scanf_float+0x9c>)
 8006600:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006604:	0800674d 	.word	0x0800674d
 8006608:	080065d1 	.word	0x080065d1
 800660c:	080065d1 	.word	0x080065d1
 8006610:	080065d1 	.word	0x080065d1
 8006614:	080067a9 	.word	0x080067a9
 8006618:	08006783 	.word	0x08006783
 800661c:	080065d1 	.word	0x080065d1
 8006620:	080065d1 	.word	0x080065d1
 8006624:	0800675b 	.word	0x0800675b
 8006628:	080065d1 	.word	0x080065d1
 800662c:	080065d1 	.word	0x080065d1
 8006630:	080065d1 	.word	0x080065d1
 8006634:	080065d1 	.word	0x080065d1
 8006638:	08006717 	.word	0x08006717
 800663c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006640:	e7db      	b.n	80065fa <_scanf_float+0x92>
 8006642:	290e      	cmp	r1, #14
 8006644:	d8c4      	bhi.n	80065d0 <_scanf_float+0x68>
 8006646:	a001      	add	r0, pc, #4	@ (adr r0, 800664c <_scanf_float+0xe4>)
 8006648:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800664c:	08006707 	.word	0x08006707
 8006650:	080065d1 	.word	0x080065d1
 8006654:	08006707 	.word	0x08006707
 8006658:	08006797 	.word	0x08006797
 800665c:	080065d1 	.word	0x080065d1
 8006660:	080066a9 	.word	0x080066a9
 8006664:	080066ed 	.word	0x080066ed
 8006668:	080066ed 	.word	0x080066ed
 800666c:	080066ed 	.word	0x080066ed
 8006670:	080066ed 	.word	0x080066ed
 8006674:	080066ed 	.word	0x080066ed
 8006678:	080066ed 	.word	0x080066ed
 800667c:	080066ed 	.word	0x080066ed
 8006680:	080066ed 	.word	0x080066ed
 8006684:	080066ed 	.word	0x080066ed
 8006688:	2b6e      	cmp	r3, #110	@ 0x6e
 800668a:	d809      	bhi.n	80066a0 <_scanf_float+0x138>
 800668c:	2b60      	cmp	r3, #96	@ 0x60
 800668e:	d8b2      	bhi.n	80065f6 <_scanf_float+0x8e>
 8006690:	2b54      	cmp	r3, #84	@ 0x54
 8006692:	d07b      	beq.n	800678c <_scanf_float+0x224>
 8006694:	2b59      	cmp	r3, #89	@ 0x59
 8006696:	d19b      	bne.n	80065d0 <_scanf_float+0x68>
 8006698:	2d07      	cmp	r5, #7
 800669a:	d199      	bne.n	80065d0 <_scanf_float+0x68>
 800669c:	2508      	movs	r5, #8
 800669e:	e02f      	b.n	8006700 <_scanf_float+0x198>
 80066a0:	2b74      	cmp	r3, #116	@ 0x74
 80066a2:	d073      	beq.n	800678c <_scanf_float+0x224>
 80066a4:	2b79      	cmp	r3, #121	@ 0x79
 80066a6:	e7f6      	b.n	8006696 <_scanf_float+0x12e>
 80066a8:	6821      	ldr	r1, [r4, #0]
 80066aa:	05c8      	lsls	r0, r1, #23
 80066ac:	d51e      	bpl.n	80066ec <_scanf_float+0x184>
 80066ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80066b2:	6021      	str	r1, [r4, #0]
 80066b4:	3701      	adds	r7, #1
 80066b6:	f1bb 0f00 	cmp.w	fp, #0
 80066ba:	d003      	beq.n	80066c4 <_scanf_float+0x15c>
 80066bc:	3201      	adds	r2, #1
 80066be:	f10b 3bff 	add.w	fp, fp, #4294967295
 80066c2:	60a2      	str	r2, [r4, #8]
 80066c4:	68a3      	ldr	r3, [r4, #8]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	60a3      	str	r3, [r4, #8]
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	3301      	adds	r3, #1
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80066d4:	3b01      	subs	r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f8c9 3004 	str.w	r3, [r9, #4]
 80066dc:	f340 8083 	ble.w	80067e6 <_scanf_float+0x27e>
 80066e0:	f8d9 3000 	ldr.w	r3, [r9]
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c9 3000 	str.w	r3, [r9]
 80066ea:	e763      	b.n	80065b4 <_scanf_float+0x4c>
 80066ec:	eb1a 0105 	adds.w	r1, sl, r5
 80066f0:	f47f af6e 	bne.w	80065d0 <_scanf_float+0x68>
 80066f4:	460d      	mov	r5, r1
 80066f6:	468a      	mov	sl, r1
 80066f8:	6822      	ldr	r2, [r4, #0]
 80066fa:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80066fe:	6022      	str	r2, [r4, #0]
 8006700:	f806 3b01 	strb.w	r3, [r6], #1
 8006704:	e7de      	b.n	80066c4 <_scanf_float+0x15c>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	0610      	lsls	r0, r2, #24
 800670a:	f57f af61 	bpl.w	80065d0 <_scanf_float+0x68>
 800670e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006712:	6022      	str	r2, [r4, #0]
 8006714:	e7f4      	b.n	8006700 <_scanf_float+0x198>
 8006716:	f1ba 0f00 	cmp.w	sl, #0
 800671a:	d10c      	bne.n	8006736 <_scanf_float+0x1ce>
 800671c:	b977      	cbnz	r7, 800673c <_scanf_float+0x1d4>
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006724:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006728:	d108      	bne.n	800673c <_scanf_float+0x1d4>
 800672a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800672e:	f04f 0a01 	mov.w	sl, #1
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	e7e4      	b.n	8006700 <_scanf_float+0x198>
 8006736:	f1ba 0f02 	cmp.w	sl, #2
 800673a:	d051      	beq.n	80067e0 <_scanf_float+0x278>
 800673c:	2d01      	cmp	r5, #1
 800673e:	d002      	beq.n	8006746 <_scanf_float+0x1de>
 8006740:	2d04      	cmp	r5, #4
 8006742:	f47f af45 	bne.w	80065d0 <_scanf_float+0x68>
 8006746:	3501      	adds	r5, #1
 8006748:	b2ed      	uxtb	r5, r5
 800674a:	e7d9      	b.n	8006700 <_scanf_float+0x198>
 800674c:	f1ba 0f01 	cmp.w	sl, #1
 8006750:	f47f af3e 	bne.w	80065d0 <_scanf_float+0x68>
 8006754:	f04f 0a02 	mov.w	sl, #2
 8006758:	e7d2      	b.n	8006700 <_scanf_float+0x198>
 800675a:	b975      	cbnz	r5, 800677a <_scanf_float+0x212>
 800675c:	2f00      	cmp	r7, #0
 800675e:	f47f af38 	bne.w	80065d2 <_scanf_float+0x6a>
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006768:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800676c:	f040 80ff 	bne.w	800696e <_scanf_float+0x406>
 8006770:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006774:	2501      	movs	r5, #1
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	e7c2      	b.n	8006700 <_scanf_float+0x198>
 800677a:	2d03      	cmp	r5, #3
 800677c:	d0e3      	beq.n	8006746 <_scanf_float+0x1de>
 800677e:	2d05      	cmp	r5, #5
 8006780:	e7df      	b.n	8006742 <_scanf_float+0x1da>
 8006782:	2d02      	cmp	r5, #2
 8006784:	f47f af24 	bne.w	80065d0 <_scanf_float+0x68>
 8006788:	2503      	movs	r5, #3
 800678a:	e7b9      	b.n	8006700 <_scanf_float+0x198>
 800678c:	2d06      	cmp	r5, #6
 800678e:	f47f af1f 	bne.w	80065d0 <_scanf_float+0x68>
 8006792:	2507      	movs	r5, #7
 8006794:	e7b4      	b.n	8006700 <_scanf_float+0x198>
 8006796:	6822      	ldr	r2, [r4, #0]
 8006798:	0591      	lsls	r1, r2, #22
 800679a:	f57f af19 	bpl.w	80065d0 <_scanf_float+0x68>
 800679e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	9702      	str	r7, [sp, #8]
 80067a6:	e7ab      	b.n	8006700 <_scanf_float+0x198>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80067ae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80067b2:	d005      	beq.n	80067c0 <_scanf_float+0x258>
 80067b4:	0550      	lsls	r0, r2, #21
 80067b6:	f57f af0b 	bpl.w	80065d0 <_scanf_float+0x68>
 80067ba:	2f00      	cmp	r7, #0
 80067bc:	f000 80d7 	beq.w	800696e <_scanf_float+0x406>
 80067c0:	0591      	lsls	r1, r2, #22
 80067c2:	bf58      	it	pl
 80067c4:	9902      	ldrpl	r1, [sp, #8]
 80067c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067ca:	bf58      	it	pl
 80067cc:	1a79      	subpl	r1, r7, r1
 80067ce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80067d2:	f04f 0700 	mov.w	r7, #0
 80067d6:	bf58      	it	pl
 80067d8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	e78f      	b.n	8006700 <_scanf_float+0x198>
 80067e0:	f04f 0a03 	mov.w	sl, #3
 80067e4:	e78c      	b.n	8006700 <_scanf_float+0x198>
 80067e6:	4649      	mov	r1, r9
 80067e8:	4640      	mov	r0, r8
 80067ea:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80067ee:	4798      	blx	r3
 80067f0:	2800      	cmp	r0, #0
 80067f2:	f43f aedf 	beq.w	80065b4 <_scanf_float+0x4c>
 80067f6:	e6eb      	b.n	80065d0 <_scanf_float+0x68>
 80067f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80067fc:	464a      	mov	r2, r9
 80067fe:	4640      	mov	r0, r8
 8006800:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006804:	4798      	blx	r3
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	3b01      	subs	r3, #1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	e6eb      	b.n	80065e6 <_scanf_float+0x7e>
 800680e:	1e6b      	subs	r3, r5, #1
 8006810:	2b06      	cmp	r3, #6
 8006812:	d824      	bhi.n	800685e <_scanf_float+0x2f6>
 8006814:	2d02      	cmp	r5, #2
 8006816:	d836      	bhi.n	8006886 <_scanf_float+0x31e>
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	429e      	cmp	r6, r3
 800681c:	f67f aee7 	bls.w	80065ee <_scanf_float+0x86>
 8006820:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006824:	464a      	mov	r2, r9
 8006826:	4640      	mov	r0, r8
 8006828:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800682c:	4798      	blx	r3
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	3b01      	subs	r3, #1
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	e7f0      	b.n	8006818 <_scanf_float+0x2b0>
 8006836:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800683a:	464a      	mov	r2, r9
 800683c:	4640      	mov	r0, r8
 800683e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006842:	4798      	blx	r3
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	3b01      	subs	r3, #1
 8006848:	6123      	str	r3, [r4, #16]
 800684a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800684e:	fa5f fa8a 	uxtb.w	sl, sl
 8006852:	f1ba 0f02 	cmp.w	sl, #2
 8006856:	d1ee      	bne.n	8006836 <_scanf_float+0x2ce>
 8006858:	3d03      	subs	r5, #3
 800685a:	b2ed      	uxtb	r5, r5
 800685c:	1b76      	subs	r6, r6, r5
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	05da      	lsls	r2, r3, #23
 8006862:	d530      	bpl.n	80068c6 <_scanf_float+0x35e>
 8006864:	055b      	lsls	r3, r3, #21
 8006866:	d511      	bpl.n	800688c <_scanf_float+0x324>
 8006868:	9b01      	ldr	r3, [sp, #4]
 800686a:	429e      	cmp	r6, r3
 800686c:	f67f aebf 	bls.w	80065ee <_scanf_float+0x86>
 8006870:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006874:	464a      	mov	r2, r9
 8006876:	4640      	mov	r0, r8
 8006878:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800687c:	4798      	blx	r3
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	3b01      	subs	r3, #1
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	e7f0      	b.n	8006868 <_scanf_float+0x300>
 8006886:	46aa      	mov	sl, r5
 8006888:	46b3      	mov	fp, r6
 800688a:	e7de      	b.n	800684a <_scanf_float+0x2e2>
 800688c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	2965      	cmp	r1, #101	@ 0x65
 8006894:	f103 33ff 	add.w	r3, r3, #4294967295
 8006898:	f106 35ff 	add.w	r5, r6, #4294967295
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	d00c      	beq.n	80068ba <_scanf_float+0x352>
 80068a0:	2945      	cmp	r1, #69	@ 0x45
 80068a2:	d00a      	beq.n	80068ba <_scanf_float+0x352>
 80068a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068a8:	464a      	mov	r2, r9
 80068aa:	4640      	mov	r0, r8
 80068ac:	4798      	blx	r3
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	1eb5      	subs	r5, r6, #2
 80068b8:	6123      	str	r3, [r4, #16]
 80068ba:	464a      	mov	r2, r9
 80068bc:	4640      	mov	r0, r8
 80068be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068c2:	4798      	blx	r3
 80068c4:	462e      	mov	r6, r5
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	f012 0210 	ands.w	r2, r2, #16
 80068cc:	d001      	beq.n	80068d2 <_scanf_float+0x36a>
 80068ce:	2000      	movs	r0, #0
 80068d0:	e68e      	b.n	80065f0 <_scanf_float+0x88>
 80068d2:	7032      	strb	r2, [r6, #0]
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068de:	d125      	bne.n	800692c <_scanf_float+0x3c4>
 80068e0:	9b02      	ldr	r3, [sp, #8]
 80068e2:	429f      	cmp	r7, r3
 80068e4:	d00a      	beq.n	80068fc <_scanf_float+0x394>
 80068e6:	1bda      	subs	r2, r3, r7
 80068e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80068ec:	429e      	cmp	r6, r3
 80068ee:	bf28      	it	cs
 80068f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80068f4:	4630      	mov	r0, r6
 80068f6:	491f      	ldr	r1, [pc, #124]	@ (8006974 <_scanf_float+0x40c>)
 80068f8:	f000 f902 	bl	8006b00 <siprintf>
 80068fc:	2200      	movs	r2, #0
 80068fe:	4640      	mov	r0, r8
 8006900:	9901      	ldr	r1, [sp, #4]
 8006902:	f002 fbf9 	bl	80090f8 <_strtod_r>
 8006906:	9b03      	ldr	r3, [sp, #12]
 8006908:	6825      	ldr	r5, [r4, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f015 0f02 	tst.w	r5, #2
 8006910:	4606      	mov	r6, r0
 8006912:	460f      	mov	r7, r1
 8006914:	f103 0204 	add.w	r2, r3, #4
 8006918:	d015      	beq.n	8006946 <_scanf_float+0x3de>
 800691a:	9903      	ldr	r1, [sp, #12]
 800691c:	600a      	str	r2, [r1, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	e9c3 6700 	strd	r6, r7, [r3]
 8006924:	68e3      	ldr	r3, [r4, #12]
 8006926:	3301      	adds	r3, #1
 8006928:	60e3      	str	r3, [r4, #12]
 800692a:	e7d0      	b.n	80068ce <_scanf_float+0x366>
 800692c:	9b04      	ldr	r3, [sp, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0e4      	beq.n	80068fc <_scanf_float+0x394>
 8006932:	9905      	ldr	r1, [sp, #20]
 8006934:	230a      	movs	r3, #10
 8006936:	4640      	mov	r0, r8
 8006938:	3101      	adds	r1, #1
 800693a:	f002 fc5d 	bl	80091f8 <_strtol_r>
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	9e05      	ldr	r6, [sp, #20]
 8006942:	1ac2      	subs	r2, r0, r3
 8006944:	e7d0      	b.n	80068e8 <_scanf_float+0x380>
 8006946:	076d      	lsls	r5, r5, #29
 8006948:	d4e7      	bmi.n	800691a <_scanf_float+0x3b2>
 800694a:	9d03      	ldr	r5, [sp, #12]
 800694c:	602a      	str	r2, [r5, #0]
 800694e:	681d      	ldr	r5, [r3, #0]
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	f7fa f85a 	bl	8000a0c <__aeabi_dcmpun>
 8006958:	b120      	cbz	r0, 8006964 <_scanf_float+0x3fc>
 800695a:	4807      	ldr	r0, [pc, #28]	@ (8006978 <_scanf_float+0x410>)
 800695c:	f000 f9d2 	bl	8006d04 <nanf>
 8006960:	6028      	str	r0, [r5, #0]
 8006962:	e7df      	b.n	8006924 <_scanf_float+0x3bc>
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7fa f8ae 	bl	8000ac8 <__aeabi_d2f>
 800696c:	e7f8      	b.n	8006960 <_scanf_float+0x3f8>
 800696e:	2700      	movs	r7, #0
 8006970:	e633      	b.n	80065da <_scanf_float+0x72>
 8006972:	bf00      	nop
 8006974:	0800a9ea 	.word	0x0800a9ea
 8006978:	0800ab2b 	.word	0x0800ab2b

0800697c <std>:
 800697c:	2300      	movs	r3, #0
 800697e:	b510      	push	{r4, lr}
 8006980:	4604      	mov	r4, r0
 8006982:	e9c0 3300 	strd	r3, r3, [r0]
 8006986:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800698a:	6083      	str	r3, [r0, #8]
 800698c:	8181      	strh	r1, [r0, #12]
 800698e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006990:	81c2      	strh	r2, [r0, #14]
 8006992:	6183      	str	r3, [r0, #24]
 8006994:	4619      	mov	r1, r3
 8006996:	2208      	movs	r2, #8
 8006998:	305c      	adds	r0, #92	@ 0x5c
 800699a:	f000 f916 	bl	8006bca <memset>
 800699e:	4b0d      	ldr	r3, [pc, #52]	@ (80069d4 <std+0x58>)
 80069a0:	6224      	str	r4, [r4, #32]
 80069a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80069a4:	4b0c      	ldr	r3, [pc, #48]	@ (80069d8 <std+0x5c>)
 80069a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80069a8:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <std+0x60>)
 80069aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80069ac:	4b0c      	ldr	r3, [pc, #48]	@ (80069e0 <std+0x64>)
 80069ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <std+0x68>)
 80069b2:	429c      	cmp	r4, r3
 80069b4:	d006      	beq.n	80069c4 <std+0x48>
 80069b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80069ba:	4294      	cmp	r4, r2
 80069bc:	d002      	beq.n	80069c4 <std+0x48>
 80069be:	33d0      	adds	r3, #208	@ 0xd0
 80069c0:	429c      	cmp	r4, r3
 80069c2:	d105      	bne.n	80069d0 <std+0x54>
 80069c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80069c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069cc:	f000 b97a 	b.w	8006cc4 <__retarget_lock_init_recursive>
 80069d0:	bd10      	pop	{r4, pc}
 80069d2:	bf00      	nop
 80069d4:	08006b45 	.word	0x08006b45
 80069d8:	08006b67 	.word	0x08006b67
 80069dc:	08006b9f 	.word	0x08006b9f
 80069e0:	08006bc3 	.word	0x08006bc3
 80069e4:	2000072c 	.word	0x2000072c

080069e8 <stdio_exit_handler>:
 80069e8:	4a02      	ldr	r2, [pc, #8]	@ (80069f4 <stdio_exit_handler+0xc>)
 80069ea:	4903      	ldr	r1, [pc, #12]	@ (80069f8 <stdio_exit_handler+0x10>)
 80069ec:	4803      	ldr	r0, [pc, #12]	@ (80069fc <stdio_exit_handler+0x14>)
 80069ee:	f000 b869 	b.w	8006ac4 <_fwalk_sglue>
 80069f2:	bf00      	nop
 80069f4:	20000014 	.word	0x20000014
 80069f8:	080095ad 	.word	0x080095ad
 80069fc:	20000024 	.word	0x20000024

08006a00 <cleanup_stdio>:
 8006a00:	6841      	ldr	r1, [r0, #4]
 8006a02:	4b0c      	ldr	r3, [pc, #48]	@ (8006a34 <cleanup_stdio+0x34>)
 8006a04:	b510      	push	{r4, lr}
 8006a06:	4299      	cmp	r1, r3
 8006a08:	4604      	mov	r4, r0
 8006a0a:	d001      	beq.n	8006a10 <cleanup_stdio+0x10>
 8006a0c:	f002 fdce 	bl	80095ac <_fflush_r>
 8006a10:	68a1      	ldr	r1, [r4, #8]
 8006a12:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <cleanup_stdio+0x38>)
 8006a14:	4299      	cmp	r1, r3
 8006a16:	d002      	beq.n	8006a1e <cleanup_stdio+0x1e>
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f002 fdc7 	bl	80095ac <_fflush_r>
 8006a1e:	68e1      	ldr	r1, [r4, #12]
 8006a20:	4b06      	ldr	r3, [pc, #24]	@ (8006a3c <cleanup_stdio+0x3c>)
 8006a22:	4299      	cmp	r1, r3
 8006a24:	d004      	beq.n	8006a30 <cleanup_stdio+0x30>
 8006a26:	4620      	mov	r0, r4
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f002 bdbe 	b.w	80095ac <_fflush_r>
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	2000072c 	.word	0x2000072c
 8006a38:	20000794 	.word	0x20000794
 8006a3c:	200007fc 	.word	0x200007fc

08006a40 <global_stdio_init.part.0>:
 8006a40:	b510      	push	{r4, lr}
 8006a42:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <global_stdio_init.part.0+0x30>)
 8006a44:	4c0b      	ldr	r4, [pc, #44]	@ (8006a74 <global_stdio_init.part.0+0x34>)
 8006a46:	4a0c      	ldr	r2, [pc, #48]	@ (8006a78 <global_stdio_init.part.0+0x38>)
 8006a48:	4620      	mov	r0, r4
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	2104      	movs	r1, #4
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f7ff ff94 	bl	800697c <std>
 8006a54:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006a58:	2201      	movs	r2, #1
 8006a5a:	2109      	movs	r1, #9
 8006a5c:	f7ff ff8e 	bl	800697c <std>
 8006a60:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a64:	2202      	movs	r2, #2
 8006a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6a:	2112      	movs	r1, #18
 8006a6c:	f7ff bf86 	b.w	800697c <std>
 8006a70:	20000864 	.word	0x20000864
 8006a74:	2000072c 	.word	0x2000072c
 8006a78:	080069e9 	.word	0x080069e9

08006a7c <__sfp_lock_acquire>:
 8006a7c:	4801      	ldr	r0, [pc, #4]	@ (8006a84 <__sfp_lock_acquire+0x8>)
 8006a7e:	f000 b922 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8006a82:	bf00      	nop
 8006a84:	2000086d 	.word	0x2000086d

08006a88 <__sfp_lock_release>:
 8006a88:	4801      	ldr	r0, [pc, #4]	@ (8006a90 <__sfp_lock_release+0x8>)
 8006a8a:	f000 b91d 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8006a8e:	bf00      	nop
 8006a90:	2000086d 	.word	0x2000086d

08006a94 <__sinit>:
 8006a94:	b510      	push	{r4, lr}
 8006a96:	4604      	mov	r4, r0
 8006a98:	f7ff fff0 	bl	8006a7c <__sfp_lock_acquire>
 8006a9c:	6a23      	ldr	r3, [r4, #32]
 8006a9e:	b11b      	cbz	r3, 8006aa8 <__sinit+0x14>
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f7ff bff0 	b.w	8006a88 <__sfp_lock_release>
 8006aa8:	4b04      	ldr	r3, [pc, #16]	@ (8006abc <__sinit+0x28>)
 8006aaa:	6223      	str	r3, [r4, #32]
 8006aac:	4b04      	ldr	r3, [pc, #16]	@ (8006ac0 <__sinit+0x2c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f5      	bne.n	8006aa0 <__sinit+0xc>
 8006ab4:	f7ff ffc4 	bl	8006a40 <global_stdio_init.part.0>
 8006ab8:	e7f2      	b.n	8006aa0 <__sinit+0xc>
 8006aba:	bf00      	nop
 8006abc:	08006a01 	.word	0x08006a01
 8006ac0:	20000864 	.word	0x20000864

08006ac4 <_fwalk_sglue>:
 8006ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	4607      	mov	r7, r0
 8006aca:	4688      	mov	r8, r1
 8006acc:	4614      	mov	r4, r2
 8006ace:	2600      	movs	r6, #0
 8006ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ad8:	d505      	bpl.n	8006ae6 <_fwalk_sglue+0x22>
 8006ada:	6824      	ldr	r4, [r4, #0]
 8006adc:	2c00      	cmp	r4, #0
 8006ade:	d1f7      	bne.n	8006ad0 <_fwalk_sglue+0xc>
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae6:	89ab      	ldrh	r3, [r5, #12]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d907      	bls.n	8006afc <_fwalk_sglue+0x38>
 8006aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006af0:	3301      	adds	r3, #1
 8006af2:	d003      	beq.n	8006afc <_fwalk_sglue+0x38>
 8006af4:	4629      	mov	r1, r5
 8006af6:	4638      	mov	r0, r7
 8006af8:	47c0      	blx	r8
 8006afa:	4306      	orrs	r6, r0
 8006afc:	3568      	adds	r5, #104	@ 0x68
 8006afe:	e7e9      	b.n	8006ad4 <_fwalk_sglue+0x10>

08006b00 <siprintf>:
 8006b00:	b40e      	push	{r1, r2, r3}
 8006b02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b06:	b510      	push	{r4, lr}
 8006b08:	2400      	movs	r4, #0
 8006b0a:	b09d      	sub	sp, #116	@ 0x74
 8006b0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b0e:	9002      	str	r0, [sp, #8]
 8006b10:	9006      	str	r0, [sp, #24]
 8006b12:	9107      	str	r1, [sp, #28]
 8006b14:	9104      	str	r1, [sp, #16]
 8006b16:	4809      	ldr	r0, [pc, #36]	@ (8006b3c <siprintf+0x3c>)
 8006b18:	4909      	ldr	r1, [pc, #36]	@ (8006b40 <siprintf+0x40>)
 8006b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1e:	9105      	str	r1, [sp, #20]
 8006b20:	6800      	ldr	r0, [r0, #0]
 8006b22:	a902      	add	r1, sp, #8
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006b28:	f002 fbc4 	bl	80092b4 <_svfiprintf_r>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	701c      	strb	r4, [r3, #0]
 8006b30:	b01d      	add	sp, #116	@ 0x74
 8006b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b36:	b003      	add	sp, #12
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	20000020 	.word	0x20000020
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <__sread>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	460c      	mov	r4, r1
 8006b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4c:	f000 f86c 	bl	8006c28 <_read_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	bfab      	itete	ge
 8006b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b56:	89a3      	ldrhlt	r3, [r4, #12]
 8006b58:	181b      	addge	r3, r3, r0
 8006b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b5e:	bfac      	ite	ge
 8006b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b62:	81a3      	strhlt	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__swrite>:
 8006b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6a:	461f      	mov	r7, r3
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	4605      	mov	r5, r0
 8006b70:	05db      	lsls	r3, r3, #23
 8006b72:	460c      	mov	r4, r1
 8006b74:	4616      	mov	r6, r2
 8006b76:	d505      	bpl.n	8006b84 <__swrite+0x1e>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	f000 f840 	bl	8006c04 <_lseek_r>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	4632      	mov	r2, r6
 8006b88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b8c:	81a3      	strh	r3, [r4, #12]
 8006b8e:	4628      	mov	r0, r5
 8006b90:	463b      	mov	r3, r7
 8006b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9a:	f000 b857 	b.w	8006c4c <_write_r>

08006b9e <__sseek>:
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba6:	f000 f82d 	bl	8006c04 <_lseek_r>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	bf15      	itete	ne
 8006bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bba:	81a3      	strheq	r3, [r4, #12]
 8006bbc:	bf18      	it	ne
 8006bbe:	81a3      	strhne	r3, [r4, #12]
 8006bc0:	bd10      	pop	{r4, pc}

08006bc2 <__sclose>:
 8006bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc6:	f000 b80d 	b.w	8006be4 <_close_r>

08006bca <memset>:
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4402      	add	r2, r0
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d100      	bne.n	8006bd4 <memset+0xa>
 8006bd2:	4770      	bx	lr
 8006bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd8:	e7f9      	b.n	8006bce <memset+0x4>
	...

08006bdc <_localeconv_r>:
 8006bdc:	4800      	ldr	r0, [pc, #0]	@ (8006be0 <_localeconv_r+0x4>)
 8006bde:	4770      	bx	lr
 8006be0:	20000160 	.word	0x20000160

08006be4 <_close_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	2300      	movs	r3, #0
 8006be8:	4d05      	ldr	r5, [pc, #20]	@ (8006c00 <_close_r+0x1c>)
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fb f96b 	bl	8001eca <_close>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_close_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_close_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000868 	.word	0x20000868

08006c04 <_lseek_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4d05      	ldr	r5, [pc, #20]	@ (8006c24 <_lseek_r+0x20>)
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fb f97d 	bl	8001f12 <_lseek>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_lseek_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_lseek_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20000868 	.word	0x20000868

08006c28 <_read_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	4611      	mov	r1, r2
 8006c30:	2200      	movs	r2, #0
 8006c32:	4d05      	ldr	r5, [pc, #20]	@ (8006c48 <_read_r+0x20>)
 8006c34:	602a      	str	r2, [r5, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7fb f90e 	bl	8001e58 <_read>
 8006c3c:	1c43      	adds	r3, r0, #1
 8006c3e:	d102      	bne.n	8006c46 <_read_r+0x1e>
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	b103      	cbz	r3, 8006c46 <_read_r+0x1e>
 8006c44:	6023      	str	r3, [r4, #0]
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	20000868 	.word	0x20000868

08006c4c <_write_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	2200      	movs	r2, #0
 8006c56:	4d05      	ldr	r5, [pc, #20]	@ (8006c6c <_write_r+0x20>)
 8006c58:	602a      	str	r2, [r5, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f7fb f919 	bl	8001e92 <_write>
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d102      	bne.n	8006c6a <_write_r+0x1e>
 8006c64:	682b      	ldr	r3, [r5, #0]
 8006c66:	b103      	cbz	r3, 8006c6a <_write_r+0x1e>
 8006c68:	6023      	str	r3, [r4, #0]
 8006c6a:	bd38      	pop	{r3, r4, r5, pc}
 8006c6c:	20000868 	.word	0x20000868

08006c70 <__errno>:
 8006c70:	4b01      	ldr	r3, [pc, #4]	@ (8006c78 <__errno+0x8>)
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000020 	.word	0x20000020

08006c7c <__libc_init_array>:
 8006c7c:	b570      	push	{r4, r5, r6, lr}
 8006c7e:	2600      	movs	r6, #0
 8006c80:	4d0c      	ldr	r5, [pc, #48]	@ (8006cb4 <__libc_init_array+0x38>)
 8006c82:	4c0d      	ldr	r4, [pc, #52]	@ (8006cb8 <__libc_init_array+0x3c>)
 8006c84:	1b64      	subs	r4, r4, r5
 8006c86:	10a4      	asrs	r4, r4, #2
 8006c88:	42a6      	cmp	r6, r4
 8006c8a:	d109      	bne.n	8006ca0 <__libc_init_array+0x24>
 8006c8c:	f003 fb6c 	bl	800a368 <_init>
 8006c90:	2600      	movs	r6, #0
 8006c92:	4d0a      	ldr	r5, [pc, #40]	@ (8006cbc <__libc_init_array+0x40>)
 8006c94:	4c0a      	ldr	r4, [pc, #40]	@ (8006cc0 <__libc_init_array+0x44>)
 8006c96:	1b64      	subs	r4, r4, r5
 8006c98:	10a4      	asrs	r4, r4, #2
 8006c9a:	42a6      	cmp	r6, r4
 8006c9c:	d105      	bne.n	8006caa <__libc_init_array+0x2e>
 8006c9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca4:	4798      	blx	r3
 8006ca6:	3601      	adds	r6, #1
 8006ca8:	e7ee      	b.n	8006c88 <__libc_init_array+0xc>
 8006caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cae:	4798      	blx	r3
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7f2      	b.n	8006c9a <__libc_init_array+0x1e>
 8006cb4:	0800ade4 	.word	0x0800ade4
 8006cb8:	0800ade4 	.word	0x0800ade4
 8006cbc:	0800ade4 	.word	0x0800ade4
 8006cc0:	0800ade8 	.word	0x0800ade8

08006cc4 <__retarget_lock_init_recursive>:
 8006cc4:	4770      	bx	lr

08006cc6 <__retarget_lock_acquire_recursive>:
 8006cc6:	4770      	bx	lr

08006cc8 <__retarget_lock_release_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <memchr>:
 8006cca:	4603      	mov	r3, r0
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	b2c9      	uxtb	r1, r1
 8006cd0:	4402      	add	r2, r0
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	d101      	bne.n	8006cdc <memchr+0x12>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e003      	b.n	8006ce4 <memchr+0x1a>
 8006cdc:	7804      	ldrb	r4, [r0, #0]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	428c      	cmp	r4, r1
 8006ce2:	d1f6      	bne.n	8006cd2 <memchr+0x8>
 8006ce4:	bd10      	pop	{r4, pc}

08006ce6 <memcpy>:
 8006ce6:	440a      	add	r2, r1
 8006ce8:	4291      	cmp	r1, r2
 8006cea:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cee:	d100      	bne.n	8006cf2 <memcpy+0xc>
 8006cf0:	4770      	bx	lr
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf8:	4291      	cmp	r1, r2
 8006cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cfe:	d1f9      	bne.n	8006cf4 <memcpy+0xe>
 8006d00:	bd10      	pop	{r4, pc}
	...

08006d04 <nanf>:
 8006d04:	4800      	ldr	r0, [pc, #0]	@ (8006d08 <nanf+0x4>)
 8006d06:	4770      	bx	lr
 8006d08:	7fc00000 	.word	0x7fc00000

08006d0c <quorem>:
 8006d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d10:	6903      	ldr	r3, [r0, #16]
 8006d12:	690c      	ldr	r4, [r1, #16]
 8006d14:	4607      	mov	r7, r0
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	db7e      	blt.n	8006e18 <quorem+0x10c>
 8006d1a:	3c01      	subs	r4, #1
 8006d1c:	00a3      	lsls	r3, r4, #2
 8006d1e:	f100 0514 	add.w	r5, r0, #20
 8006d22:	f101 0814 	add.w	r8, r1, #20
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d36:	3301      	adds	r3, #1
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d42:	d32e      	bcc.n	8006da2 <quorem+0x96>
 8006d44:	f04f 0a00 	mov.w	sl, #0
 8006d48:	46c4      	mov	ip, r8
 8006d4a:	46ae      	mov	lr, r5
 8006d4c:	46d3      	mov	fp, sl
 8006d4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d52:	b298      	uxth	r0, r3
 8006d54:	fb06 a000 	mla	r0, r6, r0, sl
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	0c02      	lsrs	r2, r0, #16
 8006d5c:	fb06 2303 	mla	r3, r6, r3, r2
 8006d60:	f8de 2000 	ldr.w	r2, [lr]
 8006d64:	b280      	uxth	r0, r0
 8006d66:	b292      	uxth	r2, r2
 8006d68:	1a12      	subs	r2, r2, r0
 8006d6a:	445a      	add	r2, fp
 8006d6c:	f8de 0000 	ldr.w	r0, [lr]
 8006d70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d84:	45e1      	cmp	r9, ip
 8006d86:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d8a:	f84e 2b04 	str.w	r2, [lr], #4
 8006d8e:	d2de      	bcs.n	8006d4e <quorem+0x42>
 8006d90:	9b00      	ldr	r3, [sp, #0]
 8006d92:	58eb      	ldr	r3, [r5, r3]
 8006d94:	b92b      	cbnz	r3, 8006da2 <quorem+0x96>
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	d32f      	bcc.n	8006e00 <quorem+0xf4>
 8006da0:	613c      	str	r4, [r7, #16]
 8006da2:	4638      	mov	r0, r7
 8006da4:	f001 f9ca 	bl	800813c <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	db25      	blt.n	8006df8 <quorem+0xec>
 8006dac:	4629      	mov	r1, r5
 8006dae:	2000      	movs	r0, #0
 8006db0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006db4:	f8d1 c000 	ldr.w	ip, [r1]
 8006db8:	fa1f fe82 	uxth.w	lr, r2
 8006dbc:	fa1f f38c 	uxth.w	r3, ip
 8006dc0:	eba3 030e 	sub.w	r3, r3, lr
 8006dc4:	4403      	add	r3, r0
 8006dc6:	0c12      	lsrs	r2, r2, #16
 8006dc8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006dcc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006dd6:	45c1      	cmp	r9, r8
 8006dd8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ddc:	f841 3b04 	str.w	r3, [r1], #4
 8006de0:	d2e6      	bcs.n	8006db0 <quorem+0xa4>
 8006de2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dea:	b922      	cbnz	r2, 8006df6 <quorem+0xea>
 8006dec:	3b04      	subs	r3, #4
 8006dee:	429d      	cmp	r5, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	d30b      	bcc.n	8006e0c <quorem+0x100>
 8006df4:	613c      	str	r4, [r7, #16]
 8006df6:	3601      	adds	r6, #1
 8006df8:	4630      	mov	r0, r6
 8006dfa:	b003      	add	sp, #12
 8006dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e00:	6812      	ldr	r2, [r2, #0]
 8006e02:	3b04      	subs	r3, #4
 8006e04:	2a00      	cmp	r2, #0
 8006e06:	d1cb      	bne.n	8006da0 <quorem+0x94>
 8006e08:	3c01      	subs	r4, #1
 8006e0a:	e7c6      	b.n	8006d9a <quorem+0x8e>
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	d1ef      	bne.n	8006df4 <quorem+0xe8>
 8006e14:	3c01      	subs	r4, #1
 8006e16:	e7ea      	b.n	8006dee <quorem+0xe2>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e7ee      	b.n	8006dfa <quorem+0xee>
 8006e1c:	0000      	movs	r0, r0
	...

08006e20 <_dtoa_r>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	69c7      	ldr	r7, [r0, #28]
 8006e2a:	b097      	sub	sp, #92	@ 0x5c
 8006e2c:	4681      	mov	r9, r0
 8006e2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006e32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006e34:	b97f      	cbnz	r7, 8006e56 <_dtoa_r+0x36>
 8006e36:	2010      	movs	r0, #16
 8006e38:	f000 fe0e 	bl	8007a58 <malloc>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	f8c9 001c 	str.w	r0, [r9, #28]
 8006e42:	b920      	cbnz	r0, 8006e4e <_dtoa_r+0x2e>
 8006e44:	21ef      	movs	r1, #239	@ 0xef
 8006e46:	4bac      	ldr	r3, [pc, #688]	@ (80070f8 <_dtoa_r+0x2d8>)
 8006e48:	48ac      	ldr	r0, [pc, #688]	@ (80070fc <_dtoa_r+0x2dc>)
 8006e4a:	f002 fc19 	bl	8009680 <__assert_func>
 8006e4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e52:	6007      	str	r7, [r0, #0]
 8006e54:	60c7      	str	r7, [r0, #12]
 8006e56:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e5a:	6819      	ldr	r1, [r3, #0]
 8006e5c:	b159      	cbz	r1, 8006e76 <_dtoa_r+0x56>
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	2301      	movs	r3, #1
 8006e62:	4093      	lsls	r3, r2
 8006e64:	604a      	str	r2, [r1, #4]
 8006e66:	608b      	str	r3, [r1, #8]
 8006e68:	4648      	mov	r0, r9
 8006e6a:	f000 feeb 	bl	8007c44 <_Bfree>
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	1e2b      	subs	r3, r5, #0
 8006e78:	bfaf      	iteee	ge
 8006e7a:	2300      	movge	r3, #0
 8006e7c:	2201      	movlt	r2, #1
 8006e7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e82:	9307      	strlt	r3, [sp, #28]
 8006e84:	bfa8      	it	ge
 8006e86:	6033      	strge	r3, [r6, #0]
 8006e88:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006e8c:	4b9c      	ldr	r3, [pc, #624]	@ (8007100 <_dtoa_r+0x2e0>)
 8006e8e:	bfb8      	it	lt
 8006e90:	6032      	strlt	r2, [r6, #0]
 8006e92:	ea33 0308 	bics.w	r3, r3, r8
 8006e96:	d112      	bne.n	8006ebe <_dtoa_r+0x9e>
 8006e98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006ea4:	4323      	orrs	r3, r4
 8006ea6:	f000 855e 	beq.w	8007966 <_dtoa_r+0xb46>
 8006eaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007104 <_dtoa_r+0x2e4>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8560 	beq.w	8007976 <_dtoa_r+0xb56>
 8006eb6:	f10a 0303 	add.w	r3, sl, #3
 8006eba:	f000 bd5a 	b.w	8007972 <_dtoa_r+0xb52>
 8006ebe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ec2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f7f9 fd6b 	bl	80009a8 <__aeabi_dcmpeq>
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	b158      	cbz	r0, 8006eee <_dtoa_r+0xce>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ede:	b113      	cbz	r3, 8006ee6 <_dtoa_r+0xc6>
 8006ee0:	4b89      	ldr	r3, [pc, #548]	@ (8007108 <_dtoa_r+0x2e8>)
 8006ee2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800710c <_dtoa_r+0x2ec>
 8006eea:	f000 bd44 	b.w	8007976 <_dtoa_r+0xb56>
 8006eee:	ab14      	add	r3, sp, #80	@ 0x50
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	ab15      	add	r3, sp, #84	@ 0x54
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	4648      	mov	r0, r9
 8006ef8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006efc:	f001 fa36 	bl	800836c <__d2b>
 8006f00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006f04:	9003      	str	r0, [sp, #12]
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d078      	beq.n	8006ffc <_dtoa_r+0x1dc>
 8006f0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f20:	9712      	str	r7, [sp, #72]	@ 0x48
 8006f22:	4619      	mov	r1, r3
 8006f24:	2200      	movs	r2, #0
 8006f26:	4b7a      	ldr	r3, [pc, #488]	@ (8007110 <_dtoa_r+0x2f0>)
 8006f28:	f7f9 f91e 	bl	8000168 <__aeabi_dsub>
 8006f2c:	a36c      	add	r3, pc, #432	@ (adr r3, 80070e0 <_dtoa_r+0x2c0>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f7f9 fad1 	bl	80004d8 <__aeabi_dmul>
 8006f36:	a36c      	add	r3, pc, #432	@ (adr r3, 80070e8 <_dtoa_r+0x2c8>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	f7f9 f916 	bl	800016c <__adddf3>
 8006f40:	4604      	mov	r4, r0
 8006f42:	4630      	mov	r0, r6
 8006f44:	460d      	mov	r5, r1
 8006f46:	f7f9 fa5d 	bl	8000404 <__aeabi_i2d>
 8006f4a:	a369      	add	r3, pc, #420	@ (adr r3, 80070f0 <_dtoa_r+0x2d0>)
 8006f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f50:	f7f9 fac2 	bl	80004d8 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 f906 	bl	800016c <__adddf3>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	f7f9 fd68 	bl	8000a38 <__aeabi_d2iz>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4620      	mov	r0, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	f7f9 fd23 	bl	80009bc <__aeabi_dcmplt>
 8006f76:	b140      	cbz	r0, 8006f8a <_dtoa_r+0x16a>
 8006f78:	4638      	mov	r0, r7
 8006f7a:	f7f9 fa43 	bl	8000404 <__aeabi_i2d>
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	f7f9 fd11 	bl	80009a8 <__aeabi_dcmpeq>
 8006f86:	b900      	cbnz	r0, 8006f8a <_dtoa_r+0x16a>
 8006f88:	3f01      	subs	r7, #1
 8006f8a:	2f16      	cmp	r7, #22
 8006f8c:	d854      	bhi.n	8007038 <_dtoa_r+0x218>
 8006f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f92:	4b60      	ldr	r3, [pc, #384]	@ (8007114 <_dtoa_r+0x2f4>)
 8006f94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fd0e 	bl	80009bc <__aeabi_dcmplt>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d04b      	beq.n	800703c <_dtoa_r+0x21c>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	3f01      	subs	r7, #1
 8006fa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006faa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006fac:	1b9b      	subs	r3, r3, r6
 8006fae:	1e5a      	subs	r2, r3, #1
 8006fb0:	bf49      	itett	mi
 8006fb2:	f1c3 0301 	rsbmi	r3, r3, #1
 8006fb6:	2300      	movpl	r3, #0
 8006fb8:	9304      	strmi	r3, [sp, #16]
 8006fba:	2300      	movmi	r3, #0
 8006fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fbe:	bf54      	ite	pl
 8006fc0:	9304      	strpl	r3, [sp, #16]
 8006fc2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006fc4:	2f00      	cmp	r7, #0
 8006fc6:	db3b      	blt.n	8007040 <_dtoa_r+0x220>
 8006fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fca:	970e      	str	r7, [sp, #56]	@ 0x38
 8006fcc:	443b      	add	r3, r7
 8006fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d865      	bhi.n	80070a6 <_dtoa_r+0x286>
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	bfc4      	itt	gt
 8006fde:	3b04      	subgt	r3, #4
 8006fe0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006fe2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006fe4:	bfc8      	it	gt
 8006fe6:	2400      	movgt	r4, #0
 8006fe8:	f1a3 0302 	sub.w	r3, r3, #2
 8006fec:	bfd8      	it	le
 8006fee:	2401      	movle	r4, #1
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d864      	bhi.n	80070be <_dtoa_r+0x29e>
 8006ff4:	e8df f003 	tbb	[pc, r3]
 8006ff8:	2c385553 	.word	0x2c385553
 8006ffc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007000:	441e      	add	r6, r3
 8007002:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007006:	2b20      	cmp	r3, #32
 8007008:	bfc1      	itttt	gt
 800700a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800700e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007012:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007016:	fa24 f303 	lsrgt.w	r3, r4, r3
 800701a:	bfd6      	itet	le
 800701c:	f1c3 0320 	rsble	r3, r3, #32
 8007020:	ea48 0003 	orrgt.w	r0, r8, r3
 8007024:	fa04 f003 	lslle.w	r0, r4, r3
 8007028:	f7f9 f9dc 	bl	80003e4 <__aeabi_ui2d>
 800702c:	2201      	movs	r2, #1
 800702e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007032:	3e01      	subs	r6, #1
 8007034:	9212      	str	r2, [sp, #72]	@ 0x48
 8007036:	e774      	b.n	8006f22 <_dtoa_r+0x102>
 8007038:	2301      	movs	r3, #1
 800703a:	e7b5      	b.n	8006fa8 <_dtoa_r+0x188>
 800703c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800703e:	e7b4      	b.n	8006faa <_dtoa_r+0x18a>
 8007040:	9b04      	ldr	r3, [sp, #16]
 8007042:	1bdb      	subs	r3, r3, r7
 8007044:	9304      	str	r3, [sp, #16]
 8007046:	427b      	negs	r3, r7
 8007048:	930a      	str	r3, [sp, #40]	@ 0x28
 800704a:	2300      	movs	r3, #0
 800704c:	930e      	str	r3, [sp, #56]	@ 0x38
 800704e:	e7c1      	b.n	8006fd4 <_dtoa_r+0x1b4>
 8007050:	2301      	movs	r3, #1
 8007052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007054:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007056:	eb07 0b03 	add.w	fp, r7, r3
 800705a:	f10b 0301 	add.w	r3, fp, #1
 800705e:	2b01      	cmp	r3, #1
 8007060:	9308      	str	r3, [sp, #32]
 8007062:	bfb8      	it	lt
 8007064:	2301      	movlt	r3, #1
 8007066:	e006      	b.n	8007076 <_dtoa_r+0x256>
 8007068:	2301      	movs	r3, #1
 800706a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800706c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800706e:	2b00      	cmp	r3, #0
 8007070:	dd28      	ble.n	80070c4 <_dtoa_r+0x2a4>
 8007072:	469b      	mov	fp, r3
 8007074:	9308      	str	r3, [sp, #32]
 8007076:	2100      	movs	r1, #0
 8007078:	2204      	movs	r2, #4
 800707a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800707e:	f102 0514 	add.w	r5, r2, #20
 8007082:	429d      	cmp	r5, r3
 8007084:	d926      	bls.n	80070d4 <_dtoa_r+0x2b4>
 8007086:	6041      	str	r1, [r0, #4]
 8007088:	4648      	mov	r0, r9
 800708a:	f000 fd9b 	bl	8007bc4 <_Balloc>
 800708e:	4682      	mov	sl, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	d143      	bne.n	800711c <_dtoa_r+0x2fc>
 8007094:	4602      	mov	r2, r0
 8007096:	f240 11af 	movw	r1, #431	@ 0x1af
 800709a:	4b1f      	ldr	r3, [pc, #124]	@ (8007118 <_dtoa_r+0x2f8>)
 800709c:	e6d4      	b.n	8006e48 <_dtoa_r+0x28>
 800709e:	2300      	movs	r3, #0
 80070a0:	e7e3      	b.n	800706a <_dtoa_r+0x24a>
 80070a2:	2300      	movs	r3, #0
 80070a4:	e7d5      	b.n	8007052 <_dtoa_r+0x232>
 80070a6:	2401      	movs	r4, #1
 80070a8:	2300      	movs	r3, #0
 80070aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80070ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80070ae:	f04f 3bff 	mov.w	fp, #4294967295
 80070b2:	2200      	movs	r2, #0
 80070b4:	2312      	movs	r3, #18
 80070b6:	f8cd b020 	str.w	fp, [sp, #32]
 80070ba:	9221      	str	r2, [sp, #132]	@ 0x84
 80070bc:	e7db      	b.n	8007076 <_dtoa_r+0x256>
 80070be:	2301      	movs	r3, #1
 80070c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070c2:	e7f4      	b.n	80070ae <_dtoa_r+0x28e>
 80070c4:	f04f 0b01 	mov.w	fp, #1
 80070c8:	465b      	mov	r3, fp
 80070ca:	f8cd b020 	str.w	fp, [sp, #32]
 80070ce:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80070d2:	e7d0      	b.n	8007076 <_dtoa_r+0x256>
 80070d4:	3101      	adds	r1, #1
 80070d6:	0052      	lsls	r2, r2, #1
 80070d8:	e7d1      	b.n	800707e <_dtoa_r+0x25e>
 80070da:	bf00      	nop
 80070dc:	f3af 8000 	nop.w
 80070e0:	636f4361 	.word	0x636f4361
 80070e4:	3fd287a7 	.word	0x3fd287a7
 80070e8:	8b60c8b3 	.word	0x8b60c8b3
 80070ec:	3fc68a28 	.word	0x3fc68a28
 80070f0:	509f79fb 	.word	0x509f79fb
 80070f4:	3fd34413 	.word	0x3fd34413
 80070f8:	0800a9fc 	.word	0x0800a9fc
 80070fc:	0800aa13 	.word	0x0800aa13
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	0800a9f8 	.word	0x0800a9f8
 8007108:	0800a9c7 	.word	0x0800a9c7
 800710c:	0800a9c6 	.word	0x0800a9c6
 8007110:	3ff80000 	.word	0x3ff80000
 8007114:	0800abc0 	.word	0x0800abc0
 8007118:	0800aa6b 	.word	0x0800aa6b
 800711c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007120:	6018      	str	r0, [r3, #0]
 8007122:	9b08      	ldr	r3, [sp, #32]
 8007124:	2b0e      	cmp	r3, #14
 8007126:	f200 80a1 	bhi.w	800726c <_dtoa_r+0x44c>
 800712a:	2c00      	cmp	r4, #0
 800712c:	f000 809e 	beq.w	800726c <_dtoa_r+0x44c>
 8007130:	2f00      	cmp	r7, #0
 8007132:	dd33      	ble.n	800719c <_dtoa_r+0x37c>
 8007134:	4b9c      	ldr	r3, [pc, #624]	@ (80073a8 <_dtoa_r+0x588>)
 8007136:	f007 020f 	and.w	r2, r7, #15
 800713a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800713e:	05f8      	lsls	r0, r7, #23
 8007140:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007144:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007148:	ea4f 1427 	mov.w	r4, r7, asr #4
 800714c:	d516      	bpl.n	800717c <_dtoa_r+0x35c>
 800714e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007152:	4b96      	ldr	r3, [pc, #600]	@ (80073ac <_dtoa_r+0x58c>)
 8007154:	2603      	movs	r6, #3
 8007156:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800715a:	f7f9 fae7 	bl	800072c <__aeabi_ddiv>
 800715e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007162:	f004 040f 	and.w	r4, r4, #15
 8007166:	4d91      	ldr	r5, [pc, #580]	@ (80073ac <_dtoa_r+0x58c>)
 8007168:	b954      	cbnz	r4, 8007180 <_dtoa_r+0x360>
 800716a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800716e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007172:	f7f9 fadb 	bl	800072c <__aeabi_ddiv>
 8007176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800717a:	e028      	b.n	80071ce <_dtoa_r+0x3ae>
 800717c:	2602      	movs	r6, #2
 800717e:	e7f2      	b.n	8007166 <_dtoa_r+0x346>
 8007180:	07e1      	lsls	r1, r4, #31
 8007182:	d508      	bpl.n	8007196 <_dtoa_r+0x376>
 8007184:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800718c:	f7f9 f9a4 	bl	80004d8 <__aeabi_dmul>
 8007190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007194:	3601      	adds	r6, #1
 8007196:	1064      	asrs	r4, r4, #1
 8007198:	3508      	adds	r5, #8
 800719a:	e7e5      	b.n	8007168 <_dtoa_r+0x348>
 800719c:	f000 80af 	beq.w	80072fe <_dtoa_r+0x4de>
 80071a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071a4:	427c      	negs	r4, r7
 80071a6:	4b80      	ldr	r3, [pc, #512]	@ (80073a8 <_dtoa_r+0x588>)
 80071a8:	f004 020f 	and.w	r2, r4, #15
 80071ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b4:	f7f9 f990 	bl	80004d8 <__aeabi_dmul>
 80071b8:	2602      	movs	r6, #2
 80071ba:	2300      	movs	r3, #0
 80071bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071c0:	4d7a      	ldr	r5, [pc, #488]	@ (80073ac <_dtoa_r+0x58c>)
 80071c2:	1124      	asrs	r4, r4, #4
 80071c4:	2c00      	cmp	r4, #0
 80071c6:	f040 808f 	bne.w	80072e8 <_dtoa_r+0x4c8>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1d3      	bne.n	8007176 <_dtoa_r+0x356>
 80071ce:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80071d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8094 	beq.w	8007302 <_dtoa_r+0x4e2>
 80071da:	2200      	movs	r2, #0
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	4b73      	ldr	r3, [pc, #460]	@ (80073b0 <_dtoa_r+0x590>)
 80071e2:	f7f9 fbeb 	bl	80009bc <__aeabi_dcmplt>
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f000 808b 	beq.w	8007302 <_dtoa_r+0x4e2>
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 8087 	beq.w	8007302 <_dtoa_r+0x4e2>
 80071f4:	f1bb 0f00 	cmp.w	fp, #0
 80071f8:	dd34      	ble.n	8007264 <_dtoa_r+0x444>
 80071fa:	4620      	mov	r0, r4
 80071fc:	2200      	movs	r2, #0
 80071fe:	4629      	mov	r1, r5
 8007200:	4b6c      	ldr	r3, [pc, #432]	@ (80073b4 <_dtoa_r+0x594>)
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	465c      	mov	r4, fp
 8007208:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800720c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007210:	3601      	adds	r6, #1
 8007212:	4630      	mov	r0, r6
 8007214:	f7f9 f8f6 	bl	8000404 <__aeabi_i2d>
 8007218:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800721c:	f7f9 f95c 	bl	80004d8 <__aeabi_dmul>
 8007220:	2200      	movs	r2, #0
 8007222:	4b65      	ldr	r3, [pc, #404]	@ (80073b8 <_dtoa_r+0x598>)
 8007224:	f7f8 ffa2 	bl	800016c <__adddf3>
 8007228:	4605      	mov	r5, r0
 800722a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800722e:	2c00      	cmp	r4, #0
 8007230:	d16a      	bne.n	8007308 <_dtoa_r+0x4e8>
 8007232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007236:	2200      	movs	r2, #0
 8007238:	4b60      	ldr	r3, [pc, #384]	@ (80073bc <_dtoa_r+0x59c>)
 800723a:	f7f8 ff95 	bl	8000168 <__aeabi_dsub>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007246:	462a      	mov	r2, r5
 8007248:	4633      	mov	r3, r6
 800724a:	f7f9 fbd5 	bl	80009f8 <__aeabi_dcmpgt>
 800724e:	2800      	cmp	r0, #0
 8007250:	f040 8298 	bne.w	8007784 <_dtoa_r+0x964>
 8007254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007258:	462a      	mov	r2, r5
 800725a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800725e:	f7f9 fbad 	bl	80009bc <__aeabi_dcmplt>
 8007262:	bb38      	cbnz	r0, 80072b4 <_dtoa_r+0x494>
 8007264:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007268:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800726c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800726e:	2b00      	cmp	r3, #0
 8007270:	f2c0 8157 	blt.w	8007522 <_dtoa_r+0x702>
 8007274:	2f0e      	cmp	r7, #14
 8007276:	f300 8154 	bgt.w	8007522 <_dtoa_r+0x702>
 800727a:	4b4b      	ldr	r3, [pc, #300]	@ (80073a8 <_dtoa_r+0x588>)
 800727c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007280:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007284:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007288:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800728a:	2b00      	cmp	r3, #0
 800728c:	f280 80e5 	bge.w	800745a <_dtoa_r+0x63a>
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f300 80e1 	bgt.w	800745a <_dtoa_r+0x63a>
 8007298:	d10c      	bne.n	80072b4 <_dtoa_r+0x494>
 800729a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800729e:	2200      	movs	r2, #0
 80072a0:	4b46      	ldr	r3, [pc, #280]	@ (80073bc <_dtoa_r+0x59c>)
 80072a2:	f7f9 f919 	bl	80004d8 <__aeabi_dmul>
 80072a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072aa:	f7f9 fb9b 	bl	80009e4 <__aeabi_dcmpge>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f000 8266 	beq.w	8007780 <_dtoa_r+0x960>
 80072b4:	2400      	movs	r4, #0
 80072b6:	4625      	mov	r5, r4
 80072b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072ba:	4656      	mov	r6, sl
 80072bc:	ea6f 0803 	mvn.w	r8, r3
 80072c0:	2700      	movs	r7, #0
 80072c2:	4621      	mov	r1, r4
 80072c4:	4648      	mov	r0, r9
 80072c6:	f000 fcbd 	bl	8007c44 <_Bfree>
 80072ca:	2d00      	cmp	r5, #0
 80072cc:	f000 80bd 	beq.w	800744a <_dtoa_r+0x62a>
 80072d0:	b12f      	cbz	r7, 80072de <_dtoa_r+0x4be>
 80072d2:	42af      	cmp	r7, r5
 80072d4:	d003      	beq.n	80072de <_dtoa_r+0x4be>
 80072d6:	4639      	mov	r1, r7
 80072d8:	4648      	mov	r0, r9
 80072da:	f000 fcb3 	bl	8007c44 <_Bfree>
 80072de:	4629      	mov	r1, r5
 80072e0:	4648      	mov	r0, r9
 80072e2:	f000 fcaf 	bl	8007c44 <_Bfree>
 80072e6:	e0b0      	b.n	800744a <_dtoa_r+0x62a>
 80072e8:	07e2      	lsls	r2, r4, #31
 80072ea:	d505      	bpl.n	80072f8 <_dtoa_r+0x4d8>
 80072ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072f0:	f7f9 f8f2 	bl	80004d8 <__aeabi_dmul>
 80072f4:	2301      	movs	r3, #1
 80072f6:	3601      	adds	r6, #1
 80072f8:	1064      	asrs	r4, r4, #1
 80072fa:	3508      	adds	r5, #8
 80072fc:	e762      	b.n	80071c4 <_dtoa_r+0x3a4>
 80072fe:	2602      	movs	r6, #2
 8007300:	e765      	b.n	80071ce <_dtoa_r+0x3ae>
 8007302:	46b8      	mov	r8, r7
 8007304:	9c08      	ldr	r4, [sp, #32]
 8007306:	e784      	b.n	8007212 <_dtoa_r+0x3f2>
 8007308:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <_dtoa_r+0x588>)
 800730a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800730c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007310:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007314:	4454      	add	r4, sl
 8007316:	2900      	cmp	r1, #0
 8007318:	d054      	beq.n	80073c4 <_dtoa_r+0x5a4>
 800731a:	2000      	movs	r0, #0
 800731c:	4928      	ldr	r1, [pc, #160]	@ (80073c0 <_dtoa_r+0x5a0>)
 800731e:	f7f9 fa05 	bl	800072c <__aeabi_ddiv>
 8007322:	4633      	mov	r3, r6
 8007324:	462a      	mov	r2, r5
 8007326:	f7f8 ff1f 	bl	8000168 <__aeabi_dsub>
 800732a:	4656      	mov	r6, sl
 800732c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007334:	f7f9 fb80 	bl	8000a38 <__aeabi_d2iz>
 8007338:	4605      	mov	r5, r0
 800733a:	f7f9 f863 	bl	8000404 <__aeabi_i2d>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007346:	f7f8 ff0f 	bl	8000168 <__aeabi_dsub>
 800734a:	4602      	mov	r2, r0
 800734c:	460b      	mov	r3, r1
 800734e:	3530      	adds	r5, #48	@ 0x30
 8007350:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007354:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007358:	f806 5b01 	strb.w	r5, [r6], #1
 800735c:	f7f9 fb2e 	bl	80009bc <__aeabi_dcmplt>
 8007360:	2800      	cmp	r0, #0
 8007362:	d172      	bne.n	800744a <_dtoa_r+0x62a>
 8007364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007368:	2000      	movs	r0, #0
 800736a:	4911      	ldr	r1, [pc, #68]	@ (80073b0 <_dtoa_r+0x590>)
 800736c:	f7f8 fefc 	bl	8000168 <__aeabi_dsub>
 8007370:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007374:	f7f9 fb22 	bl	80009bc <__aeabi_dcmplt>
 8007378:	2800      	cmp	r0, #0
 800737a:	f040 80b4 	bne.w	80074e6 <_dtoa_r+0x6c6>
 800737e:	42a6      	cmp	r6, r4
 8007380:	f43f af70 	beq.w	8007264 <_dtoa_r+0x444>
 8007384:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007388:	2200      	movs	r2, #0
 800738a:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <_dtoa_r+0x594>)
 800738c:	f7f9 f8a4 	bl	80004d8 <__aeabi_dmul>
 8007390:	2200      	movs	r2, #0
 8007392:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739a:	4b06      	ldr	r3, [pc, #24]	@ (80073b4 <_dtoa_r+0x594>)
 800739c:	f7f9 f89c 	bl	80004d8 <__aeabi_dmul>
 80073a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073a4:	e7c4      	b.n	8007330 <_dtoa_r+0x510>
 80073a6:	bf00      	nop
 80073a8:	0800abc0 	.word	0x0800abc0
 80073ac:	0800ab98 	.word	0x0800ab98
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	40240000 	.word	0x40240000
 80073b8:	401c0000 	.word	0x401c0000
 80073bc:	40140000 	.word	0x40140000
 80073c0:	3fe00000 	.word	0x3fe00000
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	f7f9 f886 	bl	80004d8 <__aeabi_dmul>
 80073cc:	4656      	mov	r6, sl
 80073ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073d2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80073d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073d8:	f7f9 fb2e 	bl	8000a38 <__aeabi_d2iz>
 80073dc:	4605      	mov	r5, r0
 80073de:	f7f9 f811 	bl	8000404 <__aeabi_i2d>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ea:	f7f8 febd 	bl	8000168 <__aeabi_dsub>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	3530      	adds	r5, #48	@ 0x30
 80073f4:	f806 5b01 	strb.w	r5, [r6], #1
 80073f8:	42a6      	cmp	r6, r4
 80073fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	d124      	bne.n	800744e <_dtoa_r+0x62e>
 8007404:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007408:	4bae      	ldr	r3, [pc, #696]	@ (80076c4 <_dtoa_r+0x8a4>)
 800740a:	f7f8 feaf 	bl	800016c <__adddf3>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007416:	f7f9 faef 	bl	80009f8 <__aeabi_dcmpgt>
 800741a:	2800      	cmp	r0, #0
 800741c:	d163      	bne.n	80074e6 <_dtoa_r+0x6c6>
 800741e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007422:	2000      	movs	r0, #0
 8007424:	49a7      	ldr	r1, [pc, #668]	@ (80076c4 <_dtoa_r+0x8a4>)
 8007426:	f7f8 fe9f 	bl	8000168 <__aeabi_dsub>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007432:	f7f9 fac3 	bl	80009bc <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f43f af14 	beq.w	8007264 <_dtoa_r+0x444>
 800743c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800743e:	1e73      	subs	r3, r6, #1
 8007440:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007442:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007446:	2b30      	cmp	r3, #48	@ 0x30
 8007448:	d0f8      	beq.n	800743c <_dtoa_r+0x61c>
 800744a:	4647      	mov	r7, r8
 800744c:	e03b      	b.n	80074c6 <_dtoa_r+0x6a6>
 800744e:	4b9e      	ldr	r3, [pc, #632]	@ (80076c8 <_dtoa_r+0x8a8>)
 8007450:	f7f9 f842 	bl	80004d8 <__aeabi_dmul>
 8007454:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007458:	e7bc      	b.n	80073d4 <_dtoa_r+0x5b4>
 800745a:	4656      	mov	r6, sl
 800745c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007460:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f9 f960 	bl	800072c <__aeabi_ddiv>
 800746c:	f7f9 fae4 	bl	8000a38 <__aeabi_d2iz>
 8007470:	4680      	mov	r8, r0
 8007472:	f7f8 ffc7 	bl	8000404 <__aeabi_i2d>
 8007476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800747a:	f7f9 f82d 	bl	80004d8 <__aeabi_dmul>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f7f8 fe6f 	bl	8000168 <__aeabi_dsub>
 800748a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800748e:	9d08      	ldr	r5, [sp, #32]
 8007490:	f806 4b01 	strb.w	r4, [r6], #1
 8007494:	eba6 040a 	sub.w	r4, r6, sl
 8007498:	42a5      	cmp	r5, r4
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	d133      	bne.n	8007508 <_dtoa_r+0x6e8>
 80074a0:	f7f8 fe64 	bl	800016c <__adddf3>
 80074a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	f7f9 faa4 	bl	80009f8 <__aeabi_dcmpgt>
 80074b0:	b9c0      	cbnz	r0, 80074e4 <_dtoa_r+0x6c4>
 80074b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7f9 fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80074be:	b110      	cbz	r0, 80074c6 <_dtoa_r+0x6a6>
 80074c0:	f018 0f01 	tst.w	r8, #1
 80074c4:	d10e      	bne.n	80074e4 <_dtoa_r+0x6c4>
 80074c6:	4648      	mov	r0, r9
 80074c8:	9903      	ldr	r1, [sp, #12]
 80074ca:	f000 fbbb 	bl	8007c44 <_Bfree>
 80074ce:	2300      	movs	r3, #0
 80074d0:	7033      	strb	r3, [r6, #0]
 80074d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80074d4:	3701      	adds	r7, #1
 80074d6:	601f      	str	r7, [r3, #0]
 80074d8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 824b 	beq.w	8007976 <_dtoa_r+0xb56>
 80074e0:	601e      	str	r6, [r3, #0]
 80074e2:	e248      	b.n	8007976 <_dtoa_r+0xb56>
 80074e4:	46b8      	mov	r8, r7
 80074e6:	4633      	mov	r3, r6
 80074e8:	461e      	mov	r6, r3
 80074ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074ee:	2a39      	cmp	r2, #57	@ 0x39
 80074f0:	d106      	bne.n	8007500 <_dtoa_r+0x6e0>
 80074f2:	459a      	cmp	sl, r3
 80074f4:	d1f8      	bne.n	80074e8 <_dtoa_r+0x6c8>
 80074f6:	2230      	movs	r2, #48	@ 0x30
 80074f8:	f108 0801 	add.w	r8, r8, #1
 80074fc:	f88a 2000 	strb.w	r2, [sl]
 8007500:	781a      	ldrb	r2, [r3, #0]
 8007502:	3201      	adds	r2, #1
 8007504:	701a      	strb	r2, [r3, #0]
 8007506:	e7a0      	b.n	800744a <_dtoa_r+0x62a>
 8007508:	2200      	movs	r2, #0
 800750a:	4b6f      	ldr	r3, [pc, #444]	@ (80076c8 <_dtoa_r+0x8a8>)
 800750c:	f7f8 ffe4 	bl	80004d8 <__aeabi_dmul>
 8007510:	2200      	movs	r2, #0
 8007512:	2300      	movs	r3, #0
 8007514:	4604      	mov	r4, r0
 8007516:	460d      	mov	r5, r1
 8007518:	f7f9 fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800751c:	2800      	cmp	r0, #0
 800751e:	d09f      	beq.n	8007460 <_dtoa_r+0x640>
 8007520:	e7d1      	b.n	80074c6 <_dtoa_r+0x6a6>
 8007522:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007524:	2a00      	cmp	r2, #0
 8007526:	f000 80ea 	beq.w	80076fe <_dtoa_r+0x8de>
 800752a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800752c:	2a01      	cmp	r2, #1
 800752e:	f300 80cd 	bgt.w	80076cc <_dtoa_r+0x8ac>
 8007532:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007534:	2a00      	cmp	r2, #0
 8007536:	f000 80c1 	beq.w	80076bc <_dtoa_r+0x89c>
 800753a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800753e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007540:	9e04      	ldr	r6, [sp, #16]
 8007542:	9a04      	ldr	r2, [sp, #16]
 8007544:	2101      	movs	r1, #1
 8007546:	441a      	add	r2, r3
 8007548:	9204      	str	r2, [sp, #16]
 800754a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800754c:	4648      	mov	r0, r9
 800754e:	441a      	add	r2, r3
 8007550:	9209      	str	r2, [sp, #36]	@ 0x24
 8007552:	f000 fc75 	bl	8007e40 <__i2b>
 8007556:	4605      	mov	r5, r0
 8007558:	b166      	cbz	r6, 8007574 <_dtoa_r+0x754>
 800755a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	dd09      	ble.n	8007574 <_dtoa_r+0x754>
 8007560:	42b3      	cmp	r3, r6
 8007562:	bfa8      	it	ge
 8007564:	4633      	movge	r3, r6
 8007566:	9a04      	ldr	r2, [sp, #16]
 8007568:	1af6      	subs	r6, r6, r3
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	9204      	str	r2, [sp, #16]
 800756e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	9309      	str	r3, [sp, #36]	@ 0x24
 8007574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007576:	b30b      	cbz	r3, 80075bc <_dtoa_r+0x79c>
 8007578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 80c6 	beq.w	800770c <_dtoa_r+0x8ec>
 8007580:	2c00      	cmp	r4, #0
 8007582:	f000 80c0 	beq.w	8007706 <_dtoa_r+0x8e6>
 8007586:	4629      	mov	r1, r5
 8007588:	4622      	mov	r2, r4
 800758a:	4648      	mov	r0, r9
 800758c:	f000 fd10 	bl	8007fb0 <__pow5mult>
 8007590:	9a03      	ldr	r2, [sp, #12]
 8007592:	4601      	mov	r1, r0
 8007594:	4605      	mov	r5, r0
 8007596:	4648      	mov	r0, r9
 8007598:	f000 fc68 	bl	8007e6c <__multiply>
 800759c:	9903      	ldr	r1, [sp, #12]
 800759e:	4680      	mov	r8, r0
 80075a0:	4648      	mov	r0, r9
 80075a2:	f000 fb4f 	bl	8007c44 <_Bfree>
 80075a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075a8:	1b1b      	subs	r3, r3, r4
 80075aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ac:	f000 80b1 	beq.w	8007712 <_dtoa_r+0x8f2>
 80075b0:	4641      	mov	r1, r8
 80075b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075b4:	4648      	mov	r0, r9
 80075b6:	f000 fcfb 	bl	8007fb0 <__pow5mult>
 80075ba:	9003      	str	r0, [sp, #12]
 80075bc:	2101      	movs	r1, #1
 80075be:	4648      	mov	r0, r9
 80075c0:	f000 fc3e 	bl	8007e40 <__i2b>
 80075c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075c6:	4604      	mov	r4, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 81d8 	beq.w	800797e <_dtoa_r+0xb5e>
 80075ce:	461a      	mov	r2, r3
 80075d0:	4601      	mov	r1, r0
 80075d2:	4648      	mov	r0, r9
 80075d4:	f000 fcec 	bl	8007fb0 <__pow5mult>
 80075d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075da:	4604      	mov	r4, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f300 809f 	bgt.w	8007720 <_dtoa_r+0x900>
 80075e2:	9b06      	ldr	r3, [sp, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f040 8097 	bne.w	8007718 <_dtoa_r+0x8f8>
 80075ea:	9b07      	ldr	r3, [sp, #28]
 80075ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f040 8093 	bne.w	800771c <_dtoa_r+0x8fc>
 80075f6:	9b07      	ldr	r3, [sp, #28]
 80075f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075fc:	0d1b      	lsrs	r3, r3, #20
 80075fe:	051b      	lsls	r3, r3, #20
 8007600:	b133      	cbz	r3, 8007610 <_dtoa_r+0x7f0>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	3301      	adds	r3, #1
 8007606:	9304      	str	r3, [sp, #16]
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	3301      	adds	r3, #1
 800760c:	9309      	str	r3, [sp, #36]	@ 0x24
 800760e:	2301      	movs	r3, #1
 8007610:	930a      	str	r3, [sp, #40]	@ 0x28
 8007612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 81b8 	beq.w	800798a <_dtoa_r+0xb6a>
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007620:	6918      	ldr	r0, [r3, #16]
 8007622:	f000 fbc1 	bl	8007da8 <__hi0bits>
 8007626:	f1c0 0020 	rsb	r0, r0, #32
 800762a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800762c:	4418      	add	r0, r3
 800762e:	f010 001f 	ands.w	r0, r0, #31
 8007632:	f000 8082 	beq.w	800773a <_dtoa_r+0x91a>
 8007636:	f1c0 0320 	rsb	r3, r0, #32
 800763a:	2b04      	cmp	r3, #4
 800763c:	dd73      	ble.n	8007726 <_dtoa_r+0x906>
 800763e:	9b04      	ldr	r3, [sp, #16]
 8007640:	f1c0 001c 	rsb	r0, r0, #28
 8007644:	4403      	add	r3, r0
 8007646:	9304      	str	r3, [sp, #16]
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	4406      	add	r6, r0
 800764c:	4403      	add	r3, r0
 800764e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007650:	9b04      	ldr	r3, [sp, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	dd05      	ble.n	8007662 <_dtoa_r+0x842>
 8007656:	461a      	mov	r2, r3
 8007658:	4648      	mov	r0, r9
 800765a:	9903      	ldr	r1, [sp, #12]
 800765c:	f000 fd02 	bl	8008064 <__lshift>
 8007660:	9003      	str	r0, [sp, #12]
 8007662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007664:	2b00      	cmp	r3, #0
 8007666:	dd05      	ble.n	8007674 <_dtoa_r+0x854>
 8007668:	4621      	mov	r1, r4
 800766a:	461a      	mov	r2, r3
 800766c:	4648      	mov	r0, r9
 800766e:	f000 fcf9 	bl	8008064 <__lshift>
 8007672:	4604      	mov	r4, r0
 8007674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d061      	beq.n	800773e <_dtoa_r+0x91e>
 800767a:	4621      	mov	r1, r4
 800767c:	9803      	ldr	r0, [sp, #12]
 800767e:	f000 fd5d 	bl	800813c <__mcmp>
 8007682:	2800      	cmp	r0, #0
 8007684:	da5b      	bge.n	800773e <_dtoa_r+0x91e>
 8007686:	2300      	movs	r3, #0
 8007688:	220a      	movs	r2, #10
 800768a:	4648      	mov	r0, r9
 800768c:	9903      	ldr	r1, [sp, #12]
 800768e:	f000 fafb 	bl	8007c88 <__multadd>
 8007692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007694:	f107 38ff 	add.w	r8, r7, #4294967295
 8007698:	9003      	str	r0, [sp, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 8177 	beq.w	800798e <_dtoa_r+0xb6e>
 80076a0:	4629      	mov	r1, r5
 80076a2:	2300      	movs	r3, #0
 80076a4:	220a      	movs	r2, #10
 80076a6:	4648      	mov	r0, r9
 80076a8:	f000 faee 	bl	8007c88 <__multadd>
 80076ac:	f1bb 0f00 	cmp.w	fp, #0
 80076b0:	4605      	mov	r5, r0
 80076b2:	dc6f      	bgt.n	8007794 <_dtoa_r+0x974>
 80076b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	dc49      	bgt.n	800774e <_dtoa_r+0x92e>
 80076ba:	e06b      	b.n	8007794 <_dtoa_r+0x974>
 80076bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80076be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80076c2:	e73c      	b.n	800753e <_dtoa_r+0x71e>
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	40240000 	.word	0x40240000
 80076cc:	9b08      	ldr	r3, [sp, #32]
 80076ce:	1e5c      	subs	r4, r3, #1
 80076d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d2:	42a3      	cmp	r3, r4
 80076d4:	db09      	blt.n	80076ea <_dtoa_r+0x8ca>
 80076d6:	1b1c      	subs	r4, r3, r4
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f6bf af30 	bge.w	8007540 <_dtoa_r+0x720>
 80076e0:	9b04      	ldr	r3, [sp, #16]
 80076e2:	9a08      	ldr	r2, [sp, #32]
 80076e4:	1a9e      	subs	r6, r3, r2
 80076e6:	2300      	movs	r3, #0
 80076e8:	e72b      	b.n	8007542 <_dtoa_r+0x722>
 80076ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076ee:	1ae3      	subs	r3, r4, r3
 80076f0:	441a      	add	r2, r3
 80076f2:	940a      	str	r4, [sp, #40]	@ 0x28
 80076f4:	9e04      	ldr	r6, [sp, #16]
 80076f6:	2400      	movs	r4, #0
 80076f8:	9b08      	ldr	r3, [sp, #32]
 80076fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80076fc:	e721      	b.n	8007542 <_dtoa_r+0x722>
 80076fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007700:	9e04      	ldr	r6, [sp, #16]
 8007702:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007704:	e728      	b.n	8007558 <_dtoa_r+0x738>
 8007706:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800770a:	e751      	b.n	80075b0 <_dtoa_r+0x790>
 800770c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800770e:	9903      	ldr	r1, [sp, #12]
 8007710:	e750      	b.n	80075b4 <_dtoa_r+0x794>
 8007712:	f8cd 800c 	str.w	r8, [sp, #12]
 8007716:	e751      	b.n	80075bc <_dtoa_r+0x79c>
 8007718:	2300      	movs	r3, #0
 800771a:	e779      	b.n	8007610 <_dtoa_r+0x7f0>
 800771c:	9b06      	ldr	r3, [sp, #24]
 800771e:	e777      	b.n	8007610 <_dtoa_r+0x7f0>
 8007720:	2300      	movs	r3, #0
 8007722:	930a      	str	r3, [sp, #40]	@ 0x28
 8007724:	e779      	b.n	800761a <_dtoa_r+0x7fa>
 8007726:	d093      	beq.n	8007650 <_dtoa_r+0x830>
 8007728:	9a04      	ldr	r2, [sp, #16]
 800772a:	331c      	adds	r3, #28
 800772c:	441a      	add	r2, r3
 800772e:	9204      	str	r2, [sp, #16]
 8007730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007732:	441e      	add	r6, r3
 8007734:	441a      	add	r2, r3
 8007736:	9209      	str	r2, [sp, #36]	@ 0x24
 8007738:	e78a      	b.n	8007650 <_dtoa_r+0x830>
 800773a:	4603      	mov	r3, r0
 800773c:	e7f4      	b.n	8007728 <_dtoa_r+0x908>
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	46b8      	mov	r8, r7
 8007742:	2b00      	cmp	r3, #0
 8007744:	dc20      	bgt.n	8007788 <_dtoa_r+0x968>
 8007746:	469b      	mov	fp, r3
 8007748:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800774a:	2b02      	cmp	r3, #2
 800774c:	dd1e      	ble.n	800778c <_dtoa_r+0x96c>
 800774e:	f1bb 0f00 	cmp.w	fp, #0
 8007752:	f47f adb1 	bne.w	80072b8 <_dtoa_r+0x498>
 8007756:	4621      	mov	r1, r4
 8007758:	465b      	mov	r3, fp
 800775a:	2205      	movs	r2, #5
 800775c:	4648      	mov	r0, r9
 800775e:	f000 fa93 	bl	8007c88 <__multadd>
 8007762:	4601      	mov	r1, r0
 8007764:	4604      	mov	r4, r0
 8007766:	9803      	ldr	r0, [sp, #12]
 8007768:	f000 fce8 	bl	800813c <__mcmp>
 800776c:	2800      	cmp	r0, #0
 800776e:	f77f ada3 	ble.w	80072b8 <_dtoa_r+0x498>
 8007772:	4656      	mov	r6, sl
 8007774:	2331      	movs	r3, #49	@ 0x31
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	f806 3b01 	strb.w	r3, [r6], #1
 800777e:	e59f      	b.n	80072c0 <_dtoa_r+0x4a0>
 8007780:	46b8      	mov	r8, r7
 8007782:	9c08      	ldr	r4, [sp, #32]
 8007784:	4625      	mov	r5, r4
 8007786:	e7f4      	b.n	8007772 <_dtoa_r+0x952>
 8007788:	f8dd b020 	ldr.w	fp, [sp, #32]
 800778c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800778e:	2b00      	cmp	r3, #0
 8007790:	f000 8101 	beq.w	8007996 <_dtoa_r+0xb76>
 8007794:	2e00      	cmp	r6, #0
 8007796:	dd05      	ble.n	80077a4 <_dtoa_r+0x984>
 8007798:	4629      	mov	r1, r5
 800779a:	4632      	mov	r2, r6
 800779c:	4648      	mov	r0, r9
 800779e:	f000 fc61 	bl	8008064 <__lshift>
 80077a2:	4605      	mov	r5, r0
 80077a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d05c      	beq.n	8007864 <_dtoa_r+0xa44>
 80077aa:	4648      	mov	r0, r9
 80077ac:	6869      	ldr	r1, [r5, #4]
 80077ae:	f000 fa09 	bl	8007bc4 <_Balloc>
 80077b2:	4606      	mov	r6, r0
 80077b4:	b928      	cbnz	r0, 80077c2 <_dtoa_r+0x9a2>
 80077b6:	4602      	mov	r2, r0
 80077b8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077bc:	4b80      	ldr	r3, [pc, #512]	@ (80079c0 <_dtoa_r+0xba0>)
 80077be:	f7ff bb43 	b.w	8006e48 <_dtoa_r+0x28>
 80077c2:	692a      	ldr	r2, [r5, #16]
 80077c4:	f105 010c 	add.w	r1, r5, #12
 80077c8:	3202      	adds	r2, #2
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	300c      	adds	r0, #12
 80077ce:	f7ff fa8a 	bl	8006ce6 <memcpy>
 80077d2:	2201      	movs	r2, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4648      	mov	r0, r9
 80077d8:	f000 fc44 	bl	8008064 <__lshift>
 80077dc:	462f      	mov	r7, r5
 80077de:	4605      	mov	r5, r0
 80077e0:	f10a 0301 	add.w	r3, sl, #1
 80077e4:	9304      	str	r3, [sp, #16]
 80077e6:	eb0a 030b 	add.w	r3, sl, fp
 80077ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ec:	9b06      	ldr	r3, [sp, #24]
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077f4:	9b04      	ldr	r3, [sp, #16]
 80077f6:	4621      	mov	r1, r4
 80077f8:	9803      	ldr	r0, [sp, #12]
 80077fa:	f103 3bff 	add.w	fp, r3, #4294967295
 80077fe:	f7ff fa85 	bl	8006d0c <quorem>
 8007802:	4603      	mov	r3, r0
 8007804:	4639      	mov	r1, r7
 8007806:	3330      	adds	r3, #48	@ 0x30
 8007808:	9006      	str	r0, [sp, #24]
 800780a:	9803      	ldr	r0, [sp, #12]
 800780c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800780e:	f000 fc95 	bl	800813c <__mcmp>
 8007812:	462a      	mov	r2, r5
 8007814:	9008      	str	r0, [sp, #32]
 8007816:	4621      	mov	r1, r4
 8007818:	4648      	mov	r0, r9
 800781a:	f000 fcab 	bl	8008174 <__mdiff>
 800781e:	68c2      	ldr	r2, [r0, #12]
 8007820:	4606      	mov	r6, r0
 8007822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007824:	bb02      	cbnz	r2, 8007868 <_dtoa_r+0xa48>
 8007826:	4601      	mov	r1, r0
 8007828:	9803      	ldr	r0, [sp, #12]
 800782a:	f000 fc87 	bl	800813c <__mcmp>
 800782e:	4602      	mov	r2, r0
 8007830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007832:	4631      	mov	r1, r6
 8007834:	4648      	mov	r0, r9
 8007836:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800783a:	f000 fa03 	bl	8007c44 <_Bfree>
 800783e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007840:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007842:	9e04      	ldr	r6, [sp, #16]
 8007844:	ea42 0103 	orr.w	r1, r2, r3
 8007848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800784a:	4319      	orrs	r1, r3
 800784c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800784e:	d10d      	bne.n	800786c <_dtoa_r+0xa4c>
 8007850:	2b39      	cmp	r3, #57	@ 0x39
 8007852:	d027      	beq.n	80078a4 <_dtoa_r+0xa84>
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	2a00      	cmp	r2, #0
 8007858:	dd01      	ble.n	800785e <_dtoa_r+0xa3e>
 800785a:	9b06      	ldr	r3, [sp, #24]
 800785c:	3331      	adds	r3, #49	@ 0x31
 800785e:	f88b 3000 	strb.w	r3, [fp]
 8007862:	e52e      	b.n	80072c2 <_dtoa_r+0x4a2>
 8007864:	4628      	mov	r0, r5
 8007866:	e7b9      	b.n	80077dc <_dtoa_r+0x9bc>
 8007868:	2201      	movs	r2, #1
 800786a:	e7e2      	b.n	8007832 <_dtoa_r+0xa12>
 800786c:	9908      	ldr	r1, [sp, #32]
 800786e:	2900      	cmp	r1, #0
 8007870:	db04      	blt.n	800787c <_dtoa_r+0xa5c>
 8007872:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007874:	4301      	orrs	r1, r0
 8007876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007878:	4301      	orrs	r1, r0
 800787a:	d120      	bne.n	80078be <_dtoa_r+0xa9e>
 800787c:	2a00      	cmp	r2, #0
 800787e:	ddee      	ble.n	800785e <_dtoa_r+0xa3e>
 8007880:	2201      	movs	r2, #1
 8007882:	9903      	ldr	r1, [sp, #12]
 8007884:	4648      	mov	r0, r9
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	f000 fbec 	bl	8008064 <__lshift>
 800788c:	4621      	mov	r1, r4
 800788e:	9003      	str	r0, [sp, #12]
 8007890:	f000 fc54 	bl	800813c <__mcmp>
 8007894:	2800      	cmp	r0, #0
 8007896:	9b04      	ldr	r3, [sp, #16]
 8007898:	dc02      	bgt.n	80078a0 <_dtoa_r+0xa80>
 800789a:	d1e0      	bne.n	800785e <_dtoa_r+0xa3e>
 800789c:	07da      	lsls	r2, r3, #31
 800789e:	d5de      	bpl.n	800785e <_dtoa_r+0xa3e>
 80078a0:	2b39      	cmp	r3, #57	@ 0x39
 80078a2:	d1da      	bne.n	800785a <_dtoa_r+0xa3a>
 80078a4:	2339      	movs	r3, #57	@ 0x39
 80078a6:	f88b 3000 	strb.w	r3, [fp]
 80078aa:	4633      	mov	r3, r6
 80078ac:	461e      	mov	r6, r3
 80078ae:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	2a39      	cmp	r2, #57	@ 0x39
 80078b6:	d04e      	beq.n	8007956 <_dtoa_r+0xb36>
 80078b8:	3201      	adds	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e501      	b.n	80072c2 <_dtoa_r+0x4a2>
 80078be:	2a00      	cmp	r2, #0
 80078c0:	dd03      	ble.n	80078ca <_dtoa_r+0xaaa>
 80078c2:	2b39      	cmp	r3, #57	@ 0x39
 80078c4:	d0ee      	beq.n	80078a4 <_dtoa_r+0xa84>
 80078c6:	3301      	adds	r3, #1
 80078c8:	e7c9      	b.n	800785e <_dtoa_r+0xa3e>
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078d2:	428a      	cmp	r2, r1
 80078d4:	d028      	beq.n	8007928 <_dtoa_r+0xb08>
 80078d6:	2300      	movs	r3, #0
 80078d8:	220a      	movs	r2, #10
 80078da:	9903      	ldr	r1, [sp, #12]
 80078dc:	4648      	mov	r0, r9
 80078de:	f000 f9d3 	bl	8007c88 <__multadd>
 80078e2:	42af      	cmp	r7, r5
 80078e4:	9003      	str	r0, [sp, #12]
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	f04f 020a 	mov.w	r2, #10
 80078ee:	4639      	mov	r1, r7
 80078f0:	4648      	mov	r0, r9
 80078f2:	d107      	bne.n	8007904 <_dtoa_r+0xae4>
 80078f4:	f000 f9c8 	bl	8007c88 <__multadd>
 80078f8:	4607      	mov	r7, r0
 80078fa:	4605      	mov	r5, r0
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	3301      	adds	r3, #1
 8007900:	9304      	str	r3, [sp, #16]
 8007902:	e777      	b.n	80077f4 <_dtoa_r+0x9d4>
 8007904:	f000 f9c0 	bl	8007c88 <__multadd>
 8007908:	4629      	mov	r1, r5
 800790a:	4607      	mov	r7, r0
 800790c:	2300      	movs	r3, #0
 800790e:	220a      	movs	r2, #10
 8007910:	4648      	mov	r0, r9
 8007912:	f000 f9b9 	bl	8007c88 <__multadd>
 8007916:	4605      	mov	r5, r0
 8007918:	e7f0      	b.n	80078fc <_dtoa_r+0xadc>
 800791a:	f1bb 0f00 	cmp.w	fp, #0
 800791e:	bfcc      	ite	gt
 8007920:	465e      	movgt	r6, fp
 8007922:	2601      	movle	r6, #1
 8007924:	2700      	movs	r7, #0
 8007926:	4456      	add	r6, sl
 8007928:	2201      	movs	r2, #1
 800792a:	9903      	ldr	r1, [sp, #12]
 800792c:	4648      	mov	r0, r9
 800792e:	9304      	str	r3, [sp, #16]
 8007930:	f000 fb98 	bl	8008064 <__lshift>
 8007934:	4621      	mov	r1, r4
 8007936:	9003      	str	r0, [sp, #12]
 8007938:	f000 fc00 	bl	800813c <__mcmp>
 800793c:	2800      	cmp	r0, #0
 800793e:	dcb4      	bgt.n	80078aa <_dtoa_r+0xa8a>
 8007940:	d102      	bne.n	8007948 <_dtoa_r+0xb28>
 8007942:	9b04      	ldr	r3, [sp, #16]
 8007944:	07db      	lsls	r3, r3, #31
 8007946:	d4b0      	bmi.n	80078aa <_dtoa_r+0xa8a>
 8007948:	4633      	mov	r3, r6
 800794a:	461e      	mov	r6, r3
 800794c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007950:	2a30      	cmp	r2, #48	@ 0x30
 8007952:	d0fa      	beq.n	800794a <_dtoa_r+0xb2a>
 8007954:	e4b5      	b.n	80072c2 <_dtoa_r+0x4a2>
 8007956:	459a      	cmp	sl, r3
 8007958:	d1a8      	bne.n	80078ac <_dtoa_r+0xa8c>
 800795a:	2331      	movs	r3, #49	@ 0x31
 800795c:	f108 0801 	add.w	r8, r8, #1
 8007960:	f88a 3000 	strb.w	r3, [sl]
 8007964:	e4ad      	b.n	80072c2 <_dtoa_r+0x4a2>
 8007966:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007968:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80079c4 <_dtoa_r+0xba4>
 800796c:	b11b      	cbz	r3, 8007976 <_dtoa_r+0xb56>
 800796e:	f10a 0308 	add.w	r3, sl, #8
 8007972:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4650      	mov	r0, sl
 8007978:	b017      	add	sp, #92	@ 0x5c
 800797a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800797e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007980:	2b01      	cmp	r3, #1
 8007982:	f77f ae2e 	ble.w	80075e2 <_dtoa_r+0x7c2>
 8007986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007988:	930a      	str	r3, [sp, #40]	@ 0x28
 800798a:	2001      	movs	r0, #1
 800798c:	e64d      	b.n	800762a <_dtoa_r+0x80a>
 800798e:	f1bb 0f00 	cmp.w	fp, #0
 8007992:	f77f aed9 	ble.w	8007748 <_dtoa_r+0x928>
 8007996:	4656      	mov	r6, sl
 8007998:	4621      	mov	r1, r4
 800799a:	9803      	ldr	r0, [sp, #12]
 800799c:	f7ff f9b6 	bl	8006d0c <quorem>
 80079a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80079a4:	f806 3b01 	strb.w	r3, [r6], #1
 80079a8:	eba6 020a 	sub.w	r2, r6, sl
 80079ac:	4593      	cmp	fp, r2
 80079ae:	ddb4      	ble.n	800791a <_dtoa_r+0xafa>
 80079b0:	2300      	movs	r3, #0
 80079b2:	220a      	movs	r2, #10
 80079b4:	4648      	mov	r0, r9
 80079b6:	9903      	ldr	r1, [sp, #12]
 80079b8:	f000 f966 	bl	8007c88 <__multadd>
 80079bc:	9003      	str	r0, [sp, #12]
 80079be:	e7eb      	b.n	8007998 <_dtoa_r+0xb78>
 80079c0:	0800aa6b 	.word	0x0800aa6b
 80079c4:	0800a9ef 	.word	0x0800a9ef

080079c8 <_free_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d040      	beq.n	8007a52 <_free_r+0x8a>
 80079d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d4:	1f0c      	subs	r4, r1, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	bfb8      	it	lt
 80079da:	18e4      	addlt	r4, r4, r3
 80079dc:	f000 f8e6 	bl	8007bac <__malloc_lock>
 80079e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <_free_r+0x8c>)
 80079e2:	6813      	ldr	r3, [r2, #0]
 80079e4:	b933      	cbnz	r3, 80079f4 <_free_r+0x2c>
 80079e6:	6063      	str	r3, [r4, #4]
 80079e8:	6014      	str	r4, [r2, #0]
 80079ea:	4628      	mov	r0, r5
 80079ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079f0:	f000 b8e2 	b.w	8007bb8 <__malloc_unlock>
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d908      	bls.n	8007a0a <_free_r+0x42>
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	1821      	adds	r1, r4, r0
 80079fc:	428b      	cmp	r3, r1
 80079fe:	bf01      	itttt	eq
 8007a00:	6819      	ldreq	r1, [r3, #0]
 8007a02:	685b      	ldreq	r3, [r3, #4]
 8007a04:	1809      	addeq	r1, r1, r0
 8007a06:	6021      	streq	r1, [r4, #0]
 8007a08:	e7ed      	b.n	80079e6 <_free_r+0x1e>
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	b10b      	cbz	r3, 8007a14 <_free_r+0x4c>
 8007a10:	42a3      	cmp	r3, r4
 8007a12:	d9fa      	bls.n	8007a0a <_free_r+0x42>
 8007a14:	6811      	ldr	r1, [r2, #0]
 8007a16:	1850      	adds	r0, r2, r1
 8007a18:	42a0      	cmp	r0, r4
 8007a1a:	d10b      	bne.n	8007a34 <_free_r+0x6c>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	4401      	add	r1, r0
 8007a20:	1850      	adds	r0, r2, r1
 8007a22:	4283      	cmp	r3, r0
 8007a24:	6011      	str	r1, [r2, #0]
 8007a26:	d1e0      	bne.n	80079ea <_free_r+0x22>
 8007a28:	6818      	ldr	r0, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	4408      	add	r0, r1
 8007a2e:	6010      	str	r0, [r2, #0]
 8007a30:	6053      	str	r3, [r2, #4]
 8007a32:	e7da      	b.n	80079ea <_free_r+0x22>
 8007a34:	d902      	bls.n	8007a3c <_free_r+0x74>
 8007a36:	230c      	movs	r3, #12
 8007a38:	602b      	str	r3, [r5, #0]
 8007a3a:	e7d6      	b.n	80079ea <_free_r+0x22>
 8007a3c:	6820      	ldr	r0, [r4, #0]
 8007a3e:	1821      	adds	r1, r4, r0
 8007a40:	428b      	cmp	r3, r1
 8007a42:	bf01      	itttt	eq
 8007a44:	6819      	ldreq	r1, [r3, #0]
 8007a46:	685b      	ldreq	r3, [r3, #4]
 8007a48:	1809      	addeq	r1, r1, r0
 8007a4a:	6021      	streq	r1, [r4, #0]
 8007a4c:	6063      	str	r3, [r4, #4]
 8007a4e:	6054      	str	r4, [r2, #4]
 8007a50:	e7cb      	b.n	80079ea <_free_r+0x22>
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	20000874 	.word	0x20000874

08007a58 <malloc>:
 8007a58:	4b02      	ldr	r3, [pc, #8]	@ (8007a64 <malloc+0xc>)
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	f000 b825 	b.w	8007aac <_malloc_r>
 8007a62:	bf00      	nop
 8007a64:	20000020 	.word	0x20000020

08007a68 <sbrk_aligned>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	4e0f      	ldr	r6, [pc, #60]	@ (8007aa8 <sbrk_aligned+0x40>)
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	6831      	ldr	r1, [r6, #0]
 8007a70:	4605      	mov	r5, r0
 8007a72:	b911      	cbnz	r1, 8007a7a <sbrk_aligned+0x12>
 8007a74:	f001 fdee 	bl	8009654 <_sbrk_r>
 8007a78:	6030      	str	r0, [r6, #0]
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	f001 fde9 	bl	8009654 <_sbrk_r>
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	d103      	bne.n	8007a8e <sbrk_aligned+0x26>
 8007a86:	f04f 34ff 	mov.w	r4, #4294967295
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	1cc4      	adds	r4, r0, #3
 8007a90:	f024 0403 	bic.w	r4, r4, #3
 8007a94:	42a0      	cmp	r0, r4
 8007a96:	d0f8      	beq.n	8007a8a <sbrk_aligned+0x22>
 8007a98:	1a21      	subs	r1, r4, r0
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f001 fdda 	bl	8009654 <_sbrk_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d1f2      	bne.n	8007a8a <sbrk_aligned+0x22>
 8007aa4:	e7ef      	b.n	8007a86 <sbrk_aligned+0x1e>
 8007aa6:	bf00      	nop
 8007aa8:	20000870 	.word	0x20000870

08007aac <_malloc_r>:
 8007aac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab0:	1ccd      	adds	r5, r1, #3
 8007ab2:	f025 0503 	bic.w	r5, r5, #3
 8007ab6:	3508      	adds	r5, #8
 8007ab8:	2d0c      	cmp	r5, #12
 8007aba:	bf38      	it	cc
 8007abc:	250c      	movcc	r5, #12
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	db01      	blt.n	8007ac8 <_malloc_r+0x1c>
 8007ac4:	42a9      	cmp	r1, r5
 8007ac6:	d904      	bls.n	8007ad2 <_malloc_r+0x26>
 8007ac8:	230c      	movs	r3, #12
 8007aca:	6033      	str	r3, [r6, #0]
 8007acc:	2000      	movs	r0, #0
 8007ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ba8 <_malloc_r+0xfc>
 8007ad6:	f000 f869 	bl	8007bac <__malloc_lock>
 8007ada:	f8d8 3000 	ldr.w	r3, [r8]
 8007ade:	461c      	mov	r4, r3
 8007ae0:	bb44      	cbnz	r4, 8007b34 <_malloc_r+0x88>
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff ffbf 	bl	8007a68 <sbrk_aligned>
 8007aea:	1c43      	adds	r3, r0, #1
 8007aec:	4604      	mov	r4, r0
 8007aee:	d158      	bne.n	8007ba2 <_malloc_r+0xf6>
 8007af0:	f8d8 4000 	ldr.w	r4, [r8]
 8007af4:	4627      	mov	r7, r4
 8007af6:	2f00      	cmp	r7, #0
 8007af8:	d143      	bne.n	8007b82 <_malloc_r+0xd6>
 8007afa:	2c00      	cmp	r4, #0
 8007afc:	d04b      	beq.n	8007b96 <_malloc_r+0xea>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	4639      	mov	r1, r7
 8007b02:	4630      	mov	r0, r6
 8007b04:	eb04 0903 	add.w	r9, r4, r3
 8007b08:	f001 fda4 	bl	8009654 <_sbrk_r>
 8007b0c:	4581      	cmp	r9, r0
 8007b0e:	d142      	bne.n	8007b96 <_malloc_r+0xea>
 8007b10:	6821      	ldr	r1, [r4, #0]
 8007b12:	4630      	mov	r0, r6
 8007b14:	1a6d      	subs	r5, r5, r1
 8007b16:	4629      	mov	r1, r5
 8007b18:	f7ff ffa6 	bl	8007a68 <sbrk_aligned>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d03a      	beq.n	8007b96 <_malloc_r+0xea>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	442b      	add	r3, r5
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	bb62      	cbnz	r2, 8007b88 <_malloc_r+0xdc>
 8007b2e:	f8c8 7000 	str.w	r7, [r8]
 8007b32:	e00f      	b.n	8007b54 <_malloc_r+0xa8>
 8007b34:	6822      	ldr	r2, [r4, #0]
 8007b36:	1b52      	subs	r2, r2, r5
 8007b38:	d420      	bmi.n	8007b7c <_malloc_r+0xd0>
 8007b3a:	2a0b      	cmp	r2, #11
 8007b3c:	d917      	bls.n	8007b6e <_malloc_r+0xc2>
 8007b3e:	1961      	adds	r1, r4, r5
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	6025      	str	r5, [r4, #0]
 8007b44:	bf18      	it	ne
 8007b46:	6059      	strne	r1, [r3, #4]
 8007b48:	6863      	ldr	r3, [r4, #4]
 8007b4a:	bf08      	it	eq
 8007b4c:	f8c8 1000 	streq.w	r1, [r8]
 8007b50:	5162      	str	r2, [r4, r5]
 8007b52:	604b      	str	r3, [r1, #4]
 8007b54:	4630      	mov	r0, r6
 8007b56:	f000 f82f 	bl	8007bb8 <__malloc_unlock>
 8007b5a:	f104 000b 	add.w	r0, r4, #11
 8007b5e:	1d23      	adds	r3, r4, #4
 8007b60:	f020 0007 	bic.w	r0, r0, #7
 8007b64:	1ac2      	subs	r2, r0, r3
 8007b66:	bf1c      	itt	ne
 8007b68:	1a1b      	subne	r3, r3, r0
 8007b6a:	50a3      	strne	r3, [r4, r2]
 8007b6c:	e7af      	b.n	8007ace <_malloc_r+0x22>
 8007b6e:	6862      	ldr	r2, [r4, #4]
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	bf0c      	ite	eq
 8007b74:	f8c8 2000 	streq.w	r2, [r8]
 8007b78:	605a      	strne	r2, [r3, #4]
 8007b7a:	e7eb      	b.n	8007b54 <_malloc_r+0xa8>
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	6864      	ldr	r4, [r4, #4]
 8007b80:	e7ae      	b.n	8007ae0 <_malloc_r+0x34>
 8007b82:	463c      	mov	r4, r7
 8007b84:	687f      	ldr	r7, [r7, #4]
 8007b86:	e7b6      	b.n	8007af6 <_malloc_r+0x4a>
 8007b88:	461a      	mov	r2, r3
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	42a3      	cmp	r3, r4
 8007b8e:	d1fb      	bne.n	8007b88 <_malloc_r+0xdc>
 8007b90:	2300      	movs	r3, #0
 8007b92:	6053      	str	r3, [r2, #4]
 8007b94:	e7de      	b.n	8007b54 <_malloc_r+0xa8>
 8007b96:	230c      	movs	r3, #12
 8007b98:	4630      	mov	r0, r6
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	f000 f80c 	bl	8007bb8 <__malloc_unlock>
 8007ba0:	e794      	b.n	8007acc <_malloc_r+0x20>
 8007ba2:	6005      	str	r5, [r0, #0]
 8007ba4:	e7d6      	b.n	8007b54 <_malloc_r+0xa8>
 8007ba6:	bf00      	nop
 8007ba8:	20000874 	.word	0x20000874

08007bac <__malloc_lock>:
 8007bac:	4801      	ldr	r0, [pc, #4]	@ (8007bb4 <__malloc_lock+0x8>)
 8007bae:	f7ff b88a 	b.w	8006cc6 <__retarget_lock_acquire_recursive>
 8007bb2:	bf00      	nop
 8007bb4:	2000086c 	.word	0x2000086c

08007bb8 <__malloc_unlock>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__malloc_unlock+0x8>)
 8007bba:	f7ff b885 	b.w	8006cc8 <__retarget_lock_release_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	2000086c 	.word	0x2000086c

08007bc4 <_Balloc>:
 8007bc4:	b570      	push	{r4, r5, r6, lr}
 8007bc6:	69c6      	ldr	r6, [r0, #28]
 8007bc8:	4604      	mov	r4, r0
 8007bca:	460d      	mov	r5, r1
 8007bcc:	b976      	cbnz	r6, 8007bec <_Balloc+0x28>
 8007bce:	2010      	movs	r0, #16
 8007bd0:	f7ff ff42 	bl	8007a58 <malloc>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	61e0      	str	r0, [r4, #28]
 8007bd8:	b920      	cbnz	r0, 8007be4 <_Balloc+0x20>
 8007bda:	216b      	movs	r1, #107	@ 0x6b
 8007bdc:	4b17      	ldr	r3, [pc, #92]	@ (8007c3c <_Balloc+0x78>)
 8007bde:	4818      	ldr	r0, [pc, #96]	@ (8007c40 <_Balloc+0x7c>)
 8007be0:	f001 fd4e 	bl	8009680 <__assert_func>
 8007be4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007be8:	6006      	str	r6, [r0, #0]
 8007bea:	60c6      	str	r6, [r0, #12]
 8007bec:	69e6      	ldr	r6, [r4, #28]
 8007bee:	68f3      	ldr	r3, [r6, #12]
 8007bf0:	b183      	cbz	r3, 8007c14 <_Balloc+0x50>
 8007bf2:	69e3      	ldr	r3, [r4, #28]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bfa:	b9b8      	cbnz	r0, 8007c2c <_Balloc+0x68>
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	fa01 f605 	lsl.w	r6, r1, r5
 8007c02:	1d72      	adds	r2, r6, #5
 8007c04:	4620      	mov	r0, r4
 8007c06:	0092      	lsls	r2, r2, #2
 8007c08:	f001 fd58 	bl	80096bc <_calloc_r>
 8007c0c:	b160      	cbz	r0, 8007c28 <_Balloc+0x64>
 8007c0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c12:	e00e      	b.n	8007c32 <_Balloc+0x6e>
 8007c14:	2221      	movs	r2, #33	@ 0x21
 8007c16:	2104      	movs	r1, #4
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 fd4f 	bl	80096bc <_calloc_r>
 8007c1e:	69e3      	ldr	r3, [r4, #28]
 8007c20:	60f0      	str	r0, [r6, #12]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e4      	bne.n	8007bf2 <_Balloc+0x2e>
 8007c28:	2000      	movs	r0, #0
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	6802      	ldr	r2, [r0, #0]
 8007c2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c32:	2300      	movs	r3, #0
 8007c34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c38:	e7f7      	b.n	8007c2a <_Balloc+0x66>
 8007c3a:	bf00      	nop
 8007c3c:	0800a9fc 	.word	0x0800a9fc
 8007c40:	0800aa7c 	.word	0x0800aa7c

08007c44 <_Bfree>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	69c6      	ldr	r6, [r0, #28]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b976      	cbnz	r6, 8007c6c <_Bfree+0x28>
 8007c4e:	2010      	movs	r0, #16
 8007c50:	f7ff ff02 	bl	8007a58 <malloc>
 8007c54:	4602      	mov	r2, r0
 8007c56:	61e8      	str	r0, [r5, #28]
 8007c58:	b920      	cbnz	r0, 8007c64 <_Bfree+0x20>
 8007c5a:	218f      	movs	r1, #143	@ 0x8f
 8007c5c:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <_Bfree+0x3c>)
 8007c5e:	4809      	ldr	r0, [pc, #36]	@ (8007c84 <_Bfree+0x40>)
 8007c60:	f001 fd0e 	bl	8009680 <__assert_func>
 8007c64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c68:	6006      	str	r6, [r0, #0]
 8007c6a:	60c6      	str	r6, [r0, #12]
 8007c6c:	b13c      	cbz	r4, 8007c7e <_Bfree+0x3a>
 8007c6e:	69eb      	ldr	r3, [r5, #28]
 8007c70:	6862      	ldr	r2, [r4, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c78:	6021      	str	r1, [r4, #0]
 8007c7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	0800a9fc 	.word	0x0800a9fc
 8007c84:	0800aa7c 	.word	0x0800aa7c

08007c88 <__multadd>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	4607      	mov	r7, r0
 8007c8e:	460c      	mov	r4, r1
 8007c90:	461e      	mov	r6, r3
 8007c92:	2000      	movs	r0, #0
 8007c94:	690d      	ldr	r5, [r1, #16]
 8007c96:	f101 0c14 	add.w	ip, r1, #20
 8007c9a:	f8dc 3000 	ldr.w	r3, [ip]
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	b299      	uxth	r1, r3
 8007ca2:	fb02 6101 	mla	r1, r2, r1, r6
 8007ca6:	0c1e      	lsrs	r6, r3, #16
 8007ca8:	0c0b      	lsrs	r3, r1, #16
 8007caa:	fb02 3306 	mla	r3, r2, r6, r3
 8007cae:	b289      	uxth	r1, r1
 8007cb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cb4:	4285      	cmp	r5, r0
 8007cb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cba:	f84c 1b04 	str.w	r1, [ip], #4
 8007cbe:	dcec      	bgt.n	8007c9a <__multadd+0x12>
 8007cc0:	b30e      	cbz	r6, 8007d06 <__multadd+0x7e>
 8007cc2:	68a3      	ldr	r3, [r4, #8]
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dc19      	bgt.n	8007cfc <__multadd+0x74>
 8007cc8:	6861      	ldr	r1, [r4, #4]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	3101      	adds	r1, #1
 8007cce:	f7ff ff79 	bl	8007bc4 <_Balloc>
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	b928      	cbnz	r0, 8007ce2 <__multadd+0x5a>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	21ba      	movs	r1, #186	@ 0xba
 8007cda:	4b0c      	ldr	r3, [pc, #48]	@ (8007d0c <__multadd+0x84>)
 8007cdc:	480c      	ldr	r0, [pc, #48]	@ (8007d10 <__multadd+0x88>)
 8007cde:	f001 fccf 	bl	8009680 <__assert_func>
 8007ce2:	6922      	ldr	r2, [r4, #16]
 8007ce4:	f104 010c 	add.w	r1, r4, #12
 8007ce8:	3202      	adds	r2, #2
 8007cea:	0092      	lsls	r2, r2, #2
 8007cec:	300c      	adds	r0, #12
 8007cee:	f7fe fffa 	bl	8006ce6 <memcpy>
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff ffa5 	bl	8007c44 <_Bfree>
 8007cfa:	4644      	mov	r4, r8
 8007cfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d00:	3501      	adds	r5, #1
 8007d02:	615e      	str	r6, [r3, #20]
 8007d04:	6125      	str	r5, [r4, #16]
 8007d06:	4620      	mov	r0, r4
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0c:	0800aa6b 	.word	0x0800aa6b
 8007d10:	0800aa7c 	.word	0x0800aa7c

08007d14 <__s2b>:
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4615      	mov	r5, r2
 8007d1a:	2209      	movs	r2, #9
 8007d1c:	461f      	mov	r7, r3
 8007d1e:	3308      	adds	r3, #8
 8007d20:	460c      	mov	r4, r1
 8007d22:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d26:	4606      	mov	r6, r0
 8007d28:	2201      	movs	r2, #1
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	db09      	blt.n	8007d44 <__s2b+0x30>
 8007d30:	4630      	mov	r0, r6
 8007d32:	f7ff ff47 	bl	8007bc4 <_Balloc>
 8007d36:	b940      	cbnz	r0, 8007d4a <__s2b+0x36>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	21d3      	movs	r1, #211	@ 0xd3
 8007d3c:	4b18      	ldr	r3, [pc, #96]	@ (8007da0 <__s2b+0x8c>)
 8007d3e:	4819      	ldr	r0, [pc, #100]	@ (8007da4 <__s2b+0x90>)
 8007d40:	f001 fc9e 	bl	8009680 <__assert_func>
 8007d44:	0052      	lsls	r2, r2, #1
 8007d46:	3101      	adds	r1, #1
 8007d48:	e7f0      	b.n	8007d2c <__s2b+0x18>
 8007d4a:	9b08      	ldr	r3, [sp, #32]
 8007d4c:	2d09      	cmp	r5, #9
 8007d4e:	6143      	str	r3, [r0, #20]
 8007d50:	f04f 0301 	mov.w	r3, #1
 8007d54:	6103      	str	r3, [r0, #16]
 8007d56:	dd16      	ble.n	8007d86 <__s2b+0x72>
 8007d58:	f104 0909 	add.w	r9, r4, #9
 8007d5c:	46c8      	mov	r8, r9
 8007d5e:	442c      	add	r4, r5
 8007d60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d64:	4601      	mov	r1, r0
 8007d66:	220a      	movs	r2, #10
 8007d68:	4630      	mov	r0, r6
 8007d6a:	3b30      	subs	r3, #48	@ 0x30
 8007d6c:	f7ff ff8c 	bl	8007c88 <__multadd>
 8007d70:	45a0      	cmp	r8, r4
 8007d72:	d1f5      	bne.n	8007d60 <__s2b+0x4c>
 8007d74:	f1a5 0408 	sub.w	r4, r5, #8
 8007d78:	444c      	add	r4, r9
 8007d7a:	1b2d      	subs	r5, r5, r4
 8007d7c:	1963      	adds	r3, r4, r5
 8007d7e:	42bb      	cmp	r3, r7
 8007d80:	db04      	blt.n	8007d8c <__s2b+0x78>
 8007d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d86:	2509      	movs	r5, #9
 8007d88:	340a      	adds	r4, #10
 8007d8a:	e7f6      	b.n	8007d7a <__s2b+0x66>
 8007d8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007d90:	4601      	mov	r1, r0
 8007d92:	220a      	movs	r2, #10
 8007d94:	4630      	mov	r0, r6
 8007d96:	3b30      	subs	r3, #48	@ 0x30
 8007d98:	f7ff ff76 	bl	8007c88 <__multadd>
 8007d9c:	e7ee      	b.n	8007d7c <__s2b+0x68>
 8007d9e:	bf00      	nop
 8007da0:	0800aa6b 	.word	0x0800aa6b
 8007da4:	0800aa7c 	.word	0x0800aa7c

08007da8 <__hi0bits>:
 8007da8:	4603      	mov	r3, r0
 8007daa:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dae:	bf3a      	itte	cc
 8007db0:	0403      	lslcc	r3, r0, #16
 8007db2:	2010      	movcc	r0, #16
 8007db4:	2000      	movcs	r0, #0
 8007db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dba:	bf3c      	itt	cc
 8007dbc:	021b      	lslcc	r3, r3, #8
 8007dbe:	3008      	addcc	r0, #8
 8007dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc4:	bf3c      	itt	cc
 8007dc6:	011b      	lslcc	r3, r3, #4
 8007dc8:	3004      	addcc	r0, #4
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dce:	bf3c      	itt	cc
 8007dd0:	009b      	lslcc	r3, r3, #2
 8007dd2:	3002      	addcc	r0, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db05      	blt.n	8007de4 <__hi0bits+0x3c>
 8007dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ddc:	f100 0001 	add.w	r0, r0, #1
 8007de0:	bf08      	it	eq
 8007de2:	2020      	moveq	r0, #32
 8007de4:	4770      	bx	lr

08007de6 <__lo0bits>:
 8007de6:	6803      	ldr	r3, [r0, #0]
 8007de8:	4602      	mov	r2, r0
 8007dea:	f013 0007 	ands.w	r0, r3, #7
 8007dee:	d00b      	beq.n	8007e08 <__lo0bits+0x22>
 8007df0:	07d9      	lsls	r1, r3, #31
 8007df2:	d421      	bmi.n	8007e38 <__lo0bits+0x52>
 8007df4:	0798      	lsls	r0, r3, #30
 8007df6:	bf49      	itett	mi
 8007df8:	085b      	lsrmi	r3, r3, #1
 8007dfa:	089b      	lsrpl	r3, r3, #2
 8007dfc:	2001      	movmi	r0, #1
 8007dfe:	6013      	strmi	r3, [r2, #0]
 8007e00:	bf5c      	itt	pl
 8007e02:	2002      	movpl	r0, #2
 8007e04:	6013      	strpl	r3, [r2, #0]
 8007e06:	4770      	bx	lr
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	b909      	cbnz	r1, 8007e10 <__lo0bits+0x2a>
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	0c1b      	lsrs	r3, r3, #16
 8007e10:	b2d9      	uxtb	r1, r3
 8007e12:	b909      	cbnz	r1, 8007e18 <__lo0bits+0x32>
 8007e14:	3008      	adds	r0, #8
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	bf04      	itt	eq
 8007e1c:	091b      	lsreq	r3, r3, #4
 8007e1e:	3004      	addeq	r0, #4
 8007e20:	0799      	lsls	r1, r3, #30
 8007e22:	bf04      	itt	eq
 8007e24:	089b      	lsreq	r3, r3, #2
 8007e26:	3002      	addeq	r0, #2
 8007e28:	07d9      	lsls	r1, r3, #31
 8007e2a:	d403      	bmi.n	8007e34 <__lo0bits+0x4e>
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	f100 0001 	add.w	r0, r0, #1
 8007e32:	d003      	beq.n	8007e3c <__lo0bits+0x56>
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4770      	bx	lr
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4770      	bx	lr
 8007e3c:	2020      	movs	r0, #32
 8007e3e:	4770      	bx	lr

08007e40 <__i2b>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	2101      	movs	r1, #1
 8007e46:	f7ff febd 	bl	8007bc4 <_Balloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__i2b+0x1a>
 8007e4e:	f240 1145 	movw	r1, #325	@ 0x145
 8007e52:	4b04      	ldr	r3, [pc, #16]	@ (8007e64 <__i2b+0x24>)
 8007e54:	4804      	ldr	r0, [pc, #16]	@ (8007e68 <__i2b+0x28>)
 8007e56:	f001 fc13 	bl	8009680 <__assert_func>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	6144      	str	r4, [r0, #20]
 8007e5e:	6103      	str	r3, [r0, #16]
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	0800aa6b 	.word	0x0800aa6b
 8007e68:	0800aa7c 	.word	0x0800aa7c

08007e6c <__multiply>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4617      	mov	r7, r2
 8007e72:	690a      	ldr	r2, [r1, #16]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4689      	mov	r9, r1
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	bfa2      	ittt	ge
 8007e7c:	463b      	movge	r3, r7
 8007e7e:	460f      	movge	r7, r1
 8007e80:	4699      	movge	r9, r3
 8007e82:	693d      	ldr	r5, [r7, #16]
 8007e84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	eb05 060a 	add.w	r6, r5, sl
 8007e90:	42b3      	cmp	r3, r6
 8007e92:	b085      	sub	sp, #20
 8007e94:	bfb8      	it	lt
 8007e96:	3101      	addlt	r1, #1
 8007e98:	f7ff fe94 	bl	8007bc4 <_Balloc>
 8007e9c:	b930      	cbnz	r0, 8007eac <__multiply+0x40>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ea4:	4b40      	ldr	r3, [pc, #256]	@ (8007fa8 <__multiply+0x13c>)
 8007ea6:	4841      	ldr	r0, [pc, #260]	@ (8007fac <__multiply+0x140>)
 8007ea8:	f001 fbea 	bl	8009680 <__assert_func>
 8007eac:	f100 0414 	add.w	r4, r0, #20
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007eb8:	4573      	cmp	r3, lr
 8007eba:	d320      	bcc.n	8007efe <__multiply+0x92>
 8007ebc:	f107 0814 	add.w	r8, r7, #20
 8007ec0:	f109 0114 	add.w	r1, r9, #20
 8007ec4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ec8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	1beb      	subs	r3, r5, r7
 8007ed0:	3b15      	subs	r3, #21
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	3715      	adds	r7, #21
 8007eda:	42bd      	cmp	r5, r7
 8007edc:	bf38      	it	cc
 8007ede:	2304      	movcc	r3, #4
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	9b02      	ldr	r3, [sp, #8]
 8007ee4:	9103      	str	r1, [sp, #12]
 8007ee6:	428b      	cmp	r3, r1
 8007ee8:	d80c      	bhi.n	8007f04 <__multiply+0x98>
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	dd03      	ble.n	8007ef6 <__multiply+0x8a>
 8007eee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d055      	beq.n	8007fa2 <__multiply+0x136>
 8007ef6:	6106      	str	r6, [r0, #16]
 8007ef8:	b005      	add	sp, #20
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	f843 2b04 	str.w	r2, [r3], #4
 8007f02:	e7d9      	b.n	8007eb8 <__multiply+0x4c>
 8007f04:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	d01f      	beq.n	8007f4e <__multiply+0xe2>
 8007f0e:	46c4      	mov	ip, r8
 8007f10:	46a1      	mov	r9, r4
 8007f12:	2700      	movs	r7, #0
 8007f14:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f18:	f8d9 3000 	ldr.w	r3, [r9]
 8007f1c:	fa1f fb82 	uxth.w	fp, r2
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f26:	443b      	add	r3, r7
 8007f28:	f8d9 7000 	ldr.w	r7, [r9]
 8007f2c:	0c12      	lsrs	r2, r2, #16
 8007f2e:	0c3f      	lsrs	r7, r7, #16
 8007f30:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f34:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f3e:	4565      	cmp	r5, ip
 8007f40:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f44:	f849 3b04 	str.w	r3, [r9], #4
 8007f48:	d8e4      	bhi.n	8007f14 <__multiply+0xa8>
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	50e7      	str	r7, [r4, r3]
 8007f4e:	9b03      	ldr	r3, [sp, #12]
 8007f50:	3104      	adds	r1, #4
 8007f52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f56:	f1b9 0f00 	cmp.w	r9, #0
 8007f5a:	d020      	beq.n	8007f9e <__multiply+0x132>
 8007f5c:	4647      	mov	r7, r8
 8007f5e:	46a4      	mov	ip, r4
 8007f60:	f04f 0a00 	mov.w	sl, #0
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f6a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	fb09 220b 	mla	r2, r9, fp, r2
 8007f74:	4452      	add	r2, sl
 8007f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f7a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f7e:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f86:	f8bc 3000 	ldrh.w	r3, [ip]
 8007f8a:	42bd      	cmp	r5, r7
 8007f8c:	fb09 330a 	mla	r3, r9, sl, r3
 8007f90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f98:	d8e5      	bhi.n	8007f66 <__multiply+0xfa>
 8007f9a:	9a01      	ldr	r2, [sp, #4]
 8007f9c:	50a3      	str	r3, [r4, r2]
 8007f9e:	3404      	adds	r4, #4
 8007fa0:	e79f      	b.n	8007ee2 <__multiply+0x76>
 8007fa2:	3e01      	subs	r6, #1
 8007fa4:	e7a1      	b.n	8007eea <__multiply+0x7e>
 8007fa6:	bf00      	nop
 8007fa8:	0800aa6b 	.word	0x0800aa6b
 8007fac:	0800aa7c 	.word	0x0800aa7c

08007fb0 <__pow5mult>:
 8007fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fb4:	4615      	mov	r5, r2
 8007fb6:	f012 0203 	ands.w	r2, r2, #3
 8007fba:	4607      	mov	r7, r0
 8007fbc:	460e      	mov	r6, r1
 8007fbe:	d007      	beq.n	8007fd0 <__pow5mult+0x20>
 8007fc0:	4c25      	ldr	r4, [pc, #148]	@ (8008058 <__pow5mult+0xa8>)
 8007fc2:	3a01      	subs	r2, #1
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fca:	f7ff fe5d 	bl	8007c88 <__multadd>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	10ad      	asrs	r5, r5, #2
 8007fd2:	d03d      	beq.n	8008050 <__pow5mult+0xa0>
 8007fd4:	69fc      	ldr	r4, [r7, #28]
 8007fd6:	b97c      	cbnz	r4, 8007ff8 <__pow5mult+0x48>
 8007fd8:	2010      	movs	r0, #16
 8007fda:	f7ff fd3d 	bl	8007a58 <malloc>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	61f8      	str	r0, [r7, #28]
 8007fe2:	b928      	cbnz	r0, 8007ff0 <__pow5mult+0x40>
 8007fe4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800805c <__pow5mult+0xac>)
 8007fea:	481d      	ldr	r0, [pc, #116]	@ (8008060 <__pow5mult+0xb0>)
 8007fec:	f001 fb48 	bl	8009680 <__assert_func>
 8007ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ff4:	6004      	str	r4, [r0, #0]
 8007ff6:	60c4      	str	r4, [r0, #12]
 8007ff8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008000:	b94c      	cbnz	r4, 8008016 <__pow5mult+0x66>
 8008002:	f240 2171 	movw	r1, #625	@ 0x271
 8008006:	4638      	mov	r0, r7
 8008008:	f7ff ff1a 	bl	8007e40 <__i2b>
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	f8c8 0008 	str.w	r0, [r8, #8]
 8008014:	6003      	str	r3, [r0, #0]
 8008016:	f04f 0900 	mov.w	r9, #0
 800801a:	07eb      	lsls	r3, r5, #31
 800801c:	d50a      	bpl.n	8008034 <__pow5mult+0x84>
 800801e:	4631      	mov	r1, r6
 8008020:	4622      	mov	r2, r4
 8008022:	4638      	mov	r0, r7
 8008024:	f7ff ff22 	bl	8007e6c <__multiply>
 8008028:	4680      	mov	r8, r0
 800802a:	4631      	mov	r1, r6
 800802c:	4638      	mov	r0, r7
 800802e:	f7ff fe09 	bl	8007c44 <_Bfree>
 8008032:	4646      	mov	r6, r8
 8008034:	106d      	asrs	r5, r5, #1
 8008036:	d00b      	beq.n	8008050 <__pow5mult+0xa0>
 8008038:	6820      	ldr	r0, [r4, #0]
 800803a:	b938      	cbnz	r0, 800804c <__pow5mult+0x9c>
 800803c:	4622      	mov	r2, r4
 800803e:	4621      	mov	r1, r4
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff ff13 	bl	8007e6c <__multiply>
 8008046:	6020      	str	r0, [r4, #0]
 8008048:	f8c0 9000 	str.w	r9, [r0]
 800804c:	4604      	mov	r4, r0
 800804e:	e7e4      	b.n	800801a <__pow5mult+0x6a>
 8008050:	4630      	mov	r0, r6
 8008052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008056:	bf00      	nop
 8008058:	0800ab8c 	.word	0x0800ab8c
 800805c:	0800a9fc 	.word	0x0800a9fc
 8008060:	0800aa7c 	.word	0x0800aa7c

08008064 <__lshift>:
 8008064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008068:	460c      	mov	r4, r1
 800806a:	4607      	mov	r7, r0
 800806c:	4691      	mov	r9, r2
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6849      	ldr	r1, [r1, #4]
 8008072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008076:	68a3      	ldr	r3, [r4, #8]
 8008078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800807c:	f108 0601 	add.w	r6, r8, #1
 8008080:	42b3      	cmp	r3, r6
 8008082:	db0b      	blt.n	800809c <__lshift+0x38>
 8008084:	4638      	mov	r0, r7
 8008086:	f7ff fd9d 	bl	8007bc4 <_Balloc>
 800808a:	4605      	mov	r5, r0
 800808c:	b948      	cbnz	r0, 80080a2 <__lshift+0x3e>
 800808e:	4602      	mov	r2, r0
 8008090:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008094:	4b27      	ldr	r3, [pc, #156]	@ (8008134 <__lshift+0xd0>)
 8008096:	4828      	ldr	r0, [pc, #160]	@ (8008138 <__lshift+0xd4>)
 8008098:	f001 faf2 	bl	8009680 <__assert_func>
 800809c:	3101      	adds	r1, #1
 800809e:	005b      	lsls	r3, r3, #1
 80080a0:	e7ee      	b.n	8008080 <__lshift+0x1c>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f100 0114 	add.w	r1, r0, #20
 80080a8:	f100 0210 	add.w	r2, r0, #16
 80080ac:	4618      	mov	r0, r3
 80080ae:	4553      	cmp	r3, sl
 80080b0:	db33      	blt.n	800811a <__lshift+0xb6>
 80080b2:	6920      	ldr	r0, [r4, #16]
 80080b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080b8:	f104 0314 	add.w	r3, r4, #20
 80080bc:	f019 091f 	ands.w	r9, r9, #31
 80080c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080c8:	d02b      	beq.n	8008122 <__lshift+0xbe>
 80080ca:	468a      	mov	sl, r1
 80080cc:	2200      	movs	r2, #0
 80080ce:	f1c9 0e20 	rsb	lr, r9, #32
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	fa00 f009 	lsl.w	r0, r0, r9
 80080d8:	4310      	orrs	r0, r2
 80080da:	f84a 0b04 	str.w	r0, [sl], #4
 80080de:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e2:	459c      	cmp	ip, r3
 80080e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80080e8:	d8f3      	bhi.n	80080d2 <__lshift+0x6e>
 80080ea:	ebac 0304 	sub.w	r3, ip, r4
 80080ee:	3b15      	subs	r3, #21
 80080f0:	f023 0303 	bic.w	r3, r3, #3
 80080f4:	3304      	adds	r3, #4
 80080f6:	f104 0015 	add.w	r0, r4, #21
 80080fa:	4560      	cmp	r0, ip
 80080fc:	bf88      	it	hi
 80080fe:	2304      	movhi	r3, #4
 8008100:	50ca      	str	r2, [r1, r3]
 8008102:	b10a      	cbz	r2, 8008108 <__lshift+0xa4>
 8008104:	f108 0602 	add.w	r6, r8, #2
 8008108:	3e01      	subs	r6, #1
 800810a:	4638      	mov	r0, r7
 800810c:	4621      	mov	r1, r4
 800810e:	612e      	str	r6, [r5, #16]
 8008110:	f7ff fd98 	bl	8007c44 <_Bfree>
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811a:	f842 0f04 	str.w	r0, [r2, #4]!
 800811e:	3301      	adds	r3, #1
 8008120:	e7c5      	b.n	80080ae <__lshift+0x4a>
 8008122:	3904      	subs	r1, #4
 8008124:	f853 2b04 	ldr.w	r2, [r3], #4
 8008128:	459c      	cmp	ip, r3
 800812a:	f841 2f04 	str.w	r2, [r1, #4]!
 800812e:	d8f9      	bhi.n	8008124 <__lshift+0xc0>
 8008130:	e7ea      	b.n	8008108 <__lshift+0xa4>
 8008132:	bf00      	nop
 8008134:	0800aa6b 	.word	0x0800aa6b
 8008138:	0800aa7c 	.word	0x0800aa7c

0800813c <__mcmp>:
 800813c:	4603      	mov	r3, r0
 800813e:	690a      	ldr	r2, [r1, #16]
 8008140:	6900      	ldr	r0, [r0, #16]
 8008142:	b530      	push	{r4, r5, lr}
 8008144:	1a80      	subs	r0, r0, r2
 8008146:	d10e      	bne.n	8008166 <__mcmp+0x2a>
 8008148:	3314      	adds	r3, #20
 800814a:	3114      	adds	r1, #20
 800814c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008150:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008154:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008158:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800815c:	4295      	cmp	r5, r2
 800815e:	d003      	beq.n	8008168 <__mcmp+0x2c>
 8008160:	d205      	bcs.n	800816e <__mcmp+0x32>
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	bd30      	pop	{r4, r5, pc}
 8008168:	42a3      	cmp	r3, r4
 800816a:	d3f3      	bcc.n	8008154 <__mcmp+0x18>
 800816c:	e7fb      	b.n	8008166 <__mcmp+0x2a>
 800816e:	2001      	movs	r0, #1
 8008170:	e7f9      	b.n	8008166 <__mcmp+0x2a>
	...

08008174 <__mdiff>:
 8008174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008178:	4689      	mov	r9, r1
 800817a:	4606      	mov	r6, r0
 800817c:	4611      	mov	r1, r2
 800817e:	4648      	mov	r0, r9
 8008180:	4614      	mov	r4, r2
 8008182:	f7ff ffdb 	bl	800813c <__mcmp>
 8008186:	1e05      	subs	r5, r0, #0
 8008188:	d112      	bne.n	80081b0 <__mdiff+0x3c>
 800818a:	4629      	mov	r1, r5
 800818c:	4630      	mov	r0, r6
 800818e:	f7ff fd19 	bl	8007bc4 <_Balloc>
 8008192:	4602      	mov	r2, r0
 8008194:	b928      	cbnz	r0, 80081a2 <__mdiff+0x2e>
 8008196:	f240 2137 	movw	r1, #567	@ 0x237
 800819a:	4b3e      	ldr	r3, [pc, #248]	@ (8008294 <__mdiff+0x120>)
 800819c:	483e      	ldr	r0, [pc, #248]	@ (8008298 <__mdiff+0x124>)
 800819e:	f001 fa6f 	bl	8009680 <__assert_func>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081a8:	4610      	mov	r0, r2
 80081aa:	b003      	add	sp, #12
 80081ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b0:	bfbc      	itt	lt
 80081b2:	464b      	movlt	r3, r9
 80081b4:	46a1      	movlt	r9, r4
 80081b6:	4630      	mov	r0, r6
 80081b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081bc:	bfba      	itte	lt
 80081be:	461c      	movlt	r4, r3
 80081c0:	2501      	movlt	r5, #1
 80081c2:	2500      	movge	r5, #0
 80081c4:	f7ff fcfe 	bl	8007bc4 <_Balloc>
 80081c8:	4602      	mov	r2, r0
 80081ca:	b918      	cbnz	r0, 80081d4 <__mdiff+0x60>
 80081cc:	f240 2145 	movw	r1, #581	@ 0x245
 80081d0:	4b30      	ldr	r3, [pc, #192]	@ (8008294 <__mdiff+0x120>)
 80081d2:	e7e3      	b.n	800819c <__mdiff+0x28>
 80081d4:	f100 0b14 	add.w	fp, r0, #20
 80081d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081dc:	f109 0310 	add.w	r3, r9, #16
 80081e0:	60c5      	str	r5, [r0, #12]
 80081e2:	f04f 0c00 	mov.w	ip, #0
 80081e6:	f109 0514 	add.w	r5, r9, #20
 80081ea:	46d9      	mov	r9, fp
 80081ec:	6926      	ldr	r6, [r4, #16]
 80081ee:	f104 0e14 	add.w	lr, r4, #20
 80081f2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081f6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008202:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008206:	b281      	uxth	r1, r0
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	fa1f f38a 	uxth.w	r3, sl
 800820e:	1a5b      	subs	r3, r3, r1
 8008210:	0c00      	lsrs	r0, r0, #16
 8008212:	4463      	add	r3, ip
 8008214:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008218:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800821c:	b29b      	uxth	r3, r3
 800821e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008222:	4576      	cmp	r6, lr
 8008224:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008228:	f849 3b04 	str.w	r3, [r9], #4
 800822c:	d8e6      	bhi.n	80081fc <__mdiff+0x88>
 800822e:	1b33      	subs	r3, r6, r4
 8008230:	3b15      	subs	r3, #21
 8008232:	f023 0303 	bic.w	r3, r3, #3
 8008236:	3415      	adds	r4, #21
 8008238:	3304      	adds	r3, #4
 800823a:	42a6      	cmp	r6, r4
 800823c:	bf38      	it	cc
 800823e:	2304      	movcc	r3, #4
 8008240:	441d      	add	r5, r3
 8008242:	445b      	add	r3, fp
 8008244:	461e      	mov	r6, r3
 8008246:	462c      	mov	r4, r5
 8008248:	4544      	cmp	r4, r8
 800824a:	d30e      	bcc.n	800826a <__mdiff+0xf6>
 800824c:	f108 0103 	add.w	r1, r8, #3
 8008250:	1b49      	subs	r1, r1, r5
 8008252:	f021 0103 	bic.w	r1, r1, #3
 8008256:	3d03      	subs	r5, #3
 8008258:	45a8      	cmp	r8, r5
 800825a:	bf38      	it	cc
 800825c:	2100      	movcc	r1, #0
 800825e:	440b      	add	r3, r1
 8008260:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008264:	b199      	cbz	r1, 800828e <__mdiff+0x11a>
 8008266:	6117      	str	r7, [r2, #16]
 8008268:	e79e      	b.n	80081a8 <__mdiff+0x34>
 800826a:	46e6      	mov	lr, ip
 800826c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008270:	fa1f fc81 	uxth.w	ip, r1
 8008274:	44f4      	add	ip, lr
 8008276:	0c08      	lsrs	r0, r1, #16
 8008278:	4471      	add	r1, lr
 800827a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800827e:	b289      	uxth	r1, r1
 8008280:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008284:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008288:	f846 1b04 	str.w	r1, [r6], #4
 800828c:	e7dc      	b.n	8008248 <__mdiff+0xd4>
 800828e:	3f01      	subs	r7, #1
 8008290:	e7e6      	b.n	8008260 <__mdiff+0xec>
 8008292:	bf00      	nop
 8008294:	0800aa6b 	.word	0x0800aa6b
 8008298:	0800aa7c 	.word	0x0800aa7c

0800829c <__ulp>:
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <__ulp+0x3c>)
 800829e:	400b      	ands	r3, r1
 80082a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dc08      	bgt.n	80082ba <__ulp+0x1e>
 80082a8:	425b      	negs	r3, r3
 80082aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082b2:	da04      	bge.n	80082be <__ulp+0x22>
 80082b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082b8:	4113      	asrs	r3, r2
 80082ba:	2200      	movs	r2, #0
 80082bc:	e008      	b.n	80082d0 <__ulp+0x34>
 80082be:	f1a2 0314 	sub.w	r3, r2, #20
 80082c2:	2b1e      	cmp	r3, #30
 80082c4:	bfd6      	itet	le
 80082c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082ca:	2201      	movgt	r2, #1
 80082cc:	40da      	lsrle	r2, r3
 80082ce:	2300      	movs	r3, #0
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	7ff00000 	.word	0x7ff00000

080082dc <__b2d>:
 80082dc:	6902      	ldr	r2, [r0, #16]
 80082de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e0:	f100 0614 	add.w	r6, r0, #20
 80082e4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80082e8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80082ec:	4f1e      	ldr	r7, [pc, #120]	@ (8008368 <__b2d+0x8c>)
 80082ee:	4620      	mov	r0, r4
 80082f0:	f7ff fd5a 	bl	8007da8 <__hi0bits>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f1c0 0020 	rsb	r0, r0, #32
 80082fa:	2b0a      	cmp	r3, #10
 80082fc:	f1a2 0504 	sub.w	r5, r2, #4
 8008300:	6008      	str	r0, [r1, #0]
 8008302:	dc12      	bgt.n	800832a <__b2d+0x4e>
 8008304:	42ae      	cmp	r6, r5
 8008306:	bf2c      	ite	cs
 8008308:	2200      	movcs	r2, #0
 800830a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800830e:	f1c3 0c0b 	rsb	ip, r3, #11
 8008312:	3315      	adds	r3, #21
 8008314:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008318:	fa04 f303 	lsl.w	r3, r4, r3
 800831c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008320:	ea4e 0107 	orr.w	r1, lr, r7
 8008324:	431a      	orrs	r2, r3
 8008326:	4610      	mov	r0, r2
 8008328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832a:	42ae      	cmp	r6, r5
 800832c:	bf36      	itet	cc
 800832e:	f1a2 0508 	subcc.w	r5, r2, #8
 8008332:	2200      	movcs	r2, #0
 8008334:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008338:	3b0b      	subs	r3, #11
 800833a:	d012      	beq.n	8008362 <__b2d+0x86>
 800833c:	f1c3 0720 	rsb	r7, r3, #32
 8008340:	fa22 f107 	lsr.w	r1, r2, r7
 8008344:	409c      	lsls	r4, r3
 8008346:	430c      	orrs	r4, r1
 8008348:	42b5      	cmp	r5, r6
 800834a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800834e:	bf94      	ite	ls
 8008350:	2400      	movls	r4, #0
 8008352:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008356:	409a      	lsls	r2, r3
 8008358:	40fc      	lsrs	r4, r7
 800835a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800835e:	4322      	orrs	r2, r4
 8008360:	e7e1      	b.n	8008326 <__b2d+0x4a>
 8008362:	ea44 0107 	orr.w	r1, r4, r7
 8008366:	e7de      	b.n	8008326 <__b2d+0x4a>
 8008368:	3ff00000 	.word	0x3ff00000

0800836c <__d2b>:
 800836c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008370:	2101      	movs	r1, #1
 8008372:	4690      	mov	r8, r2
 8008374:	4699      	mov	r9, r3
 8008376:	9e08      	ldr	r6, [sp, #32]
 8008378:	f7ff fc24 	bl	8007bc4 <_Balloc>
 800837c:	4604      	mov	r4, r0
 800837e:	b930      	cbnz	r0, 800838e <__d2b+0x22>
 8008380:	4602      	mov	r2, r0
 8008382:	f240 310f 	movw	r1, #783	@ 0x30f
 8008386:	4b23      	ldr	r3, [pc, #140]	@ (8008414 <__d2b+0xa8>)
 8008388:	4823      	ldr	r0, [pc, #140]	@ (8008418 <__d2b+0xac>)
 800838a:	f001 f979 	bl	8009680 <__assert_func>
 800838e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008396:	b10d      	cbz	r5, 800839c <__d2b+0x30>
 8008398:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	f1b8 0300 	subs.w	r3, r8, #0
 80083a2:	d024      	beq.n	80083ee <__d2b+0x82>
 80083a4:	4668      	mov	r0, sp
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	f7ff fd1d 	bl	8007de6 <__lo0bits>
 80083ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083b0:	b1d8      	cbz	r0, 80083ea <__d2b+0x7e>
 80083b2:	f1c0 0320 	rsb	r3, r0, #32
 80083b6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ba:	430b      	orrs	r3, r1
 80083bc:	40c2      	lsrs	r2, r0
 80083be:	6163      	str	r3, [r4, #20]
 80083c0:	9201      	str	r2, [sp, #4]
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bf0c      	ite	eq
 80083c8:	2201      	moveq	r2, #1
 80083ca:	2202      	movne	r2, #2
 80083cc:	61a3      	str	r3, [r4, #24]
 80083ce:	6122      	str	r2, [r4, #16]
 80083d0:	b1ad      	cbz	r5, 80083fe <__d2b+0x92>
 80083d2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083d6:	4405      	add	r5, r0
 80083d8:	6035      	str	r5, [r6, #0]
 80083da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e0:	6018      	str	r0, [r3, #0]
 80083e2:	4620      	mov	r0, r4
 80083e4:	b002      	add	sp, #8
 80083e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80083ea:	6161      	str	r1, [r4, #20]
 80083ec:	e7e9      	b.n	80083c2 <__d2b+0x56>
 80083ee:	a801      	add	r0, sp, #4
 80083f0:	f7ff fcf9 	bl	8007de6 <__lo0bits>
 80083f4:	9b01      	ldr	r3, [sp, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	6163      	str	r3, [r4, #20]
 80083fa:	3020      	adds	r0, #32
 80083fc:	e7e7      	b.n	80083ce <__d2b+0x62>
 80083fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008402:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008406:	6030      	str	r0, [r6, #0]
 8008408:	6918      	ldr	r0, [r3, #16]
 800840a:	f7ff fccd 	bl	8007da8 <__hi0bits>
 800840e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008412:	e7e4      	b.n	80083de <__d2b+0x72>
 8008414:	0800aa6b 	.word	0x0800aa6b
 8008418:	0800aa7c 	.word	0x0800aa7c

0800841c <__ratio>:
 800841c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008420:	b085      	sub	sp, #20
 8008422:	e9cd 1000 	strd	r1, r0, [sp]
 8008426:	a902      	add	r1, sp, #8
 8008428:	f7ff ff58 	bl	80082dc <__b2d>
 800842c:	468b      	mov	fp, r1
 800842e:	4606      	mov	r6, r0
 8008430:	460f      	mov	r7, r1
 8008432:	9800      	ldr	r0, [sp, #0]
 8008434:	a903      	add	r1, sp, #12
 8008436:	f7ff ff51 	bl	80082dc <__b2d>
 800843a:	460d      	mov	r5, r1
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	4689      	mov	r9, r1
 8008440:	6919      	ldr	r1, [r3, #16]
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	4604      	mov	r4, r0
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	4630      	mov	r0, r6
 800844a:	1ac9      	subs	r1, r1, r3
 800844c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfcd      	iteet	gt
 800845a:	463a      	movgt	r2, r7
 800845c:	462a      	movle	r2, r5
 800845e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008462:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008466:	bfd8      	it	le
 8008468:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800846c:	464b      	mov	r3, r9
 800846e:	4622      	mov	r2, r4
 8008470:	4659      	mov	r1, fp
 8008472:	f7f8 f95b 	bl	800072c <__aeabi_ddiv>
 8008476:	b005      	add	sp, #20
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800847c <__copybits>:
 800847c:	3901      	subs	r1, #1
 800847e:	b570      	push	{r4, r5, r6, lr}
 8008480:	1149      	asrs	r1, r1, #5
 8008482:	6914      	ldr	r4, [r2, #16]
 8008484:	3101      	adds	r1, #1
 8008486:	f102 0314 	add.w	r3, r2, #20
 800848a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800848e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008492:	1f05      	subs	r5, r0, #4
 8008494:	42a3      	cmp	r3, r4
 8008496:	d30c      	bcc.n	80084b2 <__copybits+0x36>
 8008498:	1aa3      	subs	r3, r4, r2
 800849a:	3b11      	subs	r3, #17
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	3211      	adds	r2, #17
 80084a2:	42a2      	cmp	r2, r4
 80084a4:	bf88      	it	hi
 80084a6:	2300      	movhi	r3, #0
 80084a8:	4418      	add	r0, r3
 80084aa:	2300      	movs	r3, #0
 80084ac:	4288      	cmp	r0, r1
 80084ae:	d305      	bcc.n	80084bc <__copybits+0x40>
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80084b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80084ba:	e7eb      	b.n	8008494 <__copybits+0x18>
 80084bc:	f840 3b04 	str.w	r3, [r0], #4
 80084c0:	e7f4      	b.n	80084ac <__copybits+0x30>

080084c2 <__any_on>:
 80084c2:	f100 0214 	add.w	r2, r0, #20
 80084c6:	6900      	ldr	r0, [r0, #16]
 80084c8:	114b      	asrs	r3, r1, #5
 80084ca:	4298      	cmp	r0, r3
 80084cc:	b510      	push	{r4, lr}
 80084ce:	db11      	blt.n	80084f4 <__any_on+0x32>
 80084d0:	dd0a      	ble.n	80084e8 <__any_on+0x26>
 80084d2:	f011 011f 	ands.w	r1, r1, #31
 80084d6:	d007      	beq.n	80084e8 <__any_on+0x26>
 80084d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80084dc:	fa24 f001 	lsr.w	r0, r4, r1
 80084e0:	fa00 f101 	lsl.w	r1, r0, r1
 80084e4:	428c      	cmp	r4, r1
 80084e6:	d10b      	bne.n	8008500 <__any_on+0x3e>
 80084e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d803      	bhi.n	80084f8 <__any_on+0x36>
 80084f0:	2000      	movs	r0, #0
 80084f2:	bd10      	pop	{r4, pc}
 80084f4:	4603      	mov	r3, r0
 80084f6:	e7f7      	b.n	80084e8 <__any_on+0x26>
 80084f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084fc:	2900      	cmp	r1, #0
 80084fe:	d0f5      	beq.n	80084ec <__any_on+0x2a>
 8008500:	2001      	movs	r0, #1
 8008502:	e7f6      	b.n	80084f2 <__any_on+0x30>

08008504 <sulp>:
 8008504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008508:	460f      	mov	r7, r1
 800850a:	4690      	mov	r8, r2
 800850c:	f7ff fec6 	bl	800829c <__ulp>
 8008510:	4604      	mov	r4, r0
 8008512:	460d      	mov	r5, r1
 8008514:	f1b8 0f00 	cmp.w	r8, #0
 8008518:	d011      	beq.n	800853e <sulp+0x3a>
 800851a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800851e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008522:	2b00      	cmp	r3, #0
 8008524:	dd0b      	ble.n	800853e <sulp+0x3a>
 8008526:	2400      	movs	r4, #0
 8008528:	051b      	lsls	r3, r3, #20
 800852a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800852e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008532:	4622      	mov	r2, r4
 8008534:	462b      	mov	r3, r5
 8008536:	f7f7 ffcf 	bl	80004d8 <__aeabi_dmul>
 800853a:	4604      	mov	r4, r0
 800853c:	460d      	mov	r5, r1
 800853e:	4620      	mov	r0, r4
 8008540:	4629      	mov	r1, r5
 8008542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008548 <_strtod_l>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b09f      	sub	sp, #124	@ 0x7c
 800854e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008550:	2200      	movs	r2, #0
 8008552:	460c      	mov	r4, r1
 8008554:	921a      	str	r2, [sp, #104]	@ 0x68
 8008556:	f04f 0a00 	mov.w	sl, #0
 800855a:	f04f 0b00 	mov.w	fp, #0
 800855e:	460a      	mov	r2, r1
 8008560:	9005      	str	r0, [sp, #20]
 8008562:	9219      	str	r2, [sp, #100]	@ 0x64
 8008564:	7811      	ldrb	r1, [r2, #0]
 8008566:	292b      	cmp	r1, #43	@ 0x2b
 8008568:	d048      	beq.n	80085fc <_strtod_l+0xb4>
 800856a:	d836      	bhi.n	80085da <_strtod_l+0x92>
 800856c:	290d      	cmp	r1, #13
 800856e:	d830      	bhi.n	80085d2 <_strtod_l+0x8a>
 8008570:	2908      	cmp	r1, #8
 8008572:	d830      	bhi.n	80085d6 <_strtod_l+0x8e>
 8008574:	2900      	cmp	r1, #0
 8008576:	d039      	beq.n	80085ec <_strtod_l+0xa4>
 8008578:	2200      	movs	r2, #0
 800857a:	920e      	str	r2, [sp, #56]	@ 0x38
 800857c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800857e:	782a      	ldrb	r2, [r5, #0]
 8008580:	2a30      	cmp	r2, #48	@ 0x30
 8008582:	f040 80b0 	bne.w	80086e6 <_strtod_l+0x19e>
 8008586:	786a      	ldrb	r2, [r5, #1]
 8008588:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800858c:	2a58      	cmp	r2, #88	@ 0x58
 800858e:	d16c      	bne.n	800866a <_strtod_l+0x122>
 8008590:	9302      	str	r3, [sp, #8]
 8008592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008594:	4a8f      	ldr	r2, [pc, #572]	@ (80087d4 <_strtod_l+0x28c>)
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	ab1a      	add	r3, sp, #104	@ 0x68
 800859a:	9300      	str	r3, [sp, #0]
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80085a0:	a919      	add	r1, sp, #100	@ 0x64
 80085a2:	f001 f907 	bl	80097b4 <__gethex>
 80085a6:	f010 060f 	ands.w	r6, r0, #15
 80085aa:	4604      	mov	r4, r0
 80085ac:	d005      	beq.n	80085ba <_strtod_l+0x72>
 80085ae:	2e06      	cmp	r6, #6
 80085b0:	d126      	bne.n	8008600 <_strtod_l+0xb8>
 80085b2:	2300      	movs	r3, #0
 80085b4:	3501      	adds	r5, #1
 80085b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80085b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80085ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8582 	bne.w	80090c6 <_strtod_l+0xb7e>
 80085c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c4:	b1bb      	cbz	r3, 80085f6 <_strtod_l+0xae>
 80085c6:	4650      	mov	r0, sl
 80085c8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80085cc:	b01f      	add	sp, #124	@ 0x7c
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d2:	2920      	cmp	r1, #32
 80085d4:	d1d0      	bne.n	8008578 <_strtod_l+0x30>
 80085d6:	3201      	adds	r2, #1
 80085d8:	e7c3      	b.n	8008562 <_strtod_l+0x1a>
 80085da:	292d      	cmp	r1, #45	@ 0x2d
 80085dc:	d1cc      	bne.n	8008578 <_strtod_l+0x30>
 80085de:	2101      	movs	r1, #1
 80085e0:	910e      	str	r1, [sp, #56]	@ 0x38
 80085e2:	1c51      	adds	r1, r2, #1
 80085e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80085e6:	7852      	ldrb	r2, [r2, #1]
 80085e8:	2a00      	cmp	r2, #0
 80085ea:	d1c7      	bne.n	800857c <_strtod_l+0x34>
 80085ec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085ee:	9419      	str	r4, [sp, #100]	@ 0x64
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 8566 	bne.w	80090c2 <_strtod_l+0xb7a>
 80085f6:	4650      	mov	r0, sl
 80085f8:	4659      	mov	r1, fp
 80085fa:	e7e7      	b.n	80085cc <_strtod_l+0x84>
 80085fc:	2100      	movs	r1, #0
 80085fe:	e7ef      	b.n	80085e0 <_strtod_l+0x98>
 8008600:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008602:	b13a      	cbz	r2, 8008614 <_strtod_l+0xcc>
 8008604:	2135      	movs	r1, #53	@ 0x35
 8008606:	a81c      	add	r0, sp, #112	@ 0x70
 8008608:	f7ff ff38 	bl	800847c <__copybits>
 800860c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800860e:	9805      	ldr	r0, [sp, #20]
 8008610:	f7ff fb18 	bl	8007c44 <_Bfree>
 8008614:	3e01      	subs	r6, #1
 8008616:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008618:	2e04      	cmp	r6, #4
 800861a:	d806      	bhi.n	800862a <_strtod_l+0xe2>
 800861c:	e8df f006 	tbb	[pc, r6]
 8008620:	201d0314 	.word	0x201d0314
 8008624:	14          	.byte	0x14
 8008625:	00          	.byte	0x00
 8008626:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800862a:	05e1      	lsls	r1, r4, #23
 800862c:	bf48      	it	mi
 800862e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008632:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008636:	0d1b      	lsrs	r3, r3, #20
 8008638:	051b      	lsls	r3, r3, #20
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1bd      	bne.n	80085ba <_strtod_l+0x72>
 800863e:	f7fe fb17 	bl	8006c70 <__errno>
 8008642:	2322      	movs	r3, #34	@ 0x22
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	e7b8      	b.n	80085ba <_strtod_l+0x72>
 8008648:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800864c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008650:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008654:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008658:	e7e7      	b.n	800862a <_strtod_l+0xe2>
 800865a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80087d8 <_strtod_l+0x290>
 800865e:	e7e4      	b.n	800862a <_strtod_l+0xe2>
 8008660:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008664:	f04f 3aff 	mov.w	sl, #4294967295
 8008668:	e7df      	b.n	800862a <_strtod_l+0xe2>
 800866a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	2b30      	cmp	r3, #48	@ 0x30
 8008674:	d0f9      	beq.n	800866a <_strtod_l+0x122>
 8008676:	2b00      	cmp	r3, #0
 8008678:	d09f      	beq.n	80085ba <_strtod_l+0x72>
 800867a:	2301      	movs	r3, #1
 800867c:	2700      	movs	r7, #0
 800867e:	220a      	movs	r2, #10
 8008680:	46b9      	mov	r9, r7
 8008682:	9308      	str	r3, [sp, #32]
 8008684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008686:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008688:	930c      	str	r3, [sp, #48]	@ 0x30
 800868a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800868c:	7805      	ldrb	r5, [r0, #0]
 800868e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008692:	b2d9      	uxtb	r1, r3
 8008694:	2909      	cmp	r1, #9
 8008696:	d928      	bls.n	80086ea <_strtod_l+0x1a2>
 8008698:	2201      	movs	r2, #1
 800869a:	4950      	ldr	r1, [pc, #320]	@ (80087dc <_strtod_l+0x294>)
 800869c:	f000 ffc8 	bl	8009630 <strncmp>
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d032      	beq.n	800870a <_strtod_l+0x1c2>
 80086a4:	2000      	movs	r0, #0
 80086a6:	462a      	mov	r2, r5
 80086a8:	4603      	mov	r3, r0
 80086aa:	464d      	mov	r5, r9
 80086ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80086ae:	2a65      	cmp	r2, #101	@ 0x65
 80086b0:	d001      	beq.n	80086b6 <_strtod_l+0x16e>
 80086b2:	2a45      	cmp	r2, #69	@ 0x45
 80086b4:	d114      	bne.n	80086e0 <_strtod_l+0x198>
 80086b6:	b91d      	cbnz	r5, 80086c0 <_strtod_l+0x178>
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	4302      	orrs	r2, r0
 80086bc:	d096      	beq.n	80085ec <_strtod_l+0xa4>
 80086be:	2500      	movs	r5, #0
 80086c0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80086c2:	1c62      	adds	r2, r4, #1
 80086c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80086c6:	7862      	ldrb	r2, [r4, #1]
 80086c8:	2a2b      	cmp	r2, #43	@ 0x2b
 80086ca:	d07a      	beq.n	80087c2 <_strtod_l+0x27a>
 80086cc:	2a2d      	cmp	r2, #45	@ 0x2d
 80086ce:	d07e      	beq.n	80087ce <_strtod_l+0x286>
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80086d8:	2909      	cmp	r1, #9
 80086da:	f240 8085 	bls.w	80087e8 <_strtod_l+0x2a0>
 80086de:	9419      	str	r4, [sp, #100]	@ 0x64
 80086e0:	f04f 0800 	mov.w	r8, #0
 80086e4:	e0a5      	b.n	8008832 <_strtod_l+0x2ea>
 80086e6:	2300      	movs	r3, #0
 80086e8:	e7c8      	b.n	800867c <_strtod_l+0x134>
 80086ea:	f1b9 0f08 	cmp.w	r9, #8
 80086ee:	bfd8      	it	le
 80086f0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80086f2:	f100 0001 	add.w	r0, r0, #1
 80086f6:	bfd6      	itet	le
 80086f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80086fc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008700:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008702:	f109 0901 	add.w	r9, r9, #1
 8008706:	9019      	str	r0, [sp, #100]	@ 0x64
 8008708:	e7bf      	b.n	800868a <_strtod_l+0x142>
 800870a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008710:	785a      	ldrb	r2, [r3, #1]
 8008712:	f1b9 0f00 	cmp.w	r9, #0
 8008716:	d03b      	beq.n	8008790 <_strtod_l+0x248>
 8008718:	464d      	mov	r5, r9
 800871a:	900a      	str	r0, [sp, #40]	@ 0x28
 800871c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008720:	2b09      	cmp	r3, #9
 8008722:	d912      	bls.n	800874a <_strtod_l+0x202>
 8008724:	2301      	movs	r3, #1
 8008726:	e7c2      	b.n	80086ae <_strtod_l+0x166>
 8008728:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800872a:	3001      	adds	r0, #1
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008730:	785a      	ldrb	r2, [r3, #1]
 8008732:	2a30      	cmp	r2, #48	@ 0x30
 8008734:	d0f8      	beq.n	8008728 <_strtod_l+0x1e0>
 8008736:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800873a:	2b08      	cmp	r3, #8
 800873c:	f200 84c8 	bhi.w	80090d0 <_strtod_l+0xb88>
 8008740:	900a      	str	r0, [sp, #40]	@ 0x28
 8008742:	2000      	movs	r0, #0
 8008744:	4605      	mov	r5, r0
 8008746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008748:	930c      	str	r3, [sp, #48]	@ 0x30
 800874a:	3a30      	subs	r2, #48	@ 0x30
 800874c:	f100 0301 	add.w	r3, r0, #1
 8008750:	d018      	beq.n	8008784 <_strtod_l+0x23c>
 8008752:	462e      	mov	r6, r5
 8008754:	f04f 0e0a 	mov.w	lr, #10
 8008758:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800875a:	4419      	add	r1, r3
 800875c:	910a      	str	r1, [sp, #40]	@ 0x28
 800875e:	1c71      	adds	r1, r6, #1
 8008760:	eba1 0c05 	sub.w	ip, r1, r5
 8008764:	4563      	cmp	r3, ip
 8008766:	dc15      	bgt.n	8008794 <_strtod_l+0x24c>
 8008768:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800876c:	182b      	adds	r3, r5, r0
 800876e:	2b08      	cmp	r3, #8
 8008770:	f105 0501 	add.w	r5, r5, #1
 8008774:	4405      	add	r5, r0
 8008776:	dc1a      	bgt.n	80087ae <_strtod_l+0x266>
 8008778:	230a      	movs	r3, #10
 800877a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800877c:	fb03 2301 	mla	r3, r3, r1, r2
 8008780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008782:	2300      	movs	r3, #0
 8008784:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008786:	4618      	mov	r0, r3
 8008788:	1c51      	adds	r1, r2, #1
 800878a:	9119      	str	r1, [sp, #100]	@ 0x64
 800878c:	7852      	ldrb	r2, [r2, #1]
 800878e:	e7c5      	b.n	800871c <_strtod_l+0x1d4>
 8008790:	4648      	mov	r0, r9
 8008792:	e7ce      	b.n	8008732 <_strtod_l+0x1ea>
 8008794:	2e08      	cmp	r6, #8
 8008796:	dc05      	bgt.n	80087a4 <_strtod_l+0x25c>
 8008798:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800879a:	fb0e f606 	mul.w	r6, lr, r6
 800879e:	960b      	str	r6, [sp, #44]	@ 0x2c
 80087a0:	460e      	mov	r6, r1
 80087a2:	e7dc      	b.n	800875e <_strtod_l+0x216>
 80087a4:	2910      	cmp	r1, #16
 80087a6:	bfd8      	it	le
 80087a8:	fb0e f707 	mulle.w	r7, lr, r7
 80087ac:	e7f8      	b.n	80087a0 <_strtod_l+0x258>
 80087ae:	2b0f      	cmp	r3, #15
 80087b0:	bfdc      	itt	le
 80087b2:	230a      	movle	r3, #10
 80087b4:	fb03 2707 	mlale	r7, r3, r7, r2
 80087b8:	e7e3      	b.n	8008782 <_strtod_l+0x23a>
 80087ba:	2300      	movs	r3, #0
 80087bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80087be:	2301      	movs	r3, #1
 80087c0:	e77a      	b.n	80086b8 <_strtod_l+0x170>
 80087c2:	f04f 0c00 	mov.w	ip, #0
 80087c6:	1ca2      	adds	r2, r4, #2
 80087c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80087ca:	78a2      	ldrb	r2, [r4, #2]
 80087cc:	e782      	b.n	80086d4 <_strtod_l+0x18c>
 80087ce:	f04f 0c01 	mov.w	ip, #1
 80087d2:	e7f8      	b.n	80087c6 <_strtod_l+0x27e>
 80087d4:	0800ac9c 	.word	0x0800ac9c
 80087d8:	7ff00000 	.word	0x7ff00000
 80087dc:	0800aad5 	.word	0x0800aad5
 80087e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80087e2:	1c51      	adds	r1, r2, #1
 80087e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80087e6:	7852      	ldrb	r2, [r2, #1]
 80087e8:	2a30      	cmp	r2, #48	@ 0x30
 80087ea:	d0f9      	beq.n	80087e0 <_strtod_l+0x298>
 80087ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80087f0:	2908      	cmp	r1, #8
 80087f2:	f63f af75 	bhi.w	80086e0 <_strtod_l+0x198>
 80087f6:	f04f 080a 	mov.w	r8, #10
 80087fa:	3a30      	subs	r2, #48	@ 0x30
 80087fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80087fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008800:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008802:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008804:	1c56      	adds	r6, r2, #1
 8008806:	9619      	str	r6, [sp, #100]	@ 0x64
 8008808:	7852      	ldrb	r2, [r2, #1]
 800880a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800880e:	f1be 0f09 	cmp.w	lr, #9
 8008812:	d939      	bls.n	8008888 <_strtod_l+0x340>
 8008814:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008816:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800881a:	1a76      	subs	r6, r6, r1
 800881c:	2e08      	cmp	r6, #8
 800881e:	dc03      	bgt.n	8008828 <_strtod_l+0x2e0>
 8008820:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008822:	4588      	cmp	r8, r1
 8008824:	bfa8      	it	ge
 8008826:	4688      	movge	r8, r1
 8008828:	f1bc 0f00 	cmp.w	ip, #0
 800882c:	d001      	beq.n	8008832 <_strtod_l+0x2ea>
 800882e:	f1c8 0800 	rsb	r8, r8, #0
 8008832:	2d00      	cmp	r5, #0
 8008834:	d14e      	bne.n	80088d4 <_strtod_l+0x38c>
 8008836:	9908      	ldr	r1, [sp, #32]
 8008838:	4308      	orrs	r0, r1
 800883a:	f47f aebe 	bne.w	80085ba <_strtod_l+0x72>
 800883e:	2b00      	cmp	r3, #0
 8008840:	f47f aed4 	bne.w	80085ec <_strtod_l+0xa4>
 8008844:	2a69      	cmp	r2, #105	@ 0x69
 8008846:	d028      	beq.n	800889a <_strtod_l+0x352>
 8008848:	dc25      	bgt.n	8008896 <_strtod_l+0x34e>
 800884a:	2a49      	cmp	r2, #73	@ 0x49
 800884c:	d025      	beq.n	800889a <_strtod_l+0x352>
 800884e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008850:	f47f aecc 	bne.w	80085ec <_strtod_l+0xa4>
 8008854:	4999      	ldr	r1, [pc, #612]	@ (8008abc <_strtod_l+0x574>)
 8008856:	a819      	add	r0, sp, #100	@ 0x64
 8008858:	f001 f9ce 	bl	8009bf8 <__match>
 800885c:	2800      	cmp	r0, #0
 800885e:	f43f aec5 	beq.w	80085ec <_strtod_l+0xa4>
 8008862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b28      	cmp	r3, #40	@ 0x28
 8008868:	d12e      	bne.n	80088c8 <_strtod_l+0x380>
 800886a:	4995      	ldr	r1, [pc, #596]	@ (8008ac0 <_strtod_l+0x578>)
 800886c:	aa1c      	add	r2, sp, #112	@ 0x70
 800886e:	a819      	add	r0, sp, #100	@ 0x64
 8008870:	f001 f9d6 	bl	8009c20 <__hexnan>
 8008874:	2805      	cmp	r0, #5
 8008876:	d127      	bne.n	80088c8 <_strtod_l+0x380>
 8008878:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800887a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800887e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008882:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008886:	e698      	b.n	80085ba <_strtod_l+0x72>
 8008888:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800888a:	fb08 2101 	mla	r1, r8, r1, r2
 800888e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008892:	9209      	str	r2, [sp, #36]	@ 0x24
 8008894:	e7b5      	b.n	8008802 <_strtod_l+0x2ba>
 8008896:	2a6e      	cmp	r2, #110	@ 0x6e
 8008898:	e7da      	b.n	8008850 <_strtod_l+0x308>
 800889a:	498a      	ldr	r1, [pc, #552]	@ (8008ac4 <_strtod_l+0x57c>)
 800889c:	a819      	add	r0, sp, #100	@ 0x64
 800889e:	f001 f9ab 	bl	8009bf8 <__match>
 80088a2:	2800      	cmp	r0, #0
 80088a4:	f43f aea2 	beq.w	80085ec <_strtod_l+0xa4>
 80088a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088aa:	4987      	ldr	r1, [pc, #540]	@ (8008ac8 <_strtod_l+0x580>)
 80088ac:	3b01      	subs	r3, #1
 80088ae:	a819      	add	r0, sp, #100	@ 0x64
 80088b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80088b2:	f001 f9a1 	bl	8009bf8 <__match>
 80088b6:	b910      	cbnz	r0, 80088be <_strtod_l+0x376>
 80088b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088ba:	3301      	adds	r3, #1
 80088bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80088be:	f04f 0a00 	mov.w	sl, #0
 80088c2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8008acc <_strtod_l+0x584>
 80088c6:	e678      	b.n	80085ba <_strtod_l+0x72>
 80088c8:	4881      	ldr	r0, [pc, #516]	@ (8008ad0 <_strtod_l+0x588>)
 80088ca:	f000 fed3 	bl	8009674 <nan>
 80088ce:	4682      	mov	sl, r0
 80088d0:	468b      	mov	fp, r1
 80088d2:	e672      	b.n	80085ba <_strtod_l+0x72>
 80088d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088d6:	f1b9 0f00 	cmp.w	r9, #0
 80088da:	bf08      	it	eq
 80088dc:	46a9      	moveq	r9, r5
 80088de:	eba8 0303 	sub.w	r3, r8, r3
 80088e2:	2d10      	cmp	r5, #16
 80088e4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80088e6:	462c      	mov	r4, r5
 80088e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088ea:	bfa8      	it	ge
 80088ec:	2410      	movge	r4, #16
 80088ee:	f7f7 fd79 	bl	80003e4 <__aeabi_ui2d>
 80088f2:	2d09      	cmp	r5, #9
 80088f4:	4682      	mov	sl, r0
 80088f6:	468b      	mov	fp, r1
 80088f8:	dc11      	bgt.n	800891e <_strtod_l+0x3d6>
 80088fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f43f ae5c 	beq.w	80085ba <_strtod_l+0x72>
 8008902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008904:	dd76      	ble.n	80089f4 <_strtod_l+0x4ac>
 8008906:	2b16      	cmp	r3, #22
 8008908:	dc5d      	bgt.n	80089c6 <_strtod_l+0x47e>
 800890a:	4972      	ldr	r1, [pc, #456]	@ (8008ad4 <_strtod_l+0x58c>)
 800890c:	4652      	mov	r2, sl
 800890e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008912:	465b      	mov	r3, fp
 8008914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008918:	f7f7 fdde 	bl	80004d8 <__aeabi_dmul>
 800891c:	e7d7      	b.n	80088ce <_strtod_l+0x386>
 800891e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ad4 <_strtod_l+0x58c>)
 8008920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008928:	f7f7 fdd6 	bl	80004d8 <__aeabi_dmul>
 800892c:	4682      	mov	sl, r0
 800892e:	4638      	mov	r0, r7
 8008930:	468b      	mov	fp, r1
 8008932:	f7f7 fd57 	bl	80003e4 <__aeabi_ui2d>
 8008936:	4602      	mov	r2, r0
 8008938:	460b      	mov	r3, r1
 800893a:	4650      	mov	r0, sl
 800893c:	4659      	mov	r1, fp
 800893e:	f7f7 fc15 	bl	800016c <__adddf3>
 8008942:	2d0f      	cmp	r5, #15
 8008944:	4682      	mov	sl, r0
 8008946:	468b      	mov	fp, r1
 8008948:	ddd7      	ble.n	80088fa <_strtod_l+0x3b2>
 800894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800894c:	1b2c      	subs	r4, r5, r4
 800894e:	441c      	add	r4, r3
 8008950:	2c00      	cmp	r4, #0
 8008952:	f340 8093 	ble.w	8008a7c <_strtod_l+0x534>
 8008956:	f014 030f 	ands.w	r3, r4, #15
 800895a:	d00a      	beq.n	8008972 <_strtod_l+0x42a>
 800895c:	495d      	ldr	r1, [pc, #372]	@ (8008ad4 <_strtod_l+0x58c>)
 800895e:	4652      	mov	r2, sl
 8008960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008968:	465b      	mov	r3, fp
 800896a:	f7f7 fdb5 	bl	80004d8 <__aeabi_dmul>
 800896e:	4682      	mov	sl, r0
 8008970:	468b      	mov	fp, r1
 8008972:	f034 040f 	bics.w	r4, r4, #15
 8008976:	d073      	beq.n	8008a60 <_strtod_l+0x518>
 8008978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800897c:	dd49      	ble.n	8008a12 <_strtod_l+0x4ca>
 800897e:	2400      	movs	r4, #0
 8008980:	46a0      	mov	r8, r4
 8008982:	46a1      	mov	r9, r4
 8008984:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008986:	2322      	movs	r3, #34	@ 0x22
 8008988:	f04f 0a00 	mov.w	sl, #0
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8008acc <_strtod_l+0x584>
 8008992:	6013      	str	r3, [r2, #0]
 8008994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008996:	2b00      	cmp	r3, #0
 8008998:	f43f ae0f 	beq.w	80085ba <_strtod_l+0x72>
 800899c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800899e:	9805      	ldr	r0, [sp, #20]
 80089a0:	f7ff f950 	bl	8007c44 <_Bfree>
 80089a4:	4649      	mov	r1, r9
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	f7ff f94c 	bl	8007c44 <_Bfree>
 80089ac:	4641      	mov	r1, r8
 80089ae:	9805      	ldr	r0, [sp, #20]
 80089b0:	f7ff f948 	bl	8007c44 <_Bfree>
 80089b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089b6:	9805      	ldr	r0, [sp, #20]
 80089b8:	f7ff f944 	bl	8007c44 <_Bfree>
 80089bc:	4621      	mov	r1, r4
 80089be:	9805      	ldr	r0, [sp, #20]
 80089c0:	f7ff f940 	bl	8007c44 <_Bfree>
 80089c4:	e5f9      	b.n	80085ba <_strtod_l+0x72>
 80089c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80089cc:	4293      	cmp	r3, r2
 80089ce:	dbbc      	blt.n	800894a <_strtod_l+0x402>
 80089d0:	4c40      	ldr	r4, [pc, #256]	@ (8008ad4 <_strtod_l+0x58c>)
 80089d2:	f1c5 050f 	rsb	r5, r5, #15
 80089d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80089da:	4652      	mov	r2, sl
 80089dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e0:	465b      	mov	r3, fp
 80089e2:	f7f7 fd79 	bl	80004d8 <__aeabi_dmul>
 80089e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e8:	1b5d      	subs	r5, r3, r5
 80089ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80089ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80089f2:	e791      	b.n	8008918 <_strtod_l+0x3d0>
 80089f4:	3316      	adds	r3, #22
 80089f6:	dba8      	blt.n	800894a <_strtod_l+0x402>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089fa:	4650      	mov	r0, sl
 80089fc:	eba3 0808 	sub.w	r8, r3, r8
 8008a00:	4b34      	ldr	r3, [pc, #208]	@ (8008ad4 <_strtod_l+0x58c>)
 8008a02:	4659      	mov	r1, fp
 8008a04:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008a08:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008a0c:	f7f7 fe8e 	bl	800072c <__aeabi_ddiv>
 8008a10:	e75d      	b.n	80088ce <_strtod_l+0x386>
 8008a12:	2300      	movs	r3, #0
 8008a14:	4650      	mov	r0, sl
 8008a16:	4659      	mov	r1, fp
 8008a18:	461e      	mov	r6, r3
 8008a1a:	4f2f      	ldr	r7, [pc, #188]	@ (8008ad8 <_strtod_l+0x590>)
 8008a1c:	1124      	asrs	r4, r4, #4
 8008a1e:	2c01      	cmp	r4, #1
 8008a20:	dc21      	bgt.n	8008a66 <_strtod_l+0x51e>
 8008a22:	b10b      	cbz	r3, 8008a28 <_strtod_l+0x4e0>
 8008a24:	4682      	mov	sl, r0
 8008a26:	468b      	mov	fp, r1
 8008a28:	492b      	ldr	r1, [pc, #172]	@ (8008ad8 <_strtod_l+0x590>)
 8008a2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008a2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008a32:	4652      	mov	r2, sl
 8008a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a38:	465b      	mov	r3, fp
 8008a3a:	f7f7 fd4d 	bl	80004d8 <__aeabi_dmul>
 8008a3e:	4b23      	ldr	r3, [pc, #140]	@ (8008acc <_strtod_l+0x584>)
 8008a40:	460a      	mov	r2, r1
 8008a42:	400b      	ands	r3, r1
 8008a44:	4925      	ldr	r1, [pc, #148]	@ (8008adc <_strtod_l+0x594>)
 8008a46:	4682      	mov	sl, r0
 8008a48:	428b      	cmp	r3, r1
 8008a4a:	d898      	bhi.n	800897e <_strtod_l+0x436>
 8008a4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008a50:	428b      	cmp	r3, r1
 8008a52:	bf86      	itte	hi
 8008a54:	f04f 3aff 	movhi.w	sl, #4294967295
 8008a58:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8008ae0 <_strtod_l+0x598>
 8008a5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008a60:	2300      	movs	r3, #0
 8008a62:	9308      	str	r3, [sp, #32]
 8008a64:	e076      	b.n	8008b54 <_strtod_l+0x60c>
 8008a66:	07e2      	lsls	r2, r4, #31
 8008a68:	d504      	bpl.n	8008a74 <_strtod_l+0x52c>
 8008a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a6e:	f7f7 fd33 	bl	80004d8 <__aeabi_dmul>
 8008a72:	2301      	movs	r3, #1
 8008a74:	3601      	adds	r6, #1
 8008a76:	1064      	asrs	r4, r4, #1
 8008a78:	3708      	adds	r7, #8
 8008a7a:	e7d0      	b.n	8008a1e <_strtod_l+0x4d6>
 8008a7c:	d0f0      	beq.n	8008a60 <_strtod_l+0x518>
 8008a7e:	4264      	negs	r4, r4
 8008a80:	f014 020f 	ands.w	r2, r4, #15
 8008a84:	d00a      	beq.n	8008a9c <_strtod_l+0x554>
 8008a86:	4b13      	ldr	r3, [pc, #76]	@ (8008ad4 <_strtod_l+0x58c>)
 8008a88:	4650      	mov	r0, sl
 8008a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a8e:	4659      	mov	r1, fp
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f7 fe4a 	bl	800072c <__aeabi_ddiv>
 8008a98:	4682      	mov	sl, r0
 8008a9a:	468b      	mov	fp, r1
 8008a9c:	1124      	asrs	r4, r4, #4
 8008a9e:	d0df      	beq.n	8008a60 <_strtod_l+0x518>
 8008aa0:	2c1f      	cmp	r4, #31
 8008aa2:	dd1f      	ble.n	8008ae4 <_strtod_l+0x59c>
 8008aa4:	2400      	movs	r4, #0
 8008aa6:	46a0      	mov	r8, r4
 8008aa8:	46a1      	mov	r9, r4
 8008aaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008aac:	2322      	movs	r3, #34	@ 0x22
 8008aae:	9a05      	ldr	r2, [sp, #20]
 8008ab0:	f04f 0a00 	mov.w	sl, #0
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e76b      	b.n	8008994 <_strtod_l+0x44c>
 8008abc:	0800a9c3 	.word	0x0800a9c3
 8008ac0:	0800ac88 	.word	0x0800ac88
 8008ac4:	0800a9bb 	.word	0x0800a9bb
 8008ac8:	0800a9f2 	.word	0x0800a9f2
 8008acc:	7ff00000 	.word	0x7ff00000
 8008ad0:	0800ab2b 	.word	0x0800ab2b
 8008ad4:	0800abc0 	.word	0x0800abc0
 8008ad8:	0800ab98 	.word	0x0800ab98
 8008adc:	7ca00000 	.word	0x7ca00000
 8008ae0:	7fefffff 	.word	0x7fefffff
 8008ae4:	f014 0310 	ands.w	r3, r4, #16
 8008ae8:	bf18      	it	ne
 8008aea:	236a      	movne	r3, #106	@ 0x6a
 8008aec:	4650      	mov	r0, sl
 8008aee:	9308      	str	r3, [sp, #32]
 8008af0:	4659      	mov	r1, fp
 8008af2:	2300      	movs	r3, #0
 8008af4:	4e77      	ldr	r6, [pc, #476]	@ (8008cd4 <_strtod_l+0x78c>)
 8008af6:	07e7      	lsls	r7, r4, #31
 8008af8:	d504      	bpl.n	8008b04 <_strtod_l+0x5bc>
 8008afa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008afe:	f7f7 fceb 	bl	80004d8 <__aeabi_dmul>
 8008b02:	2301      	movs	r3, #1
 8008b04:	1064      	asrs	r4, r4, #1
 8008b06:	f106 0608 	add.w	r6, r6, #8
 8008b0a:	d1f4      	bne.n	8008af6 <_strtod_l+0x5ae>
 8008b0c:	b10b      	cbz	r3, 8008b12 <_strtod_l+0x5ca>
 8008b0e:	4682      	mov	sl, r0
 8008b10:	468b      	mov	fp, r1
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	b1b3      	cbz	r3, 8008b44 <_strtod_l+0x5fc>
 8008b16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008b1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	4659      	mov	r1, fp
 8008b22:	dd0f      	ble.n	8008b44 <_strtod_l+0x5fc>
 8008b24:	2b1f      	cmp	r3, #31
 8008b26:	dd58      	ble.n	8008bda <_strtod_l+0x692>
 8008b28:	2b34      	cmp	r3, #52	@ 0x34
 8008b2a:	bfd8      	it	le
 8008b2c:	f04f 33ff 	movle.w	r3, #4294967295
 8008b30:	f04f 0a00 	mov.w	sl, #0
 8008b34:	bfcf      	iteee	gt
 8008b36:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008b3a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008b3e:	4093      	lslle	r3, r2
 8008b40:	ea03 0b01 	andle.w	fp, r3, r1
 8008b44:	2200      	movs	r2, #0
 8008b46:	2300      	movs	r3, #0
 8008b48:	4650      	mov	r0, sl
 8008b4a:	4659      	mov	r1, fp
 8008b4c:	f7f7 ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d1a7      	bne.n	8008aa4 <_strtod_l+0x55c>
 8008b54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b56:	464a      	mov	r2, r9
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008b5c:	462b      	mov	r3, r5
 8008b5e:	9805      	ldr	r0, [sp, #20]
 8008b60:	f7ff f8d8 	bl	8007d14 <__s2b>
 8008b64:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008b66:	2800      	cmp	r0, #0
 8008b68:	f43f af09 	beq.w	800897e <_strtod_l+0x436>
 8008b6c:	2400      	movs	r4, #0
 8008b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b72:	2a00      	cmp	r2, #0
 8008b74:	eba3 0308 	sub.w	r3, r3, r8
 8008b78:	bfa8      	it	ge
 8008b7a:	2300      	movge	r3, #0
 8008b7c:	46a0      	mov	r8, r4
 8008b7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b80:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008b84:	9316      	str	r3, [sp, #88]	@ 0x58
 8008b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b88:	9805      	ldr	r0, [sp, #20]
 8008b8a:	6859      	ldr	r1, [r3, #4]
 8008b8c:	f7ff f81a 	bl	8007bc4 <_Balloc>
 8008b90:	4681      	mov	r9, r0
 8008b92:	2800      	cmp	r0, #0
 8008b94:	f43f aef7 	beq.w	8008986 <_strtod_l+0x43e>
 8008b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b9a:	300c      	adds	r0, #12
 8008b9c:	691a      	ldr	r2, [r3, #16]
 8008b9e:	f103 010c 	add.w	r1, r3, #12
 8008ba2:	3202      	adds	r2, #2
 8008ba4:	0092      	lsls	r2, r2, #2
 8008ba6:	f7fe f89e 	bl	8006ce6 <memcpy>
 8008baa:	ab1c      	add	r3, sp, #112	@ 0x70
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008bb0:	9300      	str	r3, [sp, #0]
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	9805      	ldr	r0, [sp, #20]
 8008bb8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008bbc:	f7ff fbd6 	bl	800836c <__d2b>
 8008bc0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f43f aedf 	beq.w	8008986 <_strtod_l+0x43e>
 8008bc8:	2101      	movs	r1, #1
 8008bca:	9805      	ldr	r0, [sp, #20]
 8008bcc:	f7ff f938 	bl	8007e40 <__i2b>
 8008bd0:	4680      	mov	r8, r0
 8008bd2:	b948      	cbnz	r0, 8008be8 <_strtod_l+0x6a0>
 8008bd4:	f04f 0800 	mov.w	r8, #0
 8008bd8:	e6d5      	b.n	8008986 <_strtod_l+0x43e>
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	ea03 0a0a 	and.w	sl, r3, sl
 8008be6:	e7ad      	b.n	8008b44 <_strtod_l+0x5fc>
 8008be8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008bea:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008bec:	2d00      	cmp	r5, #0
 8008bee:	bfab      	itete	ge
 8008bf0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008bf2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008bf4:	18ef      	addge	r7, r5, r3
 8008bf6:	1b5e      	sublt	r6, r3, r5
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	bfa8      	it	ge
 8008bfc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008bfe:	eba5 0503 	sub.w	r5, r5, r3
 8008c02:	4415      	add	r5, r2
 8008c04:	4b34      	ldr	r3, [pc, #208]	@ (8008cd8 <_strtod_l+0x790>)
 8008c06:	f105 35ff 	add.w	r5, r5, #4294967295
 8008c0a:	bfb8      	it	lt
 8008c0c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008c0e:	429d      	cmp	r5, r3
 8008c10:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008c14:	da50      	bge.n	8008cb8 <_strtod_l+0x770>
 8008c16:	1b5b      	subs	r3, r3, r5
 8008c18:	2b1f      	cmp	r3, #31
 8008c1a:	f04f 0101 	mov.w	r1, #1
 8008c1e:	eba2 0203 	sub.w	r2, r2, r3
 8008c22:	dc3d      	bgt.n	8008ca0 <_strtod_l+0x758>
 8008c24:	fa01 f303 	lsl.w	r3, r1, r3
 8008c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008c2e:	18bd      	adds	r5, r7, r2
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	42af      	cmp	r7, r5
 8008c34:	4416      	add	r6, r2
 8008c36:	441e      	add	r6, r3
 8008c38:	463b      	mov	r3, r7
 8008c3a:	bfa8      	it	ge
 8008c3c:	462b      	movge	r3, r5
 8008c3e:	42b3      	cmp	r3, r6
 8008c40:	bfa8      	it	ge
 8008c42:	4633      	movge	r3, r6
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bfc2      	ittt	gt
 8008c48:	1aed      	subgt	r5, r5, r3
 8008c4a:	1af6      	subgt	r6, r6, r3
 8008c4c:	1aff      	subgt	r7, r7, r3
 8008c4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dd16      	ble.n	8008c82 <_strtod_l+0x73a>
 8008c54:	4641      	mov	r1, r8
 8008c56:	461a      	mov	r2, r3
 8008c58:	9805      	ldr	r0, [sp, #20]
 8008c5a:	f7ff f9a9 	bl	8007fb0 <__pow5mult>
 8008c5e:	4680      	mov	r8, r0
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0b7      	beq.n	8008bd4 <_strtod_l+0x68c>
 8008c64:	4601      	mov	r1, r0
 8008c66:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008c68:	9805      	ldr	r0, [sp, #20]
 8008c6a:	f7ff f8ff 	bl	8007e6c <__multiply>
 8008c6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f43f ae88 	beq.w	8008986 <_strtod_l+0x43e>
 8008c76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c78:	9805      	ldr	r0, [sp, #20]
 8008c7a:	f7fe ffe3 	bl	8007c44 <_Bfree>
 8008c7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c82:	2d00      	cmp	r5, #0
 8008c84:	dc1d      	bgt.n	8008cc2 <_strtod_l+0x77a>
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dd27      	ble.n	8008cdc <_strtod_l+0x794>
 8008c8c:	4649      	mov	r1, r9
 8008c8e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008c90:	9805      	ldr	r0, [sp, #20]
 8008c92:	f7ff f98d 	bl	8007fb0 <__pow5mult>
 8008c96:	4681      	mov	r9, r0
 8008c98:	bb00      	cbnz	r0, 8008cdc <_strtod_l+0x794>
 8008c9a:	f04f 0900 	mov.w	r9, #0
 8008c9e:	e672      	b.n	8008986 <_strtod_l+0x43e>
 8008ca0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ca4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008ca8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008cac:	35e2      	adds	r5, #226	@ 0xe2
 8008cae:	fa01 f305 	lsl.w	r3, r1, r5
 8008cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cb4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008cb6:	e7ba      	b.n	8008c2e <_strtod_l+0x6e6>
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9310      	str	r3, [sp, #64]	@ 0x40
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008cc0:	e7b5      	b.n	8008c2e <_strtod_l+0x6e6>
 8008cc2:	462a      	mov	r2, r5
 8008cc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cc6:	9805      	ldr	r0, [sp, #20]
 8008cc8:	f7ff f9cc 	bl	8008064 <__lshift>
 8008ccc:	901a      	str	r0, [sp, #104]	@ 0x68
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d1d9      	bne.n	8008c86 <_strtod_l+0x73e>
 8008cd2:	e658      	b.n	8008986 <_strtod_l+0x43e>
 8008cd4:	0800acb0 	.word	0x0800acb0
 8008cd8:	fffffc02 	.word	0xfffffc02
 8008cdc:	2e00      	cmp	r6, #0
 8008cde:	dd07      	ble.n	8008cf0 <_strtod_l+0x7a8>
 8008ce0:	4649      	mov	r1, r9
 8008ce2:	4632      	mov	r2, r6
 8008ce4:	9805      	ldr	r0, [sp, #20]
 8008ce6:	f7ff f9bd 	bl	8008064 <__lshift>
 8008cea:	4681      	mov	r9, r0
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d0d4      	beq.n	8008c9a <_strtod_l+0x752>
 8008cf0:	2f00      	cmp	r7, #0
 8008cf2:	dd08      	ble.n	8008d06 <_strtod_l+0x7be>
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	9805      	ldr	r0, [sp, #20]
 8008cfa:	f7ff f9b3 	bl	8008064 <__lshift>
 8008cfe:	4680      	mov	r8, r0
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f43f ae40 	beq.w	8008986 <_strtod_l+0x43e>
 8008d06:	464a      	mov	r2, r9
 8008d08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d0a:	9805      	ldr	r0, [sp, #20]
 8008d0c:	f7ff fa32 	bl	8008174 <__mdiff>
 8008d10:	4604      	mov	r4, r0
 8008d12:	2800      	cmp	r0, #0
 8008d14:	f43f ae37 	beq.w	8008986 <_strtod_l+0x43e>
 8008d18:	68c3      	ldr	r3, [r0, #12]
 8008d1a:	4641      	mov	r1, r8
 8008d1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60c3      	str	r3, [r0, #12]
 8008d22:	f7ff fa0b 	bl	800813c <__mcmp>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	da3d      	bge.n	8008da6 <_strtod_l+0x85e>
 8008d2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2c:	ea53 030a 	orrs.w	r3, r3, sl
 8008d30:	d163      	bne.n	8008dfa <_strtod_l+0x8b2>
 8008d32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d15f      	bne.n	8008dfa <_strtod_l+0x8b2>
 8008d3a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d3e:	0d1b      	lsrs	r3, r3, #20
 8008d40:	051b      	lsls	r3, r3, #20
 8008d42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d46:	d958      	bls.n	8008dfa <_strtod_l+0x8b2>
 8008d48:	6963      	ldr	r3, [r4, #20]
 8008d4a:	b913      	cbnz	r3, 8008d52 <_strtod_l+0x80a>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	dd53      	ble.n	8008dfa <_strtod_l+0x8b2>
 8008d52:	4621      	mov	r1, r4
 8008d54:	2201      	movs	r2, #1
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	f7ff f984 	bl	8008064 <__lshift>
 8008d5c:	4641      	mov	r1, r8
 8008d5e:	4604      	mov	r4, r0
 8008d60:	f7ff f9ec 	bl	800813c <__mcmp>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	dd48      	ble.n	8008dfa <_strtod_l+0x8b2>
 8008d68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008d6c:	9a08      	ldr	r2, [sp, #32]
 8008d6e:	0d1b      	lsrs	r3, r3, #20
 8008d70:	051b      	lsls	r3, r3, #20
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	d062      	beq.n	8008e3c <_strtod_l+0x8f4>
 8008d76:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008d7a:	d85f      	bhi.n	8008e3c <_strtod_l+0x8f4>
 8008d7c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008d80:	f67f ae94 	bls.w	8008aac <_strtod_l+0x564>
 8008d84:	4650      	mov	r0, sl
 8008d86:	4659      	mov	r1, fp
 8008d88:	4ba3      	ldr	r3, [pc, #652]	@ (8009018 <_strtod_l+0xad0>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f7f7 fba4 	bl	80004d8 <__aeabi_dmul>
 8008d90:	4ba2      	ldr	r3, [pc, #648]	@ (800901c <_strtod_l+0xad4>)
 8008d92:	4682      	mov	sl, r0
 8008d94:	400b      	ands	r3, r1
 8008d96:	468b      	mov	fp, r1
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f47f adff 	bne.w	800899c <_strtod_l+0x454>
 8008d9e:	2322      	movs	r3, #34	@ 0x22
 8008da0:	9a05      	ldr	r2, [sp, #20]
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e5fa      	b.n	800899c <_strtod_l+0x454>
 8008da6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008daa:	d165      	bne.n	8008e78 <_strtod_l+0x930>
 8008dac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008dae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008db2:	b35a      	cbz	r2, 8008e0c <_strtod_l+0x8c4>
 8008db4:	4a9a      	ldr	r2, [pc, #616]	@ (8009020 <_strtod_l+0xad8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d12b      	bne.n	8008e12 <_strtod_l+0x8ca>
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	4651      	mov	r1, sl
 8008dbe:	b303      	cbz	r3, 8008e02 <_strtod_l+0x8ba>
 8008dc0:	465a      	mov	r2, fp
 8008dc2:	4b96      	ldr	r3, [pc, #600]	@ (800901c <_strtod_l+0xad4>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	d81b      	bhi.n	8008e08 <_strtod_l+0x8c0>
 8008dd0:	0d1b      	lsrs	r3, r3, #20
 8008dd2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	4299      	cmp	r1, r3
 8008ddc:	d119      	bne.n	8008e12 <_strtod_l+0x8ca>
 8008dde:	4b91      	ldr	r3, [pc, #580]	@ (8009024 <_strtod_l+0xadc>)
 8008de0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d102      	bne.n	8008dec <_strtod_l+0x8a4>
 8008de6:	3101      	adds	r1, #1
 8008de8:	f43f adcd 	beq.w	8008986 <_strtod_l+0x43e>
 8008dec:	f04f 0a00 	mov.w	sl, #0
 8008df0:	4b8a      	ldr	r3, [pc, #552]	@ (800901c <_strtod_l+0xad4>)
 8008df2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008df4:	401a      	ands	r2, r3
 8008df6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1c1      	bne.n	8008d84 <_strtod_l+0x83c>
 8008e00:	e5cc      	b.n	800899c <_strtod_l+0x454>
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295
 8008e06:	e7e8      	b.n	8008dda <_strtod_l+0x892>
 8008e08:	4613      	mov	r3, r2
 8008e0a:	e7e6      	b.n	8008dda <_strtod_l+0x892>
 8008e0c:	ea53 030a 	orrs.w	r3, r3, sl
 8008e10:	d0aa      	beq.n	8008d68 <_strtod_l+0x820>
 8008e12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008e14:	b1db      	cbz	r3, 8008e4e <_strtod_l+0x906>
 8008e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e18:	4213      	tst	r3, r2
 8008e1a:	d0ee      	beq.n	8008dfa <_strtod_l+0x8b2>
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	4650      	mov	r0, sl
 8008e20:	4659      	mov	r1, fp
 8008e22:	9a08      	ldr	r2, [sp, #32]
 8008e24:	b1bb      	cbz	r3, 8008e56 <_strtod_l+0x90e>
 8008e26:	f7ff fb6d 	bl	8008504 <sulp>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e32:	f7f7 f99b 	bl	800016c <__adddf3>
 8008e36:	4682      	mov	sl, r0
 8008e38:	468b      	mov	fp, r1
 8008e3a:	e7de      	b.n	8008dfa <_strtod_l+0x8b2>
 8008e3c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008e40:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008e44:	f04f 3aff 	mov.w	sl, #4294967295
 8008e48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008e4c:	e7d5      	b.n	8008dfa <_strtod_l+0x8b2>
 8008e4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e50:	ea13 0f0a 	tst.w	r3, sl
 8008e54:	e7e1      	b.n	8008e1a <_strtod_l+0x8d2>
 8008e56:	f7ff fb55 	bl	8008504 <sulp>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e62:	f7f7 f981 	bl	8000168 <__aeabi_dsub>
 8008e66:	2200      	movs	r2, #0
 8008e68:	2300      	movs	r3, #0
 8008e6a:	4682      	mov	sl, r0
 8008e6c:	468b      	mov	fp, r1
 8008e6e:	f7f7 fd9b 	bl	80009a8 <__aeabi_dcmpeq>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d0c1      	beq.n	8008dfa <_strtod_l+0x8b2>
 8008e76:	e619      	b.n	8008aac <_strtod_l+0x564>
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f7ff face 	bl	800841c <__ratio>
 8008e80:	2200      	movs	r2, #0
 8008e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008e86:	4606      	mov	r6, r0
 8008e88:	460f      	mov	r7, r1
 8008e8a:	f7f7 fda1 	bl	80009d0 <__aeabi_dcmple>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	d06d      	beq.n	8008f6e <_strtod_l+0xa26>
 8008e92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d178      	bne.n	8008f8a <_strtod_l+0xa42>
 8008e98:	f1ba 0f00 	cmp.w	sl, #0
 8008e9c:	d156      	bne.n	8008f4c <_strtod_l+0xa04>
 8008e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d158      	bne.n	8008f5a <_strtod_l+0xa12>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4639      	mov	r1, r7
 8008eae:	4b5e      	ldr	r3, [pc, #376]	@ (8009028 <_strtod_l+0xae0>)
 8008eb0:	f7f7 fd84 	bl	80009bc <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d157      	bne.n	8008f68 <_strtod_l+0xa20>
 8008eb8:	4630      	mov	r0, r6
 8008eba:	4639      	mov	r1, r7
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800902c <_strtod_l+0xae4>)
 8008ec0:	f7f7 fb0a 	bl	80004d8 <__aeabi_dmul>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	460f      	mov	r7, r1
 8008ec8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008ecc:	9606      	str	r6, [sp, #24]
 8008ece:	9307      	str	r3, [sp, #28]
 8008ed0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ed4:	4d51      	ldr	r5, [pc, #324]	@ (800901c <_strtod_l+0xad4>)
 8008ed6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008eda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008edc:	401d      	ands	r5, r3
 8008ede:	4b54      	ldr	r3, [pc, #336]	@ (8009030 <_strtod_l+0xae8>)
 8008ee0:	429d      	cmp	r5, r3
 8008ee2:	f040 80ab 	bne.w	800903c <_strtod_l+0xaf4>
 8008ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ee8:	4650      	mov	r0, sl
 8008eea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008eee:	4659      	mov	r1, fp
 8008ef0:	f7ff f9d4 	bl	800829c <__ulp>
 8008ef4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ef8:	f7f7 faee 	bl	80004d8 <__aeabi_dmul>
 8008efc:	4652      	mov	r2, sl
 8008efe:	465b      	mov	r3, fp
 8008f00:	f7f7 f934 	bl	800016c <__adddf3>
 8008f04:	460b      	mov	r3, r1
 8008f06:	4945      	ldr	r1, [pc, #276]	@ (800901c <_strtod_l+0xad4>)
 8008f08:	4a4a      	ldr	r2, [pc, #296]	@ (8009034 <_strtod_l+0xaec>)
 8008f0a:	4019      	ands	r1, r3
 8008f0c:	4291      	cmp	r1, r2
 8008f0e:	4682      	mov	sl, r0
 8008f10:	d942      	bls.n	8008f98 <_strtod_l+0xa50>
 8008f12:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f14:	4b43      	ldr	r3, [pc, #268]	@ (8009024 <_strtod_l+0xadc>)
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d103      	bne.n	8008f22 <_strtod_l+0x9da>
 8008f1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	f43f ad32 	beq.w	8008986 <_strtod_l+0x43e>
 8008f22:	f04f 3aff 	mov.w	sl, #4294967295
 8008f26:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009024 <_strtod_l+0xadc>
 8008f2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2c:	9805      	ldr	r0, [sp, #20]
 8008f2e:	f7fe fe89 	bl	8007c44 <_Bfree>
 8008f32:	4649      	mov	r1, r9
 8008f34:	9805      	ldr	r0, [sp, #20]
 8008f36:	f7fe fe85 	bl	8007c44 <_Bfree>
 8008f3a:	4641      	mov	r1, r8
 8008f3c:	9805      	ldr	r0, [sp, #20]
 8008f3e:	f7fe fe81 	bl	8007c44 <_Bfree>
 8008f42:	4621      	mov	r1, r4
 8008f44:	9805      	ldr	r0, [sp, #20]
 8008f46:	f7fe fe7d 	bl	8007c44 <_Bfree>
 8008f4a:	e61c      	b.n	8008b86 <_strtod_l+0x63e>
 8008f4c:	f1ba 0f01 	cmp.w	sl, #1
 8008f50:	d103      	bne.n	8008f5a <_strtod_l+0xa12>
 8008f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f43f ada9 	beq.w	8008aac <_strtod_l+0x564>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4b36      	ldr	r3, [pc, #216]	@ (8009038 <_strtod_l+0xaf0>)
 8008f5e:	2600      	movs	r6, #0
 8008f60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f64:	4f30      	ldr	r7, [pc, #192]	@ (8009028 <_strtod_l+0xae0>)
 8008f66:	e7b3      	b.n	8008ed0 <_strtod_l+0x988>
 8008f68:	2600      	movs	r6, #0
 8008f6a:	4f30      	ldr	r7, [pc, #192]	@ (800902c <_strtod_l+0xae4>)
 8008f6c:	e7ac      	b.n	8008ec8 <_strtod_l+0x980>
 8008f6e:	4630      	mov	r0, r6
 8008f70:	4639      	mov	r1, r7
 8008f72:	4b2e      	ldr	r3, [pc, #184]	@ (800902c <_strtod_l+0xae4>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	f7f7 faaf 	bl	80004d8 <__aeabi_dmul>
 8008f7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0a1      	beq.n	8008ec8 <_strtod_l+0x980>
 8008f84:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008f88:	e7a2      	b.n	8008ed0 <_strtod_l+0x988>
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	4b26      	ldr	r3, [pc, #152]	@ (8009028 <_strtod_l+0xae0>)
 8008f8e:	4616      	mov	r6, r2
 8008f90:	461f      	mov	r7, r3
 8008f92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008f96:	e79b      	b.n	8008ed0 <_strtod_l+0x988>
 8008f98:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008f9c:	9b08      	ldr	r3, [sp, #32]
 8008f9e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1c1      	bne.n	8008f2a <_strtod_l+0x9e2>
 8008fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008faa:	0d1b      	lsrs	r3, r3, #20
 8008fac:	051b      	lsls	r3, r3, #20
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	d1bb      	bne.n	8008f2a <_strtod_l+0x9e2>
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	4639      	mov	r1, r7
 8008fb6:	f7f8 f835 	bl	8001024 <__aeabi_d2lz>
 8008fba:	f7f7 fa5f 	bl	800047c <__aeabi_l2d>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	4639      	mov	r1, r7
 8008fc6:	f7f7 f8cf 	bl	8000168 <__aeabi_dsub>
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4602      	mov	r2, r0
 8008fce:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008fd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008fd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd8:	ea46 060a 	orr.w	r6, r6, sl
 8008fdc:	431e      	orrs	r6, r3
 8008fde:	d06a      	beq.n	80090b6 <_strtod_l+0xb6e>
 8008fe0:	a309      	add	r3, pc, #36	@ (adr r3, 8009008 <_strtod_l+0xac0>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 fce9 	bl	80009bc <__aeabi_dcmplt>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	f47f acd6 	bne.w	800899c <_strtod_l+0x454>
 8008ff0:	a307      	add	r3, pc, #28	@ (adr r3, 8009010 <_strtod_l+0xac8>)
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ffa:	f7f7 fcfd 	bl	80009f8 <__aeabi_dcmpgt>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d093      	beq.n	8008f2a <_strtod_l+0x9e2>
 8009002:	e4cb      	b.n	800899c <_strtod_l+0x454>
 8009004:	f3af 8000 	nop.w
 8009008:	94a03595 	.word	0x94a03595
 800900c:	3fdfffff 	.word	0x3fdfffff
 8009010:	35afe535 	.word	0x35afe535
 8009014:	3fe00000 	.word	0x3fe00000
 8009018:	39500000 	.word	0x39500000
 800901c:	7ff00000 	.word	0x7ff00000
 8009020:	000fffff 	.word	0x000fffff
 8009024:	7fefffff 	.word	0x7fefffff
 8009028:	3ff00000 	.word	0x3ff00000
 800902c:	3fe00000 	.word	0x3fe00000
 8009030:	7fe00000 	.word	0x7fe00000
 8009034:	7c9fffff 	.word	0x7c9fffff
 8009038:	bff00000 	.word	0xbff00000
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	b323      	cbz	r3, 800908a <_strtod_l+0xb42>
 8009040:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009044:	d821      	bhi.n	800908a <_strtod_l+0xb42>
 8009046:	a328      	add	r3, pc, #160	@ (adr r3, 80090e8 <_strtod_l+0xba0>)
 8009048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904c:	4630      	mov	r0, r6
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fcbe 	bl	80009d0 <__aeabi_dcmple>
 8009054:	b1a0      	cbz	r0, 8009080 <_strtod_l+0xb38>
 8009056:	4639      	mov	r1, r7
 8009058:	4630      	mov	r0, r6
 800905a:	f7f7 fd15 	bl	8000a88 <__aeabi_d2uiz>
 800905e:	2801      	cmp	r0, #1
 8009060:	bf38      	it	cc
 8009062:	2001      	movcc	r0, #1
 8009064:	f7f7 f9be 	bl	80003e4 <__aeabi_ui2d>
 8009068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800906a:	4606      	mov	r6, r0
 800906c:	460f      	mov	r7, r1
 800906e:	b9fb      	cbnz	r3, 80090b0 <_strtod_l+0xb68>
 8009070:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009074:	9014      	str	r0, [sp, #80]	@ 0x50
 8009076:	9315      	str	r3, [sp, #84]	@ 0x54
 8009078:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800907c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009080:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009082:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009086:	1b5b      	subs	r3, r3, r5
 8009088:	9311      	str	r3, [sp, #68]	@ 0x44
 800908a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800908e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009092:	f7ff f903 	bl	800829c <__ulp>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4650      	mov	r0, sl
 800909c:	4659      	mov	r1, fp
 800909e:	f7f7 fa1b 	bl	80004d8 <__aeabi_dmul>
 80090a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80090a6:	f7f7 f861 	bl	800016c <__adddf3>
 80090aa:	4682      	mov	sl, r0
 80090ac:	468b      	mov	fp, r1
 80090ae:	e775      	b.n	8008f9c <_strtod_l+0xa54>
 80090b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80090b4:	e7e0      	b.n	8009078 <_strtod_l+0xb30>
 80090b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80090f0 <_strtod_l+0xba8>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 fc7e 	bl	80009bc <__aeabi_dcmplt>
 80090c0:	e79d      	b.n	8008ffe <_strtod_l+0xab6>
 80090c2:	2300      	movs	r3, #0
 80090c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80090c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090c8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	f7ff ba79 	b.w	80085c2 <_strtod_l+0x7a>
 80090d0:	2a65      	cmp	r2, #101	@ 0x65
 80090d2:	f43f ab72 	beq.w	80087ba <_strtod_l+0x272>
 80090d6:	2a45      	cmp	r2, #69	@ 0x45
 80090d8:	f43f ab6f 	beq.w	80087ba <_strtod_l+0x272>
 80090dc:	2301      	movs	r3, #1
 80090de:	f7ff bbaa 	b.w	8008836 <_strtod_l+0x2ee>
 80090e2:	bf00      	nop
 80090e4:	f3af 8000 	nop.w
 80090e8:	ffc00000 	.word	0xffc00000
 80090ec:	41dfffff 	.word	0x41dfffff
 80090f0:	94a03595 	.word	0x94a03595
 80090f4:	3fcfffff 	.word	0x3fcfffff

080090f8 <_strtod_r>:
 80090f8:	4b01      	ldr	r3, [pc, #4]	@ (8009100 <_strtod_r+0x8>)
 80090fa:	f7ff ba25 	b.w	8008548 <_strtod_l>
 80090fe:	bf00      	nop
 8009100:	20000070 	.word	0x20000070

08009104 <_strtol_l.isra.0>:
 8009104:	2b24      	cmp	r3, #36	@ 0x24
 8009106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800910a:	4686      	mov	lr, r0
 800910c:	4690      	mov	r8, r2
 800910e:	d801      	bhi.n	8009114 <_strtol_l.isra.0+0x10>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d106      	bne.n	8009122 <_strtol_l.isra.0+0x1e>
 8009114:	f7fd fdac 	bl	8006c70 <__errno>
 8009118:	2316      	movs	r3, #22
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	2000      	movs	r0, #0
 800911e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009122:	460d      	mov	r5, r1
 8009124:	4833      	ldr	r0, [pc, #204]	@ (80091f4 <_strtol_l.isra.0+0xf0>)
 8009126:	462a      	mov	r2, r5
 8009128:	f815 4b01 	ldrb.w	r4, [r5], #1
 800912c:	5d06      	ldrb	r6, [r0, r4]
 800912e:	f016 0608 	ands.w	r6, r6, #8
 8009132:	d1f8      	bne.n	8009126 <_strtol_l.isra.0+0x22>
 8009134:	2c2d      	cmp	r4, #45	@ 0x2d
 8009136:	d110      	bne.n	800915a <_strtol_l.isra.0+0x56>
 8009138:	2601      	movs	r6, #1
 800913a:	782c      	ldrb	r4, [r5, #0]
 800913c:	1c95      	adds	r5, r2, #2
 800913e:	f033 0210 	bics.w	r2, r3, #16
 8009142:	d115      	bne.n	8009170 <_strtol_l.isra.0+0x6c>
 8009144:	2c30      	cmp	r4, #48	@ 0x30
 8009146:	d10d      	bne.n	8009164 <_strtol_l.isra.0+0x60>
 8009148:	782a      	ldrb	r2, [r5, #0]
 800914a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800914e:	2a58      	cmp	r2, #88	@ 0x58
 8009150:	d108      	bne.n	8009164 <_strtol_l.isra.0+0x60>
 8009152:	786c      	ldrb	r4, [r5, #1]
 8009154:	3502      	adds	r5, #2
 8009156:	2310      	movs	r3, #16
 8009158:	e00a      	b.n	8009170 <_strtol_l.isra.0+0x6c>
 800915a:	2c2b      	cmp	r4, #43	@ 0x2b
 800915c:	bf04      	itt	eq
 800915e:	782c      	ldrbeq	r4, [r5, #0]
 8009160:	1c95      	addeq	r5, r2, #2
 8009162:	e7ec      	b.n	800913e <_strtol_l.isra.0+0x3a>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f6      	bne.n	8009156 <_strtol_l.isra.0+0x52>
 8009168:	2c30      	cmp	r4, #48	@ 0x30
 800916a:	bf14      	ite	ne
 800916c:	230a      	movne	r3, #10
 800916e:	2308      	moveq	r3, #8
 8009170:	2200      	movs	r2, #0
 8009172:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009176:	f10c 3cff 	add.w	ip, ip, #4294967295
 800917a:	fbbc f9f3 	udiv	r9, ip, r3
 800917e:	4610      	mov	r0, r2
 8009180:	fb03 ca19 	mls	sl, r3, r9, ip
 8009184:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009188:	2f09      	cmp	r7, #9
 800918a:	d80f      	bhi.n	80091ac <_strtol_l.isra.0+0xa8>
 800918c:	463c      	mov	r4, r7
 800918e:	42a3      	cmp	r3, r4
 8009190:	dd1b      	ble.n	80091ca <_strtol_l.isra.0+0xc6>
 8009192:	1c57      	adds	r7, r2, #1
 8009194:	d007      	beq.n	80091a6 <_strtol_l.isra.0+0xa2>
 8009196:	4581      	cmp	r9, r0
 8009198:	d314      	bcc.n	80091c4 <_strtol_l.isra.0+0xc0>
 800919a:	d101      	bne.n	80091a0 <_strtol_l.isra.0+0x9c>
 800919c:	45a2      	cmp	sl, r4
 800919e:	db11      	blt.n	80091c4 <_strtol_l.isra.0+0xc0>
 80091a0:	2201      	movs	r2, #1
 80091a2:	fb00 4003 	mla	r0, r0, r3, r4
 80091a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091aa:	e7eb      	b.n	8009184 <_strtol_l.isra.0+0x80>
 80091ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80091b0:	2f19      	cmp	r7, #25
 80091b2:	d801      	bhi.n	80091b8 <_strtol_l.isra.0+0xb4>
 80091b4:	3c37      	subs	r4, #55	@ 0x37
 80091b6:	e7ea      	b.n	800918e <_strtol_l.isra.0+0x8a>
 80091b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80091bc:	2f19      	cmp	r7, #25
 80091be:	d804      	bhi.n	80091ca <_strtol_l.isra.0+0xc6>
 80091c0:	3c57      	subs	r4, #87	@ 0x57
 80091c2:	e7e4      	b.n	800918e <_strtol_l.isra.0+0x8a>
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	e7ed      	b.n	80091a6 <_strtol_l.isra.0+0xa2>
 80091ca:	1c53      	adds	r3, r2, #1
 80091cc:	d108      	bne.n	80091e0 <_strtol_l.isra.0+0xdc>
 80091ce:	2322      	movs	r3, #34	@ 0x22
 80091d0:	4660      	mov	r0, ip
 80091d2:	f8ce 3000 	str.w	r3, [lr]
 80091d6:	f1b8 0f00 	cmp.w	r8, #0
 80091da:	d0a0      	beq.n	800911e <_strtol_l.isra.0+0x1a>
 80091dc:	1e69      	subs	r1, r5, #1
 80091de:	e006      	b.n	80091ee <_strtol_l.isra.0+0xea>
 80091e0:	b106      	cbz	r6, 80091e4 <_strtol_l.isra.0+0xe0>
 80091e2:	4240      	negs	r0, r0
 80091e4:	f1b8 0f00 	cmp.w	r8, #0
 80091e8:	d099      	beq.n	800911e <_strtol_l.isra.0+0x1a>
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d1f6      	bne.n	80091dc <_strtol_l.isra.0+0xd8>
 80091ee:	f8c8 1000 	str.w	r1, [r8]
 80091f2:	e794      	b.n	800911e <_strtol_l.isra.0+0x1a>
 80091f4:	0800acd9 	.word	0x0800acd9

080091f8 <_strtol_r>:
 80091f8:	f7ff bf84 	b.w	8009104 <_strtol_l.isra.0>

080091fc <__ssputs_r>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	461f      	mov	r7, r3
 8009202:	688e      	ldr	r6, [r1, #8]
 8009204:	4682      	mov	sl, r0
 8009206:	42be      	cmp	r6, r7
 8009208:	460c      	mov	r4, r1
 800920a:	4690      	mov	r8, r2
 800920c:	680b      	ldr	r3, [r1, #0]
 800920e:	d82d      	bhi.n	800926c <__ssputs_r+0x70>
 8009210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009218:	d026      	beq.n	8009268 <__ssputs_r+0x6c>
 800921a:	6965      	ldr	r5, [r4, #20]
 800921c:	6909      	ldr	r1, [r1, #16]
 800921e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009222:	eba3 0901 	sub.w	r9, r3, r1
 8009226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800922a:	1c7b      	adds	r3, r7, #1
 800922c:	444b      	add	r3, r9
 800922e:	106d      	asrs	r5, r5, #1
 8009230:	429d      	cmp	r5, r3
 8009232:	bf38      	it	cc
 8009234:	461d      	movcc	r5, r3
 8009236:	0553      	lsls	r3, r2, #21
 8009238:	d527      	bpl.n	800928a <__ssputs_r+0x8e>
 800923a:	4629      	mov	r1, r5
 800923c:	f7fe fc36 	bl	8007aac <_malloc_r>
 8009240:	4606      	mov	r6, r0
 8009242:	b360      	cbz	r0, 800929e <__ssputs_r+0xa2>
 8009244:	464a      	mov	r2, r9
 8009246:	6921      	ldr	r1, [r4, #16]
 8009248:	f7fd fd4d 	bl	8006ce6 <memcpy>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	6126      	str	r6, [r4, #16]
 800925a:	444e      	add	r6, r9
 800925c:	6026      	str	r6, [r4, #0]
 800925e:	463e      	mov	r6, r7
 8009260:	6165      	str	r5, [r4, #20]
 8009262:	eba5 0509 	sub.w	r5, r5, r9
 8009266:	60a5      	str	r5, [r4, #8]
 8009268:	42be      	cmp	r6, r7
 800926a:	d900      	bls.n	800926e <__ssputs_r+0x72>
 800926c:	463e      	mov	r6, r7
 800926e:	4632      	mov	r2, r6
 8009270:	4641      	mov	r1, r8
 8009272:	6820      	ldr	r0, [r4, #0]
 8009274:	f000 f9c2 	bl	80095fc <memmove>
 8009278:	2000      	movs	r0, #0
 800927a:	68a3      	ldr	r3, [r4, #8]
 800927c:	1b9b      	subs	r3, r3, r6
 800927e:	60a3      	str	r3, [r4, #8]
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	4433      	add	r3, r6
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800928a:	462a      	mov	r2, r5
 800928c:	f000 fd75 	bl	8009d7a <_realloc_r>
 8009290:	4606      	mov	r6, r0
 8009292:	2800      	cmp	r0, #0
 8009294:	d1e0      	bne.n	8009258 <__ssputs_r+0x5c>
 8009296:	4650      	mov	r0, sl
 8009298:	6921      	ldr	r1, [r4, #16]
 800929a:	f7fe fb95 	bl	80079c8 <_free_r>
 800929e:	230c      	movs	r3, #12
 80092a0:	f8ca 3000 	str.w	r3, [sl]
 80092a4:	89a3      	ldrh	r3, [r4, #12]
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295
 80092aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092ae:	81a3      	strh	r3, [r4, #12]
 80092b0:	e7e9      	b.n	8009286 <__ssputs_r+0x8a>
	...

080092b4 <_svfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	4698      	mov	r8, r3
 80092ba:	898b      	ldrh	r3, [r1, #12]
 80092bc:	4607      	mov	r7, r0
 80092be:	061b      	lsls	r3, r3, #24
 80092c0:	460d      	mov	r5, r1
 80092c2:	4614      	mov	r4, r2
 80092c4:	b09d      	sub	sp, #116	@ 0x74
 80092c6:	d510      	bpl.n	80092ea <_svfiprintf_r+0x36>
 80092c8:	690b      	ldr	r3, [r1, #16]
 80092ca:	b973      	cbnz	r3, 80092ea <_svfiprintf_r+0x36>
 80092cc:	2140      	movs	r1, #64	@ 0x40
 80092ce:	f7fe fbed 	bl	8007aac <_malloc_r>
 80092d2:	6028      	str	r0, [r5, #0]
 80092d4:	6128      	str	r0, [r5, #16]
 80092d6:	b930      	cbnz	r0, 80092e6 <_svfiprintf_r+0x32>
 80092d8:	230c      	movs	r3, #12
 80092da:	603b      	str	r3, [r7, #0]
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	b01d      	add	sp, #116	@ 0x74
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	2340      	movs	r3, #64	@ 0x40
 80092e8:	616b      	str	r3, [r5, #20]
 80092ea:	2300      	movs	r3, #0
 80092ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ee:	2320      	movs	r3, #32
 80092f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092f4:	2330      	movs	r3, #48	@ 0x30
 80092f6:	f04f 0901 	mov.w	r9, #1
 80092fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80092fe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009498 <_svfiprintf_r+0x1e4>
 8009302:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009306:	4623      	mov	r3, r4
 8009308:	469a      	mov	sl, r3
 800930a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930e:	b10a      	cbz	r2, 8009314 <_svfiprintf_r+0x60>
 8009310:	2a25      	cmp	r2, #37	@ 0x25
 8009312:	d1f9      	bne.n	8009308 <_svfiprintf_r+0x54>
 8009314:	ebba 0b04 	subs.w	fp, sl, r4
 8009318:	d00b      	beq.n	8009332 <_svfiprintf_r+0x7e>
 800931a:	465b      	mov	r3, fp
 800931c:	4622      	mov	r2, r4
 800931e:	4629      	mov	r1, r5
 8009320:	4638      	mov	r0, r7
 8009322:	f7ff ff6b 	bl	80091fc <__ssputs_r>
 8009326:	3001      	adds	r0, #1
 8009328:	f000 80a7 	beq.w	800947a <_svfiprintf_r+0x1c6>
 800932c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932e:	445a      	add	r2, fp
 8009330:	9209      	str	r2, [sp, #36]	@ 0x24
 8009332:	f89a 3000 	ldrb.w	r3, [sl]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 809f 	beq.w	800947a <_svfiprintf_r+0x1c6>
 800933c:	2300      	movs	r3, #0
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009346:	f10a 0a01 	add.w	sl, sl, #1
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	9307      	str	r3, [sp, #28]
 800934e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009352:	931a      	str	r3, [sp, #104]	@ 0x68
 8009354:	4654      	mov	r4, sl
 8009356:	2205      	movs	r2, #5
 8009358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800935c:	484e      	ldr	r0, [pc, #312]	@ (8009498 <_svfiprintf_r+0x1e4>)
 800935e:	f7fd fcb4 	bl	8006cca <memchr>
 8009362:	9a04      	ldr	r2, [sp, #16]
 8009364:	b9d8      	cbnz	r0, 800939e <_svfiprintf_r+0xea>
 8009366:	06d0      	lsls	r0, r2, #27
 8009368:	bf44      	itt	mi
 800936a:	2320      	movmi	r3, #32
 800936c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009370:	0711      	lsls	r1, r2, #28
 8009372:	bf44      	itt	mi
 8009374:	232b      	movmi	r3, #43	@ 0x2b
 8009376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800937a:	f89a 3000 	ldrb.w	r3, [sl]
 800937e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009380:	d015      	beq.n	80093ae <_svfiprintf_r+0xfa>
 8009382:	4654      	mov	r4, sl
 8009384:	2000      	movs	r0, #0
 8009386:	f04f 0c0a 	mov.w	ip, #10
 800938a:	9a07      	ldr	r2, [sp, #28]
 800938c:	4621      	mov	r1, r4
 800938e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009392:	3b30      	subs	r3, #48	@ 0x30
 8009394:	2b09      	cmp	r3, #9
 8009396:	d94b      	bls.n	8009430 <_svfiprintf_r+0x17c>
 8009398:	b1b0      	cbz	r0, 80093c8 <_svfiprintf_r+0x114>
 800939a:	9207      	str	r2, [sp, #28]
 800939c:	e014      	b.n	80093c8 <_svfiprintf_r+0x114>
 800939e:	eba0 0308 	sub.w	r3, r0, r8
 80093a2:	fa09 f303 	lsl.w	r3, r9, r3
 80093a6:	4313      	orrs	r3, r2
 80093a8:	46a2      	mov	sl, r4
 80093aa:	9304      	str	r3, [sp, #16]
 80093ac:	e7d2      	b.n	8009354 <_svfiprintf_r+0xa0>
 80093ae:	9b03      	ldr	r3, [sp, #12]
 80093b0:	1d19      	adds	r1, r3, #4
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	9103      	str	r1, [sp, #12]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfbb      	ittet	lt
 80093ba:	425b      	neglt	r3, r3
 80093bc:	f042 0202 	orrlt.w	r2, r2, #2
 80093c0:	9307      	strge	r3, [sp, #28]
 80093c2:	9307      	strlt	r3, [sp, #28]
 80093c4:	bfb8      	it	lt
 80093c6:	9204      	strlt	r2, [sp, #16]
 80093c8:	7823      	ldrb	r3, [r4, #0]
 80093ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80093cc:	d10a      	bne.n	80093e4 <_svfiprintf_r+0x130>
 80093ce:	7863      	ldrb	r3, [r4, #1]
 80093d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80093d2:	d132      	bne.n	800943a <_svfiprintf_r+0x186>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	3402      	adds	r4, #2
 80093d8:	1d1a      	adds	r2, r3, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	9203      	str	r2, [sp, #12]
 80093de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093e2:	9305      	str	r3, [sp, #20]
 80093e4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800949c <_svfiprintf_r+0x1e8>
 80093e8:	2203      	movs	r2, #3
 80093ea:	4650      	mov	r0, sl
 80093ec:	7821      	ldrb	r1, [r4, #0]
 80093ee:	f7fd fc6c 	bl	8006cca <memchr>
 80093f2:	b138      	cbz	r0, 8009404 <_svfiprintf_r+0x150>
 80093f4:	2240      	movs	r2, #64	@ 0x40
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	eba0 000a 	sub.w	r0, r0, sl
 80093fc:	4082      	lsls	r2, r0
 80093fe:	4313      	orrs	r3, r2
 8009400:	3401      	adds	r4, #1
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	2206      	movs	r2, #6
 800940a:	4825      	ldr	r0, [pc, #148]	@ (80094a0 <_svfiprintf_r+0x1ec>)
 800940c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009410:	f7fd fc5b 	bl	8006cca <memchr>
 8009414:	2800      	cmp	r0, #0
 8009416:	d036      	beq.n	8009486 <_svfiprintf_r+0x1d2>
 8009418:	4b22      	ldr	r3, [pc, #136]	@ (80094a4 <_svfiprintf_r+0x1f0>)
 800941a:	bb1b      	cbnz	r3, 8009464 <_svfiprintf_r+0x1b0>
 800941c:	9b03      	ldr	r3, [sp, #12]
 800941e:	3307      	adds	r3, #7
 8009420:	f023 0307 	bic.w	r3, r3, #7
 8009424:	3308      	adds	r3, #8
 8009426:	9303      	str	r3, [sp, #12]
 8009428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942a:	4433      	add	r3, r6
 800942c:	9309      	str	r3, [sp, #36]	@ 0x24
 800942e:	e76a      	b.n	8009306 <_svfiprintf_r+0x52>
 8009430:	460c      	mov	r4, r1
 8009432:	2001      	movs	r0, #1
 8009434:	fb0c 3202 	mla	r2, ip, r2, r3
 8009438:	e7a8      	b.n	800938c <_svfiprintf_r+0xd8>
 800943a:	2300      	movs	r3, #0
 800943c:	f04f 0c0a 	mov.w	ip, #10
 8009440:	4619      	mov	r1, r3
 8009442:	3401      	adds	r4, #1
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	4620      	mov	r0, r4
 8009448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800944c:	3a30      	subs	r2, #48	@ 0x30
 800944e:	2a09      	cmp	r2, #9
 8009450:	d903      	bls.n	800945a <_svfiprintf_r+0x1a6>
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0c6      	beq.n	80093e4 <_svfiprintf_r+0x130>
 8009456:	9105      	str	r1, [sp, #20]
 8009458:	e7c4      	b.n	80093e4 <_svfiprintf_r+0x130>
 800945a:	4604      	mov	r4, r0
 800945c:	2301      	movs	r3, #1
 800945e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009462:	e7f0      	b.n	8009446 <_svfiprintf_r+0x192>
 8009464:	ab03      	add	r3, sp, #12
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	462a      	mov	r2, r5
 800946a:	4638      	mov	r0, r7
 800946c:	4b0e      	ldr	r3, [pc, #56]	@ (80094a8 <_svfiprintf_r+0x1f4>)
 800946e:	a904      	add	r1, sp, #16
 8009470:	f7fc fcbe 	bl	8005df0 <_printf_float>
 8009474:	1c42      	adds	r2, r0, #1
 8009476:	4606      	mov	r6, r0
 8009478:	d1d6      	bne.n	8009428 <_svfiprintf_r+0x174>
 800947a:	89ab      	ldrh	r3, [r5, #12]
 800947c:	065b      	lsls	r3, r3, #25
 800947e:	f53f af2d 	bmi.w	80092dc <_svfiprintf_r+0x28>
 8009482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009484:	e72c      	b.n	80092e0 <_svfiprintf_r+0x2c>
 8009486:	ab03      	add	r3, sp, #12
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	462a      	mov	r2, r5
 800948c:	4638      	mov	r0, r7
 800948e:	4b06      	ldr	r3, [pc, #24]	@ (80094a8 <_svfiprintf_r+0x1f4>)
 8009490:	a904      	add	r1, sp, #16
 8009492:	f7fc ff4b 	bl	800632c <_printf_i>
 8009496:	e7ed      	b.n	8009474 <_svfiprintf_r+0x1c0>
 8009498:	0800aad7 	.word	0x0800aad7
 800949c:	0800aadd 	.word	0x0800aadd
 80094a0:	0800aae1 	.word	0x0800aae1
 80094a4:	08005df1 	.word	0x08005df1
 80094a8:	080091fd 	.word	0x080091fd

080094ac <__sflush_r>:
 80094ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b2:	0716      	lsls	r6, r2, #28
 80094b4:	4605      	mov	r5, r0
 80094b6:	460c      	mov	r4, r1
 80094b8:	d454      	bmi.n	8009564 <__sflush_r+0xb8>
 80094ba:	684b      	ldr	r3, [r1, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dc02      	bgt.n	80094c6 <__sflush_r+0x1a>
 80094c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dd48      	ble.n	8009558 <__sflush_r+0xac>
 80094c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	d045      	beq.n	8009558 <__sflush_r+0xac>
 80094cc:	2300      	movs	r3, #0
 80094ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094d2:	682f      	ldr	r7, [r5, #0]
 80094d4:	6a21      	ldr	r1, [r4, #32]
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	d030      	beq.n	800953c <__sflush_r+0x90>
 80094da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	0759      	lsls	r1, r3, #29
 80094e0:	d505      	bpl.n	80094ee <__sflush_r+0x42>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	1ad2      	subs	r2, r2, r3
 80094e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094e8:	b10b      	cbz	r3, 80094ee <__sflush_r+0x42>
 80094ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80094ec:	1ad2      	subs	r2, r2, r3
 80094ee:	2300      	movs	r3, #0
 80094f0:	4628      	mov	r0, r5
 80094f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094f4:	6a21      	ldr	r1, [r4, #32]
 80094f6:	47b0      	blx	r6
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	d106      	bne.n	800950c <__sflush_r+0x60>
 80094fe:	6829      	ldr	r1, [r5, #0]
 8009500:	291d      	cmp	r1, #29
 8009502:	d82b      	bhi.n	800955c <__sflush_r+0xb0>
 8009504:	4a28      	ldr	r2, [pc, #160]	@ (80095a8 <__sflush_r+0xfc>)
 8009506:	40ca      	lsrs	r2, r1
 8009508:	07d6      	lsls	r6, r2, #31
 800950a:	d527      	bpl.n	800955c <__sflush_r+0xb0>
 800950c:	2200      	movs	r2, #0
 800950e:	6062      	str	r2, [r4, #4]
 8009510:	6922      	ldr	r2, [r4, #16]
 8009512:	04d9      	lsls	r1, r3, #19
 8009514:	6022      	str	r2, [r4, #0]
 8009516:	d504      	bpl.n	8009522 <__sflush_r+0x76>
 8009518:	1c42      	adds	r2, r0, #1
 800951a:	d101      	bne.n	8009520 <__sflush_r+0x74>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b903      	cbnz	r3, 8009522 <__sflush_r+0x76>
 8009520:	6560      	str	r0, [r4, #84]	@ 0x54
 8009522:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009524:	602f      	str	r7, [r5, #0]
 8009526:	b1b9      	cbz	r1, 8009558 <__sflush_r+0xac>
 8009528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800952c:	4299      	cmp	r1, r3
 800952e:	d002      	beq.n	8009536 <__sflush_r+0x8a>
 8009530:	4628      	mov	r0, r5
 8009532:	f7fe fa49 	bl	80079c8 <_free_r>
 8009536:	2300      	movs	r3, #0
 8009538:	6363      	str	r3, [r4, #52]	@ 0x34
 800953a:	e00d      	b.n	8009558 <__sflush_r+0xac>
 800953c:	2301      	movs	r3, #1
 800953e:	4628      	mov	r0, r5
 8009540:	47b0      	blx	r6
 8009542:	4602      	mov	r2, r0
 8009544:	1c50      	adds	r0, r2, #1
 8009546:	d1c9      	bne.n	80094dc <__sflush_r+0x30>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0c6      	beq.n	80094dc <__sflush_r+0x30>
 800954e:	2b1d      	cmp	r3, #29
 8009550:	d001      	beq.n	8009556 <__sflush_r+0xaa>
 8009552:	2b16      	cmp	r3, #22
 8009554:	d11d      	bne.n	8009592 <__sflush_r+0xe6>
 8009556:	602f      	str	r7, [r5, #0]
 8009558:	2000      	movs	r0, #0
 800955a:	e021      	b.n	80095a0 <__sflush_r+0xf4>
 800955c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009560:	b21b      	sxth	r3, r3
 8009562:	e01a      	b.n	800959a <__sflush_r+0xee>
 8009564:	690f      	ldr	r7, [r1, #16]
 8009566:	2f00      	cmp	r7, #0
 8009568:	d0f6      	beq.n	8009558 <__sflush_r+0xac>
 800956a:	0793      	lsls	r3, r2, #30
 800956c:	bf18      	it	ne
 800956e:	2300      	movne	r3, #0
 8009570:	680e      	ldr	r6, [r1, #0]
 8009572:	bf08      	it	eq
 8009574:	694b      	ldreq	r3, [r1, #20]
 8009576:	1bf6      	subs	r6, r6, r7
 8009578:	600f      	str	r7, [r1, #0]
 800957a:	608b      	str	r3, [r1, #8]
 800957c:	2e00      	cmp	r6, #0
 800957e:	ddeb      	ble.n	8009558 <__sflush_r+0xac>
 8009580:	4633      	mov	r3, r6
 8009582:	463a      	mov	r2, r7
 8009584:	4628      	mov	r0, r5
 8009586:	6a21      	ldr	r1, [r4, #32]
 8009588:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800958c:	47e0      	blx	ip
 800958e:	2800      	cmp	r0, #0
 8009590:	dc07      	bgt.n	80095a2 <__sflush_r+0xf6>
 8009592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800959a:	f04f 30ff 	mov.w	r0, #4294967295
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a2:	4407      	add	r7, r0
 80095a4:	1a36      	subs	r6, r6, r0
 80095a6:	e7e9      	b.n	800957c <__sflush_r+0xd0>
 80095a8:	20400001 	.word	0x20400001

080095ac <_fflush_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	690b      	ldr	r3, [r1, #16]
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	b913      	cbnz	r3, 80095bc <_fflush_r+0x10>
 80095b6:	2500      	movs	r5, #0
 80095b8:	4628      	mov	r0, r5
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	b118      	cbz	r0, 80095c6 <_fflush_r+0x1a>
 80095be:	6a03      	ldr	r3, [r0, #32]
 80095c0:	b90b      	cbnz	r3, 80095c6 <_fflush_r+0x1a>
 80095c2:	f7fd fa67 	bl	8006a94 <__sinit>
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0f3      	beq.n	80095b6 <_fflush_r+0xa>
 80095ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095d0:	07d0      	lsls	r0, r2, #31
 80095d2:	d404      	bmi.n	80095de <_fflush_r+0x32>
 80095d4:	0599      	lsls	r1, r3, #22
 80095d6:	d402      	bmi.n	80095de <_fflush_r+0x32>
 80095d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095da:	f7fd fb74 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 80095de:	4628      	mov	r0, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	f7ff ff63 	bl	80094ac <__sflush_r>
 80095e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80095e8:	4605      	mov	r5, r0
 80095ea:	07da      	lsls	r2, r3, #31
 80095ec:	d4e4      	bmi.n	80095b8 <_fflush_r+0xc>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	059b      	lsls	r3, r3, #22
 80095f2:	d4e1      	bmi.n	80095b8 <_fflush_r+0xc>
 80095f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095f6:	f7fd fb67 	bl	8006cc8 <__retarget_lock_release_recursive>
 80095fa:	e7dd      	b.n	80095b8 <_fflush_r+0xc>

080095fc <memmove>:
 80095fc:	4288      	cmp	r0, r1
 80095fe:	b510      	push	{r4, lr}
 8009600:	eb01 0402 	add.w	r4, r1, r2
 8009604:	d902      	bls.n	800960c <memmove+0x10>
 8009606:	4284      	cmp	r4, r0
 8009608:	4623      	mov	r3, r4
 800960a:	d807      	bhi.n	800961c <memmove+0x20>
 800960c:	1e43      	subs	r3, r0, #1
 800960e:	42a1      	cmp	r1, r4
 8009610:	d008      	beq.n	8009624 <memmove+0x28>
 8009612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800961a:	e7f8      	b.n	800960e <memmove+0x12>
 800961c:	4601      	mov	r1, r0
 800961e:	4402      	add	r2, r0
 8009620:	428a      	cmp	r2, r1
 8009622:	d100      	bne.n	8009626 <memmove+0x2a>
 8009624:	bd10      	pop	{r4, pc}
 8009626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800962a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800962e:	e7f7      	b.n	8009620 <memmove+0x24>

08009630 <strncmp>:
 8009630:	b510      	push	{r4, lr}
 8009632:	b16a      	cbz	r2, 8009650 <strncmp+0x20>
 8009634:	3901      	subs	r1, #1
 8009636:	1884      	adds	r4, r0, r2
 8009638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800963c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009640:	429a      	cmp	r2, r3
 8009642:	d103      	bne.n	800964c <strncmp+0x1c>
 8009644:	42a0      	cmp	r0, r4
 8009646:	d001      	beq.n	800964c <strncmp+0x1c>
 8009648:	2a00      	cmp	r2, #0
 800964a:	d1f5      	bne.n	8009638 <strncmp+0x8>
 800964c:	1ad0      	subs	r0, r2, r3
 800964e:	bd10      	pop	{r4, pc}
 8009650:	4610      	mov	r0, r2
 8009652:	e7fc      	b.n	800964e <strncmp+0x1e>

08009654 <_sbrk_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	2300      	movs	r3, #0
 8009658:	4d05      	ldr	r5, [pc, #20]	@ (8009670 <_sbrk_r+0x1c>)
 800965a:	4604      	mov	r4, r0
 800965c:	4608      	mov	r0, r1
 800965e:	602b      	str	r3, [r5, #0]
 8009660:	f7f8 fc64 	bl	8001f2c <_sbrk>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_sbrk_r+0x1a>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_sbrk_r+0x1a>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	20000868 	.word	0x20000868

08009674 <nan>:
 8009674:	2000      	movs	r0, #0
 8009676:	4901      	ldr	r1, [pc, #4]	@ (800967c <nan+0x8>)
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	7ff80000 	.word	0x7ff80000

08009680 <__assert_func>:
 8009680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009682:	4614      	mov	r4, r2
 8009684:	461a      	mov	r2, r3
 8009686:	4b09      	ldr	r3, [pc, #36]	@ (80096ac <__assert_func+0x2c>)
 8009688:	4605      	mov	r5, r0
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68d8      	ldr	r0, [r3, #12]
 800968e:	b14c      	cbz	r4, 80096a4 <__assert_func+0x24>
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <__assert_func+0x30>)
 8009692:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009696:	9100      	str	r1, [sp, #0]
 8009698:	462b      	mov	r3, r5
 800969a:	4906      	ldr	r1, [pc, #24]	@ (80096b4 <__assert_func+0x34>)
 800969c:	f000 fba8 	bl	8009df0 <fiprintf>
 80096a0:	f000 fbb8 	bl	8009e14 <abort>
 80096a4:	4b04      	ldr	r3, [pc, #16]	@ (80096b8 <__assert_func+0x38>)
 80096a6:	461c      	mov	r4, r3
 80096a8:	e7f3      	b.n	8009692 <__assert_func+0x12>
 80096aa:	bf00      	nop
 80096ac:	20000020 	.word	0x20000020
 80096b0:	0800aaf0 	.word	0x0800aaf0
 80096b4:	0800aafd 	.word	0x0800aafd
 80096b8:	0800ab2b 	.word	0x0800ab2b

080096bc <_calloc_r>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	fba1 5402 	umull	r5, r4, r1, r2
 80096c2:	b934      	cbnz	r4, 80096d2 <_calloc_r+0x16>
 80096c4:	4629      	mov	r1, r5
 80096c6:	f7fe f9f1 	bl	8007aac <_malloc_r>
 80096ca:	4606      	mov	r6, r0
 80096cc:	b928      	cbnz	r0, 80096da <_calloc_r+0x1e>
 80096ce:	4630      	mov	r0, r6
 80096d0:	bd70      	pop	{r4, r5, r6, pc}
 80096d2:	220c      	movs	r2, #12
 80096d4:	2600      	movs	r6, #0
 80096d6:	6002      	str	r2, [r0, #0]
 80096d8:	e7f9      	b.n	80096ce <_calloc_r+0x12>
 80096da:	462a      	mov	r2, r5
 80096dc:	4621      	mov	r1, r4
 80096de:	f7fd fa74 	bl	8006bca <memset>
 80096e2:	e7f4      	b.n	80096ce <_calloc_r+0x12>

080096e4 <rshift>:
 80096e4:	6903      	ldr	r3, [r0, #16]
 80096e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80096ee:	f100 0414 	add.w	r4, r0, #20
 80096f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80096f6:	dd46      	ble.n	8009786 <rshift+0xa2>
 80096f8:	f011 011f 	ands.w	r1, r1, #31
 80096fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009704:	d10c      	bne.n	8009720 <rshift+0x3c>
 8009706:	4629      	mov	r1, r5
 8009708:	f100 0710 	add.w	r7, r0, #16
 800970c:	42b1      	cmp	r1, r6
 800970e:	d335      	bcc.n	800977c <rshift+0x98>
 8009710:	1a9b      	subs	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	1eea      	subs	r2, r5, #3
 8009716:	4296      	cmp	r6, r2
 8009718:	bf38      	it	cc
 800971a:	2300      	movcc	r3, #0
 800971c:	4423      	add	r3, r4
 800971e:	e015      	b.n	800974c <rshift+0x68>
 8009720:	46a1      	mov	r9, r4
 8009722:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009726:	f1c1 0820 	rsb	r8, r1, #32
 800972a:	40cf      	lsrs	r7, r1
 800972c:	f105 0e04 	add.w	lr, r5, #4
 8009730:	4576      	cmp	r6, lr
 8009732:	46f4      	mov	ip, lr
 8009734:	d816      	bhi.n	8009764 <rshift+0x80>
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	0092      	lsls	r2, r2, #2
 800973a:	3a04      	subs	r2, #4
 800973c:	3501      	adds	r5, #1
 800973e:	42ae      	cmp	r6, r5
 8009740:	bf38      	it	cc
 8009742:	2200      	movcc	r2, #0
 8009744:	18a3      	adds	r3, r4, r2
 8009746:	50a7      	str	r7, [r4, r2]
 8009748:	b107      	cbz	r7, 800974c <rshift+0x68>
 800974a:	3304      	adds	r3, #4
 800974c:	42a3      	cmp	r3, r4
 800974e:	eba3 0204 	sub.w	r2, r3, r4
 8009752:	bf08      	it	eq
 8009754:	2300      	moveq	r3, #0
 8009756:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800975a:	6102      	str	r2, [r0, #16]
 800975c:	bf08      	it	eq
 800975e:	6143      	streq	r3, [r0, #20]
 8009760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009764:	f8dc c000 	ldr.w	ip, [ip]
 8009768:	fa0c fc08 	lsl.w	ip, ip, r8
 800976c:	ea4c 0707 	orr.w	r7, ip, r7
 8009770:	f849 7b04 	str.w	r7, [r9], #4
 8009774:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009778:	40cf      	lsrs	r7, r1
 800977a:	e7d9      	b.n	8009730 <rshift+0x4c>
 800977c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009780:	f847 cf04 	str.w	ip, [r7, #4]!
 8009784:	e7c2      	b.n	800970c <rshift+0x28>
 8009786:	4623      	mov	r3, r4
 8009788:	e7e0      	b.n	800974c <rshift+0x68>

0800978a <__hexdig_fun>:
 800978a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800978e:	2b09      	cmp	r3, #9
 8009790:	d802      	bhi.n	8009798 <__hexdig_fun+0xe>
 8009792:	3820      	subs	r0, #32
 8009794:	b2c0      	uxtb	r0, r0
 8009796:	4770      	bx	lr
 8009798:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800979c:	2b05      	cmp	r3, #5
 800979e:	d801      	bhi.n	80097a4 <__hexdig_fun+0x1a>
 80097a0:	3847      	subs	r0, #71	@ 0x47
 80097a2:	e7f7      	b.n	8009794 <__hexdig_fun+0xa>
 80097a4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80097a8:	2b05      	cmp	r3, #5
 80097aa:	d801      	bhi.n	80097b0 <__hexdig_fun+0x26>
 80097ac:	3827      	subs	r0, #39	@ 0x27
 80097ae:	e7f1      	b.n	8009794 <__hexdig_fun+0xa>
 80097b0:	2000      	movs	r0, #0
 80097b2:	4770      	bx	lr

080097b4 <__gethex>:
 80097b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b8:	468a      	mov	sl, r1
 80097ba:	4690      	mov	r8, r2
 80097bc:	b085      	sub	sp, #20
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	680b      	ldr	r3, [r1, #0]
 80097c2:	9001      	str	r0, [sp, #4]
 80097c4:	1c9c      	adds	r4, r3, #2
 80097c6:	46a1      	mov	r9, r4
 80097c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80097cc:	2830      	cmp	r0, #48	@ 0x30
 80097ce:	d0fa      	beq.n	80097c6 <__gethex+0x12>
 80097d0:	eba9 0303 	sub.w	r3, r9, r3
 80097d4:	f1a3 0b02 	sub.w	fp, r3, #2
 80097d8:	f7ff ffd7 	bl	800978a <__hexdig_fun>
 80097dc:	4605      	mov	r5, r0
 80097de:	2800      	cmp	r0, #0
 80097e0:	d168      	bne.n	80098b4 <__gethex+0x100>
 80097e2:	2201      	movs	r2, #1
 80097e4:	4648      	mov	r0, r9
 80097e6:	499f      	ldr	r1, [pc, #636]	@ (8009a64 <__gethex+0x2b0>)
 80097e8:	f7ff ff22 	bl	8009630 <strncmp>
 80097ec:	4607      	mov	r7, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	d167      	bne.n	80098c2 <__gethex+0x10e>
 80097f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80097f6:	4626      	mov	r6, r4
 80097f8:	f7ff ffc7 	bl	800978a <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d062      	beq.n	80098c6 <__gethex+0x112>
 8009800:	4623      	mov	r3, r4
 8009802:	7818      	ldrb	r0, [r3, #0]
 8009804:	4699      	mov	r9, r3
 8009806:	2830      	cmp	r0, #48	@ 0x30
 8009808:	f103 0301 	add.w	r3, r3, #1
 800980c:	d0f9      	beq.n	8009802 <__gethex+0x4e>
 800980e:	f7ff ffbc 	bl	800978a <__hexdig_fun>
 8009812:	fab0 f580 	clz	r5, r0
 8009816:	f04f 0b01 	mov.w	fp, #1
 800981a:	096d      	lsrs	r5, r5, #5
 800981c:	464a      	mov	r2, r9
 800981e:	4616      	mov	r6, r2
 8009820:	7830      	ldrb	r0, [r6, #0]
 8009822:	3201      	adds	r2, #1
 8009824:	f7ff ffb1 	bl	800978a <__hexdig_fun>
 8009828:	2800      	cmp	r0, #0
 800982a:	d1f8      	bne.n	800981e <__gethex+0x6a>
 800982c:	2201      	movs	r2, #1
 800982e:	4630      	mov	r0, r6
 8009830:	498c      	ldr	r1, [pc, #560]	@ (8009a64 <__gethex+0x2b0>)
 8009832:	f7ff fefd 	bl	8009630 <strncmp>
 8009836:	2800      	cmp	r0, #0
 8009838:	d13f      	bne.n	80098ba <__gethex+0x106>
 800983a:	b944      	cbnz	r4, 800984e <__gethex+0x9a>
 800983c:	1c74      	adds	r4, r6, #1
 800983e:	4622      	mov	r2, r4
 8009840:	4616      	mov	r6, r2
 8009842:	7830      	ldrb	r0, [r6, #0]
 8009844:	3201      	adds	r2, #1
 8009846:	f7ff ffa0 	bl	800978a <__hexdig_fun>
 800984a:	2800      	cmp	r0, #0
 800984c:	d1f8      	bne.n	8009840 <__gethex+0x8c>
 800984e:	1ba4      	subs	r4, r4, r6
 8009850:	00a7      	lsls	r7, r4, #2
 8009852:	7833      	ldrb	r3, [r6, #0]
 8009854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009858:	2b50      	cmp	r3, #80	@ 0x50
 800985a:	d13e      	bne.n	80098da <__gethex+0x126>
 800985c:	7873      	ldrb	r3, [r6, #1]
 800985e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009860:	d033      	beq.n	80098ca <__gethex+0x116>
 8009862:	2b2d      	cmp	r3, #45	@ 0x2d
 8009864:	d034      	beq.n	80098d0 <__gethex+0x11c>
 8009866:	2400      	movs	r4, #0
 8009868:	1c71      	adds	r1, r6, #1
 800986a:	7808      	ldrb	r0, [r1, #0]
 800986c:	f7ff ff8d 	bl	800978a <__hexdig_fun>
 8009870:	1e43      	subs	r3, r0, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b18      	cmp	r3, #24
 8009876:	d830      	bhi.n	80098da <__gethex+0x126>
 8009878:	f1a0 0210 	sub.w	r2, r0, #16
 800987c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009880:	f7ff ff83 	bl	800978a <__hexdig_fun>
 8009884:	f100 3cff 	add.w	ip, r0, #4294967295
 8009888:	fa5f fc8c 	uxtb.w	ip, ip
 800988c:	f1bc 0f18 	cmp.w	ip, #24
 8009890:	f04f 030a 	mov.w	r3, #10
 8009894:	d91e      	bls.n	80098d4 <__gethex+0x120>
 8009896:	b104      	cbz	r4, 800989a <__gethex+0xe6>
 8009898:	4252      	negs	r2, r2
 800989a:	4417      	add	r7, r2
 800989c:	f8ca 1000 	str.w	r1, [sl]
 80098a0:	b1ed      	cbz	r5, 80098de <__gethex+0x12a>
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	bf0c      	ite	eq
 80098a8:	2506      	moveq	r5, #6
 80098aa:	2500      	movne	r5, #0
 80098ac:	4628      	mov	r0, r5
 80098ae:	b005      	add	sp, #20
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	2500      	movs	r5, #0
 80098b6:	462c      	mov	r4, r5
 80098b8:	e7b0      	b.n	800981c <__gethex+0x68>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d1c7      	bne.n	800984e <__gethex+0x9a>
 80098be:	4627      	mov	r7, r4
 80098c0:	e7c7      	b.n	8009852 <__gethex+0x9e>
 80098c2:	464e      	mov	r6, r9
 80098c4:	462f      	mov	r7, r5
 80098c6:	2501      	movs	r5, #1
 80098c8:	e7c3      	b.n	8009852 <__gethex+0x9e>
 80098ca:	2400      	movs	r4, #0
 80098cc:	1cb1      	adds	r1, r6, #2
 80098ce:	e7cc      	b.n	800986a <__gethex+0xb6>
 80098d0:	2401      	movs	r4, #1
 80098d2:	e7fb      	b.n	80098cc <__gethex+0x118>
 80098d4:	fb03 0002 	mla	r0, r3, r2, r0
 80098d8:	e7ce      	b.n	8009878 <__gethex+0xc4>
 80098da:	4631      	mov	r1, r6
 80098dc:	e7de      	b.n	800989c <__gethex+0xe8>
 80098de:	4629      	mov	r1, r5
 80098e0:	eba6 0309 	sub.w	r3, r6, r9
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b07      	cmp	r3, #7
 80098e8:	dc0a      	bgt.n	8009900 <__gethex+0x14c>
 80098ea:	9801      	ldr	r0, [sp, #4]
 80098ec:	f7fe f96a 	bl	8007bc4 <_Balloc>
 80098f0:	4604      	mov	r4, r0
 80098f2:	b940      	cbnz	r0, 8009906 <__gethex+0x152>
 80098f4:	4602      	mov	r2, r0
 80098f6:	21e4      	movs	r1, #228	@ 0xe4
 80098f8:	4b5b      	ldr	r3, [pc, #364]	@ (8009a68 <__gethex+0x2b4>)
 80098fa:	485c      	ldr	r0, [pc, #368]	@ (8009a6c <__gethex+0x2b8>)
 80098fc:	f7ff fec0 	bl	8009680 <__assert_func>
 8009900:	3101      	adds	r1, #1
 8009902:	105b      	asrs	r3, r3, #1
 8009904:	e7ef      	b.n	80098e6 <__gethex+0x132>
 8009906:	2300      	movs	r3, #0
 8009908:	f100 0a14 	add.w	sl, r0, #20
 800990c:	4655      	mov	r5, sl
 800990e:	469b      	mov	fp, r3
 8009910:	45b1      	cmp	r9, r6
 8009912:	d337      	bcc.n	8009984 <__gethex+0x1d0>
 8009914:	f845 bb04 	str.w	fp, [r5], #4
 8009918:	eba5 050a 	sub.w	r5, r5, sl
 800991c:	10ad      	asrs	r5, r5, #2
 800991e:	6125      	str	r5, [r4, #16]
 8009920:	4658      	mov	r0, fp
 8009922:	f7fe fa41 	bl	8007da8 <__hi0bits>
 8009926:	016d      	lsls	r5, r5, #5
 8009928:	f8d8 6000 	ldr.w	r6, [r8]
 800992c:	1a2d      	subs	r5, r5, r0
 800992e:	42b5      	cmp	r5, r6
 8009930:	dd54      	ble.n	80099dc <__gethex+0x228>
 8009932:	1bad      	subs	r5, r5, r6
 8009934:	4629      	mov	r1, r5
 8009936:	4620      	mov	r0, r4
 8009938:	f7fe fdc3 	bl	80084c2 <__any_on>
 800993c:	4681      	mov	r9, r0
 800993e:	b178      	cbz	r0, 8009960 <__gethex+0x1ac>
 8009940:	f04f 0901 	mov.w	r9, #1
 8009944:	1e6b      	subs	r3, r5, #1
 8009946:	1159      	asrs	r1, r3, #5
 8009948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800994c:	f003 021f 	and.w	r2, r3, #31
 8009950:	fa09 f202 	lsl.w	r2, r9, r2
 8009954:	420a      	tst	r2, r1
 8009956:	d003      	beq.n	8009960 <__gethex+0x1ac>
 8009958:	454b      	cmp	r3, r9
 800995a:	dc36      	bgt.n	80099ca <__gethex+0x216>
 800995c:	f04f 0902 	mov.w	r9, #2
 8009960:	4629      	mov	r1, r5
 8009962:	4620      	mov	r0, r4
 8009964:	f7ff febe 	bl	80096e4 <rshift>
 8009968:	442f      	add	r7, r5
 800996a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800996e:	42bb      	cmp	r3, r7
 8009970:	da42      	bge.n	80099f8 <__gethex+0x244>
 8009972:	4621      	mov	r1, r4
 8009974:	9801      	ldr	r0, [sp, #4]
 8009976:	f7fe f965 	bl	8007c44 <_Bfree>
 800997a:	2300      	movs	r3, #0
 800997c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800997e:	25a3      	movs	r5, #163	@ 0xa3
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	e793      	b.n	80098ac <__gethex+0xf8>
 8009984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009988:	2a2e      	cmp	r2, #46	@ 0x2e
 800998a:	d012      	beq.n	80099b2 <__gethex+0x1fe>
 800998c:	2b20      	cmp	r3, #32
 800998e:	d104      	bne.n	800999a <__gethex+0x1e6>
 8009990:	f845 bb04 	str.w	fp, [r5], #4
 8009994:	f04f 0b00 	mov.w	fp, #0
 8009998:	465b      	mov	r3, fp
 800999a:	7830      	ldrb	r0, [r6, #0]
 800999c:	9303      	str	r3, [sp, #12]
 800999e:	f7ff fef4 	bl	800978a <__hexdig_fun>
 80099a2:	9b03      	ldr	r3, [sp, #12]
 80099a4:	f000 000f 	and.w	r0, r0, #15
 80099a8:	4098      	lsls	r0, r3
 80099aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80099ae:	3304      	adds	r3, #4
 80099b0:	e7ae      	b.n	8009910 <__gethex+0x15c>
 80099b2:	45b1      	cmp	r9, r6
 80099b4:	d8ea      	bhi.n	800998c <__gethex+0x1d8>
 80099b6:	2201      	movs	r2, #1
 80099b8:	4630      	mov	r0, r6
 80099ba:	492a      	ldr	r1, [pc, #168]	@ (8009a64 <__gethex+0x2b0>)
 80099bc:	9303      	str	r3, [sp, #12]
 80099be:	f7ff fe37 	bl	8009630 <strncmp>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d1e1      	bne.n	800998c <__gethex+0x1d8>
 80099c8:	e7a2      	b.n	8009910 <__gethex+0x15c>
 80099ca:	4620      	mov	r0, r4
 80099cc:	1ea9      	subs	r1, r5, #2
 80099ce:	f7fe fd78 	bl	80084c2 <__any_on>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0c2      	beq.n	800995c <__gethex+0x1a8>
 80099d6:	f04f 0903 	mov.w	r9, #3
 80099da:	e7c1      	b.n	8009960 <__gethex+0x1ac>
 80099dc:	da09      	bge.n	80099f2 <__gethex+0x23e>
 80099de:	1b75      	subs	r5, r6, r5
 80099e0:	4621      	mov	r1, r4
 80099e2:	462a      	mov	r2, r5
 80099e4:	9801      	ldr	r0, [sp, #4]
 80099e6:	f7fe fb3d 	bl	8008064 <__lshift>
 80099ea:	4604      	mov	r4, r0
 80099ec:	1b7f      	subs	r7, r7, r5
 80099ee:	f100 0a14 	add.w	sl, r0, #20
 80099f2:	f04f 0900 	mov.w	r9, #0
 80099f6:	e7b8      	b.n	800996a <__gethex+0x1b6>
 80099f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80099fc:	42bd      	cmp	r5, r7
 80099fe:	dd6f      	ble.n	8009ae0 <__gethex+0x32c>
 8009a00:	1bed      	subs	r5, r5, r7
 8009a02:	42ae      	cmp	r6, r5
 8009a04:	dc34      	bgt.n	8009a70 <__gethex+0x2bc>
 8009a06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009a0a:	2b02      	cmp	r3, #2
 8009a0c:	d022      	beq.n	8009a54 <__gethex+0x2a0>
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d024      	beq.n	8009a5c <__gethex+0x2a8>
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d115      	bne.n	8009a42 <__gethex+0x28e>
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	d113      	bne.n	8009a42 <__gethex+0x28e>
 8009a1a:	2e01      	cmp	r6, #1
 8009a1c:	d10b      	bne.n	8009a36 <__gethex+0x282>
 8009a1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009a22:	9a02      	ldr	r2, [sp, #8]
 8009a24:	2562      	movs	r5, #98	@ 0x62
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	f8ca 3000 	str.w	r3, [sl]
 8009a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a32:	601c      	str	r4, [r3, #0]
 8009a34:	e73a      	b.n	80098ac <__gethex+0xf8>
 8009a36:	4620      	mov	r0, r4
 8009a38:	1e71      	subs	r1, r6, #1
 8009a3a:	f7fe fd42 	bl	80084c2 <__any_on>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d1ed      	bne.n	8009a1e <__gethex+0x26a>
 8009a42:	4621      	mov	r1, r4
 8009a44:	9801      	ldr	r0, [sp, #4]
 8009a46:	f7fe f8fd 	bl	8007c44 <_Bfree>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a4e:	2550      	movs	r5, #80	@ 0x50
 8009a50:	6013      	str	r3, [r2, #0]
 8009a52:	e72b      	b.n	80098ac <__gethex+0xf8>
 8009a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1f3      	bne.n	8009a42 <__gethex+0x28e>
 8009a5a:	e7e0      	b.n	8009a1e <__gethex+0x26a>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1dd      	bne.n	8009a1e <__gethex+0x26a>
 8009a62:	e7ee      	b.n	8009a42 <__gethex+0x28e>
 8009a64:	0800aad5 	.word	0x0800aad5
 8009a68:	0800aa6b 	.word	0x0800aa6b
 8009a6c:	0800ab2c 	.word	0x0800ab2c
 8009a70:	1e6f      	subs	r7, r5, #1
 8009a72:	f1b9 0f00 	cmp.w	r9, #0
 8009a76:	d130      	bne.n	8009ada <__gethex+0x326>
 8009a78:	b127      	cbz	r7, 8009a84 <__gethex+0x2d0>
 8009a7a:	4639      	mov	r1, r7
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f7fe fd20 	bl	80084c2 <__any_on>
 8009a82:	4681      	mov	r9, r0
 8009a84:	2301      	movs	r3, #1
 8009a86:	4629      	mov	r1, r5
 8009a88:	1b76      	subs	r6, r6, r5
 8009a8a:	2502      	movs	r5, #2
 8009a8c:	117a      	asrs	r2, r7, #5
 8009a8e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009a92:	f007 071f 	and.w	r7, r7, #31
 8009a96:	40bb      	lsls	r3, r7
 8009a98:	4213      	tst	r3, r2
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	bf18      	it	ne
 8009a9e:	f049 0902 	orrne.w	r9, r9, #2
 8009aa2:	f7ff fe1f 	bl	80096e4 <rshift>
 8009aa6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	d047      	beq.n	8009b40 <__gethex+0x38c>
 8009ab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d015      	beq.n	8009ae4 <__gethex+0x330>
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d017      	beq.n	8009aec <__gethex+0x338>
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d109      	bne.n	8009ad4 <__gethex+0x320>
 8009ac0:	f019 0f02 	tst.w	r9, #2
 8009ac4:	d006      	beq.n	8009ad4 <__gethex+0x320>
 8009ac6:	f8da 3000 	ldr.w	r3, [sl]
 8009aca:	ea49 0903 	orr.w	r9, r9, r3
 8009ace:	f019 0f01 	tst.w	r9, #1
 8009ad2:	d10e      	bne.n	8009af2 <__gethex+0x33e>
 8009ad4:	f045 0510 	orr.w	r5, r5, #16
 8009ad8:	e032      	b.n	8009b40 <__gethex+0x38c>
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	e7d1      	b.n	8009a84 <__gethex+0x2d0>
 8009ae0:	2501      	movs	r5, #1
 8009ae2:	e7e2      	b.n	8009aaa <__gethex+0x2f6>
 8009ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ae6:	f1c3 0301 	rsb	r3, r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d0f0      	beq.n	8009ad4 <__gethex+0x320>
 8009af2:	f04f 0c00 	mov.w	ip, #0
 8009af6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009afa:	f104 0314 	add.w	r3, r4, #20
 8009afe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009b02:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009b06:	4618      	mov	r0, r3
 8009b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009b10:	d01b      	beq.n	8009b4a <__gethex+0x396>
 8009b12:	3201      	adds	r2, #1
 8009b14:	6002      	str	r2, [r0, #0]
 8009b16:	2d02      	cmp	r5, #2
 8009b18:	f104 0314 	add.w	r3, r4, #20
 8009b1c:	d13c      	bne.n	8009b98 <__gethex+0x3e4>
 8009b1e:	f8d8 2000 	ldr.w	r2, [r8]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	42b2      	cmp	r2, r6
 8009b26:	d109      	bne.n	8009b3c <__gethex+0x388>
 8009b28:	2201      	movs	r2, #1
 8009b2a:	1171      	asrs	r1, r6, #5
 8009b2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009b30:	f006 061f 	and.w	r6, r6, #31
 8009b34:	fa02 f606 	lsl.w	r6, r2, r6
 8009b38:	421e      	tst	r6, r3
 8009b3a:	d13a      	bne.n	8009bb2 <__gethex+0x3fe>
 8009b3c:	f045 0520 	orr.w	r5, r5, #32
 8009b40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b42:	601c      	str	r4, [r3, #0]
 8009b44:	9b02      	ldr	r3, [sp, #8]
 8009b46:	601f      	str	r7, [r3, #0]
 8009b48:	e6b0      	b.n	80098ac <__gethex+0xf8>
 8009b4a:	4299      	cmp	r1, r3
 8009b4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009b50:	d8d9      	bhi.n	8009b06 <__gethex+0x352>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	459b      	cmp	fp, r3
 8009b56:	db17      	blt.n	8009b88 <__gethex+0x3d4>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	9801      	ldr	r0, [sp, #4]
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7fe f831 	bl	8007bc4 <_Balloc>
 8009b62:	4681      	mov	r9, r0
 8009b64:	b918      	cbnz	r0, 8009b6e <__gethex+0x3ba>
 8009b66:	4602      	mov	r2, r0
 8009b68:	2184      	movs	r1, #132	@ 0x84
 8009b6a:	4b19      	ldr	r3, [pc, #100]	@ (8009bd0 <__gethex+0x41c>)
 8009b6c:	e6c5      	b.n	80098fa <__gethex+0x146>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	f104 010c 	add.w	r1, r4, #12
 8009b74:	3202      	adds	r2, #2
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7fd f8b4 	bl	8006ce6 <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	9801      	ldr	r0, [sp, #4]
 8009b82:	f7fe f85f 	bl	8007c44 <_Bfree>
 8009b86:	464c      	mov	r4, r9
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	1c5a      	adds	r2, r3, #1
 8009b8c:	6122      	str	r2, [r4, #16]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b94:	615a      	str	r2, [r3, #20]
 8009b96:	e7be      	b.n	8009b16 <__gethex+0x362>
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	455a      	cmp	r2, fp
 8009b9c:	dd0b      	ble.n	8009bb6 <__gethex+0x402>
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f7ff fd9f 	bl	80096e4 <rshift>
 8009ba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009baa:	3701      	adds	r7, #1
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	f6ff aee0 	blt.w	8009972 <__gethex+0x1be>
 8009bb2:	2501      	movs	r5, #1
 8009bb4:	e7c2      	b.n	8009b3c <__gethex+0x388>
 8009bb6:	f016 061f 	ands.w	r6, r6, #31
 8009bba:	d0fa      	beq.n	8009bb2 <__gethex+0x3fe>
 8009bbc:	4453      	add	r3, sl
 8009bbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009bc2:	f7fe f8f1 	bl	8007da8 <__hi0bits>
 8009bc6:	f1c6 0620 	rsb	r6, r6, #32
 8009bca:	42b0      	cmp	r0, r6
 8009bcc:	dbe7      	blt.n	8009b9e <__gethex+0x3ea>
 8009bce:	e7f0      	b.n	8009bb2 <__gethex+0x3fe>
 8009bd0:	0800aa6b 	.word	0x0800aa6b

08009bd4 <L_shift>:
 8009bd4:	f1c2 0208 	rsb	r2, r2, #8
 8009bd8:	0092      	lsls	r2, r2, #2
 8009bda:	b570      	push	{r4, r5, r6, lr}
 8009bdc:	f1c2 0620 	rsb	r6, r2, #32
 8009be0:	6843      	ldr	r3, [r0, #4]
 8009be2:	6804      	ldr	r4, [r0, #0]
 8009be4:	fa03 f506 	lsl.w	r5, r3, r6
 8009be8:	432c      	orrs	r4, r5
 8009bea:	40d3      	lsrs	r3, r2
 8009bec:	6004      	str	r4, [r0, #0]
 8009bee:	f840 3f04 	str.w	r3, [r0, #4]!
 8009bf2:	4288      	cmp	r0, r1
 8009bf4:	d3f4      	bcc.n	8009be0 <L_shift+0xc>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__match>:
 8009bf8:	b530      	push	{r4, r5, lr}
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c02:	b914      	cbnz	r4, 8009c0a <__match+0x12>
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	2001      	movs	r0, #1
 8009c08:	bd30      	pop	{r4, r5, pc}
 8009c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009c12:	2d19      	cmp	r5, #25
 8009c14:	bf98      	it	ls
 8009c16:	3220      	addls	r2, #32
 8009c18:	42a2      	cmp	r2, r4
 8009c1a:	d0f0      	beq.n	8009bfe <__match+0x6>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	e7f3      	b.n	8009c08 <__match+0x10>

08009c20 <__hexnan>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	2500      	movs	r5, #0
 8009c26:	680b      	ldr	r3, [r1, #0]
 8009c28:	4682      	mov	sl, r0
 8009c2a:	115e      	asrs	r6, r3, #5
 8009c2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009c30:	f013 031f 	ands.w	r3, r3, #31
 8009c34:	bf18      	it	ne
 8009c36:	3604      	addne	r6, #4
 8009c38:	1f37      	subs	r7, r6, #4
 8009c3a:	4690      	mov	r8, r2
 8009c3c:	46b9      	mov	r9, r7
 8009c3e:	463c      	mov	r4, r7
 8009c40:	46ab      	mov	fp, r5
 8009c42:	b087      	sub	sp, #28
 8009c44:	6801      	ldr	r1, [r0, #0]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	f846 5c04 	str.w	r5, [r6, #-4]
 8009c4c:	9502      	str	r5, [sp, #8]
 8009c4e:	784a      	ldrb	r2, [r1, #1]
 8009c50:	1c4b      	adds	r3, r1, #1
 8009c52:	9303      	str	r3, [sp, #12]
 8009c54:	b342      	cbz	r2, 8009ca8 <__hexnan+0x88>
 8009c56:	4610      	mov	r0, r2
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	9204      	str	r2, [sp, #16]
 8009c5c:	f7ff fd95 	bl	800978a <__hexdig_fun>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	d151      	bne.n	8009d08 <__hexnan+0xe8>
 8009c64:	9a04      	ldr	r2, [sp, #16]
 8009c66:	9905      	ldr	r1, [sp, #20]
 8009c68:	2a20      	cmp	r2, #32
 8009c6a:	d818      	bhi.n	8009c9e <__hexnan+0x7e>
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	459b      	cmp	fp, r3
 8009c70:	dd13      	ble.n	8009c9a <__hexnan+0x7a>
 8009c72:	454c      	cmp	r4, r9
 8009c74:	d206      	bcs.n	8009c84 <__hexnan+0x64>
 8009c76:	2d07      	cmp	r5, #7
 8009c78:	dc04      	bgt.n	8009c84 <__hexnan+0x64>
 8009c7a:	462a      	mov	r2, r5
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f7ff ffa8 	bl	8009bd4 <L_shift>
 8009c84:	4544      	cmp	r4, r8
 8009c86:	d952      	bls.n	8009d2e <__hexnan+0x10e>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	f1a4 0904 	sub.w	r9, r4, #4
 8009c8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c92:	461d      	mov	r5, r3
 8009c94:	464c      	mov	r4, r9
 8009c96:	f8cd b008 	str.w	fp, [sp, #8]
 8009c9a:	9903      	ldr	r1, [sp, #12]
 8009c9c:	e7d7      	b.n	8009c4e <__hexnan+0x2e>
 8009c9e:	2a29      	cmp	r2, #41	@ 0x29
 8009ca0:	d157      	bne.n	8009d52 <__hexnan+0x132>
 8009ca2:	3102      	adds	r1, #2
 8009ca4:	f8ca 1000 	str.w	r1, [sl]
 8009ca8:	f1bb 0f00 	cmp.w	fp, #0
 8009cac:	d051      	beq.n	8009d52 <__hexnan+0x132>
 8009cae:	454c      	cmp	r4, r9
 8009cb0:	d206      	bcs.n	8009cc0 <__hexnan+0xa0>
 8009cb2:	2d07      	cmp	r5, #7
 8009cb4:	dc04      	bgt.n	8009cc0 <__hexnan+0xa0>
 8009cb6:	462a      	mov	r2, r5
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7ff ff8a 	bl	8009bd4 <L_shift>
 8009cc0:	4544      	cmp	r4, r8
 8009cc2:	d936      	bls.n	8009d32 <__hexnan+0x112>
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	f1a8 0204 	sub.w	r2, r8, #4
 8009cca:	f853 1b04 	ldr.w	r1, [r3], #4
 8009cce:	429f      	cmp	r7, r3
 8009cd0:	f842 1f04 	str.w	r1, [r2, #4]!
 8009cd4:	d2f9      	bcs.n	8009cca <__hexnan+0xaa>
 8009cd6:	1b3b      	subs	r3, r7, r4
 8009cd8:	f023 0303 	bic.w	r3, r3, #3
 8009cdc:	3304      	adds	r3, #4
 8009cde:	3401      	adds	r4, #1
 8009ce0:	3e03      	subs	r6, #3
 8009ce2:	42b4      	cmp	r4, r6
 8009ce4:	bf88      	it	hi
 8009ce6:	2304      	movhi	r3, #4
 8009ce8:	2200      	movs	r2, #0
 8009cea:	4443      	add	r3, r8
 8009cec:	f843 2b04 	str.w	r2, [r3], #4
 8009cf0:	429f      	cmp	r7, r3
 8009cf2:	d2fb      	bcs.n	8009cec <__hexnan+0xcc>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	b91b      	cbnz	r3, 8009d00 <__hexnan+0xe0>
 8009cf8:	4547      	cmp	r7, r8
 8009cfa:	d128      	bne.n	8009d4e <__hexnan+0x12e>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	2005      	movs	r0, #5
 8009d02:	b007      	add	sp, #28
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	3501      	adds	r5, #1
 8009d0a:	2d08      	cmp	r5, #8
 8009d0c:	f10b 0b01 	add.w	fp, fp, #1
 8009d10:	dd06      	ble.n	8009d20 <__hexnan+0x100>
 8009d12:	4544      	cmp	r4, r8
 8009d14:	d9c1      	bls.n	8009c9a <__hexnan+0x7a>
 8009d16:	2300      	movs	r3, #0
 8009d18:	2501      	movs	r5, #1
 8009d1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d1e:	3c04      	subs	r4, #4
 8009d20:	6822      	ldr	r2, [r4, #0]
 8009d22:	f000 000f 	and.w	r0, r0, #15
 8009d26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009d2a:	6020      	str	r0, [r4, #0]
 8009d2c:	e7b5      	b.n	8009c9a <__hexnan+0x7a>
 8009d2e:	2508      	movs	r5, #8
 8009d30:	e7b3      	b.n	8009c9a <__hexnan+0x7a>
 8009d32:	9b01      	ldr	r3, [sp, #4]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d0dd      	beq.n	8009cf4 <__hexnan+0xd4>
 8009d38:	f04f 32ff 	mov.w	r2, #4294967295
 8009d3c:	f1c3 0320 	rsb	r3, r3, #32
 8009d40:	40da      	lsrs	r2, r3
 8009d42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d46:	4013      	ands	r3, r2
 8009d48:	f846 3c04 	str.w	r3, [r6, #-4]
 8009d4c:	e7d2      	b.n	8009cf4 <__hexnan+0xd4>
 8009d4e:	3f04      	subs	r7, #4
 8009d50:	e7d0      	b.n	8009cf4 <__hexnan+0xd4>
 8009d52:	2004      	movs	r0, #4
 8009d54:	e7d5      	b.n	8009d02 <__hexnan+0xe2>

08009d56 <__ascii_mbtowc>:
 8009d56:	b082      	sub	sp, #8
 8009d58:	b901      	cbnz	r1, 8009d5c <__ascii_mbtowc+0x6>
 8009d5a:	a901      	add	r1, sp, #4
 8009d5c:	b142      	cbz	r2, 8009d70 <__ascii_mbtowc+0x1a>
 8009d5e:	b14b      	cbz	r3, 8009d74 <__ascii_mbtowc+0x1e>
 8009d60:	7813      	ldrb	r3, [r2, #0]
 8009d62:	600b      	str	r3, [r1, #0]
 8009d64:	7812      	ldrb	r2, [r2, #0]
 8009d66:	1e10      	subs	r0, r2, #0
 8009d68:	bf18      	it	ne
 8009d6a:	2001      	movne	r0, #1
 8009d6c:	b002      	add	sp, #8
 8009d6e:	4770      	bx	lr
 8009d70:	4610      	mov	r0, r2
 8009d72:	e7fb      	b.n	8009d6c <__ascii_mbtowc+0x16>
 8009d74:	f06f 0001 	mvn.w	r0, #1
 8009d78:	e7f8      	b.n	8009d6c <__ascii_mbtowc+0x16>

08009d7a <_realloc_r>:
 8009d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7e:	4607      	mov	r7, r0
 8009d80:	4614      	mov	r4, r2
 8009d82:	460d      	mov	r5, r1
 8009d84:	b921      	cbnz	r1, 8009d90 <_realloc_r+0x16>
 8009d86:	4611      	mov	r1, r2
 8009d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8c:	f7fd be8e 	b.w	8007aac <_malloc_r>
 8009d90:	b92a      	cbnz	r2, 8009d9e <_realloc_r+0x24>
 8009d92:	f7fd fe19 	bl	80079c8 <_free_r>
 8009d96:	4625      	mov	r5, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	f000 f840 	bl	8009e22 <_malloc_usable_size_r>
 8009da2:	4284      	cmp	r4, r0
 8009da4:	4606      	mov	r6, r0
 8009da6:	d802      	bhi.n	8009dae <_realloc_r+0x34>
 8009da8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009dac:	d8f4      	bhi.n	8009d98 <_realloc_r+0x1e>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7fd fe7b 	bl	8007aac <_malloc_r>
 8009db6:	4680      	mov	r8, r0
 8009db8:	b908      	cbnz	r0, 8009dbe <_realloc_r+0x44>
 8009dba:	4645      	mov	r5, r8
 8009dbc:	e7ec      	b.n	8009d98 <_realloc_r+0x1e>
 8009dbe:	42b4      	cmp	r4, r6
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	bf28      	it	cs
 8009dc6:	4632      	movcs	r2, r6
 8009dc8:	f7fc ff8d 	bl	8006ce6 <memcpy>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7fd fdfa 	bl	80079c8 <_free_r>
 8009dd4:	e7f1      	b.n	8009dba <_realloc_r+0x40>

08009dd6 <__ascii_wctomb>:
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	b141      	cbz	r1, 8009dee <__ascii_wctomb+0x18>
 8009ddc:	2aff      	cmp	r2, #255	@ 0xff
 8009dde:	d904      	bls.n	8009dea <__ascii_wctomb+0x14>
 8009de0:	228a      	movs	r2, #138	@ 0x8a
 8009de2:	f04f 30ff 	mov.w	r0, #4294967295
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	4770      	bx	lr
 8009dea:	2001      	movs	r0, #1
 8009dec:	700a      	strb	r2, [r1, #0]
 8009dee:	4770      	bx	lr

08009df0 <fiprintf>:
 8009df0:	b40e      	push	{r1, r2, r3}
 8009df2:	b503      	push	{r0, r1, lr}
 8009df4:	4601      	mov	r1, r0
 8009df6:	ab03      	add	r3, sp, #12
 8009df8:	4805      	ldr	r0, [pc, #20]	@ (8009e10 <fiprintf+0x20>)
 8009dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfe:	6800      	ldr	r0, [r0, #0]
 8009e00:	9301      	str	r3, [sp, #4]
 8009e02:	f000 f83d 	bl	8009e80 <_vfiprintf_r>
 8009e06:	b002      	add	sp, #8
 8009e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e0c:	b003      	add	sp, #12
 8009e0e:	4770      	bx	lr
 8009e10:	20000020 	.word	0x20000020

08009e14 <abort>:
 8009e14:	2006      	movs	r0, #6
 8009e16:	b508      	push	{r3, lr}
 8009e18:	f000 fa06 	bl	800a228 <raise>
 8009e1c:	2001      	movs	r0, #1
 8009e1e:	f7f8 f810 	bl	8001e42 <_exit>

08009e22 <_malloc_usable_size_r>:
 8009e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e26:	1f18      	subs	r0, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	bfbc      	itt	lt
 8009e2c:	580b      	ldrlt	r3, [r1, r0]
 8009e2e:	18c0      	addlt	r0, r0, r3
 8009e30:	4770      	bx	lr

08009e32 <__sfputc_r>:
 8009e32:	6893      	ldr	r3, [r2, #8]
 8009e34:	b410      	push	{r4}
 8009e36:	3b01      	subs	r3, #1
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	6093      	str	r3, [r2, #8]
 8009e3c:	da07      	bge.n	8009e4e <__sfputc_r+0x1c>
 8009e3e:	6994      	ldr	r4, [r2, #24]
 8009e40:	42a3      	cmp	r3, r4
 8009e42:	db01      	blt.n	8009e48 <__sfputc_r+0x16>
 8009e44:	290a      	cmp	r1, #10
 8009e46:	d102      	bne.n	8009e4e <__sfputc_r+0x1c>
 8009e48:	bc10      	pop	{r4}
 8009e4a:	f000 b931 	b.w	800a0b0 <__swbuf_r>
 8009e4e:	6813      	ldr	r3, [r2, #0]
 8009e50:	1c58      	adds	r0, r3, #1
 8009e52:	6010      	str	r0, [r2, #0]
 8009e54:	7019      	strb	r1, [r3, #0]
 8009e56:	4608      	mov	r0, r1
 8009e58:	bc10      	pop	{r4}
 8009e5a:	4770      	bx	lr

08009e5c <__sfputs_r>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	4614      	mov	r4, r2
 8009e64:	18d5      	adds	r5, r2, r3
 8009e66:	42ac      	cmp	r4, r5
 8009e68:	d101      	bne.n	8009e6e <__sfputs_r+0x12>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e007      	b.n	8009e7e <__sfputs_r+0x22>
 8009e6e:	463a      	mov	r2, r7
 8009e70:	4630      	mov	r0, r6
 8009e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e76:	f7ff ffdc 	bl	8009e32 <__sfputc_r>
 8009e7a:	1c43      	adds	r3, r0, #1
 8009e7c:	d1f3      	bne.n	8009e66 <__sfputs_r+0xa>
 8009e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e80 <_vfiprintf_r>:
 8009e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	460d      	mov	r5, r1
 8009e86:	4614      	mov	r4, r2
 8009e88:	4698      	mov	r8, r3
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	b09d      	sub	sp, #116	@ 0x74
 8009e8e:	b118      	cbz	r0, 8009e98 <_vfiprintf_r+0x18>
 8009e90:	6a03      	ldr	r3, [r0, #32]
 8009e92:	b90b      	cbnz	r3, 8009e98 <_vfiprintf_r+0x18>
 8009e94:	f7fc fdfe 	bl	8006a94 <__sinit>
 8009e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e9a:	07d9      	lsls	r1, r3, #31
 8009e9c:	d405      	bmi.n	8009eaa <_vfiprintf_r+0x2a>
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	059a      	lsls	r2, r3, #22
 8009ea2:	d402      	bmi.n	8009eaa <_vfiprintf_r+0x2a>
 8009ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ea6:	f7fc ff0e 	bl	8006cc6 <__retarget_lock_acquire_recursive>
 8009eaa:	89ab      	ldrh	r3, [r5, #12]
 8009eac:	071b      	lsls	r3, r3, #28
 8009eae:	d501      	bpl.n	8009eb4 <_vfiprintf_r+0x34>
 8009eb0:	692b      	ldr	r3, [r5, #16]
 8009eb2:	b99b      	cbnz	r3, 8009edc <_vfiprintf_r+0x5c>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f938 	bl	800a12c <__swsetup_r>
 8009ebc:	b170      	cbz	r0, 8009edc <_vfiprintf_r+0x5c>
 8009ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ec0:	07dc      	lsls	r4, r3, #31
 8009ec2:	d504      	bpl.n	8009ece <_vfiprintf_r+0x4e>
 8009ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec8:	b01d      	add	sp, #116	@ 0x74
 8009eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	0598      	lsls	r0, r3, #22
 8009ed2:	d4f7      	bmi.n	8009ec4 <_vfiprintf_r+0x44>
 8009ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ed6:	f7fc fef7 	bl	8006cc8 <__retarget_lock_release_recursive>
 8009eda:	e7f3      	b.n	8009ec4 <_vfiprintf_r+0x44>
 8009edc:	2300      	movs	r3, #0
 8009ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee0:	2320      	movs	r3, #32
 8009ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ee6:	2330      	movs	r3, #48	@ 0x30
 8009ee8:	f04f 0901 	mov.w	r9, #1
 8009eec:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a09c <_vfiprintf_r+0x21c>
 8009ef4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ef8:	4623      	mov	r3, r4
 8009efa:	469a      	mov	sl, r3
 8009efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f00:	b10a      	cbz	r2, 8009f06 <_vfiprintf_r+0x86>
 8009f02:	2a25      	cmp	r2, #37	@ 0x25
 8009f04:	d1f9      	bne.n	8009efa <_vfiprintf_r+0x7a>
 8009f06:	ebba 0b04 	subs.w	fp, sl, r4
 8009f0a:	d00b      	beq.n	8009f24 <_vfiprintf_r+0xa4>
 8009f0c:	465b      	mov	r3, fp
 8009f0e:	4622      	mov	r2, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	4630      	mov	r0, r6
 8009f14:	f7ff ffa2 	bl	8009e5c <__sfputs_r>
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f000 80a7 	beq.w	800a06c <_vfiprintf_r+0x1ec>
 8009f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f20:	445a      	add	r2, fp
 8009f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f24:	f89a 3000 	ldrb.w	r3, [sl]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 809f 	beq.w	800a06c <_vfiprintf_r+0x1ec>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f04f 32ff 	mov.w	r2, #4294967295
 8009f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f38:	f10a 0a01 	add.w	sl, sl, #1
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	9307      	str	r3, [sp, #28]
 8009f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f46:	4654      	mov	r4, sl
 8009f48:	2205      	movs	r2, #5
 8009f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4e:	4853      	ldr	r0, [pc, #332]	@ (800a09c <_vfiprintf_r+0x21c>)
 8009f50:	f7fc febb 	bl	8006cca <memchr>
 8009f54:	9a04      	ldr	r2, [sp, #16]
 8009f56:	b9d8      	cbnz	r0, 8009f90 <_vfiprintf_r+0x110>
 8009f58:	06d1      	lsls	r1, r2, #27
 8009f5a:	bf44      	itt	mi
 8009f5c:	2320      	movmi	r3, #32
 8009f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f62:	0713      	lsls	r3, r2, #28
 8009f64:	bf44      	itt	mi
 8009f66:	232b      	movmi	r3, #43	@ 0x2b
 8009f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f72:	d015      	beq.n	8009fa0 <_vfiprintf_r+0x120>
 8009f74:	4654      	mov	r4, sl
 8009f76:	2000      	movs	r0, #0
 8009f78:	f04f 0c0a 	mov.w	ip, #10
 8009f7c:	9a07      	ldr	r2, [sp, #28]
 8009f7e:	4621      	mov	r1, r4
 8009f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f84:	3b30      	subs	r3, #48	@ 0x30
 8009f86:	2b09      	cmp	r3, #9
 8009f88:	d94b      	bls.n	800a022 <_vfiprintf_r+0x1a2>
 8009f8a:	b1b0      	cbz	r0, 8009fba <_vfiprintf_r+0x13a>
 8009f8c:	9207      	str	r2, [sp, #28]
 8009f8e:	e014      	b.n	8009fba <_vfiprintf_r+0x13a>
 8009f90:	eba0 0308 	sub.w	r3, r0, r8
 8009f94:	fa09 f303 	lsl.w	r3, r9, r3
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	46a2      	mov	sl, r4
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	e7d2      	b.n	8009f46 <_vfiprintf_r+0xc6>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	1d19      	adds	r1, r3, #4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	9103      	str	r1, [sp, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bfbb      	ittet	lt
 8009fac:	425b      	neglt	r3, r3
 8009fae:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb2:	9307      	strge	r3, [sp, #28]
 8009fb4:	9307      	strlt	r3, [sp, #28]
 8009fb6:	bfb8      	it	lt
 8009fb8:	9204      	strlt	r2, [sp, #16]
 8009fba:	7823      	ldrb	r3, [r4, #0]
 8009fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fbe:	d10a      	bne.n	8009fd6 <_vfiprintf_r+0x156>
 8009fc0:	7863      	ldrb	r3, [r4, #1]
 8009fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fc4:	d132      	bne.n	800a02c <_vfiprintf_r+0x1ac>
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	3402      	adds	r4, #2
 8009fca:	1d1a      	adds	r2, r3, #4
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	9203      	str	r2, [sp, #12]
 8009fd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fd4:	9305      	str	r3, [sp, #20]
 8009fd6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a0a0 <_vfiprintf_r+0x220>
 8009fda:	2203      	movs	r2, #3
 8009fdc:	4650      	mov	r0, sl
 8009fde:	7821      	ldrb	r1, [r4, #0]
 8009fe0:	f7fc fe73 	bl	8006cca <memchr>
 8009fe4:	b138      	cbz	r0, 8009ff6 <_vfiprintf_r+0x176>
 8009fe6:	2240      	movs	r2, #64	@ 0x40
 8009fe8:	9b04      	ldr	r3, [sp, #16]
 8009fea:	eba0 000a 	sub.w	r0, r0, sl
 8009fee:	4082      	lsls	r2, r0
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	3401      	adds	r4, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ffa:	2206      	movs	r2, #6
 8009ffc:	4829      	ldr	r0, [pc, #164]	@ (800a0a4 <_vfiprintf_r+0x224>)
 8009ffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a002:	f7fc fe62 	bl	8006cca <memchr>
 800a006:	2800      	cmp	r0, #0
 800a008:	d03f      	beq.n	800a08a <_vfiprintf_r+0x20a>
 800a00a:	4b27      	ldr	r3, [pc, #156]	@ (800a0a8 <_vfiprintf_r+0x228>)
 800a00c:	bb1b      	cbnz	r3, 800a056 <_vfiprintf_r+0x1d6>
 800a00e:	9b03      	ldr	r3, [sp, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	f023 0307 	bic.w	r3, r3, #7
 800a016:	3308      	adds	r3, #8
 800a018:	9303      	str	r3, [sp, #12]
 800a01a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a01c:	443b      	add	r3, r7
 800a01e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a020:	e76a      	b.n	8009ef8 <_vfiprintf_r+0x78>
 800a022:	460c      	mov	r4, r1
 800a024:	2001      	movs	r0, #1
 800a026:	fb0c 3202 	mla	r2, ip, r2, r3
 800a02a:	e7a8      	b.n	8009f7e <_vfiprintf_r+0xfe>
 800a02c:	2300      	movs	r3, #0
 800a02e:	f04f 0c0a 	mov.w	ip, #10
 800a032:	4619      	mov	r1, r3
 800a034:	3401      	adds	r4, #1
 800a036:	9305      	str	r3, [sp, #20]
 800a038:	4620      	mov	r0, r4
 800a03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a03e:	3a30      	subs	r2, #48	@ 0x30
 800a040:	2a09      	cmp	r2, #9
 800a042:	d903      	bls.n	800a04c <_vfiprintf_r+0x1cc>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d0c6      	beq.n	8009fd6 <_vfiprintf_r+0x156>
 800a048:	9105      	str	r1, [sp, #20]
 800a04a:	e7c4      	b.n	8009fd6 <_vfiprintf_r+0x156>
 800a04c:	4604      	mov	r4, r0
 800a04e:	2301      	movs	r3, #1
 800a050:	fb0c 2101 	mla	r1, ip, r1, r2
 800a054:	e7f0      	b.n	800a038 <_vfiprintf_r+0x1b8>
 800a056:	ab03      	add	r3, sp, #12
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	462a      	mov	r2, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	4b13      	ldr	r3, [pc, #76]	@ (800a0ac <_vfiprintf_r+0x22c>)
 800a060:	a904      	add	r1, sp, #16
 800a062:	f7fb fec5 	bl	8005df0 <_printf_float>
 800a066:	4607      	mov	r7, r0
 800a068:	1c78      	adds	r0, r7, #1
 800a06a:	d1d6      	bne.n	800a01a <_vfiprintf_r+0x19a>
 800a06c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a06e:	07d9      	lsls	r1, r3, #31
 800a070:	d405      	bmi.n	800a07e <_vfiprintf_r+0x1fe>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	059a      	lsls	r2, r3, #22
 800a076:	d402      	bmi.n	800a07e <_vfiprintf_r+0x1fe>
 800a078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a07a:	f7fc fe25 	bl	8006cc8 <__retarget_lock_release_recursive>
 800a07e:	89ab      	ldrh	r3, [r5, #12]
 800a080:	065b      	lsls	r3, r3, #25
 800a082:	f53f af1f 	bmi.w	8009ec4 <_vfiprintf_r+0x44>
 800a086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a088:	e71e      	b.n	8009ec8 <_vfiprintf_r+0x48>
 800a08a:	ab03      	add	r3, sp, #12
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	462a      	mov	r2, r5
 800a090:	4630      	mov	r0, r6
 800a092:	4b06      	ldr	r3, [pc, #24]	@ (800a0ac <_vfiprintf_r+0x22c>)
 800a094:	a904      	add	r1, sp, #16
 800a096:	f7fc f949 	bl	800632c <_printf_i>
 800a09a:	e7e4      	b.n	800a066 <_vfiprintf_r+0x1e6>
 800a09c:	0800aad7 	.word	0x0800aad7
 800a0a0:	0800aadd 	.word	0x0800aadd
 800a0a4:	0800aae1 	.word	0x0800aae1
 800a0a8:	08005df1 	.word	0x08005df1
 800a0ac:	08009e5d 	.word	0x08009e5d

0800a0b0 <__swbuf_r>:
 800a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	4614      	mov	r4, r2
 800a0b6:	4605      	mov	r5, r0
 800a0b8:	b118      	cbz	r0, 800a0c2 <__swbuf_r+0x12>
 800a0ba:	6a03      	ldr	r3, [r0, #32]
 800a0bc:	b90b      	cbnz	r3, 800a0c2 <__swbuf_r+0x12>
 800a0be:	f7fc fce9 	bl	8006a94 <__sinit>
 800a0c2:	69a3      	ldr	r3, [r4, #24]
 800a0c4:	60a3      	str	r3, [r4, #8]
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	071a      	lsls	r2, r3, #28
 800a0ca:	d501      	bpl.n	800a0d0 <__swbuf_r+0x20>
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	b943      	cbnz	r3, 800a0e2 <__swbuf_r+0x32>
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f82a 	bl	800a12c <__swsetup_r>
 800a0d8:	b118      	cbz	r0, 800a0e2 <__swbuf_r+0x32>
 800a0da:	f04f 37ff 	mov.w	r7, #4294967295
 800a0de:	4638      	mov	r0, r7
 800a0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	6922      	ldr	r2, [r4, #16]
 800a0e6:	b2f6      	uxtb	r6, r6
 800a0e8:	1a98      	subs	r0, r3, r2
 800a0ea:	6963      	ldr	r3, [r4, #20]
 800a0ec:	4637      	mov	r7, r6
 800a0ee:	4283      	cmp	r3, r0
 800a0f0:	dc05      	bgt.n	800a0fe <__swbuf_r+0x4e>
 800a0f2:	4621      	mov	r1, r4
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f7ff fa59 	bl	80095ac <_fflush_r>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d1ed      	bne.n	800a0da <__swbuf_r+0x2a>
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	3b01      	subs	r3, #1
 800a102:	60a3      	str	r3, [r4, #8]
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	1c5a      	adds	r2, r3, #1
 800a108:	6022      	str	r2, [r4, #0]
 800a10a:	701e      	strb	r6, [r3, #0]
 800a10c:	6962      	ldr	r2, [r4, #20]
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	429a      	cmp	r2, r3
 800a112:	d004      	beq.n	800a11e <__swbuf_r+0x6e>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	07db      	lsls	r3, r3, #31
 800a118:	d5e1      	bpl.n	800a0de <__swbuf_r+0x2e>
 800a11a:	2e0a      	cmp	r6, #10
 800a11c:	d1df      	bne.n	800a0de <__swbuf_r+0x2e>
 800a11e:	4621      	mov	r1, r4
 800a120:	4628      	mov	r0, r5
 800a122:	f7ff fa43 	bl	80095ac <_fflush_r>
 800a126:	2800      	cmp	r0, #0
 800a128:	d0d9      	beq.n	800a0de <__swbuf_r+0x2e>
 800a12a:	e7d6      	b.n	800a0da <__swbuf_r+0x2a>

0800a12c <__swsetup_r>:
 800a12c:	b538      	push	{r3, r4, r5, lr}
 800a12e:	4b29      	ldr	r3, [pc, #164]	@ (800a1d4 <__swsetup_r+0xa8>)
 800a130:	4605      	mov	r5, r0
 800a132:	6818      	ldr	r0, [r3, #0]
 800a134:	460c      	mov	r4, r1
 800a136:	b118      	cbz	r0, 800a140 <__swsetup_r+0x14>
 800a138:	6a03      	ldr	r3, [r0, #32]
 800a13a:	b90b      	cbnz	r3, 800a140 <__swsetup_r+0x14>
 800a13c:	f7fc fcaa 	bl	8006a94 <__sinit>
 800a140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a144:	0719      	lsls	r1, r3, #28
 800a146:	d422      	bmi.n	800a18e <__swsetup_r+0x62>
 800a148:	06da      	lsls	r2, r3, #27
 800a14a:	d407      	bmi.n	800a15c <__swsetup_r+0x30>
 800a14c:	2209      	movs	r2, #9
 800a14e:	602a      	str	r2, [r5, #0]
 800a150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	e033      	b.n	800a1c4 <__swsetup_r+0x98>
 800a15c:	0758      	lsls	r0, r3, #29
 800a15e:	d512      	bpl.n	800a186 <__swsetup_r+0x5a>
 800a160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a162:	b141      	cbz	r1, 800a176 <__swsetup_r+0x4a>
 800a164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a168:	4299      	cmp	r1, r3
 800a16a:	d002      	beq.n	800a172 <__swsetup_r+0x46>
 800a16c:	4628      	mov	r0, r5
 800a16e:	f7fd fc2b 	bl	80079c8 <_free_r>
 800a172:	2300      	movs	r3, #0
 800a174:	6363      	str	r3, [r4, #52]	@ 0x34
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a17c:	81a3      	strh	r3, [r4, #12]
 800a17e:	2300      	movs	r3, #0
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	89a3      	ldrh	r3, [r4, #12]
 800a188:	f043 0308 	orr.w	r3, r3, #8
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	b94b      	cbnz	r3, 800a1a6 <__swsetup_r+0x7a>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a19c:	d003      	beq.n	800a1a6 <__swsetup_r+0x7a>
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f000 f882 	bl	800a2aa <__smakebuf_r>
 800a1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1aa:	f013 0201 	ands.w	r2, r3, #1
 800a1ae:	d00a      	beq.n	800a1c6 <__swsetup_r+0x9a>
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	60a2      	str	r2, [r4, #8]
 800a1b4:	6962      	ldr	r2, [r4, #20]
 800a1b6:	4252      	negs	r2, r2
 800a1b8:	61a2      	str	r2, [r4, #24]
 800a1ba:	6922      	ldr	r2, [r4, #16]
 800a1bc:	b942      	cbnz	r2, 800a1d0 <__swsetup_r+0xa4>
 800a1be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a1c2:	d1c5      	bne.n	800a150 <__swsetup_r+0x24>
 800a1c4:	bd38      	pop	{r3, r4, r5, pc}
 800a1c6:	0799      	lsls	r1, r3, #30
 800a1c8:	bf58      	it	pl
 800a1ca:	6962      	ldrpl	r2, [r4, #20]
 800a1cc:	60a2      	str	r2, [r4, #8]
 800a1ce:	e7f4      	b.n	800a1ba <__swsetup_r+0x8e>
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	e7f7      	b.n	800a1c4 <__swsetup_r+0x98>
 800a1d4:	20000020 	.word	0x20000020

0800a1d8 <_raise_r>:
 800a1d8:	291f      	cmp	r1, #31
 800a1da:	b538      	push	{r3, r4, r5, lr}
 800a1dc:	4605      	mov	r5, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	d904      	bls.n	800a1ec <_raise_r+0x14>
 800a1e2:	2316      	movs	r3, #22
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1ee:	b112      	cbz	r2, 800a1f6 <_raise_r+0x1e>
 800a1f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1f4:	b94b      	cbnz	r3, 800a20a <_raise_r+0x32>
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f830 	bl	800a25c <_getpid_r>
 800a1fc:	4622      	mov	r2, r4
 800a1fe:	4601      	mov	r1, r0
 800a200:	4628      	mov	r0, r5
 800a202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a206:	f000 b817 	b.w	800a238 <_kill_r>
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d00a      	beq.n	800a224 <_raise_r+0x4c>
 800a20e:	1c59      	adds	r1, r3, #1
 800a210:	d103      	bne.n	800a21a <_raise_r+0x42>
 800a212:	2316      	movs	r3, #22
 800a214:	6003      	str	r3, [r0, #0]
 800a216:	2001      	movs	r0, #1
 800a218:	e7e7      	b.n	800a1ea <_raise_r+0x12>
 800a21a:	2100      	movs	r1, #0
 800a21c:	4620      	mov	r0, r4
 800a21e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a222:	4798      	blx	r3
 800a224:	2000      	movs	r0, #0
 800a226:	e7e0      	b.n	800a1ea <_raise_r+0x12>

0800a228 <raise>:
 800a228:	4b02      	ldr	r3, [pc, #8]	@ (800a234 <raise+0xc>)
 800a22a:	4601      	mov	r1, r0
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f7ff bfd3 	b.w	800a1d8 <_raise_r>
 800a232:	bf00      	nop
 800a234:	20000020 	.word	0x20000020

0800a238 <_kill_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	2300      	movs	r3, #0
 800a23c:	4d06      	ldr	r5, [pc, #24]	@ (800a258 <_kill_r+0x20>)
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	f7f7 fdec 	bl	8001e22 <_kill>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d102      	bne.n	800a254 <_kill_r+0x1c>
 800a24e:	682b      	ldr	r3, [r5, #0]
 800a250:	b103      	cbz	r3, 800a254 <_kill_r+0x1c>
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	20000868 	.word	0x20000868

0800a25c <_getpid_r>:
 800a25c:	f7f7 bdda 	b.w	8001e14 <_getpid>

0800a260 <__swhatbuf_r>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a268:	4615      	mov	r5, r2
 800a26a:	2900      	cmp	r1, #0
 800a26c:	461e      	mov	r6, r3
 800a26e:	b096      	sub	sp, #88	@ 0x58
 800a270:	da0c      	bge.n	800a28c <__swhatbuf_r+0x2c>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	2100      	movs	r1, #0
 800a276:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a27a:	bf14      	ite	ne
 800a27c:	2340      	movne	r3, #64	@ 0x40
 800a27e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a282:	2000      	movs	r0, #0
 800a284:	6031      	str	r1, [r6, #0]
 800a286:	602b      	str	r3, [r5, #0]
 800a288:	b016      	add	sp, #88	@ 0x58
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	466a      	mov	r2, sp
 800a28e:	f000 f849 	bl	800a324 <_fstat_r>
 800a292:	2800      	cmp	r0, #0
 800a294:	dbed      	blt.n	800a272 <__swhatbuf_r+0x12>
 800a296:	9901      	ldr	r1, [sp, #4]
 800a298:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a29c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2a0:	4259      	negs	r1, r3
 800a2a2:	4159      	adcs	r1, r3
 800a2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a8:	e7eb      	b.n	800a282 <__swhatbuf_r+0x22>

0800a2aa <__smakebuf_r>:
 800a2aa:	898b      	ldrh	r3, [r1, #12]
 800a2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2ae:	079d      	lsls	r5, r3, #30
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	d507      	bpl.n	800a2c6 <__smakebuf_r+0x1c>
 800a2b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2ba:	6023      	str	r3, [r4, #0]
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	2301      	movs	r3, #1
 800a2c0:	6163      	str	r3, [r4, #20]
 800a2c2:	b003      	add	sp, #12
 800a2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	ab01      	add	r3, sp, #4
 800a2ca:	f7ff ffc9 	bl	800a260 <__swhatbuf_r>
 800a2ce:	9f00      	ldr	r7, [sp, #0]
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	4630      	mov	r0, r6
 800a2d6:	f7fd fbe9 	bl	8007aac <_malloc_r>
 800a2da:	b948      	cbnz	r0, 800a2f0 <__smakebuf_r+0x46>
 800a2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e0:	059a      	lsls	r2, r3, #22
 800a2e2:	d4ee      	bmi.n	800a2c2 <__smakebuf_r+0x18>
 800a2e4:	f023 0303 	bic.w	r3, r3, #3
 800a2e8:	f043 0302 	orr.w	r3, r3, #2
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	e7e2      	b.n	800a2b6 <__smakebuf_r+0xc>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a2f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	9b01      	ldr	r3, [sp, #4]
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	b15b      	cbz	r3, 800a31a <__smakebuf_r+0x70>
 800a302:	4630      	mov	r0, r6
 800a304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a308:	f000 f81e 	bl	800a348 <_isatty_r>
 800a30c:	b128      	cbz	r0, 800a31a <__smakebuf_r+0x70>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	f043 0301 	orr.w	r3, r3, #1
 800a318:	81a3      	strh	r3, [r4, #12]
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	431d      	orrs	r5, r3
 800a31e:	81a5      	strh	r5, [r4, #12]
 800a320:	e7cf      	b.n	800a2c2 <__smakebuf_r+0x18>
	...

0800a324 <_fstat_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	2300      	movs	r3, #0
 800a328:	4d06      	ldr	r5, [pc, #24]	@ (800a344 <_fstat_r+0x20>)
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	4611      	mov	r1, r2
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	f7f7 fdd5 	bl	8001ee0 <_fstat>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d102      	bne.n	800a340 <_fstat_r+0x1c>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	b103      	cbz	r3, 800a340 <_fstat_r+0x1c>
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	bd38      	pop	{r3, r4, r5, pc}
 800a342:	bf00      	nop
 800a344:	20000868 	.word	0x20000868

0800a348 <_isatty_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	2300      	movs	r3, #0
 800a34c:	4d05      	ldr	r5, [pc, #20]	@ (800a364 <_isatty_r+0x1c>)
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	602b      	str	r3, [r5, #0]
 800a354:	f7f7 fdd3 	bl	8001efe <_isatty>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d102      	bne.n	800a362 <_isatty_r+0x1a>
 800a35c:	682b      	ldr	r3, [r5, #0]
 800a35e:	b103      	cbz	r3, 800a362 <_isatty_r+0x1a>
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	bd38      	pop	{r3, r4, r5, pc}
 800a364:	20000868 	.word	0x20000868

0800a368 <_init>:
 800a368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36a:	bf00      	nop
 800a36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36e:	bc08      	pop	{r3}
 800a370:	469e      	mov	lr, r3
 800a372:	4770      	bx	lr

0800a374 <_fini>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr
