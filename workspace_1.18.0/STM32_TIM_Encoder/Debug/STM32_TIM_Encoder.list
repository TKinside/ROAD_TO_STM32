
STM32_TIM_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004094  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004810  08004810  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004810  08004810  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004818  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2000005c  08004874  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08004874  00006734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf68  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202e  00000000  00000000  00011fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  00014020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001850b  00000000  00000000  00014da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000108cb  00000000  00000000  0002d2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008b373  00000000  00000000  0003db76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000c8ee9  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000a86  00000000  00000000  000c8f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d30  00000000  00000000  000c99b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cd6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004188 	.word	0x08004188

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004188 	.word	0x08004188

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b1a      	ldr	r3, [pc, #104]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a19      	ldr	r2, [pc, #100]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b17      	ldr	r3, [pc, #92]	@ (80001cc <MX_GPIO_Init+0x80>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b14      	ldr	r3, [pc, #80]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a13      	ldr	r2, [pc, #76]	@ (80001cc <MX_GPIO_Init+0x80>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b11      	ldr	r3, [pc, #68]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b0e      	ldr	r3, [pc, #56]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0d      	ldr	r2, [pc, #52]	@ (80001cc <MX_GPIO_Init+0x80>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b0b      	ldr	r3, [pc, #44]	@ (80001cc <MX_GPIO_Init+0x80>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SWITCH_LIGHT_COLOR_Pin */
  GPIO_InitStruct.Pin = SWITCH_LIGHT_COLOR_Pin;
 80001a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80001ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001ae:	2300      	movs	r3, #0
 80001b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_LIGHT_COLOR_GPIO_Port, &GPIO_InitStruct);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4619      	mov	r1, r3
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <MX_GPIO_Init+0x84>)
 80001be:	f001 f93f 	bl	8001440 <HAL_GPIO_Init>

}
 80001c2:	bf00      	nop
 80001c4:	3720      	adds	r7, #32
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40021000 	.word	0x40021000
 80001d0:	40010c00 	.word	0x40010c00

080001d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001d8:	4b12      	ldr	r3, [pc, #72]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001da:	4a13      	ldr	r2, [pc, #76]	@ (8000228 <MX_I2C1_Init+0x54>)
 80001dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80001de:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001e0:	4a12      	ldr	r2, [pc, #72]	@ (800022c <MX_I2C1_Init+0x58>)
 80001e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <MX_I2C1_Init+0x50>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001fe:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <MX_I2C1_Init+0x50>)
 8000200:	2200      	movs	r2, #0
 8000202:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000204:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <MX_I2C1_Init+0x50>)
 8000206:	2200      	movs	r2, #0
 8000208:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800020a:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <MX_I2C1_Init+0x50>)
 800020c:	2200      	movs	r2, #0
 800020e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <MX_I2C1_Init+0x50>)
 8000212:	f001 fab1 	bl	8001778 <HAL_I2C_Init>
 8000216:	4603      	mov	r3, r0
 8000218:	2b00      	cmp	r3, #0
 800021a:	d001      	beq.n	8000220 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800021c:	f000 f94d 	bl	80004ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	20000078 	.word	0x20000078
 8000228:	40005400 	.word	0x40005400
 800022c:	00061a80 	.word	0x00061a80

08000230 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000238:	f107 0310 	add.w	r3, r7, #16
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
 8000244:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a15      	ldr	r2, [pc, #84]	@ (80002a0 <HAL_I2C_MspInit+0x70>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d123      	bne.n	8000298 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000268:	23c0      	movs	r3, #192	@ 0xc0
 800026a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800026c:	2312      	movs	r3, #18
 800026e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000270:	2303      	movs	r3, #3
 8000272:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000274:	f107 0310 	add.w	r3, r7, #16
 8000278:	4619      	mov	r1, r3
 800027a:	480b      	ldr	r0, [pc, #44]	@ (80002a8 <HAL_I2C_MspInit+0x78>)
 800027c:	f001 f8e0 	bl	8001440 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000280:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4a07      	ldr	r2, [pc, #28]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 8000286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800028a:	61d3      	str	r3, [r2, #28]
 800028c:	4b05      	ldr	r3, [pc, #20]	@ (80002a4 <HAL_I2C_MspInit+0x74>)
 800028e:	69db      	ldr	r3, [r3, #28]
 8000290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000298:	bf00      	nop
 800029a:	3720      	adds	r7, #32
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40005400 	.word	0x40005400
 80002a4:	40021000 	.word	0x40021000
 80002a8:	40010c00 	.word	0x40010c00

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08c      	sub	sp, #48	@ 0x30
 80002b0:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
    int count=0;;
 80002b2:	2300      	movs	r3, #0
 80002b4:	623b      	str	r3, [r7, #32]
    char message[20];\

    int colorIndex=0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t lightColor[3]={TIM_CHANNEL_1,TIM_CHANNEL_2,TIM_CHANNEL_3};
 80002ba:	4a56      	ldr	r2, [pc, #344]	@ (8000414 <main+0x168>)
 80002bc:	463b      	mov	r3, r7
 80002be:	ca07      	ldmia	r2, {r0, r1, r2}
 80002c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 ff52 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f8b2 	bl	8000430 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f7ff ff3e 	bl	800014c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002d0:	f7ff ff80 	bl	80001d4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80002d4:	f000 fd98 	bl	8000e08 <MX_TIM1_Init>
  MX_TIM3_Init();
 80002d8:	f000 fdec 	bl	8000eb4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    HAL_Delay(20);
 80002dc:	2014      	movs	r0, #20
 80002de:	f000 ffa7 	bl	8001230 <HAL_Delay>
    OLED_Init();
 80002e2:	f000 f919 	bl	8000518 <OLED_Init>
    HAL_Delay(20);
 80002e6:	2014      	movs	r0, #20
 80002e8:	f000 ffa2 	bl	8001230 <HAL_Delay>
    OLED_Startup();
 80002ec:	f000 fcc9 	bl	8000c82 <OLED_Startup>

    HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80002f0:	213c      	movs	r1, #60	@ 0x3c
 80002f2:	4849      	ldr	r0, [pc, #292]	@ (8000418 <main+0x16c>)
 80002f4:	f002 fd72 	bl	8002ddc <HAL_TIM_Encoder_Start>
    HAL_TIM_Base_Start(&htim3);
 80002f8:	4848      	ldr	r0, [pc, #288]	@ (800041c <main+0x170>)
 80002fa:	f002 fb25 	bl	8002948 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(&htim3,lightColor[colorIndex]);
 80002fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	3328      	adds	r3, #40	@ 0x28
 8000304:	443b      	add	r3, r7
 8000306:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800030a:	4619      	mov	r1, r3
 800030c:	4843      	ldr	r0, [pc, #268]	@ (800041c <main+0x170>)
 800030e:	f002 fbbd 	bl	8002a8c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      
      //负责控制小灯明暗
      OLED_NewFrame();
 8000312:	f000 f957 	bl	80005c4 <OLED_NewFrame>
      count= __HAL_TIM_GET_COUNTER(&htim1);
 8000316:	4b40      	ldr	r3, [pc, #256]	@ (8000418 <main+0x16c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800031c:	623b      	str	r3, [r7, #32]
      sprintf(message,"counter:%d",count);
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	6a3a      	ldr	r2, [r7, #32]
 8000324:	493e      	ldr	r1, [pc, #248]	@ (8000420 <main+0x174>)
 8000326:	4618      	mov	r0, r3
 8000328:	f003 fa7e 	bl	8003828 <siprintf>
      OLED_PrintASCIIString(0,0,message,&afont16x8,OLED_COLOR_NORMAL);
 800032c:	f107 020c 	add.w	r2, r7, #12
 8000330:	2300      	movs	r3, #0
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <main+0x178>)
 8000336:	2100      	movs	r1, #0
 8000338:	2000      	movs	r0, #0
 800033a:	f000 fc7b 	bl	8000c34 <OLED_PrintASCIIString>
      //负责切换小灯颜色
      if (HAL_GPIO_ReadPin(SWITCH_LIGHT_COLOR_GPIO_Port,SWITCH_LIGHT_COLOR_Pin)==GPIO_PIN_RESET)
 800033e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000342:	4839      	ldr	r0, [pc, #228]	@ (8000428 <main+0x17c>)
 8000344:	f001 fa00 	bl	8001748 <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d133      	bne.n	80003b6 <main+0x10a>
      {
          HAL_Delay(10);
 800034e:	200a      	movs	r0, #10
 8000350:	f000 ff6e 	bl	8001230 <HAL_Delay>
          if (HAL_GPIO_ReadPin(SWITCH_LIGHT_COLOR_GPIO_Port,SWITCH_LIGHT_COLOR_Pin)==GPIO_PIN_RESET)
 8000354:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000358:	4833      	ldr	r0, [pc, #204]	@ (8000428 <main+0x17c>)
 800035a:	f001 f9f5 	bl	8001748 <HAL_GPIO_ReadPin>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d128      	bne.n	80003b6 <main+0x10a>
          {

              HAL_TIM_PWM_Stop(&htim3,lightColor[colorIndex]);
 8000364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	3328      	adds	r3, #40	@ 0x28
 800036a:	443b      	add	r3, r7
 800036c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000370:	4619      	mov	r1, r3
 8000372:	482a      	ldr	r0, [pc, #168]	@ (800041c <main+0x170>)
 8000374:	f002 fc2c 	bl	8002bd0 <HAL_TIM_PWM_Stop>
              colorIndex=(colorIndex+1)%3;
 8000378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4b2b      	ldr	r3, [pc, #172]	@ (800042c <main+0x180>)
 800037e:	fb83 3102 	smull	r3, r1, r3, r2
 8000382:	17d3      	asrs	r3, r2, #31
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	460b      	mov	r3, r1
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	440b      	add	r3, r1
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	627b      	str	r3, [r7, #36]	@ 0x24
              HAL_TIM_PWM_Start(&htim3,lightColor[colorIndex]);
 8000390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	3328      	adds	r3, #40	@ 0x28
 8000396:	443b      	add	r3, r7
 8000398:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800039c:	4619      	mov	r1, r3
 800039e:	481f      	ldr	r0, [pc, #124]	@ (800041c <main+0x170>)
 80003a0:	f002 fb74 	bl	8002a8c <HAL_TIM_PWM_Start>
              while (HAL_GPIO_ReadPin(SWITCH_LIGHT_COLOR_GPIO_Port,SWITCH_LIGHT_COLOR_Pin)==GPIO_PIN_RESET);
 80003a4:	bf00      	nop
 80003a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003aa:	481f      	ldr	r0, [pc, #124]	@ (8000428 <main+0x17c>)
 80003ac:	f001 f9cc 	bl	8001748 <HAL_GPIO_ReadPin>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f7      	beq.n	80003a6 <main+0xfa>
          }
      }
      __HAL_TIM_SET_COMPARE(&htim3,lightColor[colorIndex],count);
 80003b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	3328      	adds	r3, #40	@ 0x28
 80003bc:	443b      	add	r3, r7
 80003be:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d104      	bne.n	80003d0 <main+0x124>
 80003c6:	4b15      	ldr	r3, [pc, #84]	@ (800041c <main+0x170>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	6a3a      	ldr	r2, [r7, #32]
 80003cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ce:	e01d      	b.n	800040c <main+0x160>
 80003d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	3328      	adds	r3, #40	@ 0x28
 80003d6:	443b      	add	r3, r7
 80003d8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d104      	bne.n	80003ea <main+0x13e>
 80003e0:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <main+0x170>)
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	6a3b      	ldr	r3, [r7, #32]
 80003e6:	6393      	str	r3, [r2, #56]	@ 0x38
 80003e8:	e010      	b.n	800040c <main+0x160>
 80003ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	3328      	adds	r3, #40	@ 0x28
 80003f0:	443b      	add	r3, r7
 80003f2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80003f6:	2b08      	cmp	r3, #8
 80003f8:	d104      	bne.n	8000404 <main+0x158>
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <main+0x170>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	6a3b      	ldr	r3, [r7, #32]
 8000400:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000402:	e003      	b.n	800040c <main+0x160>
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <main+0x170>)
 8000406:	681a      	ldr	r2, [r3, #0]
 8000408:	6a3b      	ldr	r3, [r7, #32]
 800040a:	6413      	str	r3, [r2, #64]	@ 0x40

      OLED_ShowFrame();
 800040c:	f000 f8e6 	bl	80005dc <OLED_ShowFrame>
      OLED_NewFrame();
 8000410:	e77f      	b.n	8000312 <main+0x66>
 8000412:	bf00      	nop
 8000414:	080041ac 	.word	0x080041ac
 8000418:	20000558 	.word	0x20000558
 800041c:	200005a0 	.word	0x200005a0
 8000420:	080041a0 	.word	0x080041a0
 8000424:	080047a8 	.word	0x080047a8
 8000428:	40010c00 	.word	0x40010c00
 800042c:	55555556 	.word	0x55555556

08000430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b090      	sub	sp, #64	@ 0x40
 8000434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	2228      	movs	r2, #40	@ 0x28
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f003 fa14 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000456:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800045a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000464:	2302      	movs	r3, #2
 8000466:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000468:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800046c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800046e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000474:	f107 0318 	add.w	r3, r7, #24
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fe19 	bl	80020b0 <HAL_RCC_OscConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000484:	f000 f819 	bl	80004ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000488:	230f      	movs	r3, #15
 800048a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048c:	2302      	movs	r3, #2
 800048e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2102      	movs	r1, #2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 f886 	bl	80025b4 <HAL_RCC_ClockConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ae:	f000 f804 	bl	80004ba <Error_Handler>
  }
}
 80004b2:	bf00      	nop
 80004b4:	3740      	adds	r7, #64	@ 0x40
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004be:	b672      	cpsid	i
}
 80004c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c2:	bf00      	nop
 80004c4:	e7fd      	b.n	80004c2 <Error_Handler+0x8>
	...

080004c8 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	b29b      	uxth	r3, r3
 80004d8:	f04f 32ff 	mov.w	r2, #4294967295
 80004dc:	9200      	str	r2, [sp, #0]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	217a      	movs	r1, #122	@ 0x7a
 80004e2:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <OLED_Send+0x28>)
 80004e4:	f001 fa8c 	bl	8001a00 <HAL_I2C_Master_Transmit>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000078 	.word	0x20000078

080004f4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80004fe:	4a05      	ldr	r2, [pc, #20]	@ (8000514 <OLED_SendCmd+0x20>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000504:	2102      	movs	r1, #2
 8000506:	4803      	ldr	r0, [pc, #12]	@ (8000514 <OLED_SendCmd+0x20>)
 8000508:	f7ff ffde 	bl	80004c8 <OLED_Send>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	200004cc 	.word	0x200004cc

08000518 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 800051c:	20ae      	movs	r0, #174	@ 0xae
 800051e:	f7ff ffe9 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ffe6 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8000528:	2010      	movs	r0, #16
 800052a:	f7ff ffe3 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 800052e:	2040      	movs	r0, #64	@ 0x40
 8000530:	f7ff ffe0 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 8000534:	20b0      	movs	r0, #176	@ 0xb0
 8000536:	f7ff ffdd 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 800053a:	2081      	movs	r0, #129	@ 0x81
 800053c:	f7ff ffda 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8000540:	20cf      	movs	r0, #207	@ 0xcf
 8000542:	f7ff ffd7 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8000546:	20a1      	movs	r0, #161	@ 0xa1
 8000548:	f7ff ffd4 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 800054c:	20a6      	movs	r0, #166	@ 0xa6
 800054e:	f7ff ffd1 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8000552:	20a8      	movs	r0, #168	@ 0xa8
 8000554:	f7ff ffce 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8000558:	203f      	movs	r0, #63	@ 0x3f
 800055a:	f7ff ffcb 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 800055e:	20ad      	movs	r0, #173	@ 0xad
 8000560:	f7ff ffc8 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8000564:	208b      	movs	r0, #139	@ 0x8b
 8000566:	f7ff ffc5 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 800056a:	2033      	movs	r0, #51	@ 0x33
 800056c:	f7ff ffc2 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000570:	20c8      	movs	r0, #200	@ 0xc8
 8000572:	f7ff ffbf 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8000576:	20d3      	movs	r0, #211	@ 0xd3
 8000578:	f7ff ffbc 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 800057c:	2000      	movs	r0, #0
 800057e:	f7ff ffb9 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8000582:	20d5      	movs	r0, #213	@ 0xd5
 8000584:	f7ff ffb6 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000588:	20c0      	movs	r0, #192	@ 0xc0
 800058a:	f7ff ffb3 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 800058e:	20d9      	movs	r0, #217	@ 0xd9
 8000590:	f7ff ffb0 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8000594:	201f      	movs	r0, #31
 8000596:	f7ff ffad 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 800059a:	20da      	movs	r0, #218	@ 0xda
 800059c:	f7ff ffaa 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 80005a0:	2012      	movs	r0, #18
 80005a2:	f7ff ffa7 	bl	80004f4 <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 80005a6:	20db      	movs	r0, #219	@ 0xdb
 80005a8:	f7ff ffa4 	bl	80004f4 <OLED_SendCmd>
  OLED_SendCmd(0x40);
 80005ac:	2040      	movs	r0, #64	@ 0x40
 80005ae:	f7ff ffa1 	bl	80004f4 <OLED_SendCmd>

  OLED_NewFrame();
 80005b2:	f000 f807 	bl	80005c4 <OLED_NewFrame>
  OLED_ShowFrame();
 80005b6:	f000 f811 	bl	80005dc <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80005ba:	20af      	movs	r0, #175	@ 0xaf
 80005bc:	f7ff ff9a 	bl	80004f4 <OLED_SendCmd>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80005c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005cc:	2100      	movs	r1, #0
 80005ce:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <OLED_NewFrame+0x14>)
 80005d0:	f003 f94c 	bl	800386c <memset>
  
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000cc 	.word	0x200000cc

080005dc <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <OLED_ShowFrame+0x5c>)
 80005e4:	2240      	movs	r2, #64	@ 0x40
 80005e6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	e01b      	b.n	8000626 <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	3b50      	subs	r3, #80	@ 0x50
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff7d 	bl	80004f4 <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80005fa:	2002      	movs	r0, #2
 80005fc:	f7ff ff7a 	bl	80004f4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000600:	2010      	movs	r0, #16
 8000602:	f7ff ff77 	bl	80004f4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000606:	480d      	ldr	r0, [pc, #52]	@ (800063c <OLED_ShowFrame+0x60>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	01db      	lsls	r3, r3, #7
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <OLED_ShowFrame+0x64>)
 800060e:	4413      	add	r3, r2
 8000610:	2280      	movs	r2, #128	@ 0x80
 8000612:	4619      	mov	r1, r3
 8000614:	f003 f95e 	bl	80038d4 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000618:	2181      	movs	r1, #129	@ 0x81
 800061a:	4807      	ldr	r0, [pc, #28]	@ (8000638 <OLED_ShowFrame+0x5c>)
 800061c:	f7ff ff54 	bl	80004c8 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3301      	adds	r3, #1
 8000624:	71fb      	strb	r3, [r7, #7]
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b07      	cmp	r3, #7
 800062a:	d9e0      	bls.n	80005ee <OLED_ShowFrame+0x12>
  }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200004d0 	.word	0x200004d0
 800063c:	200004d1 	.word	0x200004d1
 8000640:	200000cc 	.word	0x200000cc

08000644 <OLED_Clean>:

//清屏
void OLED_Clean()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000648:	f7ff ffbc 	bl	80005c4 <OLED_NewFrame>
    OLED_ShowFrame();
 800064c:	f7ff ffc6 	bl	80005dc <OLED_ShowFrame>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	460b      	mov	r3, r1
 8000660:	71bb      	strb	r3, [r7, #6]
 8000662:	4613      	mov	r3, r2
 8000664:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	2b00      	cmp	r3, #0
 800066c:	db43      	blt.n	80006f6 <OLED_SetPixel+0xa2>
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b3f      	cmp	r3, #63	@ 0x3f
 8000672:	d840      	bhi.n	80006f6 <OLED_SetPixel+0xa2>
  if (!color) {
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d11d      	bne.n	80006b6 <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 800067a:	79bb      	ldrb	r3, [r7, #6]
 800067c:	08db      	lsrs	r3, r3, #3
 800067e:	b2d8      	uxtb	r0, r3
 8000680:	4602      	mov	r2, r0
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	491e      	ldr	r1, [pc, #120]	@ (8000700 <OLED_SetPixel+0xac>)
 8000686:	01d2      	lsls	r2, r2, #7
 8000688:	440a      	add	r2, r1
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b25a      	sxtb	r2, r3
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	2101      	movs	r1, #1
 8000698:	fa01 f303 	lsl.w	r3, r1, r3
 800069c:	b25b      	sxtb	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b259      	sxtb	r1, r3
 80006a2:	4602      	mov	r2, r0
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	b2c8      	uxtb	r0, r1
 80006a8:	4915      	ldr	r1, [pc, #84]	@ (8000700 <OLED_SetPixel+0xac>)
 80006aa:	01d2      	lsls	r2, r2, #7
 80006ac:	440a      	add	r2, r1
 80006ae:	4413      	add	r3, r2
 80006b0:	4602      	mov	r2, r0
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	e020      	b.n	80006f8 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 80006b6:	79bb      	ldrb	r3, [r7, #6]
 80006b8:	08db      	lsrs	r3, r3, #3
 80006ba:	b2d8      	uxtb	r0, r3
 80006bc:	4602      	mov	r2, r0
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	490f      	ldr	r1, [pc, #60]	@ (8000700 <OLED_SetPixel+0xac>)
 80006c2:	01d2      	lsls	r2, r2, #7
 80006c4:	440a      	add	r2, r1
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b25a      	sxtb	r2, r3
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	2101      	movs	r1, #1
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	b25b      	sxtb	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	b259      	sxtb	r1, r3
 80006e2:	4602      	mov	r2, r0
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	b2c8      	uxtb	r0, r1
 80006e8:	4905      	ldr	r1, [pc, #20]	@ (8000700 <OLED_SetPixel+0xac>)
 80006ea:	01d2      	lsls	r2, r2, #7
 80006ec:	440a      	add	r2, r1
 80006ee:	4413      	add	r3, r2
 80006f0:	4602      	mov	r2, r0
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e000      	b.n	80006f8 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 80006f6:	bf00      	nop
  }
}
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	200000cc 	.word	0x200000cc

08000704 <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 8000704:	b490      	push	{r4, r7}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4604      	mov	r4, r0
 800070c:	4608      	mov	r0, r1
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	4623      	mov	r3, r4
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	4603      	mov	r3, r0
 8000718:	71bb      	strb	r3, [r7, #6]
 800071a:	460b      	mov	r3, r1
 800071c:	717b      	strb	r3, [r7, #5]
 800071e:	4613      	mov	r3, r2
 8000720:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b07      	cmp	r3, #7
 8000726:	d85f      	bhi.n	80007e8 <OLED_SetByte_Fine+0xe4>
 8000728:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db5b      	blt.n	80007e8 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 8000730:	7d3b      	ldrb	r3, [r7, #20]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d002      	beq.n	800073c <OLED_SetByte_Fine+0x38>
 8000736:	797b      	ldrb	r3, [r7, #5]
 8000738:	43db      	mvns	r3, r3
 800073a:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 800073c:	7c3b      	ldrb	r3, [r7, #16]
 800073e:	3301      	adds	r3, #1
 8000740:	22ff      	movs	r2, #255	@ 0xff
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b25a      	sxtb	r2, r3
 8000748:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800074c:	4313      	orrs	r3, r2
 800074e:	b25a      	sxtb	r2, r3
 8000750:	793b      	ldrb	r3, [r7, #4]
 8000752:	f1c3 0308 	rsb	r3, r3, #8
 8000756:	21ff      	movs	r1, #255	@ 0xff
 8000758:	fa41 f303 	asr.w	r3, r1, r3
 800075c:	b25b      	sxtb	r3, r3
 800075e:	4313      	orrs	r3, r2
 8000760:	b25b      	sxtb	r3, r3
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <OLED_SetByte_Fine+0xf0>)
 8000766:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000768:	79fa      	ldrb	r2, [r7, #7]
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	4922      	ldr	r1, [pc, #136]	@ (80007f8 <OLED_SetByte_Fine+0xf4>)
 800076e:	01d2      	lsls	r2, r2, #7
 8000770:	440a      	add	r2, r1
 8000772:	4413      	add	r3, r2
 8000774:	7818      	ldrb	r0, [r3, #0]
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <OLED_SetByte_Fine+0xf0>)
 8000778:	7819      	ldrb	r1, [r3, #0]
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	79bb      	ldrb	r3, [r7, #6]
 800077e:	4001      	ands	r1, r0
 8000780:	b2c8      	uxtb	r0, r1
 8000782:	491d      	ldr	r1, [pc, #116]	@ (80007f8 <OLED_SetByte_Fine+0xf4>)
 8000784:	01d2      	lsls	r2, r2, #7
 8000786:	440a      	add	r2, r1
 8000788:	4413      	add	r3, r2
 800078a:	4602      	mov	r2, r0
 800078c:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 800078e:	7c3b      	ldrb	r3, [r7, #16]
 8000790:	3301      	adds	r3, #1
 8000792:	22ff      	movs	r2, #255	@ 0xff
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	b25b      	sxtb	r3, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	b25a      	sxtb	r2, r3
 800079e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007a2:	4013      	ands	r3, r2
 80007a4:	b25a      	sxtb	r2, r3
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	f1c3 0308 	rsb	r3, r3, #8
 80007ac:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80007b0:	fa41 f303 	asr.w	r3, r1, r3
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	4013      	ands	r3, r2
 80007b8:	b25b      	sxtb	r3, r3
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <OLED_SetByte_Fine+0xf0>)
 80007be:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	490c      	ldr	r1, [pc, #48]	@ (80007f8 <OLED_SetByte_Fine+0xf4>)
 80007c6:	01d2      	lsls	r2, r2, #7
 80007c8:	440a      	add	r2, r1
 80007ca:	4413      	add	r3, r2
 80007cc:	7818      	ldrb	r0, [r3, #0]
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <OLED_SetByte_Fine+0xf0>)
 80007d0:	7819      	ldrb	r1, [r3, #0]
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	4301      	orrs	r1, r0
 80007d8:	b2c8      	uxtb	r0, r1
 80007da:	4907      	ldr	r1, [pc, #28]	@ (80007f8 <OLED_SetByte_Fine+0xf4>)
 80007dc:	01d2      	lsls	r2, r2, #7
 80007de:	440a      	add	r2, r1
 80007e0:	4413      	add	r3, r2
 80007e2:	4602      	mov	r2, r0
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e000      	b.n	80007ea <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80007e8:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc90      	pop	{r4, r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	20000551 	.word	0x20000551
 80007f8:	200000cc 	.word	0x200000cc

080007fc <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af02      	add	r7, sp, #8
 8000802:	4604      	mov	r4, r0
 8000804:	4608      	mov	r0, r1
 8000806:	4611      	mov	r1, r2
 8000808:	461a      	mov	r2, r3
 800080a:	4623      	mov	r3, r4
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	4603      	mov	r3, r0
 8000810:	71bb      	strb	r3, [r7, #6]
 8000812:	460b      	mov	r3, r1
 8000814:	717b      	strb	r3, [r7, #5]
 8000816:	4613      	mov	r3, r2
 8000818:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000820:	79bb      	ldrb	r3, [r7, #6]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8000828:	7bba      	ldrb	r2, [r7, #14]
 800082a:	793b      	ldrb	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	2b08      	cmp	r3, #8
 8000830:	dd29      	ble.n	8000886 <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000832:	797a      	ldrb	r2, [r7, #5]
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	b2da      	uxtb	r2, r3
 800083c:	7bbc      	ldrb	r4, [r7, #14]
 800083e:	79f9      	ldrb	r1, [r7, #7]
 8000840:	7bf8      	ldrb	r0, [r7, #15]
 8000842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	2307      	movs	r3, #7
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4623      	mov	r3, r4
 800084e:	f7ff ff59 	bl	8000704 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	3301      	adds	r3, #1
 8000856:	b2d8      	uxtb	r0, r3
 8000858:	797a      	ldrb	r2, [r7, #5]
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	f1c3 0308 	rsb	r3, r3, #8
 8000860:	fa42 f303 	asr.w	r3, r2, r3
 8000864:	b2dc      	uxtb	r4, r3
 8000866:	793a      	ldrb	r2, [r7, #4]
 8000868:	7bbb      	ldrb	r3, [r7, #14]
 800086a:	4413      	add	r3, r2
 800086c:	b2db      	uxtb	r3, r3
 800086e:	3b09      	subs	r3, #9
 8000870:	b2db      	uxtb	r3, r3
 8000872:	79f9      	ldrb	r1, [r7, #7]
 8000874:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000878:	9201      	str	r2, [sp, #4]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2300      	movs	r3, #0
 800087e:	4622      	mov	r2, r4
 8000880:	f7ff ff40 	bl	8000704 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000884:	e015      	b.n	80008b2 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000886:	797a      	ldrb	r2, [r7, #5]
 8000888:	7bbb      	ldrb	r3, [r7, #14]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	b2dc      	uxtb	r4, r3
 8000890:	7bba      	ldrb	r2, [r7, #14]
 8000892:	793b      	ldrb	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	3b01      	subs	r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	7bbd      	ldrb	r5, [r7, #14]
 800089e:	79f9      	ldrb	r1, [r7, #7]
 80008a0:	7bf8      	ldrb	r0, [r7, #15]
 80008a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008a6:	9201      	str	r2, [sp, #4]
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	462b      	mov	r3, r5
 80008ac:	4622      	mov	r2, r4
 80008ae:	f7ff ff29 	bl	8000704 <OLED_SetByte_Fine>
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bdb0      	pop	{r4, r5, r7, pc}

080008ba <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 80008ba:	b590      	push	{r4, r7, lr}
 80008bc:	b087      	sub	sp, #28
 80008be:	af02      	add	r7, sp, #8
 80008c0:	4604      	mov	r4, r0
 80008c2:	4608      	mov	r0, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	461a      	mov	r2, r3
 80008c8:	4623      	mov	r3, r4
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4603      	mov	r3, r0
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	460b      	mov	r3, r1
 80008d2:	717b      	strb	r3, [r7, #5]
 80008d4:	4613      	mov	r3, r2
 80008d6:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	08db      	lsrs	r3, r3, #3
 80008dc:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80008de:	79bb      	ldrb	r3, [r7, #6]
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80008e6:	797a      	ldrb	r2, [r7, #5]
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	7bbc      	ldrb	r4, [r7, #14]
 80008f2:	79f9      	ldrb	r1, [r7, #7]
 80008f4:	7bf8      	ldrb	r0, [r7, #15]
 80008f6:	793b      	ldrb	r3, [r7, #4]
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	2307      	movs	r3, #7
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	4623      	mov	r3, r4
 8000900:	f7ff ff00 	bl	8000704 <OLED_SetByte_Fine>
  if (bit) {
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d014      	beq.n	8000934 <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	3301      	adds	r3, #1
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	797a      	ldrb	r2, [r7, #5]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f1c3 0308 	rsb	r3, r3, #8
 8000918:	fa42 f303 	asr.w	r3, r2, r3
 800091c:	b2dc      	uxtb	r4, r3
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	3b01      	subs	r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	79f9      	ldrb	r1, [r7, #7]
 8000926:	793a      	ldrb	r2, [r7, #4]
 8000928:	9201      	str	r2, [sp, #4]
 800092a:	9300      	str	r3, [sp, #0]
 800092c:	2300      	movs	r3, #0
 800092e:	4622      	mov	r2, r4
 8000930:	f7ff fee8 	bl	8000704 <OLED_SetByte_Fine>
  }
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}

0800093c <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af02      	add	r7, sp, #8
 8000942:	603a      	str	r2, [r7, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
 800094a:	460b      	mov	r3, r1
 800094c:	71bb      	strb	r3, [r7, #6]
 800094e:	4613      	mov	r3, r2
 8000950:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8000952:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000956:	08db      	lsrs	r3, r3, #3
 8000958:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800095a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e025      	b.n	80009b6 <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 800096a:	2300      	movs	r3, #0
 800096c:	73bb      	strb	r3, [r7, #14]
 800096e:	e01b      	b.n	80009a8 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000970:	79fa      	ldrb	r2, [r7, #7]
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	4413      	add	r3, r2
 8000976:	b2d8      	uxtb	r0, r3
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	b2da      	uxtb	r2, r3
 800097e:	79bb      	ldrb	r3, [r7, #6]
 8000980:	4413      	add	r3, r2
 8000982:	b2dc      	uxtb	r4, r3
 8000984:	7bfa      	ldrb	r2, [r7, #15]
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	7979      	ldrb	r1, [r7, #5]
 800098a:	fb01 f303 	mul.w	r3, r1, r3
 800098e:	4413      	add	r3, r2
 8000990:	461a      	mov	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	781a      	ldrb	r2, [r3, #0]
 8000998:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800099c:	4621      	mov	r1, r4
 800099e:	f7ff ff8c 	bl	80008ba <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	3301      	adds	r3, #1
 80009a6:	73bb      	strb	r3, [r7, #14]
 80009a8:	7bba      	ldrb	r2, [r7, #14]
 80009aa:	7b3b      	ldrb	r3, [r7, #12]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3df      	bcc.n	8000970 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	3301      	adds	r3, #1
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	797b      	ldrb	r3, [r7, #5]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3d5      	bcc.n	800096a <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 80009be:	7afb      	ldrb	r3, [r7, #11]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d028      	beq.n	8000a16 <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80009c4:	797b      	ldrb	r3, [r7, #5]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	7b3a      	ldrb	r2, [r7, #12]
 80009ca:	b292      	uxth	r2, r2
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	737b      	strb	r3, [r7, #13]
 80009d6:	e01a      	b.n	8000a0e <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	4413      	add	r3, r2
 80009de:	b2d8      	uxtb	r0, r3
 80009e0:	7b3b      	ldrb	r3, [r7, #12]
 80009e2:	00db      	lsls	r3, r3, #3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	79bb      	ldrb	r3, [r7, #6]
 80009e8:	4413      	add	r3, r2
 80009ea:	b2d9      	uxtb	r1, r3
 80009ec:	893a      	ldrh	r2, [r7, #8]
 80009ee:	7b7b      	ldrb	r3, [r7, #13]
 80009f0:	4413      	add	r3, r2
 80009f2:	461a      	mov	r2, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	781a      	ldrb	r2, [r3, #0]
 80009fa:	7afc      	ldrb	r4, [r7, #11]
 80009fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4623      	mov	r3, r4
 8000a04:	f7ff fefa 	bl	80007fc <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8000a08:	7b7b      	ldrb	r3, [r7, #13]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	737b      	strb	r3, [r7, #13]
 8000a0e:	7b7a      	ldrb	r2, [r7, #13]
 8000a10:	797b      	ldrb	r3, [r7, #5]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3e0      	bcc.n	80009d8 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd90      	pop	{r4, r7, pc}

08000a1e <OLED_DrawCircle>:
 * @param y 圆心纵坐标
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color) {
 8000a1e:	b590      	push	{r4, r7, lr}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4604      	mov	r4, r0
 8000a26:	4608      	mov	r0, r1
 8000a28:	4611      	mov	r1, r2
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4623      	mov	r3, r4
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4603      	mov	r3, r0
 8000a32:	71bb      	strb	r3, [r7, #6]
 8000a34:	460b      	mov	r3, r1
 8000a36:	717b      	strb	r3, [r7, #5]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	81fb      	strh	r3, [r7, #14]
 8000a40:	797b      	ldrb	r3, [r7, #5]
 8000a42:	81bb      	strh	r3, [r7, #12]
 8000a44:	797b      	ldrb	r3, [r7, #5]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	f1c3 0303 	rsb	r3, r3, #3
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	817b      	strh	r3, [r7, #10]
  while (a <= b) {
 8000a54:	e0b3      	b.n	8000bbe <OLED_DrawCircle+0x1a0>
    OLED_SetPixel(x - b, y - a, color);
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	79fa      	ldrb	r2, [r7, #7]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b2d8      	uxtb	r0, r3
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	793a      	ldrb	r2, [r7, #4]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fdf1 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8000a72:	89bb      	ldrh	r3, [r7, #12]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2d8      	uxtb	r0, r3
 8000a7c:	89fb      	ldrh	r3, [r7, #14]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	79ba      	ldrb	r2, [r7, #6]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	793a      	ldrb	r2, [r7, #4]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f7ff fde3 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	b2d8      	uxtb	r0, r3
 8000a98:	89bb      	ldrh	r3, [r7, #12]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	793a      	ldrb	r2, [r7, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f7ff fdd5 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 8000aaa:	89bb      	ldrh	r3, [r7, #12]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	b2d8      	uxtb	r0, r3
 8000ab4:	89fb      	ldrh	r3, [r7, #14]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	79ba      	ldrb	r2, [r7, #6]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	793a      	ldrb	r2, [r7, #4]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f7ff fdc7 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	79fa      	ldrb	r2, [r7, #7]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	b2d8      	uxtb	r0, r3
 8000ad0:	89bb      	ldrh	r3, [r7, #12]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	79ba      	ldrb	r2, [r7, #6]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	793a      	ldrb	r2, [r7, #4]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f7ff fdb9 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 8000ae2:	89bb      	ldrh	r3, [r7, #12]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	4413      	add	r3, r2
 8000aea:	b2d8      	uxtb	r0, r3
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	793a      	ldrb	r2, [r7, #4]
 8000af8:	4619      	mov	r1, r3
 8000afa:	f7ff fdab 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4413      	add	r3, r2
 8000b06:	b2d8      	uxtb	r0, r3
 8000b08:	89bb      	ldrh	r3, [r7, #12]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	1ad3      	subs	r3, r2, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	793a      	ldrb	r2, [r7, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f7ff fd9d 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	4413      	add	r3, r2
 8000b22:	b2d8      	uxtb	r0, r3
 8000b24:	89bb      	ldrh	r3, [r7, #12]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	79bb      	ldrb	r3, [r7, #6]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	793a      	ldrb	r2, [r7, #4]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f7ff fd8f 	bl	8000654 <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2d8      	uxtb	r0, r3
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	4413      	add	r3, r2
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	793a      	ldrb	r2, [r7, #4]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f7ff fd81 	bl	8000654 <OLED_SetPixel>
    a++;
 8000b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3301      	adds	r3, #1
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	81fb      	strh	r3, [r7, #14]
    if (di < 0) {
 8000b5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da09      	bge.n	8000b7a <OLED_DrawCircle+0x15c>
      di += 4 * a + 6;
 8000b66:	89fb      	ldrh	r3, [r7, #14]
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	897b      	ldrh	r3, [r7, #10]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3306      	adds	r3, #6
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	817b      	strh	r3, [r7, #10]
 8000b78:	e013      	b.n	8000ba2 <OLED_DrawCircle+0x184>
    } else {
      di += 10 + 4 * (a - b);
 8000b7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	330a      	adds	r3, #10
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	817b      	strh	r3, [r7, #10]
      b--;
 8000b96:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4413      	add	r3, r2
 8000baa:	b2d8      	uxtb	r0, r3
 8000bac:	89bb      	ldrh	r3, [r7, #12]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	793a      	ldrb	r2, [r7, #4]
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f7ff fd4b 	bl	8000654 <OLED_SetPixel>
  while (a <= b) {
 8000bbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000bc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	f77f af45 	ble.w	8000a56 <OLED_DrawCircle+0x38>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd90      	pop	{r4, r7, pc}

08000bd6 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8000bd6:	b5b0      	push	{r4, r5, r7, lr}
 8000bd8:	b084      	sub	sp, #16
 8000bda:	af02      	add	r7, sp, #8
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
 8000be2:	460b      	mov	r3, r1
 8000be4:	71bb      	strb	r3, [r7, #6]
 8000be6:	4613      	mov	r3, r2
 8000be8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	797b      	ldrb	r3, [r7, #5]
 8000bf0:	f1a3 0120 	sub.w	r1, r3, #32
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	3307      	adds	r3, #7
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da00      	bge.n	8000c00 <OLED_PrintASCIIChar+0x2a>
 8000bfe:	3307      	adds	r3, #7
 8000c00:	10db      	asrs	r3, r3, #3
 8000c02:	4618      	mov	r0, r3
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	785b      	ldrb	r3, [r3, #1]
 8000c08:	fb00 f303 	mul.w	r3, r0, r3
 8000c0c:	fb01 f303 	mul.w	r3, r1, r3
 8000c10:	18d4      	adds	r4, r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	785d      	ldrb	r5, [r3, #1]
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	79b9      	ldrb	r1, [r7, #6]
 8000c1c:	79f8      	ldrb	r0, [r7, #7]
 8000c1e:	7e3a      	ldrb	r2, [r7, #24]
 8000c20:	9201      	str	r2, [sp, #4]
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	462b      	mov	r3, r5
 8000c26:	4622      	mov	r2, r4
 8000c28:	f7ff fe88 	bl	800093c <OLED_SetBlock>
}
 8000c2c:	bf00      	nop
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bdb0      	pop	{r4, r5, r7, pc}

08000c34 <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af02      	add	r7, sp, #8
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73fb      	strb	r3, [r7, #15]
 8000c42:	460b      	mov	r3, r1
 8000c44:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8000c46:	7bfb      	ldrb	r3, [r7, #15]
 8000c48:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 8000c4a:	e011      	b.n	8000c70 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	7bb9      	ldrb	r1, [r7, #14]
 8000c52:	7df8      	ldrb	r0, [r7, #23]
 8000c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f7ff ffbb 	bl	8000bd6 <OLED_PrintASCIIChar>
    x0 += font->w;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	785a      	ldrb	r2, [r3, #1]
 8000c64:	7dfb      	ldrb	r3, [r7, #23]
 8000c66:	4413      	add	r3, r2
 8000c68:	75fb      	strb	r3, [r7, #23]
    str++;
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e9      	bne.n	8000c4c <OLED_PrintASCIIString+0x18>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <OLED_Startup>:
    }
  }
}

void OLED_Startup()
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; ++i) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	e01a      	b.n	8000cc4 <OLED_Startup+0x42>

        OLED_Clean();
 8000c8e:	f7ff fcd9 	bl	8000644 <OLED_Clean>
        OLED_DrawCircle(64,32,4*i,OLED_COLOR_NORMAL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	2040      	movs	r0, #64	@ 0x40
 8000ca0:	f7ff febd 	bl	8000a1e <OLED_DrawCircle>
        OLED_DrawCircle(64,32,2*i,OLED_COLOR_NORMAL);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	2300      	movs	r3, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	2040      	movs	r0, #64	@ 0x40
 8000cb2:	f7ff feb4 	bl	8000a1e <OLED_DrawCircle>
        OLED_ShowFrame();
 8000cb6:	f7ff fc91 	bl	80005dc <OLED_ShowFrame>
        //HAL_Delay(10);
        OLED_Clean();
 8000cba:	f7ff fcc3 	bl	8000644 <OLED_Clean>
    for (int i = 0; i < 32; ++i) {
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b1f      	cmp	r3, #31
 8000cc8:	dde1      	ble.n	8000c8e <OLED_Startup+0xc>
    }
}
 8000cca:	bf00      	nop
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <HAL_MspInit+0x5c>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <HAL_MspInit+0x60>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_MspInit+0x60>)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <NMI_Handler+0x4>

08000d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <MemManage_Handler+0x4>

08000d50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	bf00      	nop
 8000d5e:	e7fd      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 fa36 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f002 fd5c 	bl	800387c <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20005000 	.word	0x20005000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000554 	.word	0x20000554
 8000df8:	20000738 	.word	0x20000738

08000dfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	@ 0x30
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2224      	movs	r2, #36	@ 0x24
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fd28 	bl	800386c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e24:	4b21      	ldr	r3, [pc, #132]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e26:	4a22      	ldr	r2, [pc, #136]	@ (8000eb0 <MX_TIM1_Init+0xa8>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 8000e2a:	4b20      	ldr	r3, [pc, #128]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1e      	ldr	r3, [pc, #120]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000e36:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e38:	2263      	movs	r2, #99	@ 0x63
 8000e3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e56:	2301      	movs	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000e62:	2302      	movs	r3, #2
 8000e64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e66:	2301      	movs	r3, #1
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e7a:	f001 ff0d 	bl	8002c98 <HAL_TIM_Encoder_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000e84:	f7ff fb19 	bl	80004ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	@ (8000eac <MX_TIM1_Init+0xa4>)
 8000e96:	f002 fc69 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000ea0:	f7ff fb0b 	bl	80004ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3730      	adds	r7, #48	@ 0x30
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000558 	.word	0x20000558
 8000eb0:	40012c00 	.word	0x40012c00

08000eb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	@ 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee4:	4b37      	ldr	r3, [pc, #220]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000ee6:	4a38      	ldr	r2, [pc, #224]	@ (8000fc8 <MX_TIM3_Init+0x114>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000eea:	4b36      	ldr	r3, [pc, #216]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000eec:	2247      	movs	r2, #71	@ 0x47
 8000eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b34      	ldr	r3, [pc, #208]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000ef8:	2263      	movs	r2, #99	@ 0x63
 8000efa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b31      	ldr	r3, [pc, #196]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f08:	482e      	ldr	r0, [pc, #184]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f0a:	f001 fccd 	bl	80028a8 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f14:	f7ff fad1 	bl	80004ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	4827      	ldr	r0, [pc, #156]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f26:	f002 f8a9 	bl	800307c <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000f30:	f7ff fac3 	bl	80004ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f34:	4823      	ldr	r0, [pc, #140]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f36:	f001 fd51 	bl	80029dc <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f40:	f7ff fabb 	bl	80004ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4619      	mov	r1, r3
 8000f52:	481c      	ldr	r0, [pc, #112]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f54:	f002 fc0a 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000f5e:	f7ff faac 	bl	80004ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	@ 0x60
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	4619      	mov	r1, r3
 8000f78:	4812      	ldr	r0, [pc, #72]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f7a:	f001 ffbd 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f84:	f7ff fa99 	bl	80004ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000f90:	f001 ffb2 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8000f9a:	f7ff fa8e 	bl	80004ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4807      	ldr	r0, [pc, #28]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000fa6:	f001 ffa7 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8000fb0:	f7ff fa83 	bl	80004ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fb4:	4803      	ldr	r0, [pc, #12]	@ (8000fc4 <MX_TIM3_Init+0x110>)
 8000fb6:	f000 f867 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000fba:	bf00      	nop
 8000fbc:	3738      	adds	r7, #56	@ 0x38
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200005a0 	.word	0x200005a0
 8000fc8:	40000400 	.word	0x40000400

08000fcc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b088      	sub	sp, #32
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <HAL_TIM_Encoder_MspInit+0x74>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d124      	bne.n	8001036 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fec:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 8000ff2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 800100a:	f043 0304 	orr.w	r3, r3, #4
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_TIM_Encoder_MspInit+0x78>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001020:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001032:	f000 fa05 	bl	8001440 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40010800 	.word	0x40010800

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_TIM_Base_MspInit+0x34>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10b      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_TIM_Base_MspInit+0x38>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_TIM_Base_MspInit+0x38>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_TIM_Base_MspInit+0x38>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40000400 	.word	0x40000400
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <HAL_TIM_MspPostInit+0x88>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d12f      	bne.n	8001108 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a13      	ldr	r2, [pc, #76]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_TIM_MspPostInit+0x8c>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010d8:	23c0      	movs	r3, #192	@ 0xc0
 80010da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4619      	mov	r1, r3
 80010ea:	480b      	ldr	r0, [pc, #44]	@ (8001118 <HAL_TIM_MspPostInit+0x90>)
 80010ec:	f000 f9a8 	bl	8001440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <HAL_TIM_MspPostInit+0x94>)
 8001104:	f000 f99c 	bl	8001440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff fe6c 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	@ (8001154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001126:	490c      	ldr	r1, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <LoopFillZerobss+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800113c:	4c09      	ldr	r4, [pc, #36]	@ (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f002 fb9d 	bl	8003888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff f8ad 	bl	80002ac <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800115c:	08004818 	.word	0x08004818
  ldr r2, =_sbss
 8001160:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001164:	20000734 	.word	0x20000734

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f92b 	bl	80013d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fda4 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f935 	bl	8001426 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f90b 	bl	80013ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000008 	.word	0x20000008
 8001218:	200005e8 	.word	0x200005e8

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	200005e8 	.word	0x200005e8

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffe0 	bl	800121c <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001294:	4013      	ands	r3, r2
 8001296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012aa:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <__NVIC_SetPriorityGrouping+0x44>)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a4:	d301      	bcc.n	80013aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a6:	2301      	movs	r3, #1
 80013a8:	e00f      	b.n	80013ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <SysTick_Config+0x40>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b2:	210f      	movs	r1, #15
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f7ff ff90 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <SysTick_Config+0x40>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <SysTick_Config+0x40>)
 80013c4:	2207      	movs	r2, #7
 80013c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff ff49 	bl	8001278 <__NVIC_SetPriorityGrouping>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff5e 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffb0 	bl	8001394 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001440:	b480      	push	{r7}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e169      	b.n	8001728 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001454:	2201      	movs	r2, #1
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	69fa      	ldr	r2, [r7, #28]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	429a      	cmp	r2, r3
 800146e:	f040 8158 	bne.w	8001722 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a9a      	ldr	r2, [pc, #616]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d05e      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 800147c:	4a98      	ldr	r2, [pc, #608]	@ (80016e0 <HAL_GPIO_Init+0x2a0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d875      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 8001482:	4a98      	ldr	r2, [pc, #608]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d058      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001488:	4a96      	ldr	r2, [pc, #600]	@ (80016e4 <HAL_GPIO_Init+0x2a4>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d86f      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800148e:	4a96      	ldr	r2, [pc, #600]	@ (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d052      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 8001494:	4a94      	ldr	r2, [pc, #592]	@ (80016e8 <HAL_GPIO_Init+0x2a8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d869      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 800149a:	4a94      	ldr	r2, [pc, #592]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d04c      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014a0:	4a92      	ldr	r2, [pc, #584]	@ (80016ec <HAL_GPIO_Init+0x2ac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d863      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014a6:	4a92      	ldr	r2, [pc, #584]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d046      	beq.n	800153a <HAL_GPIO_Init+0xfa>
 80014ac:	4a90      	ldr	r2, [pc, #576]	@ (80016f0 <HAL_GPIO_Init+0x2b0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d85d      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d82a      	bhi.n	800150c <HAL_GPIO_Init+0xcc>
 80014b6:	2b12      	cmp	r3, #18
 80014b8:	d859      	bhi.n	800156e <HAL_GPIO_Init+0x12e>
 80014ba:	a201      	add	r2, pc, #4	@ (adr r2, 80014c0 <HAL_GPIO_Init+0x80>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	0800153b 	.word	0x0800153b
 80014c4:	08001515 	.word	0x08001515
 80014c8:	08001527 	.word	0x08001527
 80014cc:	08001569 	.word	0x08001569
 80014d0:	0800156f 	.word	0x0800156f
 80014d4:	0800156f 	.word	0x0800156f
 80014d8:	0800156f 	.word	0x0800156f
 80014dc:	0800156f 	.word	0x0800156f
 80014e0:	0800156f 	.word	0x0800156f
 80014e4:	0800156f 	.word	0x0800156f
 80014e8:	0800156f 	.word	0x0800156f
 80014ec:	0800156f 	.word	0x0800156f
 80014f0:	0800156f 	.word	0x0800156f
 80014f4:	0800156f 	.word	0x0800156f
 80014f8:	0800156f 	.word	0x0800156f
 80014fc:	0800156f 	.word	0x0800156f
 8001500:	0800156f 	.word	0x0800156f
 8001504:	0800151d 	.word	0x0800151d
 8001508:	08001531 	.word	0x08001531
 800150c:	4a79      	ldr	r2, [pc, #484]	@ (80016f4 <HAL_GPIO_Init+0x2b4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d013      	beq.n	800153a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001512:	e02c      	b.n	800156e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	623b      	str	r3, [r7, #32]
          break;
 800151a:	e029      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	3304      	adds	r3, #4
 8001522:	623b      	str	r3, [r7, #32]
          break;
 8001524:	e024      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	3308      	adds	r3, #8
 800152c:	623b      	str	r3, [r7, #32]
          break;
 800152e:	e01f      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	330c      	adds	r3, #12
 8001536:	623b      	str	r3, [r7, #32]
          break;
 8001538:	e01a      	b.n	8001570 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001542:	2304      	movs	r3, #4
 8001544:	623b      	str	r3, [r7, #32]
          break;
 8001546:	e013      	b.n	8001570 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001550:	2308      	movs	r3, #8
 8001552:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	611a      	str	r2, [r3, #16]
          break;
 800155a:	e009      	b.n	8001570 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	615a      	str	r2, [r3, #20]
          break;
 8001566:	e003      	b.n	8001570 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e000      	b.n	8001570 <HAL_GPIO_Init+0x130>
          break;
 800156e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2bff      	cmp	r3, #255	@ 0xff
 8001574:	d801      	bhi.n	800157a <HAL_GPIO_Init+0x13a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	e001      	b.n	800157e <HAL_GPIO_Init+0x13e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3304      	adds	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	@ 0xff
 8001584:	d802      	bhi.n	800158c <HAL_GPIO_Init+0x14c>
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x152>
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	3b08      	subs	r3, #8
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	210f      	movs	r1, #15
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	401a      	ands	r2, r3
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80b1 	beq.w	8001722 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015c0:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_GPIO_Init+0x2b8>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	4a48      	ldr	r2, [pc, #288]	@ (80016fc <HAL_GPIO_Init+0x2bc>)
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a40      	ldr	r2, [pc, #256]	@ (8001700 <HAL_GPIO_Init+0x2c0>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d013      	beq.n	800162c <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a3f      	ldr	r2, [pc, #252]	@ (8001704 <HAL_GPIO_Init+0x2c4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3e      	ldr	r2, [pc, #248]	@ (8001708 <HAL_GPIO_Init+0x2c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1e4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a3d      	ldr	r2, [pc, #244]	@ (800170c <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1e0>
 800161c:	2303      	movs	r3, #3
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001620:	2304      	movs	r3, #4
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1ee>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	492f      	ldr	r1, [pc, #188]	@ (80016fc <HAL_GPIO_Init+0x2bc>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b2d      	ldr	r3, [pc, #180]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	492c      	ldr	r1, [pc, #176]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4928      	ldr	r1, [pc, #160]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001670:	4013      	ands	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4922      	ldr	r1, [pc, #136]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b20      	ldr	r3, [pc, #128]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	491e      	ldr	r1, [pc, #120]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b19      	ldr	r3, [pc, #100]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4918      	ldr	r1, [pc, #96]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4914      	ldr	r1, [pc, #80]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d021      	beq.n	8001714 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490e      	ldr	r1, [pc, #56]	@ (8001710 <HAL_GPIO_Init+0x2d0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e021      	b.n	8001722 <HAL_GPIO_Init+0x2e2>
 80016de:	bf00      	nop
 80016e0:	10320000 	.word	0x10320000
 80016e4:	10310000 	.word	0x10310000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10120000 	.word	0x10120000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40011400 	.word	0x40011400
 8001710:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_GPIO_Init+0x304>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	43db      	mvns	r3, r3
 800171c:	4909      	ldr	r1, [pc, #36]	@ (8001744 <HAL_GPIO_Init+0x304>)
 800171e:	4013      	ands	r3, r2
 8001720:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	3301      	adds	r3, #1
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	fa22 f303 	lsr.w	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	f47f ae8e 	bne.w	8001454 <HAL_GPIO_Init+0x14>
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	372c      	adds	r7, #44	@ 0x2c
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4013      	ands	r3, r2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e001      	b.n	800176a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr
	...

08001778 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e12b      	b.n	80019e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7fe fd46 	bl	8000230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2224      	movs	r2, #36	@ 0x24
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0201 	bic.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017dc:	f001 f832 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 80017e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4a81      	ldr	r2, [pc, #516]	@ (80019ec <HAL_I2C_Init+0x274>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d807      	bhi.n	80017fc <HAL_I2C_Init+0x84>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4a80      	ldr	r2, [pc, #512]	@ (80019f0 <HAL_I2C_Init+0x278>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	bf94      	ite	ls
 80017f4:	2301      	movls	r3, #1
 80017f6:	2300      	movhi	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	e006      	b.n	800180a <HAL_I2C_Init+0x92>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4a7d      	ldr	r2, [pc, #500]	@ (80019f4 <HAL_I2C_Init+0x27c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	bf94      	ite	ls
 8001804:	2301      	movls	r3, #1
 8001806:	2300      	movhi	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0e7      	b.n	80019e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a78      	ldr	r2, [pc, #480]	@ (80019f8 <HAL_I2C_Init+0x280>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9b      	lsrs	r3, r3, #18
 800181c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a6a      	ldr	r2, [pc, #424]	@ (80019ec <HAL_I2C_Init+0x274>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d802      	bhi.n	800184c <HAL_I2C_Init+0xd4>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3301      	adds	r3, #1
 800184a:	e009      	b.n	8001860 <HAL_I2C_Init+0xe8>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	4a69      	ldr	r2, [pc, #420]	@ (80019fc <HAL_I2C_Init+0x284>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	099b      	lsrs	r3, r3, #6
 800185e:	3301      	adds	r3, #1
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001872:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	495c      	ldr	r1, [pc, #368]	@ (80019ec <HAL_I2C_Init+0x274>)
 800187c:	428b      	cmp	r3, r1
 800187e:	d819      	bhi.n	80018b4 <HAL_I2C_Init+0x13c>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1e59      	subs	r1, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fbb1 f3f3 	udiv	r3, r1, r3
 800188e:	1c59      	adds	r1, r3, #1
 8001890:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001894:	400b      	ands	r3, r1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <HAL_I2C_Init+0x138>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1e59      	subs	r1, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018a8:	3301      	adds	r3, #1
 80018aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ae:	e051      	b.n	8001954 <HAL_I2C_Init+0x1dc>
 80018b0:	2304      	movs	r3, #4
 80018b2:	e04f      	b.n	8001954 <HAL_I2C_Init+0x1dc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d111      	bne.n	80018e0 <HAL_I2C_Init+0x168>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e58      	subs	r0, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	440b      	add	r3, r1
 80018ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ce:	3301      	adds	r3, #1
 80018d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	e012      	b.n	8001906 <HAL_I2C_Init+0x18e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	1e58      	subs	r0, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	0099      	lsls	r1, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_I2C_Init+0x196>
 800190a:	2301      	movs	r3, #1
 800190c:	e022      	b.n	8001954 <HAL_I2C_Init+0x1dc>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10e      	bne.n	8001934 <HAL_I2C_Init+0x1bc>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1e58      	subs	r0, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	440b      	add	r3, r1
 8001924:	fbb0 f3f3 	udiv	r3, r0, r3
 8001928:	3301      	adds	r3, #1
 800192a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800192e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001932:	e00f      	b.n	8001954 <HAL_I2C_Init+0x1dc>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	1e58      	subs	r0, r3, #1
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	0099      	lsls	r1, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	fbb0 f3f3 	udiv	r3, r0, r3
 800194a:	3301      	adds	r3, #1
 800194c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	6809      	ldr	r1, [r1, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69da      	ldr	r2, [r3, #28]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001982:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6911      	ldr	r1, [r2, #16]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	68d2      	ldr	r2, [r2, #12]
 800198e:	4311      	orrs	r1, r2
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	430b      	orrs	r3, r1
 8001996:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695a      	ldr	r2, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	000186a0 	.word	0x000186a0
 80019f0:	001e847f 	.word	0x001e847f
 80019f4:	003d08ff 	.word	0x003d08ff
 80019f8:	431bde83 	.word	0x431bde83
 80019fc:	10624dd3 	.word	0x10624dd3

08001a00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af02      	add	r7, sp, #8
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	817b      	strh	r3, [r7, #10]
 8001a10:	4613      	mov	r3, r2
 8001a12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff fc02 	bl	800121c <HAL_GetTick>
 8001a18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	f040 80e0 	bne.w	8001be8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2319      	movs	r3, #25
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4970      	ldr	r1, [pc, #448]	@ (8001bf4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f964 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0d3      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2C_Master_Transmit+0x50>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e0cc      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d007      	beq.n	8001a76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f042 0201 	orr.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2221      	movs	r2, #33	@ 0x21
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2210      	movs	r2, #16
 8001a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	893a      	ldrh	r2, [r7, #8]
 8001aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ab8:	8979      	ldrh	r1, [r7, #10]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f89c 	bl	8001bfc <I2C_MasterRequestWrite>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e08d      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ae4:	e066      	b.n	8001bb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fa22 	bl	8001f34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e06b      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d11b      	bne.n	8001b88 <HAL_I2C_Master_Transmit+0x188>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d017      	beq.n	8001b88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6a39      	ldr	r1, [r7, #32]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fa19 	bl	8001fc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00d      	beq.n	8001bb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d107      	bne.n	8001bb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e01a      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d194      	bne.n	8001ae6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e000      	b.n	8001bea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
  }
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	00100002 	.word	0x00100002
 8001bf8:	ffff0000 	.word	0xffff0000

08001bfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d006      	beq.n	8001c26 <I2C_MasterRequestWrite+0x2a>
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d003      	beq.n	8001c26 <I2C_MasterRequestWrite+0x2a>
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c24:	d108      	bne.n	8001c38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	e00b      	b.n	8001c50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d107      	bne.n	8001c50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f84f 	bl	8001d00 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c76:	d103      	bne.n	8001c80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e035      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c8c:	d108      	bne.n	8001ca0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	e01b      	b.n	8001cd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ca0:	897b      	ldrh	r3, [r7, #10]
 8001ca2:	11db      	asrs	r3, r3, #7
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 0306 	and.w	r3, r3, #6
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f063 030f 	orn	r3, r3, #15
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	490e      	ldr	r1, [pc, #56]	@ (8001cf8 <I2C_MasterRequestWrite+0xfc>)
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 f898 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e010      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001cce:	897b      	ldrh	r3, [r7, #10]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <I2C_MasterRequestWrite+0x100>)
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f888 	bl	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	00010008 	.word	0x00010008
 8001cfc:	00010002 	.word	0x00010002

08001d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d10:	e048      	b.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d18:	d044      	beq.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1a:	f7ff fa7f 	bl	800121c <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d302      	bcc.n	8001d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d139      	bne.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d10d      	bne.n	8001d56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	43da      	mvns	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	4013      	ands	r3, r2
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	e00c      	b.n	8001d70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	43da      	mvns	r2, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	4013      	ands	r3, r2
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf0c      	ite	eq
 8001d68:	2301      	moveq	r3, #1
 8001d6a:	2300      	movne	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d116      	bne.n	8001da4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f043 0220 	orr.w	r2, r3, #32
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e023      	b.n	8001dec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	0c1b      	lsrs	r3, r3, #16
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10d      	bne.n	8001dca <I2C_WaitOnFlagUntilTimeout+0xca>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	4013      	ands	r3, r2
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	e00c      	b.n	8001de4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	43da      	mvns	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d093      	beq.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e02:	e071      	b.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e12:	d123      	bne.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0204 	orr.w	r2, r3, #4
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e067      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e62:	d041      	beq.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e64:	f7ff f9da 	bl	800121c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d302      	bcc.n	8001e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d136      	bne.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10c      	bne.n	8001e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	e00b      	b.n	8001eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	43da      	mvns	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d016      	beq.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e021      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10c      	bne.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e00b      	b.n	8001f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4013      	ands	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	bf14      	ite	ne
 8001f1e:	2301      	movne	r3, #1
 8001f20:	2300      	moveq	r3, #0
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f47f af6d 	bne.w	8001e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f40:	e034      	b.n	8001fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f886 	bl	8002054 <I2C_IsAcknowledgeFailed>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e034      	b.n	8001fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d028      	beq.n	8001fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f95f 	bl	800121c <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d11d      	bne.n	8001fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f7a:	2b80      	cmp	r3, #128	@ 0x80
 8001f7c:	d016      	beq.n	8001fac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	f043 0220 	orr.w	r2, r3, #32
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e007      	b.n	8001fbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb6:	2b80      	cmp	r3, #128	@ 0x80
 8001fb8:	d1c3      	bne.n	8001f42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd0:	e034      	b.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f83e 	bl	8002054 <I2C_IsAcknowledgeFailed>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e034      	b.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe8:	d028      	beq.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fea:	f7ff f917 	bl	800121c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d302      	bcc.n	8002000 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d11d      	bne.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b04      	cmp	r3, #4
 800200c:	d016      	beq.n	800203c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0220 	orr.w	r2, r3, #32
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d1c3      	bne.n	8001fd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206a:	d11b      	bne.n	80020a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002074:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e272      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8087 	beq.w	80021de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b92      	ldr	r3, [pc, #584]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d00c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020dc:	4b8f      	ldr	r3, [pc, #572]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d112      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
 80020e8:	4b8c      	ldr	r3, [pc, #560]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020f4:	d10b      	bne.n	800210e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f6:	4b89      	ldr	r3, [pc, #548]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d06c      	beq.n	80021dc <HAL_RCC_OscConfig+0x12c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d168      	bne.n	80021dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e24c      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x76>
 8002118:	4b80      	ldr	r3, [pc, #512]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7f      	ldr	r2, [pc, #508]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e02e      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_RCC_OscConfig+0x98>
 800212e:	4b7b      	ldr	r3, [pc, #492]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a7a      	ldr	r2, [pc, #488]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b78      	ldr	r3, [pc, #480]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a77      	ldr	r2, [pc, #476]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002140:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0xbc>
 8002152:	4b72      	ldr	r3, [pc, #456]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a71      	ldr	r2, [pc, #452]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xd4>
 800216c:	4b6b      	ldr	r3, [pc, #428]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6a      	ldr	r2, [pc, #424]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b68      	ldr	r3, [pc, #416]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a67      	ldr	r2, [pc, #412]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002182:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7ff f846 	bl	800121c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff f842 	bl	800121c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e200      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xe4>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7ff f832 	bl	800121c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff f82e 	bl	800121c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e1ec      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x10c>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	4b4c      	ldr	r3, [pc, #304]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021f6:	4b49      	ldr	r3, [pc, #292]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d11c      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
 8002202:	4b46      	ldr	r3, [pc, #280]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d116      	bne.n	800223c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220e:	4b43      	ldr	r3, [pc, #268]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1c0      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4b3d      	ldr	r3, [pc, #244]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4939      	ldr	r1, [pc, #228]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	e03a      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d020      	beq.n	8002286 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002244:	4b36      	ldr	r3, [pc, #216]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe ffe7 	bl	800121c <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002252:	f7fe ffe3 	bl	800121c <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e1a1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002270:	4b2a      	ldr	r3, [pc, #168]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4927      	ldr	r1, [pc, #156]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]
 8002284:	e015      	b.n	80022b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_RCC_OscConfig+0x270>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7fe ffc6 	bl	800121c <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7fe ffc2 	bl	800121c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e180      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03a      	beq.n	8002334 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d019      	beq.n	80022fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c6:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7fe ffa6 	bl	800121c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7fe ffa2 	bl	800121c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e160      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022f2:	2001      	movs	r0, #1
 80022f4:	f000 faba 	bl	800286c <RCC_Delay>
 80022f8:	e01c      	b.n	8002334 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002324 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7fe ff8c 	bl	800121c <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002306:	e00f      	b.n	8002328 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7fe ff88 	bl	800121c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d908      	bls.n	8002328 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e146      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	42420000 	.word	0x42420000
 8002324:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002328:	4b92      	ldr	r3, [pc, #584]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1e9      	bne.n	8002308 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a6 	beq.w	800248e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002346:	4b8b      	ldr	r3, [pc, #556]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b88      	ldr	r3, [pc, #544]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4a87      	ldr	r2, [pc, #540]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235c:	61d3      	str	r3, [r2, #28]
 800235e:	4b85      	ldr	r3, [pc, #532]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236e:	4b82      	ldr	r3, [pc, #520]	@ (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002376:	2b00      	cmp	r3, #0
 8002378:	d118      	bne.n	80023ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237a:	4b7f      	ldr	r3, [pc, #508]	@ (8002578 <HAL_RCC_OscConfig+0x4c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7e      	ldr	r2, [pc, #504]	@ (8002578 <HAL_RCC_OscConfig+0x4c8>)
 8002380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002386:	f7fe ff49 	bl	800121c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238e:	f7fe ff45 	bl	800121c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b64      	cmp	r3, #100	@ 0x64
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e103      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	4b75      	ldr	r3, [pc, #468]	@ (8002578 <HAL_RCC_OscConfig+0x4c8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x312>
 80023b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6213      	str	r3, [r2, #32]
 80023c0:	e02d      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x334>
 80023ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4a69      	ldr	r2, [pc, #420]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	4a66      	ldr	r2, [pc, #408]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	f023 0304 	bic.w	r3, r3, #4
 80023e0:	6213      	str	r3, [r2, #32]
 80023e2:	e01c      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b05      	cmp	r3, #5
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_OscConfig+0x356>
 80023ec:	4b61      	ldr	r3, [pc, #388]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4a60      	ldr	r2, [pc, #384]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6213      	str	r3, [r2, #32]
 80023f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e00b      	b.n	800241e <HAL_RCC_OscConfig+0x36e>
 8002406:	4b5b      	ldr	r3, [pc, #364]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a5a      	ldr	r2, [pc, #360]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b58      	ldr	r3, [pc, #352]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a57      	ldr	r2, [pc, #348]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d015      	beq.n	8002452 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fef9 	bl	800121c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fef5 	bl	800121c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0b1      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b4b      	ldr	r3, [pc, #300]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCC_OscConfig+0x37e>
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002452:	f7fe fee3 	bl	800121c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe fedf 	bl	800121c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e09b      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	4b40      	ldr	r3, [pc, #256]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ee      	bne.n	800245a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b3c      	ldr	r3, [pc, #240]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	4a3b      	ldr	r2, [pc, #236]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8087 	beq.w	80025a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002498:	4b36      	ldr	r3, [pc, #216]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d061      	beq.n	8002568 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d146      	bne.n	800253a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ac:	4b33      	ldr	r3, [pc, #204]	@ (800257c <HAL_RCC_OscConfig+0x4cc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe feb3 	bl	800121c <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe feaf 	bl	800121c <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e06d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024e2:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4921      	ldr	r1, [pc, #132]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a19      	ldr	r1, [r3, #32]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	430b      	orrs	r3, r1
 8002506:	491b      	ldr	r1, [pc, #108]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250c:	4b1b      	ldr	r3, [pc, #108]	@ (800257c <HAL_RCC_OscConfig+0x4cc>)
 800250e:	2201      	movs	r2, #1
 8002510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe fe83 	bl	800121c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800251a:	f7fe fe7f 	bl	800121c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e03d      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0x46a>
 8002538:	e035      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_RCC_OscConfig+0x4cc>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe fe6c 	bl	800121c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe fe68 	bl	800121c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e026      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x498>
 8002566:	e01e      	b.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d107      	bne.n	8002580 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e019      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
 800257c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_OscConfig+0x500>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	429a      	cmp	r2, r3
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d0      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d910      	bls.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b67      	ldr	r3, [pc, #412]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 0207 	bic.w	r2, r3, #7
 80025de:	4965      	ldr	r1, [pc, #404]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0b8      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002610:	4b59      	ldr	r3, [pc, #356]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800261a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002628:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002632:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002634:	4b50      	ldr	r3, [pc, #320]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	494d      	ldr	r1, [pc, #308]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d040      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b47      	ldr	r3, [pc, #284]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e07f      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b41      	ldr	r3, [pc, #260]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e073      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06b      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b39      	ldr	r3, [pc, #228]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4936      	ldr	r1, [pc, #216]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fdba 	bl	800121c <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fdb6 	bl	800121c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e053      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b27      	ldr	r3, [pc, #156]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d210      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4922      	ldr	r1, [pc, #136]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b20      	ldr	r3, [pc, #128]	@ (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e032      	b.n	800276a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d008      	beq.n	8002722 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b19      	ldr	r3, [pc, #100]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4916      	ldr	r1, [pc, #88]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800272e:	4b12      	ldr	r3, [pc, #72]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	490e      	ldr	r1, [pc, #56]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002742:	f000 f821 	bl	8002788 <HAL_RCC_GetSysClockFreq>
 8002746:	4602      	mov	r2, r0
 8002748:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	490a      	ldr	r1, [pc, #40]	@ (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002754:	5ccb      	ldrb	r3, [r1, r3]
 8002756:	fa22 f303 	lsr.w	r3, r2, r3
 800275a:	4a09      	ldr	r2, [pc, #36]	@ (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 800275c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800275e:	4b09      	ldr	r3, [pc, #36]	@ (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fd18 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40022000 	.word	0x40022000
 8002778:	40021000 	.word	0x40021000
 800277c:	080047b0 	.word	0x080047b0
 8002780:	20000000 	.word	0x20000000
 8002784:	20000004 	.word	0x20000004

08002788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027a2:	4b1e      	ldr	r3, [pc, #120]	@ (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x30>
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x36>
 80027b6:	e027      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ba:	613b      	str	r3, [r7, #16]
      break;
 80027bc:	e027      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_RCC_GetSysClockFreq+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0c5b      	lsrs	r3, r3, #17
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	4a11      	ldr	r2, [pc, #68]	@ (8002828 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ea:	fb03 f202 	mul.w	r2, r3, r2
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e004      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0c      	ldr	r2, [pc, #48]	@ (800282c <HAL_RCC_GetSysClockFreq+0xa4>)
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	613b      	str	r3, [r7, #16]
      break;
 8002806:	e002      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002808:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x98>)
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	007a1200 	.word	0x007a1200
 8002824:	080047c8 	.word	0x080047c8
 8002828:	080047d8 	.word	0x080047d8
 800282c:	003d0900 	.word	0x003d0900

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b02      	ldr	r3, [pc, #8]	@ (8002840 <HAL_RCC_GetHCLKFreq+0x10>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff2 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	080047c0 	.word	0x080047c0

0800286c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002874:	4b0a      	ldr	r3, [pc, #40]	@ (80028a0 <RCC_Delay+0x34>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0a      	ldr	r2, [pc, #40]	@ (80028a4 <RCC_Delay+0x38>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a5b      	lsrs	r3, r3, #9
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002888:	bf00      	nop
  }
  while (Delay --);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	60fa      	str	r2, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f9      	bne.n	8002888 <RCC_Delay+0x1c>
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000000 	.word	0x20000000
 80028a4:	10624dd3 	.word	0x10624dd3

080028a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e041      	b.n	800293e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d106      	bne.n	80028d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7fe fbbc 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f000 fc90 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d001      	beq.n	8002960 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_TIM_Base_Start+0x88>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d00e      	beq.n	8002990 <HAL_TIM_Base_Start+0x48>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297a:	d009      	beq.n	8002990 <HAL_TIM_Base_Start+0x48>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <HAL_TIM_Base_Start+0x8c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d004      	beq.n	8002990 <HAL_TIM_Base_Start+0x48>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a13      	ldr	r2, [pc, #76]	@ (80029d8 <HAL_TIM_Base_Start+0x90>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d111      	bne.n	80029b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d010      	beq.n	80029c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0201 	orr.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b2:	e007      	b.n	80029c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800

080029dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e041      	b.n	8002a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d106      	bne.n	8002a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f839 	bl	8002a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	f000 fbf6 	bl	800320c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_TIM_PWM_Start+0x24>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e022      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d109      	bne.n	8002aca <HAL_TIM_PWM_Start+0x3e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	e015      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d109      	bne.n	8002ae4 <HAL_TIM_PWM_Start+0x58>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	bf14      	ite	ne
 8002adc:	2301      	movne	r3, #1
 8002ade:	2300      	moveq	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	e008      	b.n	8002af6 <HAL_TIM_PWM_Start+0x6a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e05e      	b.n	8002bbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x82>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b0c:	e013      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start+0x92>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b1c:	e00b      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d104      	bne.n	8002b2e <HAL_TIM_PWM_Start+0xa2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b2c:	e003      	b.n	8002b36 <HAL_TIM_PWM_Start+0xaa>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	6839      	ldr	r1, [r7, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fdf0 	bl	8003724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc4 <HAL_TIM_PWM_Start+0x138>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d107      	bne.n	8002b5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a18      	ldr	r2, [pc, #96]	@ (8002bc4 <HAL_TIM_PWM_Start+0x138>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00e      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b70:	d009      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a14      	ldr	r2, [pc, #80]	@ (8002bc8 <HAL_TIM_PWM_Start+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d004      	beq.n	8002b86 <HAL_TIM_PWM_Start+0xfa>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_TIM_PWM_Start+0x140>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d111      	bne.n	8002baa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d010      	beq.n	8002bba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba8:	e007      	b.n	8002bba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2200      	movs	r2, #0
 8002be0:	6839      	ldr	r1, [r7, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 fd9e 	bl	8003724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <HAL_TIM_PWM_Stop+0xc4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d117      	bne.n	8002c22 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_TIM_PWM_Stop+0x52>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_PWM_Stop+0x52>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a1a      	ldr	r2, [r3, #32]
 8002c28:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_TIM_PWM_Stop+0x82>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_PWM_Stop+0x82>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Stop+0x92>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Stop+0xba>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Stop+0xa2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Stop+0xba>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Stop+0xb2>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Stop+0xba>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40012c00 	.word	0x40012c00

08002c98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e093      	b.n	8002dd4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe f983 	bl	8000fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cdc:	f023 0307 	bic.w	r3, r3, #7
 8002ce0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 fa8d 	bl	800320c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d1a:	f023 0303 	bic.w	r3, r3, #3
 8002d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002d38:	f023 030c 	bic.w	r3, r3, #12
 8002d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002d44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	4313      	orrs	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	031b      	lsls	r3, r3, #12
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d76:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4313      	orrs	r3, r2
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002df4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dfc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e04:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d110      	bne.n	8002e2e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d102      	bne.n	8002e18 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e12:	7b7b      	ldrb	r3, [r7, #13]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e069      	b.n	8002ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e2c:	e031      	b.n	8002e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d110      	bne.n	8002e56 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e34:	7bbb      	ldrb	r3, [r7, #14]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d102      	bne.n	8002e40 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e3a:	7b3b      	ldrb	r3, [r7, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d001      	beq.n	8002e44 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e055      	b.n	8002ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e54:	e01d      	b.n	8002e92 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d108      	bne.n	8002e6e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e5c:	7bbb      	ldrb	r3, [r7, #14]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e68:	7b3b      	ldrb	r3, [r7, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e03e      	b.n	8002ef0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_TIM_Encoder_Start+0xc4>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d008      	beq.n	8002eb0 <HAL_TIM_Encoder_Start+0xd4>
 8002e9e:	e00f      	b.n	8002ec0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc3b 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 8002eae:	e016      	b.n	8002ede <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 fc33 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 8002ebe:	e00e      	b.n	8002ede <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fc2b 	bl	8003724 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	2104      	movs	r1, #4
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fc24 	bl	8003724 <TIM_CCxChannelCmd>
      break;
 8002edc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0ae      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f200 809f 	bhi.w	8003064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f26:	a201      	add	r2, pc, #4	@ (adr r2, 8002f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08003065 	.word	0x08003065
 8002f34:	08003065 	.word	0x08003065
 8002f38:	08003065 	.word	0x08003065
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08003065 	.word	0x08003065
 8002f44:	08003065 	.word	0x08003065
 8002f48:	08003065 	.word	0x08003065
 8002f4c:	08002fe3 	.word	0x08002fe3
 8002f50:	08003065 	.word	0x08003065
 8002f54:	08003065 	.word	0x08003065
 8002f58:	08003065 	.word	0x08003065
 8002f5c:	08003023 	.word	0x08003023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f9be 	bl	80032e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	619a      	str	r2, [r3, #24]
      break;
 8002f9e:	e064      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa04 	bl	80033b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	021a      	lsls	r2, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
      break;
 8002fe0:	e043      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fa4d 	bl	8003488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0208 	orr.w	r2, r2, #8
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0204 	bic.w	r2, r2, #4
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	61da      	str	r2, [r3, #28]
      break;
 8003020:	e023      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fa97 	bl	800355c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
      break;
 8003062:	e002      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
      break;
 8003068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIM_ConfigClockSource+0x1c>
 8003094:	2302      	movs	r3, #2
 8003096:	e0b4      	b.n	8003202 <HAL_TIM_ConfigClockSource+0x186>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80030b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d0:	d03e      	beq.n	8003150 <HAL_TIM_ConfigClockSource+0xd4>
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030d6:	f200 8087 	bhi.w	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030de:	f000 8086 	beq.w	80031ee <HAL_TIM_ConfigClockSource+0x172>
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e6:	d87f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 80030e8:	2b70      	cmp	r3, #112	@ 0x70
 80030ea:	d01a      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xa6>
 80030ec:	2b70      	cmp	r3, #112	@ 0x70
 80030ee:	d87b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f0:	2b60      	cmp	r3, #96	@ 0x60
 80030f2:	d050      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x11a>
 80030f4:	2b60      	cmp	r3, #96	@ 0x60
 80030f6:	d877      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 80030f8:	2b50      	cmp	r3, #80	@ 0x50
 80030fa:	d03c      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xfa>
 80030fc:	2b50      	cmp	r3, #80	@ 0x50
 80030fe:	d873      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003100:	2b40      	cmp	r3, #64	@ 0x40
 8003102:	d058      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x13a>
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d86f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003108:	2b30      	cmp	r3, #48	@ 0x30
 800310a:	d064      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15a>
 800310c:	2b30      	cmp	r3, #48	@ 0x30
 800310e:	d86b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d060      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d867      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15a>
 800311c:	2b10      	cmp	r3, #16
 800311e:	d05a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x15a>
 8003120:	e062      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003132:	f000 fad8 	bl	80036e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003144:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]
      break;
 800314e:	e04f      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003160:	f000 fac1 	bl	80036e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e03c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fa38 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2150      	movs	r1, #80	@ 0x50
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fa8f 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 8003194:	e02c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 fa56 	bl	8003654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2160      	movs	r1, #96	@ 0x60
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fa7f 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80031b4:	e01c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa18 	bl	80035f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	@ 0x40
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa6f 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80031d4:	e00c      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fa66 	bl	80036b2 <TIM_ITRx_SetConfig>
      break;
 80031e6:	e003      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a2f      	ldr	r2, [pc, #188]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00b      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800322a:	d007      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a2c      	ldr	r2, [pc, #176]	@ (80032e0 <TIM_Base_SetConfig+0xd4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_Base_SetConfig+0x30>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a2b      	ldr	r2, [pc, #172]	@ (80032e4 <TIM_Base_SetConfig+0xd8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d108      	bne.n	800324e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a22      	ldr	r2, [pc, #136]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d00b      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325c:	d007      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1f      	ldr	r2, [pc, #124]	@ (80032e0 <TIM_Base_SetConfig+0xd4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d003      	beq.n	800326e <TIM_Base_SetConfig+0x62>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <TIM_Base_SetConfig+0xd8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d108      	bne.n	8003280 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a0d      	ldr	r2, [pc, #52]	@ (80032dc <TIM_Base_SetConfig+0xd0>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d103      	bne.n	80032b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	611a      	str	r2, [r3, #16]
  }
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800

080032e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b087      	sub	sp, #28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f023 0201 	bic.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f023 0302 	bic.w	r3, r3, #2
 8003330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10c      	bne.n	800335e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0308 	bic.w	r3, r3, #8
 800334a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f023 0304 	bic.w	r3, r3, #4
 800335c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <TIM_OC1_SetConfig+0xc8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40012c00 	.word	0x40012c00

080033b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f023 0210 	bic.w	r2, r3, #16
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f023 0320 	bic.w	r3, r3, #32
 80033fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10d      	bne.n	8003430 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800341a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800342e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a14      	ldr	r2, [pc, #80]	@ (8003484 <TIM_OC2_SetConfig+0xd0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d113      	bne.n	8003460 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800343e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr
 8003484:	40012c00 	.word	0x40012c00

08003488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <TIM_OC3_SetConfig+0xd0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10d      	bne.n	8003502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a14      	ldr	r2, [pc, #80]	@ (8003558 <TIM_OC3_SetConfig+0xd0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d113      	bne.n	8003532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	621a      	str	r2, [r3, #32]
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00

0800355c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	021b      	lsls	r3, r3, #8
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80035a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	031b      	lsls	r3, r3, #12
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <TIM_OC4_SetConfig+0x98>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d109      	bne.n	80035d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	019b      	lsls	r3, r3, #6
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	621a      	str	r2, [r3, #32]
}
 80035ea:	bf00      	nop
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00

080035f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f023 0201 	bic.w	r2, r3, #1
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 030a 	bic.w	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	f023 0210 	bic.w	r2, r3, #16
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800367e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	031b      	lsls	r3, r3, #12
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f043 0307 	orr.w	r3, r3, #7
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003700:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	431a      	orrs	r2, r3
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 031f 	and.w	r3, r3, #31
 8003736:	2201      	movs	r2, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	43db      	mvns	r3, r3
 8003746:	401a      	ands	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a1a      	ldr	r2, [r3, #32]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e046      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a16      	ldr	r2, [pc, #88]	@ (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00e      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d009      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a12      	ldr	r2, [pc, #72]	@ (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d004      	beq.n	80037e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a10      	ldr	r2, [pc, #64]	@ (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d10c      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800

08003828 <siprintf>:
 8003828:	b40e      	push	{r1, r2, r3}
 800382a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800382e:	b510      	push	{r4, lr}
 8003830:	2400      	movs	r4, #0
 8003832:	b09d      	sub	sp, #116	@ 0x74
 8003834:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003836:	9002      	str	r0, [sp, #8]
 8003838:	9006      	str	r0, [sp, #24]
 800383a:	9107      	str	r1, [sp, #28]
 800383c:	9104      	str	r1, [sp, #16]
 800383e:	4809      	ldr	r0, [pc, #36]	@ (8003864 <siprintf+0x3c>)
 8003840:	4909      	ldr	r1, [pc, #36]	@ (8003868 <siprintf+0x40>)
 8003842:	f853 2b04 	ldr.w	r2, [r3], #4
 8003846:	9105      	str	r1, [sp, #20]
 8003848:	6800      	ldr	r0, [r0, #0]
 800384a:	a902      	add	r1, sp, #8
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003850:	f000 f9a0 	bl	8003b94 <_svfiprintf_r>
 8003854:	9b02      	ldr	r3, [sp, #8]
 8003856:	701c      	strb	r4, [r3, #0]
 8003858:	b01d      	add	sp, #116	@ 0x74
 800385a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385e:	b003      	add	sp, #12
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
 8003868:	ffff0208 	.word	0xffff0208

0800386c <memset>:
 800386c:	4603      	mov	r3, r0
 800386e:	4402      	add	r2, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	f803 1b01 	strb.w	r1, [r3], #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <__errno>:
 800387c:	4b01      	ldr	r3, [pc, #4]	@ (8003884 <__errno+0x8>)
 800387e:	6818      	ldr	r0, [r3, #0]
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	2000000c 	.word	0x2000000c

08003888 <__libc_init_array>:
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	2600      	movs	r6, #0
 800388c:	4d0c      	ldr	r5, [pc, #48]	@ (80038c0 <__libc_init_array+0x38>)
 800388e:	4c0d      	ldr	r4, [pc, #52]	@ (80038c4 <__libc_init_array+0x3c>)
 8003890:	1b64      	subs	r4, r4, r5
 8003892:	10a4      	asrs	r4, r4, #2
 8003894:	42a6      	cmp	r6, r4
 8003896:	d109      	bne.n	80038ac <__libc_init_array+0x24>
 8003898:	f000 fc76 	bl	8004188 <_init>
 800389c:	2600      	movs	r6, #0
 800389e:	4d0a      	ldr	r5, [pc, #40]	@ (80038c8 <__libc_init_array+0x40>)
 80038a0:	4c0a      	ldr	r4, [pc, #40]	@ (80038cc <__libc_init_array+0x44>)
 80038a2:	1b64      	subs	r4, r4, r5
 80038a4:	10a4      	asrs	r4, r4, #2
 80038a6:	42a6      	cmp	r6, r4
 80038a8:	d105      	bne.n	80038b6 <__libc_init_array+0x2e>
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b0:	4798      	blx	r3
 80038b2:	3601      	adds	r6, #1
 80038b4:	e7ee      	b.n	8003894 <__libc_init_array+0xc>
 80038b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ba:	4798      	blx	r3
 80038bc:	3601      	adds	r6, #1
 80038be:	e7f2      	b.n	80038a6 <__libc_init_array+0x1e>
 80038c0:	08004810 	.word	0x08004810
 80038c4:	08004810 	.word	0x08004810
 80038c8:	08004810 	.word	0x08004810
 80038cc:	08004814 	.word	0x08004814

080038d0 <__retarget_lock_acquire_recursive>:
 80038d0:	4770      	bx	lr

080038d2 <__retarget_lock_release_recursive>:
 80038d2:	4770      	bx	lr

080038d4 <memcpy>:
 80038d4:	440a      	add	r2, r1
 80038d6:	4291      	cmp	r1, r2
 80038d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80038dc:	d100      	bne.n	80038e0 <memcpy+0xc>
 80038de:	4770      	bx	lr
 80038e0:	b510      	push	{r4, lr}
 80038e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038e6:	4291      	cmp	r1, r2
 80038e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038ec:	d1f9      	bne.n	80038e2 <memcpy+0xe>
 80038ee:	bd10      	pop	{r4, pc}

080038f0 <_free_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4605      	mov	r5, r0
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d040      	beq.n	800397a <_free_r+0x8a>
 80038f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fc:	1f0c      	subs	r4, r1, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bfb8      	it	lt
 8003902:	18e4      	addlt	r4, r4, r3
 8003904:	f000 f8de 	bl	8003ac4 <__malloc_lock>
 8003908:	4a1c      	ldr	r2, [pc, #112]	@ (800397c <_free_r+0x8c>)
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	b933      	cbnz	r3, 800391c <_free_r+0x2c>
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	6014      	str	r4, [r2, #0]
 8003912:	4628      	mov	r0, r5
 8003914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003918:	f000 b8da 	b.w	8003ad0 <__malloc_unlock>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d908      	bls.n	8003932 <_free_r+0x42>
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	1821      	adds	r1, r4, r0
 8003924:	428b      	cmp	r3, r1
 8003926:	bf01      	itttt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	1809      	addeq	r1, r1, r0
 800392e:	6021      	streq	r1, [r4, #0]
 8003930:	e7ed      	b.n	800390e <_free_r+0x1e>
 8003932:	461a      	mov	r2, r3
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b10b      	cbz	r3, 800393c <_free_r+0x4c>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d9fa      	bls.n	8003932 <_free_r+0x42>
 800393c:	6811      	ldr	r1, [r2, #0]
 800393e:	1850      	adds	r0, r2, r1
 8003940:	42a0      	cmp	r0, r4
 8003942:	d10b      	bne.n	800395c <_free_r+0x6c>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	4401      	add	r1, r0
 8003948:	1850      	adds	r0, r2, r1
 800394a:	4283      	cmp	r3, r0
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	d1e0      	bne.n	8003912 <_free_r+0x22>
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4408      	add	r0, r1
 8003956:	6010      	str	r0, [r2, #0]
 8003958:	6053      	str	r3, [r2, #4]
 800395a:	e7da      	b.n	8003912 <_free_r+0x22>
 800395c:	d902      	bls.n	8003964 <_free_r+0x74>
 800395e:	230c      	movs	r3, #12
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	e7d6      	b.n	8003912 <_free_r+0x22>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	1821      	adds	r1, r4, r0
 8003968:	428b      	cmp	r3, r1
 800396a:	bf01      	itttt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	1809      	addeq	r1, r1, r0
 8003972:	6021      	streq	r1, [r4, #0]
 8003974:	6063      	str	r3, [r4, #4]
 8003976:	6054      	str	r4, [r2, #4]
 8003978:	e7cb      	b.n	8003912 <_free_r+0x22>
 800397a:	bd38      	pop	{r3, r4, r5, pc}
 800397c:	20000730 	.word	0x20000730

08003980 <sbrk_aligned>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	4e0f      	ldr	r6, [pc, #60]	@ (80039c0 <sbrk_aligned+0x40>)
 8003984:	460c      	mov	r4, r1
 8003986:	6831      	ldr	r1, [r6, #0]
 8003988:	4605      	mov	r5, r0
 800398a:	b911      	cbnz	r1, 8003992 <sbrk_aligned+0x12>
 800398c:	f000 fba8 	bl	80040e0 <_sbrk_r>
 8003990:	6030      	str	r0, [r6, #0]
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f000 fba3 	bl	80040e0 <_sbrk_r>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	d103      	bne.n	80039a6 <sbrk_aligned+0x26>
 800399e:	f04f 34ff 	mov.w	r4, #4294967295
 80039a2:	4620      	mov	r0, r4
 80039a4:	bd70      	pop	{r4, r5, r6, pc}
 80039a6:	1cc4      	adds	r4, r0, #3
 80039a8:	f024 0403 	bic.w	r4, r4, #3
 80039ac:	42a0      	cmp	r0, r4
 80039ae:	d0f8      	beq.n	80039a2 <sbrk_aligned+0x22>
 80039b0:	1a21      	subs	r1, r4, r0
 80039b2:	4628      	mov	r0, r5
 80039b4:	f000 fb94 	bl	80040e0 <_sbrk_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d1f2      	bne.n	80039a2 <sbrk_aligned+0x22>
 80039bc:	e7ef      	b.n	800399e <sbrk_aligned+0x1e>
 80039be:	bf00      	nop
 80039c0:	2000072c 	.word	0x2000072c

080039c4 <_malloc_r>:
 80039c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039c8:	1ccd      	adds	r5, r1, #3
 80039ca:	f025 0503 	bic.w	r5, r5, #3
 80039ce:	3508      	adds	r5, #8
 80039d0:	2d0c      	cmp	r5, #12
 80039d2:	bf38      	it	cc
 80039d4:	250c      	movcc	r5, #12
 80039d6:	2d00      	cmp	r5, #0
 80039d8:	4606      	mov	r6, r0
 80039da:	db01      	blt.n	80039e0 <_malloc_r+0x1c>
 80039dc:	42a9      	cmp	r1, r5
 80039de:	d904      	bls.n	80039ea <_malloc_r+0x26>
 80039e0:	230c      	movs	r3, #12
 80039e2:	6033      	str	r3, [r6, #0]
 80039e4:	2000      	movs	r0, #0
 80039e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ac0 <_malloc_r+0xfc>
 80039ee:	f000 f869 	bl	8003ac4 <__malloc_lock>
 80039f2:	f8d8 3000 	ldr.w	r3, [r8]
 80039f6:	461c      	mov	r4, r3
 80039f8:	bb44      	cbnz	r4, 8003a4c <_malloc_r+0x88>
 80039fa:	4629      	mov	r1, r5
 80039fc:	4630      	mov	r0, r6
 80039fe:	f7ff ffbf 	bl	8003980 <sbrk_aligned>
 8003a02:	1c43      	adds	r3, r0, #1
 8003a04:	4604      	mov	r4, r0
 8003a06:	d158      	bne.n	8003aba <_malloc_r+0xf6>
 8003a08:	f8d8 4000 	ldr.w	r4, [r8]
 8003a0c:	4627      	mov	r7, r4
 8003a0e:	2f00      	cmp	r7, #0
 8003a10:	d143      	bne.n	8003a9a <_malloc_r+0xd6>
 8003a12:	2c00      	cmp	r4, #0
 8003a14:	d04b      	beq.n	8003aae <_malloc_r+0xea>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	4639      	mov	r1, r7
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	eb04 0903 	add.w	r9, r4, r3
 8003a20:	f000 fb5e 	bl	80040e0 <_sbrk_r>
 8003a24:	4581      	cmp	r9, r0
 8003a26:	d142      	bne.n	8003aae <_malloc_r+0xea>
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	1a6d      	subs	r5, r5, r1
 8003a2e:	4629      	mov	r1, r5
 8003a30:	f7ff ffa6 	bl	8003980 <sbrk_aligned>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d03a      	beq.n	8003aae <_malloc_r+0xea>
 8003a38:	6823      	ldr	r3, [r4, #0]
 8003a3a:	442b      	add	r3, r5
 8003a3c:	6023      	str	r3, [r4, #0]
 8003a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	bb62      	cbnz	r2, 8003aa0 <_malloc_r+0xdc>
 8003a46:	f8c8 7000 	str.w	r7, [r8]
 8003a4a:	e00f      	b.n	8003a6c <_malloc_r+0xa8>
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	1b52      	subs	r2, r2, r5
 8003a50:	d420      	bmi.n	8003a94 <_malloc_r+0xd0>
 8003a52:	2a0b      	cmp	r2, #11
 8003a54:	d917      	bls.n	8003a86 <_malloc_r+0xc2>
 8003a56:	1961      	adds	r1, r4, r5
 8003a58:	42a3      	cmp	r3, r4
 8003a5a:	6025      	str	r5, [r4, #0]
 8003a5c:	bf18      	it	ne
 8003a5e:	6059      	strne	r1, [r3, #4]
 8003a60:	6863      	ldr	r3, [r4, #4]
 8003a62:	bf08      	it	eq
 8003a64:	f8c8 1000 	streq.w	r1, [r8]
 8003a68:	5162      	str	r2, [r4, r5]
 8003a6a:	604b      	str	r3, [r1, #4]
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	f000 f82f 	bl	8003ad0 <__malloc_unlock>
 8003a72:	f104 000b 	add.w	r0, r4, #11
 8003a76:	1d23      	adds	r3, r4, #4
 8003a78:	f020 0007 	bic.w	r0, r0, #7
 8003a7c:	1ac2      	subs	r2, r0, r3
 8003a7e:	bf1c      	itt	ne
 8003a80:	1a1b      	subne	r3, r3, r0
 8003a82:	50a3      	strne	r3, [r4, r2]
 8003a84:	e7af      	b.n	80039e6 <_malloc_r+0x22>
 8003a86:	6862      	ldr	r2, [r4, #4]
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	bf0c      	ite	eq
 8003a8c:	f8c8 2000 	streq.w	r2, [r8]
 8003a90:	605a      	strne	r2, [r3, #4]
 8003a92:	e7eb      	b.n	8003a6c <_malloc_r+0xa8>
 8003a94:	4623      	mov	r3, r4
 8003a96:	6864      	ldr	r4, [r4, #4]
 8003a98:	e7ae      	b.n	80039f8 <_malloc_r+0x34>
 8003a9a:	463c      	mov	r4, r7
 8003a9c:	687f      	ldr	r7, [r7, #4]
 8003a9e:	e7b6      	b.n	8003a0e <_malloc_r+0x4a>
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	d1fb      	bne.n	8003aa0 <_malloc_r+0xdc>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6053      	str	r3, [r2, #4]
 8003aac:	e7de      	b.n	8003a6c <_malloc_r+0xa8>
 8003aae:	230c      	movs	r3, #12
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	6033      	str	r3, [r6, #0]
 8003ab4:	f000 f80c 	bl	8003ad0 <__malloc_unlock>
 8003ab8:	e794      	b.n	80039e4 <_malloc_r+0x20>
 8003aba:	6005      	str	r5, [r0, #0]
 8003abc:	e7d6      	b.n	8003a6c <_malloc_r+0xa8>
 8003abe:	bf00      	nop
 8003ac0:	20000730 	.word	0x20000730

08003ac4 <__malloc_lock>:
 8003ac4:	4801      	ldr	r0, [pc, #4]	@ (8003acc <__malloc_lock+0x8>)
 8003ac6:	f7ff bf03 	b.w	80038d0 <__retarget_lock_acquire_recursive>
 8003aca:	bf00      	nop
 8003acc:	20000728 	.word	0x20000728

08003ad0 <__malloc_unlock>:
 8003ad0:	4801      	ldr	r0, [pc, #4]	@ (8003ad8 <__malloc_unlock+0x8>)
 8003ad2:	f7ff befe 	b.w	80038d2 <__retarget_lock_release_recursive>
 8003ad6:	bf00      	nop
 8003ad8:	20000728 	.word	0x20000728

08003adc <__ssputs_r>:
 8003adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae0:	461f      	mov	r7, r3
 8003ae2:	688e      	ldr	r6, [r1, #8]
 8003ae4:	4682      	mov	sl, r0
 8003ae6:	42be      	cmp	r6, r7
 8003ae8:	460c      	mov	r4, r1
 8003aea:	4690      	mov	r8, r2
 8003aec:	680b      	ldr	r3, [r1, #0]
 8003aee:	d82d      	bhi.n	8003b4c <__ssputs_r+0x70>
 8003af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003af4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003af8:	d026      	beq.n	8003b48 <__ssputs_r+0x6c>
 8003afa:	6965      	ldr	r5, [r4, #20]
 8003afc:	6909      	ldr	r1, [r1, #16]
 8003afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b02:	eba3 0901 	sub.w	r9, r3, r1
 8003b06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b0a:	1c7b      	adds	r3, r7, #1
 8003b0c:	444b      	add	r3, r9
 8003b0e:	106d      	asrs	r5, r5, #1
 8003b10:	429d      	cmp	r5, r3
 8003b12:	bf38      	it	cc
 8003b14:	461d      	movcc	r5, r3
 8003b16:	0553      	lsls	r3, r2, #21
 8003b18:	d527      	bpl.n	8003b6a <__ssputs_r+0x8e>
 8003b1a:	4629      	mov	r1, r5
 8003b1c:	f7ff ff52 	bl	80039c4 <_malloc_r>
 8003b20:	4606      	mov	r6, r0
 8003b22:	b360      	cbz	r0, 8003b7e <__ssputs_r+0xa2>
 8003b24:	464a      	mov	r2, r9
 8003b26:	6921      	ldr	r1, [r4, #16]
 8003b28:	f7ff fed4 	bl	80038d4 <memcpy>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b36:	81a3      	strh	r3, [r4, #12]
 8003b38:	6126      	str	r6, [r4, #16]
 8003b3a:	444e      	add	r6, r9
 8003b3c:	6026      	str	r6, [r4, #0]
 8003b3e:	463e      	mov	r6, r7
 8003b40:	6165      	str	r5, [r4, #20]
 8003b42:	eba5 0509 	sub.w	r5, r5, r9
 8003b46:	60a5      	str	r5, [r4, #8]
 8003b48:	42be      	cmp	r6, r7
 8003b4a:	d900      	bls.n	8003b4e <__ssputs_r+0x72>
 8003b4c:	463e      	mov	r6, r7
 8003b4e:	4632      	mov	r2, r6
 8003b50:	4641      	mov	r1, r8
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	f000 faaa 	bl	80040ac <memmove>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	68a3      	ldr	r3, [r4, #8]
 8003b5c:	1b9b      	subs	r3, r3, r6
 8003b5e:	60a3      	str	r3, [r4, #8]
 8003b60:	6823      	ldr	r3, [r4, #0]
 8003b62:	4433      	add	r3, r6
 8003b64:	6023      	str	r3, [r4, #0]
 8003b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	f000 fad6 	bl	800411c <_realloc_r>
 8003b70:	4606      	mov	r6, r0
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1e0      	bne.n	8003b38 <__ssputs_r+0x5c>
 8003b76:	4650      	mov	r0, sl
 8003b78:	6921      	ldr	r1, [r4, #16]
 8003b7a:	f7ff feb9 	bl	80038f0 <_free_r>
 8003b7e:	230c      	movs	r3, #12
 8003b80:	f8ca 3000 	str.w	r3, [sl]
 8003b84:	89a3      	ldrh	r3, [r4, #12]
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	e7e9      	b.n	8003b66 <__ssputs_r+0x8a>
	...

08003b94 <_svfiprintf_r>:
 8003b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b98:	4698      	mov	r8, r3
 8003b9a:	898b      	ldrh	r3, [r1, #12]
 8003b9c:	4607      	mov	r7, r0
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	460d      	mov	r5, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	b09d      	sub	sp, #116	@ 0x74
 8003ba6:	d510      	bpl.n	8003bca <_svfiprintf_r+0x36>
 8003ba8:	690b      	ldr	r3, [r1, #16]
 8003baa:	b973      	cbnz	r3, 8003bca <_svfiprintf_r+0x36>
 8003bac:	2140      	movs	r1, #64	@ 0x40
 8003bae:	f7ff ff09 	bl	80039c4 <_malloc_r>
 8003bb2:	6028      	str	r0, [r5, #0]
 8003bb4:	6128      	str	r0, [r5, #16]
 8003bb6:	b930      	cbnz	r0, 8003bc6 <_svfiprintf_r+0x32>
 8003bb8:	230c      	movs	r3, #12
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b01d      	add	sp, #116	@ 0x74
 8003bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bc6:	2340      	movs	r3, #64	@ 0x40
 8003bc8:	616b      	str	r3, [r5, #20]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bce:	2320      	movs	r3, #32
 8003bd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bd4:	2330      	movs	r3, #48	@ 0x30
 8003bd6:	f04f 0901 	mov.w	r9, #1
 8003bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d78 <_svfiprintf_r+0x1e4>
 8003be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003be6:	4623      	mov	r3, r4
 8003be8:	469a      	mov	sl, r3
 8003bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bee:	b10a      	cbz	r2, 8003bf4 <_svfiprintf_r+0x60>
 8003bf0:	2a25      	cmp	r2, #37	@ 0x25
 8003bf2:	d1f9      	bne.n	8003be8 <_svfiprintf_r+0x54>
 8003bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8003bf8:	d00b      	beq.n	8003c12 <_svfiprintf_r+0x7e>
 8003bfa:	465b      	mov	r3, fp
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	4629      	mov	r1, r5
 8003c00:	4638      	mov	r0, r7
 8003c02:	f7ff ff6b 	bl	8003adc <__ssputs_r>
 8003c06:	3001      	adds	r0, #1
 8003c08:	f000 80a7 	beq.w	8003d5a <_svfiprintf_r+0x1c6>
 8003c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c0e:	445a      	add	r2, fp
 8003c10:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c12:	f89a 3000 	ldrb.w	r3, [sl]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 809f 	beq.w	8003d5a <_svfiprintf_r+0x1c6>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c26:	f10a 0a01 	add.w	sl, sl, #1
 8003c2a:	9304      	str	r3, [sp, #16]
 8003c2c:	9307      	str	r3, [sp, #28]
 8003c2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c32:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c34:	4654      	mov	r4, sl
 8003c36:	2205      	movs	r2, #5
 8003c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c3c:	484e      	ldr	r0, [pc, #312]	@ (8003d78 <_svfiprintf_r+0x1e4>)
 8003c3e:	f000 fa5f 	bl	8004100 <memchr>
 8003c42:	9a04      	ldr	r2, [sp, #16]
 8003c44:	b9d8      	cbnz	r0, 8003c7e <_svfiprintf_r+0xea>
 8003c46:	06d0      	lsls	r0, r2, #27
 8003c48:	bf44      	itt	mi
 8003c4a:	2320      	movmi	r3, #32
 8003c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c50:	0711      	lsls	r1, r2, #28
 8003c52:	bf44      	itt	mi
 8003c54:	232b      	movmi	r3, #43	@ 0x2b
 8003c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c60:	d015      	beq.n	8003c8e <_svfiprintf_r+0xfa>
 8003c62:	4654      	mov	r4, sl
 8003c64:	2000      	movs	r0, #0
 8003c66:	f04f 0c0a 	mov.w	ip, #10
 8003c6a:	9a07      	ldr	r2, [sp, #28]
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c72:	3b30      	subs	r3, #48	@ 0x30
 8003c74:	2b09      	cmp	r3, #9
 8003c76:	d94b      	bls.n	8003d10 <_svfiprintf_r+0x17c>
 8003c78:	b1b0      	cbz	r0, 8003ca8 <_svfiprintf_r+0x114>
 8003c7a:	9207      	str	r2, [sp, #28]
 8003c7c:	e014      	b.n	8003ca8 <_svfiprintf_r+0x114>
 8003c7e:	eba0 0308 	sub.w	r3, r0, r8
 8003c82:	fa09 f303 	lsl.w	r3, r9, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	46a2      	mov	sl, r4
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	e7d2      	b.n	8003c34 <_svfiprintf_r+0xa0>
 8003c8e:	9b03      	ldr	r3, [sp, #12]
 8003c90:	1d19      	adds	r1, r3, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	9103      	str	r1, [sp, #12]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bfbb      	ittet	lt
 8003c9a:	425b      	neglt	r3, r3
 8003c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca0:	9307      	strge	r3, [sp, #28]
 8003ca2:	9307      	strlt	r3, [sp, #28]
 8003ca4:	bfb8      	it	lt
 8003ca6:	9204      	strlt	r2, [sp, #16]
 8003ca8:	7823      	ldrb	r3, [r4, #0]
 8003caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cac:	d10a      	bne.n	8003cc4 <_svfiprintf_r+0x130>
 8003cae:	7863      	ldrb	r3, [r4, #1]
 8003cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb2:	d132      	bne.n	8003d1a <_svfiprintf_r+0x186>
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	3402      	adds	r4, #2
 8003cb8:	1d1a      	adds	r2, r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9203      	str	r2, [sp, #12]
 8003cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cc2:	9305      	str	r3, [sp, #20]
 8003cc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d7c <_svfiprintf_r+0x1e8>
 8003cc8:	2203      	movs	r2, #3
 8003cca:	4650      	mov	r0, sl
 8003ccc:	7821      	ldrb	r1, [r4, #0]
 8003cce:	f000 fa17 	bl	8004100 <memchr>
 8003cd2:	b138      	cbz	r0, 8003ce4 <_svfiprintf_r+0x150>
 8003cd4:	2240      	movs	r2, #64	@ 0x40
 8003cd6:	9b04      	ldr	r3, [sp, #16]
 8003cd8:	eba0 000a 	sub.w	r0, r0, sl
 8003cdc:	4082      	lsls	r2, r0
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	3401      	adds	r4, #1
 8003ce2:	9304      	str	r3, [sp, #16]
 8003ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce8:	2206      	movs	r2, #6
 8003cea:	4825      	ldr	r0, [pc, #148]	@ (8003d80 <_svfiprintf_r+0x1ec>)
 8003cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cf0:	f000 fa06 	bl	8004100 <memchr>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d036      	beq.n	8003d66 <_svfiprintf_r+0x1d2>
 8003cf8:	4b22      	ldr	r3, [pc, #136]	@ (8003d84 <_svfiprintf_r+0x1f0>)
 8003cfa:	bb1b      	cbnz	r3, 8003d44 <_svfiprintf_r+0x1b0>
 8003cfc:	9b03      	ldr	r3, [sp, #12]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	f023 0307 	bic.w	r3, r3, #7
 8003d04:	3308      	adds	r3, #8
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d0a:	4433      	add	r3, r6
 8003d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0e:	e76a      	b.n	8003be6 <_svfiprintf_r+0x52>
 8003d10:	460c      	mov	r4, r1
 8003d12:	2001      	movs	r0, #1
 8003d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d18:	e7a8      	b.n	8003c6c <_svfiprintf_r+0xd8>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f04f 0c0a 	mov.w	ip, #10
 8003d20:	4619      	mov	r1, r3
 8003d22:	3401      	adds	r4, #1
 8003d24:	9305      	str	r3, [sp, #20]
 8003d26:	4620      	mov	r0, r4
 8003d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d2c:	3a30      	subs	r2, #48	@ 0x30
 8003d2e:	2a09      	cmp	r2, #9
 8003d30:	d903      	bls.n	8003d3a <_svfiprintf_r+0x1a6>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0c6      	beq.n	8003cc4 <_svfiprintf_r+0x130>
 8003d36:	9105      	str	r1, [sp, #20]
 8003d38:	e7c4      	b.n	8003cc4 <_svfiprintf_r+0x130>
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d42:	e7f0      	b.n	8003d26 <_svfiprintf_r+0x192>
 8003d44:	ab03      	add	r3, sp, #12
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	462a      	mov	r2, r5
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <_svfiprintf_r+0x1f4>)
 8003d4e:	a904      	add	r1, sp, #16
 8003d50:	f3af 8000 	nop.w
 8003d54:	1c42      	adds	r2, r0, #1
 8003d56:	4606      	mov	r6, r0
 8003d58:	d1d6      	bne.n	8003d08 <_svfiprintf_r+0x174>
 8003d5a:	89ab      	ldrh	r3, [r5, #12]
 8003d5c:	065b      	lsls	r3, r3, #25
 8003d5e:	f53f af2d 	bmi.w	8003bbc <_svfiprintf_r+0x28>
 8003d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d64:	e72c      	b.n	8003bc0 <_svfiprintf_r+0x2c>
 8003d66:	ab03      	add	r3, sp, #12
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	462a      	mov	r2, r5
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	4b06      	ldr	r3, [pc, #24]	@ (8003d88 <_svfiprintf_r+0x1f4>)
 8003d70:	a904      	add	r1, sp, #16
 8003d72:	f000 f87d 	bl	8003e70 <_printf_i>
 8003d76:	e7ed      	b.n	8003d54 <_svfiprintf_r+0x1c0>
 8003d78:	080047da 	.word	0x080047da
 8003d7c:	080047e0 	.word	0x080047e0
 8003d80:	080047e4 	.word	0x080047e4
 8003d84:	00000000 	.word	0x00000000
 8003d88:	08003add 	.word	0x08003add

08003d8c <_printf_common>:
 8003d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	4616      	mov	r6, r2
 8003d92:	4698      	mov	r8, r3
 8003d94:	688a      	ldr	r2, [r1, #8]
 8003d96:	690b      	ldr	r3, [r1, #16]
 8003d98:	4607      	mov	r7, r0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	bfb8      	it	lt
 8003d9e:	4613      	movlt	r3, r2
 8003da0:	6033      	str	r3, [r6, #0]
 8003da2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003da6:	460c      	mov	r4, r1
 8003da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dac:	b10a      	cbz	r2, 8003db2 <_printf_common+0x26>
 8003dae:	3301      	adds	r3, #1
 8003db0:	6033      	str	r3, [r6, #0]
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	0699      	lsls	r1, r3, #26
 8003db6:	bf42      	ittt	mi
 8003db8:	6833      	ldrmi	r3, [r6, #0]
 8003dba:	3302      	addmi	r3, #2
 8003dbc:	6033      	strmi	r3, [r6, #0]
 8003dbe:	6825      	ldr	r5, [r4, #0]
 8003dc0:	f015 0506 	ands.w	r5, r5, #6
 8003dc4:	d106      	bne.n	8003dd4 <_printf_common+0x48>
 8003dc6:	f104 0a19 	add.w	sl, r4, #25
 8003dca:	68e3      	ldr	r3, [r4, #12]
 8003dcc:	6832      	ldr	r2, [r6, #0]
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	42ab      	cmp	r3, r5
 8003dd2:	dc2b      	bgt.n	8003e2c <_printf_common+0xa0>
 8003dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	3b00      	subs	r3, #0
 8003ddc:	bf18      	it	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	0692      	lsls	r2, r2, #26
 8003de2:	d430      	bmi.n	8003e46 <_printf_common+0xba>
 8003de4:	4641      	mov	r1, r8
 8003de6:	4638      	mov	r0, r7
 8003de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dec:	47c8      	blx	r9
 8003dee:	3001      	adds	r0, #1
 8003df0:	d023      	beq.n	8003e3a <_printf_common+0xae>
 8003df2:	6823      	ldr	r3, [r4, #0]
 8003df4:	6922      	ldr	r2, [r4, #16]
 8003df6:	f003 0306 	and.w	r3, r3, #6
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	bf14      	ite	ne
 8003dfe:	2500      	movne	r5, #0
 8003e00:	6833      	ldreq	r3, [r6, #0]
 8003e02:	f04f 0600 	mov.w	r6, #0
 8003e06:	bf08      	it	eq
 8003e08:	68e5      	ldreq	r5, [r4, #12]
 8003e0a:	f104 041a 	add.w	r4, r4, #26
 8003e0e:	bf08      	it	eq
 8003e10:	1aed      	subeq	r5, r5, r3
 8003e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e16:	bf08      	it	eq
 8003e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	bfc4      	itt	gt
 8003e20:	1a9b      	subgt	r3, r3, r2
 8003e22:	18ed      	addgt	r5, r5, r3
 8003e24:	42b5      	cmp	r5, r6
 8003e26:	d11a      	bne.n	8003e5e <_printf_common+0xd2>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e008      	b.n	8003e3e <_printf_common+0xb2>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4652      	mov	r2, sl
 8003e30:	4641      	mov	r1, r8
 8003e32:	4638      	mov	r0, r7
 8003e34:	47c8      	blx	r9
 8003e36:	3001      	adds	r0, #1
 8003e38:	d103      	bne.n	8003e42 <_printf_common+0xb6>
 8003e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e42:	3501      	adds	r5, #1
 8003e44:	e7c1      	b.n	8003dca <_printf_common+0x3e>
 8003e46:	2030      	movs	r0, #48	@ 0x30
 8003e48:	18e1      	adds	r1, r4, r3
 8003e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e54:	4422      	add	r2, r4
 8003e56:	3302      	adds	r3, #2
 8003e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e5c:	e7c2      	b.n	8003de4 <_printf_common+0x58>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4622      	mov	r2, r4
 8003e62:	4641      	mov	r1, r8
 8003e64:	4638      	mov	r0, r7
 8003e66:	47c8      	blx	r9
 8003e68:	3001      	adds	r0, #1
 8003e6a:	d0e6      	beq.n	8003e3a <_printf_common+0xae>
 8003e6c:	3601      	adds	r6, #1
 8003e6e:	e7d9      	b.n	8003e24 <_printf_common+0x98>

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	4691      	mov	r9, r2
 8003e78:	2f78      	cmp	r7, #120	@ 0x78
 8003e7a:	4680      	mov	r8, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	469a      	mov	sl, r3
 8003e80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	@ 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d1 	beq.w	8004034 <_printf_i+0x1c4>
 8003e92:	2f58      	cmp	r7, #88	@ 0x58
 8003e94:	f000 80b8 	beq.w	8004008 <_printf_i+0x198>
 8003e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800401b 	.word	0x0800401b
 8003ee0:	08003f47 	.word	0x08003f47
 8003ee4:	08003fd5 	.word	0x08003fd5
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800403d 	.word	0x0800403d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f47 	.word	0x08003f47
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08003fdd 	.word	0x08003fdd
 8003f08:	6833      	ldr	r3, [r6, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6032      	str	r2, [r6, #0]
 8003f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09c      	b.n	8004056 <_printf_i+0x1e6>
 8003f1c:	6833      	ldr	r3, [r6, #0]
 8003f1e:	6820      	ldr	r0, [r4, #0]
 8003f20:	1d19      	adds	r1, r3, #4
 8003f22:	6031      	str	r1, [r6, #0]
 8003f24:	0606      	lsls	r6, r0, #24
 8003f26:	d501      	bpl.n	8003f2c <_printf_i+0xbc>
 8003f28:	681d      	ldr	r5, [r3, #0]
 8003f2a:	e003      	b.n	8003f34 <_printf_i+0xc4>
 8003f2c:	0645      	lsls	r5, r0, #25
 8003f2e:	d5fb      	bpl.n	8003f28 <_printf_i+0xb8>
 8003f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f34:	2d00      	cmp	r5, #0
 8003f36:	da03      	bge.n	8003f40 <_printf_i+0xd0>
 8003f38:	232d      	movs	r3, #45	@ 0x2d
 8003f3a:	426d      	negs	r5, r5
 8003f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f40:	230a      	movs	r3, #10
 8003f42:	4858      	ldr	r0, [pc, #352]	@ (80040a4 <_printf_i+0x234>)
 8003f44:	e011      	b.n	8003f6a <_printf_i+0xfa>
 8003f46:	6821      	ldr	r1, [r4, #0]
 8003f48:	6833      	ldr	r3, [r6, #0]
 8003f4a:	0608      	lsls	r0, r1, #24
 8003f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f50:	d402      	bmi.n	8003f58 <_printf_i+0xe8>
 8003f52:	0649      	lsls	r1, r1, #25
 8003f54:	bf48      	it	mi
 8003f56:	b2ad      	uxthmi	r5, r5
 8003f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f5a:	6033      	str	r3, [r6, #0]
 8003f5c:	bf14      	ite	ne
 8003f5e:	230a      	movne	r3, #10
 8003f60:	2308      	moveq	r3, #8
 8003f62:	4850      	ldr	r0, [pc, #320]	@ (80040a4 <_printf_i+0x234>)
 8003f64:	2100      	movs	r1, #0
 8003f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f6a:	6866      	ldr	r6, [r4, #4]
 8003f6c:	2e00      	cmp	r6, #0
 8003f6e:	60a6      	str	r6, [r4, #8]
 8003f70:	db05      	blt.n	8003f7e <_printf_i+0x10e>
 8003f72:	6821      	ldr	r1, [r4, #0]
 8003f74:	432e      	orrs	r6, r5
 8003f76:	f021 0104 	bic.w	r1, r1, #4
 8003f7a:	6021      	str	r1, [r4, #0]
 8003f7c:	d04b      	beq.n	8004016 <_printf_i+0x1a6>
 8003f7e:	4616      	mov	r6, r2
 8003f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f84:	fb03 5711 	mls	r7, r3, r1, r5
 8003f88:	5dc7      	ldrb	r7, [r0, r7]
 8003f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f8e:	462f      	mov	r7, r5
 8003f90:	42bb      	cmp	r3, r7
 8003f92:	460d      	mov	r5, r1
 8003f94:	d9f4      	bls.n	8003f80 <_printf_i+0x110>
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d10b      	bne.n	8003fb2 <_printf_i+0x142>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	07df      	lsls	r7, r3, #31
 8003f9e:	d508      	bpl.n	8003fb2 <_printf_i+0x142>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	6861      	ldr	r1, [r4, #4]
 8003fa4:	4299      	cmp	r1, r3
 8003fa6:	bfde      	ittt	le
 8003fa8:	2330      	movle	r3, #48	@ 0x30
 8003faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fb2:	1b92      	subs	r2, r2, r6
 8003fb4:	6122      	str	r2, [r4, #16]
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4640      	mov	r0, r8
 8003fbc:	f8cd a000 	str.w	sl, [sp]
 8003fc0:	aa03      	add	r2, sp, #12
 8003fc2:	f7ff fee3 	bl	8003d8c <_printf_common>
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d14a      	bne.n	8004060 <_printf_i+0x1f0>
 8003fca:	f04f 30ff 	mov.w	r0, #4294967295
 8003fce:	b004      	add	sp, #16
 8003fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd4:	6823      	ldr	r3, [r4, #0]
 8003fd6:	f043 0320 	orr.w	r3, r3, #32
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	2778      	movs	r7, #120	@ 0x78
 8003fde:	4832      	ldr	r0, [pc, #200]	@ (80040a8 <_printf_i+0x238>)
 8003fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	6831      	ldr	r1, [r6, #0]
 8003fe8:	061f      	lsls	r7, r3, #24
 8003fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fee:	d402      	bmi.n	8003ff6 <_printf_i+0x186>
 8003ff0:	065f      	lsls	r7, r3, #25
 8003ff2:	bf48      	it	mi
 8003ff4:	b2ad      	uxthmi	r5, r5
 8003ff6:	6031      	str	r1, [r6, #0]
 8003ff8:	07d9      	lsls	r1, r3, #31
 8003ffa:	bf44      	itt	mi
 8003ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8004000:	6023      	strmi	r3, [r4, #0]
 8004002:	b11d      	cbz	r5, 800400c <_printf_i+0x19c>
 8004004:	2310      	movs	r3, #16
 8004006:	e7ad      	b.n	8003f64 <_printf_i+0xf4>
 8004008:	4826      	ldr	r0, [pc, #152]	@ (80040a4 <_printf_i+0x234>)
 800400a:	e7e9      	b.n	8003fe0 <_printf_i+0x170>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f023 0320 	bic.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	e7f6      	b.n	8004004 <_printf_i+0x194>
 8004016:	4616      	mov	r6, r2
 8004018:	e7bd      	b.n	8003f96 <_printf_i+0x126>
 800401a:	6833      	ldr	r3, [r6, #0]
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	1d18      	adds	r0, r3, #4
 8004020:	6961      	ldr	r1, [r4, #20]
 8004022:	6030      	str	r0, [r6, #0]
 8004024:	062e      	lsls	r6, r5, #24
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	d501      	bpl.n	800402e <_printf_i+0x1be>
 800402a:	6019      	str	r1, [r3, #0]
 800402c:	e002      	b.n	8004034 <_printf_i+0x1c4>
 800402e:	0668      	lsls	r0, r5, #25
 8004030:	d5fb      	bpl.n	800402a <_printf_i+0x1ba>
 8004032:	8019      	strh	r1, [r3, #0]
 8004034:	2300      	movs	r3, #0
 8004036:	4616      	mov	r6, r2
 8004038:	6123      	str	r3, [r4, #16]
 800403a:	e7bc      	b.n	8003fb6 <_printf_i+0x146>
 800403c:	6833      	ldr	r3, [r6, #0]
 800403e:	2100      	movs	r1, #0
 8004040:	1d1a      	adds	r2, r3, #4
 8004042:	6032      	str	r2, [r6, #0]
 8004044:	681e      	ldr	r6, [r3, #0]
 8004046:	6862      	ldr	r2, [r4, #4]
 8004048:	4630      	mov	r0, r6
 800404a:	f000 f859 	bl	8004100 <memchr>
 800404e:	b108      	cbz	r0, 8004054 <_printf_i+0x1e4>
 8004050:	1b80      	subs	r0, r0, r6
 8004052:	6060      	str	r0, [r4, #4]
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	6123      	str	r3, [r4, #16]
 8004058:	2300      	movs	r3, #0
 800405a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800405e:	e7aa      	b.n	8003fb6 <_printf_i+0x146>
 8004060:	4632      	mov	r2, r6
 8004062:	4649      	mov	r1, r9
 8004064:	4640      	mov	r0, r8
 8004066:	6923      	ldr	r3, [r4, #16]
 8004068:	47d0      	blx	sl
 800406a:	3001      	adds	r0, #1
 800406c:	d0ad      	beq.n	8003fca <_printf_i+0x15a>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	079b      	lsls	r3, r3, #30
 8004072:	d413      	bmi.n	800409c <_printf_i+0x22c>
 8004074:	68e0      	ldr	r0, [r4, #12]
 8004076:	9b03      	ldr	r3, [sp, #12]
 8004078:	4298      	cmp	r0, r3
 800407a:	bfb8      	it	lt
 800407c:	4618      	movlt	r0, r3
 800407e:	e7a6      	b.n	8003fce <_printf_i+0x15e>
 8004080:	2301      	movs	r3, #1
 8004082:	4632      	mov	r2, r6
 8004084:	4649      	mov	r1, r9
 8004086:	4640      	mov	r0, r8
 8004088:	47d0      	blx	sl
 800408a:	3001      	adds	r0, #1
 800408c:	d09d      	beq.n	8003fca <_printf_i+0x15a>
 800408e:	3501      	adds	r5, #1
 8004090:	68e3      	ldr	r3, [r4, #12]
 8004092:	9903      	ldr	r1, [sp, #12]
 8004094:	1a5b      	subs	r3, r3, r1
 8004096:	42ab      	cmp	r3, r5
 8004098:	dcf2      	bgt.n	8004080 <_printf_i+0x210>
 800409a:	e7eb      	b.n	8004074 <_printf_i+0x204>
 800409c:	2500      	movs	r5, #0
 800409e:	f104 0619 	add.w	r6, r4, #25
 80040a2:	e7f5      	b.n	8004090 <_printf_i+0x220>
 80040a4:	080047eb 	.word	0x080047eb
 80040a8:	080047fc 	.word	0x080047fc

080040ac <memmove>:
 80040ac:	4288      	cmp	r0, r1
 80040ae:	b510      	push	{r4, lr}
 80040b0:	eb01 0402 	add.w	r4, r1, r2
 80040b4:	d902      	bls.n	80040bc <memmove+0x10>
 80040b6:	4284      	cmp	r4, r0
 80040b8:	4623      	mov	r3, r4
 80040ba:	d807      	bhi.n	80040cc <memmove+0x20>
 80040bc:	1e43      	subs	r3, r0, #1
 80040be:	42a1      	cmp	r1, r4
 80040c0:	d008      	beq.n	80040d4 <memmove+0x28>
 80040c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ca:	e7f8      	b.n	80040be <memmove+0x12>
 80040cc:	4601      	mov	r1, r0
 80040ce:	4402      	add	r2, r0
 80040d0:	428a      	cmp	r2, r1
 80040d2:	d100      	bne.n	80040d6 <memmove+0x2a>
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040de:	e7f7      	b.n	80040d0 <memmove+0x24>

080040e0 <_sbrk_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	2300      	movs	r3, #0
 80040e4:	4d05      	ldr	r5, [pc, #20]	@ (80040fc <_sbrk_r+0x1c>)
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fc fe50 	bl	8000d90 <_sbrk>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_sbrk_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_sbrk_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000724 	.word	0x20000724

08004100 <memchr>:
 8004100:	4603      	mov	r3, r0
 8004102:	b510      	push	{r4, lr}
 8004104:	b2c9      	uxtb	r1, r1
 8004106:	4402      	add	r2, r0
 8004108:	4293      	cmp	r3, r2
 800410a:	4618      	mov	r0, r3
 800410c:	d101      	bne.n	8004112 <memchr+0x12>
 800410e:	2000      	movs	r0, #0
 8004110:	e003      	b.n	800411a <memchr+0x1a>
 8004112:	7804      	ldrb	r4, [r0, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	428c      	cmp	r4, r1
 8004118:	d1f6      	bne.n	8004108 <memchr+0x8>
 800411a:	bd10      	pop	{r4, pc}

0800411c <_realloc_r>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	4607      	mov	r7, r0
 8004122:	4614      	mov	r4, r2
 8004124:	460d      	mov	r5, r1
 8004126:	b921      	cbnz	r1, 8004132 <_realloc_r+0x16>
 8004128:	4611      	mov	r1, r2
 800412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	f7ff bc49 	b.w	80039c4 <_malloc_r>
 8004132:	b92a      	cbnz	r2, 8004140 <_realloc_r+0x24>
 8004134:	f7ff fbdc 	bl	80038f0 <_free_r>
 8004138:	4625      	mov	r5, r4
 800413a:	4628      	mov	r0, r5
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004140:	f000 f81a 	bl	8004178 <_malloc_usable_size_r>
 8004144:	4284      	cmp	r4, r0
 8004146:	4606      	mov	r6, r0
 8004148:	d802      	bhi.n	8004150 <_realloc_r+0x34>
 800414a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800414e:	d8f4      	bhi.n	800413a <_realloc_r+0x1e>
 8004150:	4621      	mov	r1, r4
 8004152:	4638      	mov	r0, r7
 8004154:	f7ff fc36 	bl	80039c4 <_malloc_r>
 8004158:	4680      	mov	r8, r0
 800415a:	b908      	cbnz	r0, 8004160 <_realloc_r+0x44>
 800415c:	4645      	mov	r5, r8
 800415e:	e7ec      	b.n	800413a <_realloc_r+0x1e>
 8004160:	42b4      	cmp	r4, r6
 8004162:	4622      	mov	r2, r4
 8004164:	4629      	mov	r1, r5
 8004166:	bf28      	it	cs
 8004168:	4632      	movcs	r2, r6
 800416a:	f7ff fbb3 	bl	80038d4 <memcpy>
 800416e:	4629      	mov	r1, r5
 8004170:	4638      	mov	r0, r7
 8004172:	f7ff fbbd 	bl	80038f0 <_free_r>
 8004176:	e7f1      	b.n	800415c <_realloc_r+0x40>

08004178 <_malloc_usable_size_r>:
 8004178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800417c:	1f18      	subs	r0, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bfbc      	itt	lt
 8004182:	580b      	ldrlt	r3, [r1, r0]
 8004184:	18c0      	addlt	r0, r0, r3
 8004186:	4770      	bx	lr

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
