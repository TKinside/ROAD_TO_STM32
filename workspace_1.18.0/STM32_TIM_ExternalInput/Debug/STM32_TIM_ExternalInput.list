
STM32_TIM_ExternalInput.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000336c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08003478  08003478  00004478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800372c  0800372c  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800372c  0800372c  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800372c  0800372c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800372c  0800372c  0000472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003730  08003730  00004730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003734  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d8  2000005c  08003790  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  08003790  00005734  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f132  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002476  00000000  00000000  000141b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00016630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018b7b  00000000  00000000  000175c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134e4  00000000  00000000  0003013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008d791  00000000  00000000  0004361f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d0db0  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000c3f  00000000  00000000  000d0df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004630  00000000  00000000  000d1a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d6064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003460 	.word	0x08003460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003460 	.word	0x08003460

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000152:	4b14      	ldr	r3, [pc, #80]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000154:	699b      	ldr	r3, [r3, #24]
 8000156:	4a13      	ldr	r2, [pc, #76]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000158:	f043 0320 	orr.w	r3, r3, #32
 800015c:	6193      	str	r3, [r2, #24]
 800015e:	4b11      	ldr	r3, [pc, #68]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000160:	699b      	ldr	r3, [r3, #24]
 8000162:	f003 0320 	and.w	r3, r3, #32
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800016a:	4b0e      	ldr	r3, [pc, #56]	@ (80001a4 <MX_GPIO_Init+0x58>)
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	4a0d      	ldr	r2, [pc, #52]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000170:	f043 0304 	orr.w	r3, r3, #4
 8000174:	6193      	str	r3, [r2, #24]
 8000176:	4b0b      	ldr	r3, [pc, #44]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	60bb      	str	r3, [r7, #8]
 8000180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000182:	4b08      	ldr	r3, [pc, #32]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000184:	699b      	ldr	r3, [r3, #24]
 8000186:	4a07      	ldr	r2, [pc, #28]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6193      	str	r3, [r2, #24]
 800018e:	4b05      	ldr	r3, [pc, #20]	@ (80001a4 <MX_GPIO_Init+0x58>)
 8000190:	699b      	ldr	r3, [r3, #24]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

}
 800019a:	bf00      	nop
 800019c:	3714      	adds	r7, #20
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	@ (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	@ (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f001 f83d 	bl	8001264 <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f8d7 	bl	80003a2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	40005400 	.word	0x40005400
 8000200:	000186a0 	.word	0x000186a0

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a15      	ldr	r2, [pc, #84]	@ (8000274 <HAL_I2C_MspInit+0x70>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d123      	bne.n	800026c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b14      	ldr	r3, [pc, #80]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a13      	ldr	r2, [pc, #76]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800023c:	23c0      	movs	r3, #192	@ 0xc0
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000240:	2312      	movs	r3, #18
 8000242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000244:	2303      	movs	r3, #3
 8000246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480b      	ldr	r0, [pc, #44]	@ (800027c <HAL_I2C_MspInit+0x78>)
 8000250:	f000 fe84 	bl	8000f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000254:	4b08      	ldr	r3, [pc, #32]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a07      	ldr	r2, [pc, #28]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 800025a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800025e:	61d3      	str	r3, [r2, #28]
 8000260:	4b05      	ldr	r3, [pc, #20]	@ (8000278 <HAL_I2C_MspInit+0x74>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40005400 	.word	0x40005400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	@ 0x58
 8000284:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fcff 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f84f 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f7ff ff5d 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 fc5f 	bl	8000b54 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000296:	f000 fbcf 	bl	8000a38 <MX_TIM2_Init>
  MX_I2C1_Init();
 800029a:	f7ff ff85 	bl	80001a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_Delay(20);
 800029e:	2014      	movs	r0, #20
 80002a0:	f000 fd54 	bl	8000d4c <HAL_Delay>
    OLED_Init();
 80002a4:	f000 f8ac 	bl	8000400 <OLED_Init>
    OLED_Clean();
 80002a8:	f000 f940 	bl	800052c <OLED_Clean>
    HAL_TIM_Base_Start(&htim2);
 80002ac:	481b      	ldr	r0, [pc, #108]	@ (800031c <main+0x9c>)
 80002ae:	f002 f8d5 	bl	800245c <HAL_TIM_Base_Start>
    char message1[30];
    char message2[30];
    int counter=0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int preCounter=0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    int difference=0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      OLED_NewFrame();
 80002be:	f000 f8f5 	bl	80004ac <OLED_NewFrame>
      preCounter=counter;
 80002c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80002c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      counter=__HAL_TIM_GetCounter(&htim2);
 80002c6:	4b15      	ldr	r3, [pc, #84]	@ (800031c <main+0x9c>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80002cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      difference=counter-preCounter;
 80002ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80002d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80002d2:	1ad3      	subs	r3, r2, r3
 80002d4:	647b      	str	r3, [r7, #68]	@ 0x44
      sprintf(message1,"counter:%d",counter);
 80002d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80002dc:	4910      	ldr	r1, [pc, #64]	@ (8000320 <main+0xa0>)
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 fc0e 	bl	8002b00 <siprintf>
      sprintf(message2,"counter difference:%d",difference);
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80002e8:	490e      	ldr	r1, [pc, #56]	@ (8000324 <main+0xa4>)
 80002ea:	4618      	mov	r0, r3
 80002ec:	f002 fc08 	bl	8002b00 <siprintf>
      OLED_PrintASCIIString(0,0,message1,&afont8x6,OLED_COLOR_NORMAL);
 80002f0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80002f4:	2300      	movs	r3, #0
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000328 <main+0xa8>)
 80002fa:	2100      	movs	r1, #0
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fad9 	bl	80008b4 <OLED_PrintASCIIString>
      OLED_PrintASCIIString(0,32,message2,&afont8x6,OLED_COLOR_NORMAL);
 8000302:	1d3a      	adds	r2, r7, #4
 8000304:	2300      	movs	r3, #0
 8000306:	9300      	str	r3, [sp, #0]
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <main+0xa8>)
 800030a:	2120      	movs	r1, #32
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fad1 	bl	80008b4 <OLED_PrintASCIIString>
      OLED_ShowFrame();
 8000312:	f000 f8d7 	bl	80004c4 <OLED_ShowFrame>
      OLED_NewFrame();
 8000316:	bf00      	nop
 8000318:	e7d1      	b.n	80002be <main+0x3e>
 800031a:	bf00      	nop
 800031c:	20000558 	.word	0x20000558
 8000320:	08003478 	.word	0x08003478
 8000324:	08003484 	.word	0x08003484
 8000328:	080036c4 	.word	0x080036c4

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b090      	sub	sp, #64	@ 0x40
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2228      	movs	r2, #40	@ 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f002 fc02 	bl	8002b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	2310      	movs	r3, #16
 8000358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035a:	2300      	movs	r3, #0
 800035c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	4618      	mov	r0, r3
 8000364:	f001 fc1a 	bl	8001b9c <HAL_RCC_OscConfig>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036e:	f000 f818 	bl	80003a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000372:	230f      	movs	r3, #15
 8000374:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2100      	movs	r1, #0
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fe88 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000396:	f000 f804 	bl	80003a2 <Error_Handler>
  }
}
 800039a:	bf00      	nop
 800039c:	3740      	adds	r7, #64	@ 0x40
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a6:	b672      	cpsid	i
}
 80003a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003aa:	bf00      	nop
 80003ac:	e7fd      	b.n	80003aa <Error_Handler+0x8>
	...

080003b0 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	f04f 32ff 	mov.w	r2, #4294967295
 80003c4:	9200      	str	r2, [sp, #0]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	217a      	movs	r1, #122	@ 0x7a
 80003ca:	4803      	ldr	r0, [pc, #12]	@ (80003d8 <OLED_Send+0x28>)
 80003cc:	f001 f88e 	bl	80014ec <HAL_I2C_Master_Transmit>
}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000078 	.word	0x20000078

080003dc <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 80003e6:	4a05      	ldr	r2, [pc, #20]	@ (80003fc <OLED_SendCmd+0x20>)
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 80003ec:	2102      	movs	r1, #2
 80003ee:	4803      	ldr	r0, [pc, #12]	@ (80003fc <OLED_SendCmd+0x20>)
 80003f0:	f7ff ffde 	bl	80003b0 <OLED_Send>
}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200004cc 	.word	0x200004cc

08000400 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000404:	20ae      	movs	r0, #174	@ 0xae
 8000406:	f7ff ffe9 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ffe6 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8000410:	2010      	movs	r0, #16
 8000412:	f7ff ffe3 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 8000416:	2040      	movs	r0, #64	@ 0x40
 8000418:	f7ff ffe0 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 800041c:	20b0      	movs	r0, #176	@ 0xb0
 800041e:	f7ff ffdd 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 8000422:	2081      	movs	r0, #129	@ 0x81
 8000424:	f7ff ffda 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8000428:	20cf      	movs	r0, #207	@ 0xcf
 800042a:	f7ff ffd7 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 800042e:	20a1      	movs	r0, #161	@ 0xa1
 8000430:	f7ff ffd4 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8000434:	20a6      	movs	r0, #166	@ 0xa6
 8000436:	f7ff ffd1 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 800043a:	20a8      	movs	r0, #168	@ 0xa8
 800043c:	f7ff ffce 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8000440:	203f      	movs	r0, #63	@ 0x3f
 8000442:	f7ff ffcb 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 8000446:	20ad      	movs	r0, #173	@ 0xad
 8000448:	f7ff ffc8 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 800044c:	208b      	movs	r0, #139	@ 0x8b
 800044e:	f7ff ffc5 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 8000452:	2033      	movs	r0, #51	@ 0x33
 8000454:	f7ff ffc2 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000458:	20c8      	movs	r0, #200	@ 0xc8
 800045a:	f7ff ffbf 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 800045e:	20d3      	movs	r0, #211	@ 0xd3
 8000460:	f7ff ffbc 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8000464:	2000      	movs	r0, #0
 8000466:	f7ff ffb9 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 800046a:	20d5      	movs	r0, #213	@ 0xd5
 800046c:	f7ff ffb6 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000470:	20c0      	movs	r0, #192	@ 0xc0
 8000472:	f7ff ffb3 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8000476:	20d9      	movs	r0, #217	@ 0xd9
 8000478:	f7ff ffb0 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 800047c:	201f      	movs	r0, #31
 800047e:	f7ff ffad 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8000482:	20da      	movs	r0, #218	@ 0xda
 8000484:	f7ff ffaa 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000488:	2012      	movs	r0, #18
 800048a:	f7ff ffa7 	bl	80003dc <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800048e:	20db      	movs	r0, #219	@ 0xdb
 8000490:	f7ff ffa4 	bl	80003dc <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8000494:	2040      	movs	r0, #64	@ 0x40
 8000496:	f7ff ffa1 	bl	80003dc <OLED_SendCmd>

  OLED_NewFrame();
 800049a:	f000 f807 	bl	80004ac <OLED_NewFrame>
  OLED_ShowFrame();
 800049e:	f000 f811 	bl	80004c4 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 80004a2:	20af      	movs	r0, #175	@ 0xaf
 80004a4:	f7ff ff9a 	bl	80003dc <OLED_SendCmd>
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 80004b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80004b4:	2100      	movs	r1, #0
 80004b6:	4802      	ldr	r0, [pc, #8]	@ (80004c0 <OLED_NewFrame+0x14>)
 80004b8:	f002 fb44 	bl	8002b44 <memset>
  
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200000cc 	.word	0x200000cc

080004c4 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 80004ca:	4b15      	ldr	r3, [pc, #84]	@ (8000520 <OLED_ShowFrame+0x5c>)
 80004cc:	2240      	movs	r2, #64	@ 0x40
 80004ce:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80004d0:	2300      	movs	r3, #0
 80004d2:	71fb      	strb	r3, [r7, #7]
 80004d4:	e01b      	b.n	800050e <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	3b50      	subs	r3, #80	@ 0x50
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff ff7d 	bl	80003dc <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 80004e2:	2002      	movs	r0, #2
 80004e4:	f7ff ff7a 	bl	80003dc <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 80004e8:	2010      	movs	r0, #16
 80004ea:	f7ff ff77 	bl	80003dc <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 80004ee:	480d      	ldr	r0, [pc, #52]	@ (8000524 <OLED_ShowFrame+0x60>)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	01db      	lsls	r3, r3, #7
 80004f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <OLED_ShowFrame+0x64>)
 80004f6:	4413      	add	r3, r2
 80004f8:	2280      	movs	r2, #128	@ 0x80
 80004fa:	4619      	mov	r1, r3
 80004fc:	f002 fb56 	bl	8002bac <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000500:	2181      	movs	r1, #129	@ 0x81
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <OLED_ShowFrame+0x5c>)
 8000504:	f7ff ff54 	bl	80003b0 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	3301      	adds	r3, #1
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b07      	cmp	r3, #7
 8000512:	d9e0      	bls.n	80004d6 <OLED_ShowFrame+0x12>
  }
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200004d0 	.word	0x200004d0
 8000524:	200004d1 	.word	0x200004d1
 8000528:	200000cc 	.word	0x200000cc

0800052c <OLED_Clean>:

//清屏
void OLED_Clean()
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 8000530:	f7ff ffbc 	bl	80004ac <OLED_NewFrame>
    OLED_ShowFrame();
 8000534:	f7ff ffc6 	bl	80004c4 <OLED_ShowFrame>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 800053c:	b490      	push	{r4, r7}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	4604      	mov	r4, r0
 8000544:	4608      	mov	r0, r1
 8000546:	4611      	mov	r1, r2
 8000548:	461a      	mov	r2, r3
 800054a:	4623      	mov	r3, r4
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4603      	mov	r3, r0
 8000550:	71bb      	strb	r3, [r7, #6]
 8000552:	460b      	mov	r3, r1
 8000554:	717b      	strb	r3, [r7, #5]
 8000556:	4613      	mov	r3, r2
 8000558:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d85f      	bhi.n	8000620 <OLED_SetByte_Fine+0xe4>
 8000560:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db5b      	blt.n	8000620 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 8000568:	7d3b      	ldrb	r3, [r7, #20]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d002      	beq.n	8000574 <OLED_SetByte_Fine+0x38>
 800056e:	797b      	ldrb	r3, [r7, #5]
 8000570:	43db      	mvns	r3, r3
 8000572:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000574:	7c3b      	ldrb	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	22ff      	movs	r2, #255	@ 0xff
 800057a:	fa02 f303 	lsl.w	r3, r2, r3
 800057e:	b25a      	sxtb	r2, r3
 8000580:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000584:	4313      	orrs	r3, r2
 8000586:	b25a      	sxtb	r2, r3
 8000588:	793b      	ldrb	r3, [r7, #4]
 800058a:	f1c3 0308 	rsb	r3, r3, #8
 800058e:	21ff      	movs	r1, #255	@ 0xff
 8000590:	fa41 f303 	asr.w	r3, r1, r3
 8000594:	b25b      	sxtb	r3, r3
 8000596:	4313      	orrs	r3, r2
 8000598:	b25b      	sxtb	r3, r3
 800059a:	b2da      	uxtb	r2, r3
 800059c:	4b23      	ldr	r3, [pc, #140]	@ (800062c <OLED_SetByte_Fine+0xf0>)
 800059e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80005a0:	79fa      	ldrb	r2, [r7, #7]
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	4922      	ldr	r1, [pc, #136]	@ (8000630 <OLED_SetByte_Fine+0xf4>)
 80005a6:	01d2      	lsls	r2, r2, #7
 80005a8:	440a      	add	r2, r1
 80005aa:	4413      	add	r3, r2
 80005ac:	7818      	ldrb	r0, [r3, #0]
 80005ae:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <OLED_SetByte_Fine+0xf0>)
 80005b0:	7819      	ldrb	r1, [r3, #0]
 80005b2:	79fa      	ldrb	r2, [r7, #7]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	4001      	ands	r1, r0
 80005b8:	b2c8      	uxtb	r0, r1
 80005ba:	491d      	ldr	r1, [pc, #116]	@ (8000630 <OLED_SetByte_Fine+0xf4>)
 80005bc:	01d2      	lsls	r2, r2, #7
 80005be:	440a      	add	r2, r1
 80005c0:	4413      	add	r3, r2
 80005c2:	4602      	mov	r2, r0
 80005c4:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 80005c6:	7c3b      	ldrb	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	22ff      	movs	r2, #255	@ 0xff
 80005cc:	fa02 f303 	lsl.w	r3, r2, r3
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	b25a      	sxtb	r2, r3
 80005d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80005da:	4013      	ands	r3, r2
 80005dc:	b25a      	sxtb	r2, r3
 80005de:	793b      	ldrb	r3, [r7, #4]
 80005e0:	f1c3 0308 	rsb	r3, r3, #8
 80005e4:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 80005e8:	fa41 f303 	asr.w	r3, r1, r3
 80005ec:	b25b      	sxtb	r3, r3
 80005ee:	4013      	ands	r3, r2
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <OLED_SetByte_Fine+0xf0>)
 80005f6:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 80005f8:	79fa      	ldrb	r2, [r7, #7]
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	490c      	ldr	r1, [pc, #48]	@ (8000630 <OLED_SetByte_Fine+0xf4>)
 80005fe:	01d2      	lsls	r2, r2, #7
 8000600:	440a      	add	r2, r1
 8000602:	4413      	add	r3, r2
 8000604:	7818      	ldrb	r0, [r3, #0]
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <OLED_SetByte_Fine+0xf0>)
 8000608:	7819      	ldrb	r1, [r3, #0]
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	4301      	orrs	r1, r0
 8000610:	b2c8      	uxtb	r0, r1
 8000612:	4907      	ldr	r1, [pc, #28]	@ (8000630 <OLED_SetByte_Fine+0xf4>)
 8000614:	01d2      	lsls	r2, r2, #7
 8000616:	440a      	add	r2, r1
 8000618:	4413      	add	r3, r2
 800061a:	4602      	mov	r2, r0
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	e000      	b.n	8000622 <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 8000620:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bc90      	pop	{r4, r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000551 	.word	0x20000551
 8000630:	200000cc 	.word	0x200000cc

08000634 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 8000634:	b5b0      	push	{r4, r5, r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af02      	add	r7, sp, #8
 800063a:	4604      	mov	r4, r0
 800063c:	4608      	mov	r0, r1
 800063e:	4611      	mov	r1, r2
 8000640:	461a      	mov	r2, r3
 8000642:	4623      	mov	r3, r4
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	4603      	mov	r3, r0
 8000648:	71bb      	strb	r3, [r7, #6]
 800064a:	460b      	mov	r3, r1
 800064c:	717b      	strb	r3, [r7, #5]
 800064e:	4613      	mov	r3, r2
 8000650:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000658:	79bb      	ldrb	r3, [r7, #6]
 800065a:	f003 0307 	and.w	r3, r3, #7
 800065e:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 8000660:	7bba      	ldrb	r2, [r7, #14]
 8000662:	793b      	ldrb	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	2b08      	cmp	r3, #8
 8000668:	dd29      	ble.n	80006be <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800066a:	797a      	ldrb	r2, [r7, #5]
 800066c:	7bbb      	ldrb	r3, [r7, #14]
 800066e:	fa02 f303 	lsl.w	r3, r2, r3
 8000672:	b2da      	uxtb	r2, r3
 8000674:	7bbc      	ldrb	r4, [r7, #14]
 8000676:	79f9      	ldrb	r1, [r7, #7]
 8000678:	7bf8      	ldrb	r0, [r7, #15]
 800067a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2307      	movs	r3, #7
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4623      	mov	r3, r4
 8000686:	f7ff ff59 	bl	800053c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	3301      	adds	r3, #1
 800068e:	b2d8      	uxtb	r0, r3
 8000690:	797a      	ldrb	r2, [r7, #5]
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	f1c3 0308 	rsb	r3, r3, #8
 8000698:	fa42 f303 	asr.w	r3, r2, r3
 800069c:	b2dc      	uxtb	r4, r3
 800069e:	793a      	ldrb	r2, [r7, #4]
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	4413      	add	r3, r2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	3b09      	subs	r3, #9
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	79f9      	ldrb	r1, [r7, #7]
 80006ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	4622      	mov	r2, r4
 80006b8:	f7ff ff40 	bl	800053c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 80006bc:	e015      	b.n	80006ea <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 80006be:	797a      	ldrb	r2, [r7, #5]
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	b2dc      	uxtb	r4, r3
 80006c8:	7bba      	ldrb	r2, [r7, #14]
 80006ca:	793b      	ldrb	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	3b01      	subs	r3, #1
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	7bbd      	ldrb	r5, [r7, #14]
 80006d6:	79f9      	ldrb	r1, [r7, #7]
 80006d8:	7bf8      	ldrb	r0, [r7, #15]
 80006da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	462b      	mov	r3, r5
 80006e4:	4622      	mov	r2, r4
 80006e6:	f7ff ff29 	bl	800053c <OLED_SetByte_Fine>
}
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bdb0      	pop	{r4, r5, r7, pc}

080006f2 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 80006f2:	b590      	push	{r4, r7, lr}
 80006f4:	b087      	sub	sp, #28
 80006f6:	af02      	add	r7, sp, #8
 80006f8:	4604      	mov	r4, r0
 80006fa:	4608      	mov	r0, r1
 80006fc:	4611      	mov	r1, r2
 80006fe:	461a      	mov	r2, r3
 8000700:	4623      	mov	r3, r4
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4603      	mov	r3, r0
 8000706:	71bb      	strb	r3, [r7, #6]
 8000708:	460b      	mov	r3, r1
 800070a:	717b      	strb	r3, [r7, #5]
 800070c:	4613      	mov	r3, r2
 800070e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000710:	79bb      	ldrb	r3, [r7, #6]
 8000712:	08db      	lsrs	r3, r3, #3
 8000714:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	f003 0307 	and.w	r3, r3, #7
 800071c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800071e:	797a      	ldrb	r2, [r7, #5]
 8000720:	7bbb      	ldrb	r3, [r7, #14]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	b2da      	uxtb	r2, r3
 8000728:	7bbc      	ldrb	r4, [r7, #14]
 800072a:	79f9      	ldrb	r1, [r7, #7]
 800072c:	7bf8      	ldrb	r0, [r7, #15]
 800072e:	793b      	ldrb	r3, [r7, #4]
 8000730:	9301      	str	r3, [sp, #4]
 8000732:	2307      	movs	r3, #7
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	4623      	mov	r3, r4
 8000738:	f7ff ff00 	bl	800053c <OLED_SetByte_Fine>
  if (bit) {
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d014      	beq.n	800076c <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	3301      	adds	r3, #1
 8000746:	b2d8      	uxtb	r0, r3
 8000748:	797a      	ldrb	r2, [r7, #5]
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	f1c3 0308 	rsb	r3, r3, #8
 8000750:	fa42 f303 	asr.w	r3, r2, r3
 8000754:	b2dc      	uxtb	r4, r3
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	3b01      	subs	r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	79f9      	ldrb	r1, [r7, #7]
 800075e:	793a      	ldrb	r2, [r7, #4]
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	4622      	mov	r2, r4
 8000768:	f7ff fee8 	bl	800053c <OLED_SetByte_Fine>
  }
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bd90      	pop	{r4, r7, pc}

08000774 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af02      	add	r7, sp, #8
 800077a:	603a      	str	r2, [r7, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	460b      	mov	r3, r1
 8000784:	71bb      	strb	r3, [r7, #6]
 8000786:	4613      	mov	r3, r2
 8000788:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800078a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800078e:	08db      	lsrs	r3, r3, #3
 8000790:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8000792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	73fb      	strb	r3, [r7, #15]
 80007a0:	e025      	b.n	80007ee <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	73bb      	strb	r3, [r7, #14]
 80007a6:	e01b      	b.n	80007e0 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80007a8:	79fa      	ldrb	r2, [r7, #7]
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2d8      	uxtb	r0, r3
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	79bb      	ldrb	r3, [r7, #6]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2dc      	uxtb	r4, r3
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	7979      	ldrb	r1, [r7, #5]
 80007c2:	fb01 f303 	mul.w	r3, r1, r3
 80007c6:	4413      	add	r3, r2
 80007c8:	461a      	mov	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80007d4:	4621      	mov	r1, r4
 80007d6:	f7ff ff8c 	bl	80006f2 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	3301      	adds	r3, #1
 80007de:	73bb      	strb	r3, [r7, #14]
 80007e0:	7bba      	ldrb	r2, [r7, #14]
 80007e2:	7b3b      	ldrb	r3, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d3df      	bcc.n	80007a8 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3d5      	bcc.n	80007a2 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 80007f6:	7afb      	ldrb	r3, [r7, #11]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d028      	beq.n	800084e <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80007fc:	797b      	ldrb	r3, [r7, #5]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	7b3a      	ldrb	r2, [r7, #12]
 8000802:	b292      	uxth	r2, r2
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	737b      	strb	r3, [r7, #13]
 800080e:	e01a      	b.n	8000846 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000810:	79fa      	ldrb	r2, [r7, #7]
 8000812:	7b7b      	ldrb	r3, [r7, #13]
 8000814:	4413      	add	r3, r2
 8000816:	b2d8      	uxtb	r0, r3
 8000818:	7b3b      	ldrb	r3, [r7, #12]
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	b2da      	uxtb	r2, r3
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	4413      	add	r3, r2
 8000822:	b2d9      	uxtb	r1, r3
 8000824:	893a      	ldrh	r2, [r7, #8]
 8000826:	7b7b      	ldrb	r3, [r7, #13]
 8000828:	4413      	add	r3, r2
 800082a:	461a      	mov	r2, r3
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4413      	add	r3, r2
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	7afc      	ldrb	r4, [r7, #11]
 8000834:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	4623      	mov	r3, r4
 800083c:	f7ff fefa 	bl	8000634 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8000840:	7b7b      	ldrb	r3, [r7, #13]
 8000842:	3301      	adds	r3, #1
 8000844:	737b      	strb	r3, [r7, #13]
 8000846:	7b7a      	ldrb	r2, [r7, #13]
 8000848:	797b      	ldrb	r3, [r7, #5]
 800084a:	429a      	cmp	r2, r3
 800084c:	d3e0      	bcc.n	8000810 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800084e:	bf00      	nop
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}

08000856 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8000856:	b5b0      	push	{r4, r5, r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af02      	add	r7, sp, #8
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
 8000862:	460b      	mov	r3, r1
 8000864:	71bb      	strb	r3, [r7, #6]
 8000866:	4613      	mov	r3, r2
 8000868:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	797b      	ldrb	r3, [r7, #5]
 8000870:	f1a3 0120 	sub.w	r1, r3, #32
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	3307      	adds	r3, #7
 800087a:	2b00      	cmp	r3, #0
 800087c:	da00      	bge.n	8000880 <OLED_PrintASCIIChar+0x2a>
 800087e:	3307      	adds	r3, #7
 8000880:	10db      	asrs	r3, r3, #3
 8000882:	4618      	mov	r0, r3
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	785b      	ldrb	r3, [r3, #1]
 8000888:	fb00 f303 	mul.w	r3, r0, r3
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	18d4      	adds	r4, r2, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	785d      	ldrb	r5, [r3, #1]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	79b9      	ldrb	r1, [r7, #6]
 800089c:	79f8      	ldrb	r0, [r7, #7]
 800089e:	7e3a      	ldrb	r2, [r7, #24]
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	462b      	mov	r3, r5
 80008a6:	4622      	mov	r2, r4
 80008a8:	f7ff ff64 	bl	8000774 <OLED_SetBlock>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bdb0      	pop	{r4, r5, r7, pc}

080008b4 <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4603      	mov	r3, r0
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	460b      	mov	r3, r1
 80008c4:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 80008ca:	e011      	b.n	80008f0 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	7bb9      	ldrb	r1, [r7, #14]
 80008d2:	7df8      	ldrb	r0, [r7, #23]
 80008d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f7ff ffbb 	bl	8000856 <OLED_PrintASCIIChar>
    x0 += font->w;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	785a      	ldrb	r2, [r3, #1]
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	4413      	add	r3, r2
 80008e8:	75fb      	strb	r3, [r7, #23]
    str++;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
  while (*str) {
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1e9      	bne.n	80008cc <OLED_PrintASCIIString+0x18>
  }
}
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_MspInit+0x5c>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <HAL_MspInit+0x5c>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6193      	str	r3, [r2, #24]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_MspInit+0x5c>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <HAL_MspInit+0x5c>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a0e      	ldr	r2, [pc, #56]	@ (8000960 <HAL_MspInit+0x5c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <HAL_MspInit+0x5c>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_MspInit+0x60>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <HAL_MspInit+0x60>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr
 8000960:	40021000 	.word	0x40021000
 8000964:	40010000 	.word	0x40010000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f9ac 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <_sbrk+0x5c>)
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <_sbrk+0x60>)
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d4:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <_sbrk+0x64>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d102      	bne.n	80009e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <_sbrk+0x64>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <_sbrk+0x68>)
 80009e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d207      	bcs.n	8000a00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f0:	f002 f8b0 	bl	8002b54 <__errno>
 80009f4:	4603      	mov	r3, r0
 80009f6:	220c      	movs	r2, #12
 80009f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	e009      	b.n	8000a14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a00:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <_sbrk+0x64>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <_sbrk+0x64>)
 8000a10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	00000400 	.word	0x00000400
 8000a24:	20000554 	.word	0x20000554
 8000a28:	20000738 	.word	0x20000738

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000a7e:	f001 fc9d 	bl	80023bc <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a88:	f7ff fc8b 	bl	80003a2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a90:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 15;
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000aa6:	f001 fd23 	bl	80024f0 <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f7ff fc77 	bl	80003a2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_TIM2_Init+0xa0>)
 8000ac2:	f001 fee1 	bl	8002888 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000acc:	f7ff fc69 	bl	80003a2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000558 	.word	0x20000558

08000adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000afa:	d123      	bne.n	8000b44 <HAL_TIM_Base_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afc:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	61d3      	str	r3, [r2, #28]
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x70>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <HAL_TIM_Base_MspInit+0x74>)
 8000b40:	f000 fa0c 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010800 	.word	0x40010800

08000b54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f001 feda 	bl	8002944 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f7ff fc04 	bl	80003a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200005a0 	.word	0x200005a0
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c30 <HAL_UART_MspInit+0x88>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12f      	bne.n	8000c28 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd2:	61d3      	str	r3, [r2, #28]
 8000bd4:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000bd6:	69db      	ldr	r3, [r3, #28]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000be6:	f043 0304 	orr.w	r3, r3, #4
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_UART_MspInit+0x8c>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bf8:	2304      	movs	r3, #4
 8000bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <HAL_UART_MspInit+0x90>)
 8000c0c:	f000 f9a6 	bl	8000f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c10:	2308      	movs	r3, #8
 8000c12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 0310 	add.w	r3, r7, #16
 8000c20:	4619      	mov	r1, r3
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_UART_MspInit+0x90>)
 8000c24:	f000 f99a 	bl	8000f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010800 	.word	0x40010800

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c3c:	f7ff fef6 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c42:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c44:	4a0c      	ldr	r2, [pc, #48]	@ (8000c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c48:	e002      	b.n	8000c50 <LoopCopyDataInit>

08000c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4e:	3304      	adds	r3, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c54:	d3f9      	bcc.n	8000c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c56:	4a09      	ldr	r2, [pc, #36]	@ (8000c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c58:	4c09      	ldr	r4, [pc, #36]	@ (8000c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c5c:	e001      	b.n	8000c62 <LoopFillZerobss>

08000c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c60:	3204      	adds	r2, #4

08000c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c64:	d3fb      	bcc.n	8000c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c66:	f001 ff7b 	bl	8002b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fb09 	bl	8000280 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c78:	08003734 	.word	0x08003734
  ldr r2, =_sbss
 8000c7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c80:	20000734 	.word	0x20000734

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f92b 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	200f      	movs	r0, #15
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe2e 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f935 	bl	8000f42 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f90b 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a03      	ldr	r2, [pc, #12]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200005e8 	.word	0x200005e8

08000d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	@ (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	200005e8 	.word	0x200005e8

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff fff0 	bl	8000d38 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffe0 	bl	8000d38 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	@ (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	@ (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	@ 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	@ 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff90 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff49 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1c:	f7ff ff5e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff ff90 	bl	8000e4c <NVIC_EncodePriority>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff5f 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffb0 	bl	8000eb0 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b08b      	sub	sp, #44	@ 0x2c
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f6e:	e169      	b.n	8001244 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f70:	2201      	movs	r2, #1
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f040 8158 	bne.w	800123e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	4a9a      	ldr	r2, [pc, #616]	@ (80011fc <HAL_GPIO_Init+0x2a0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d05e      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
 8000f98:	4a98      	ldr	r2, [pc, #608]	@ (80011fc <HAL_GPIO_Init+0x2a0>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d875      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000f9e:	4a98      	ldr	r2, [pc, #608]	@ (8001200 <HAL_GPIO_Init+0x2a4>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d058      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a96      	ldr	r2, [pc, #600]	@ (8001200 <HAL_GPIO_Init+0x2a4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d86f      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000faa:	4a96      	ldr	r2, [pc, #600]	@ (8001204 <HAL_GPIO_Init+0x2a8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d052      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
 8000fb0:	4a94      	ldr	r2, [pc, #592]	@ (8001204 <HAL_GPIO_Init+0x2a8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d869      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000fb6:	4a94      	ldr	r2, [pc, #592]	@ (8001208 <HAL_GPIO_Init+0x2ac>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d04c      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
 8000fbc:	4a92      	ldr	r2, [pc, #584]	@ (8001208 <HAL_GPIO_Init+0x2ac>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d863      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000fc2:	4a92      	ldr	r2, [pc, #584]	@ (800120c <HAL_GPIO_Init+0x2b0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d046      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a90      	ldr	r2, [pc, #576]	@ (800120c <HAL_GPIO_Init+0x2b0>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d85d      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d82a      	bhi.n	8001028 <HAL_GPIO_Init+0xcc>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d859      	bhi.n	800108a <HAL_GPIO_Init+0x12e>
 8000fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <HAL_GPIO_Init+0x80>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08001057 	.word	0x08001057
 8000fe0:	08001031 	.word	0x08001031
 8000fe4:	08001043 	.word	0x08001043
 8000fe8:	08001085 	.word	0x08001085
 8000fec:	0800108b 	.word	0x0800108b
 8000ff0:	0800108b 	.word	0x0800108b
 8000ff4:	0800108b 	.word	0x0800108b
 8000ff8:	0800108b 	.word	0x0800108b
 8000ffc:	0800108b 	.word	0x0800108b
 8001000:	0800108b 	.word	0x0800108b
 8001004:	0800108b 	.word	0x0800108b
 8001008:	0800108b 	.word	0x0800108b
 800100c:	0800108b 	.word	0x0800108b
 8001010:	0800108b 	.word	0x0800108b
 8001014:	0800108b 	.word	0x0800108b
 8001018:	0800108b 	.word	0x0800108b
 800101c:	0800108b 	.word	0x0800108b
 8001020:	08001039 	.word	0x08001039
 8001024:	0800104d 	.word	0x0800104d
 8001028:	4a79      	ldr	r2, [pc, #484]	@ (8001210 <HAL_GPIO_Init+0x2b4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800102e:	e02c      	b.n	800108a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	623b      	str	r3, [r7, #32]
          break;
 8001036:	e029      	b.n	800108c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	3304      	adds	r3, #4
 800103e:	623b      	str	r3, [r7, #32]
          break;
 8001040:	e024      	b.n	800108c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	3308      	adds	r3, #8
 8001048:	623b      	str	r3, [r7, #32]
          break;
 800104a:	e01f      	b.n	800108c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	330c      	adds	r3, #12
 8001052:	623b      	str	r3, [r7, #32]
          break;
 8001054:	e01a      	b.n	800108c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800105e:	2304      	movs	r3, #4
 8001060:	623b      	str	r3, [r7, #32]
          break;
 8001062:	e013      	b.n	800108c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d105      	bne.n	8001078 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800106c:	2308      	movs	r3, #8
 800106e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	611a      	str	r2, [r3, #16]
          break;
 8001076:	e009      	b.n	800108c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	615a      	str	r2, [r3, #20]
          break;
 8001082:	e003      	b.n	800108c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
          break;
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x130>
          break;
 800108a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2bff      	cmp	r3, #255	@ 0xff
 8001090:	d801      	bhi.n	8001096 <HAL_GPIO_Init+0x13a>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	e001      	b.n	800109a <HAL_GPIO_Init+0x13e>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3304      	adds	r3, #4
 800109a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2bff      	cmp	r3, #255	@ 0xff
 80010a0:	d802      	bhi.n	80010a8 <HAL_GPIO_Init+0x14c>
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x152>
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	3b08      	subs	r3, #8
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	210f      	movs	r1, #15
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	fa01 f303 	lsl.w	r3, r1, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	401a      	ands	r2, r3
 80010c0:	6a39      	ldr	r1, [r7, #32]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	431a      	orrs	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80b1 	beq.w	800123e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001214 <HAL_GPIO_Init+0x2b8>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001214 <HAL_GPIO_Init+0x2b8>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001214 <HAL_GPIO_Init+0x2b8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010f4:	4a48      	ldr	r2, [pc, #288]	@ (8001218 <HAL_GPIO_Init+0x2bc>)
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a40      	ldr	r2, [pc, #256]	@ (800121c <HAL_GPIO_Init+0x2c0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d013      	beq.n	8001148 <HAL_GPIO_Init+0x1ec>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3f      	ldr	r2, [pc, #252]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d00d      	beq.n	8001144 <HAL_GPIO_Init+0x1e8>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3e      	ldr	r2, [pc, #248]	@ (8001224 <HAL_GPIO_Init+0x2c8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_GPIO_Init+0x1e4>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a3d      	ldr	r2, [pc, #244]	@ (8001228 <HAL_GPIO_Init+0x2cc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_GPIO_Init+0x1e0>
 8001138:	2303      	movs	r3, #3
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x1ee>
 800113c:	2304      	movs	r3, #4
 800113e:	e004      	b.n	800114a <HAL_GPIO_Init+0x1ee>
 8001140:	2302      	movs	r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x1ee>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_GPIO_Init+0x1ee>
 8001148:	2300      	movs	r3, #0
 800114a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4093      	lsls	r3, r2
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800115a:	492f      	ldr	r1, [pc, #188]	@ (8001218 <HAL_GPIO_Init+0x2bc>)
 800115c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001174:	4b2d      	ldr	r3, [pc, #180]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	492c      	ldr	r1, [pc, #176]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001182:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	43db      	mvns	r3, r3
 800118a:	4928      	ldr	r1, [pc, #160]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 800118c:	4013      	ands	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	4922      	ldr	r1, [pc, #136]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	60cb      	str	r3, [r1, #12]
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	491e      	ldr	r1, [pc, #120]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d006      	beq.n	80011d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4918      	ldr	r1, [pc, #96]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011d2:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	43db      	mvns	r3, r3
 80011da:	4914      	ldr	r1, [pc, #80]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011dc:	4013      	ands	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d021      	beq.n	8001230 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	490e      	ldr	r1, [pc, #56]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
 80011f8:	e021      	b.n	800123e <HAL_GPIO_Init+0x2e2>
 80011fa:	bf00      	nop
 80011fc:	10320000 	.word	0x10320000
 8001200:	10310000 	.word	0x10310000
 8001204:	10220000 	.word	0x10220000
 8001208:	10210000 	.word	0x10210000
 800120c:	10120000 	.word	0x10120000
 8001210:	10110000 	.word	0x10110000
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	40010800 	.word	0x40010800
 8001220:	40010c00 	.word	0x40010c00
 8001224:	40011000 	.word	0x40011000
 8001228:	40011400 	.word	0x40011400
 800122c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <HAL_GPIO_Init+0x304>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	43db      	mvns	r3, r3
 8001238:	4909      	ldr	r1, [pc, #36]	@ (8001260 <HAL_GPIO_Init+0x304>)
 800123a:	4013      	ands	r3, r2
 800123c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	3301      	adds	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	fa22 f303 	lsr.w	r3, r2, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	f47f ae8e 	bne.w	8000f70 <HAL_GPIO_Init+0x14>
  }
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	372c      	adds	r7, #44	@ 0x2c
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40010400 	.word	0x40010400

08001264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e12b      	b.n	80014ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d106      	bne.n	8001290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7fe ffba 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2224      	movs	r2, #36	@ 0x24
 8001294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 0201 	bic.w	r2, r2, #1
 80012a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012c8:	f001 f832 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a81      	ldr	r2, [pc, #516]	@ (80014d8 <HAL_I2C_Init+0x274>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d807      	bhi.n	80012e8 <HAL_I2C_Init+0x84>
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4a80      	ldr	r2, [pc, #512]	@ (80014dc <HAL_I2C_Init+0x278>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	bf94      	ite	ls
 80012e0:	2301      	movls	r3, #1
 80012e2:	2300      	movhi	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	e006      	b.n	80012f6 <HAL_I2C_Init+0x92>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4a7d      	ldr	r2, [pc, #500]	@ (80014e0 <HAL_I2C_Init+0x27c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	bf94      	ite	ls
 80012f0:	2301      	movls	r3, #1
 80012f2:	2300      	movhi	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0e7      	b.n	80014ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4a78      	ldr	r2, [pc, #480]	@ (80014e4 <HAL_I2C_Init+0x280>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0c9b      	lsrs	r3, r3, #18
 8001308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	430a      	orrs	r2, r1
 800131c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	4a6a      	ldr	r2, [pc, #424]	@ (80014d8 <HAL_I2C_Init+0x274>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d802      	bhi.n	8001338 <HAL_I2C_Init+0xd4>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	3301      	adds	r3, #1
 8001336:	e009      	b.n	800134c <HAL_I2C_Init+0xe8>
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800133e:	fb02 f303 	mul.w	r3, r2, r3
 8001342:	4a69      	ldr	r2, [pc, #420]	@ (80014e8 <HAL_I2C_Init+0x284>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	3301      	adds	r3, #1
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	430b      	orrs	r3, r1
 8001352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800135e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	495c      	ldr	r1, [pc, #368]	@ (80014d8 <HAL_I2C_Init+0x274>)
 8001368:	428b      	cmp	r3, r1
 800136a:	d819      	bhi.n	80013a0 <HAL_I2C_Init+0x13c>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e59      	subs	r1, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	fbb1 f3f3 	udiv	r3, r1, r3
 800137a:	1c59      	adds	r1, r3, #1
 800137c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001380:	400b      	ands	r3, r1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00a      	beq.n	800139c <HAL_I2C_Init+0x138>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1e59      	subs	r1, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fbb1 f3f3 	udiv	r3, r1, r3
 8001394:	3301      	adds	r3, #1
 8001396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800139a:	e051      	b.n	8001440 <HAL_I2C_Init+0x1dc>
 800139c:	2304      	movs	r3, #4
 800139e:	e04f      	b.n	8001440 <HAL_I2C_Init+0x1dc>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d111      	bne.n	80013cc <HAL_I2C_Init+0x168>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	1e58      	subs	r0, r3, #1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6859      	ldr	r1, [r3, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	440b      	add	r3, r1
 80013b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bf0c      	ite	eq
 80013c4:	2301      	moveq	r3, #1
 80013c6:	2300      	movne	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e012      	b.n	80013f2 <HAL_I2C_Init+0x18e>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	1e58      	subs	r0, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6859      	ldr	r1, [r3, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	0099      	lsls	r1, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_I2C_Init+0x196>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e022      	b.n	8001440 <HAL_I2C_Init+0x1dc>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10e      	bne.n	8001420 <HAL_I2C_Init+0x1bc>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	1e58      	subs	r0, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6859      	ldr	r1, [r3, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	440b      	add	r3, r1
 8001410:	fbb0 f3f3 	udiv	r3, r0, r3
 8001414:	3301      	adds	r3, #1
 8001416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800141a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800141e:	e00f      	b.n	8001440 <HAL_I2C_Init+0x1dc>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1e58      	subs	r0, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	0099      	lsls	r1, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	fbb0 f3f3 	udiv	r3, r0, r3
 8001436:	3301      	adds	r3, #1
 8001438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	6809      	ldr	r1, [r1, #0]
 8001444:	4313      	orrs	r3, r2
 8001446:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800146e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6911      	ldr	r1, [r2, #16]
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	68d2      	ldr	r2, [r2, #12]
 800147a:	4311      	orrs	r1, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	430a      	orrs	r2, r1
 800149e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0201 	orr.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2220      	movs	r2, #32
 80014ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	000186a0 	.word	0x000186a0
 80014dc:	001e847f 	.word	0x001e847f
 80014e0:	003d08ff 	.word	0x003d08ff
 80014e4:	431bde83 	.word	0x431bde83
 80014e8:	10624dd3 	.word	0x10624dd3

080014ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	817b      	strh	r3, [r7, #10]
 80014fc:	4613      	mov	r3, r2
 80014fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff fc1a 	bl	8000d38 <HAL_GetTick>
 8001504:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b20      	cmp	r3, #32
 8001510:	f040 80e0 	bne.w	80016d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2319      	movs	r3, #25
 800151a:	2201      	movs	r2, #1
 800151c:	4970      	ldr	r1, [pc, #448]	@ (80016e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f964 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800152a:	2302      	movs	r3, #2
 800152c:	e0d3      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2C_Master_Transmit+0x50>
 8001538:	2302      	movs	r3, #2
 800153a:	e0cc      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d007      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001570:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2221      	movs	r2, #33	@ 0x21
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2210      	movs	r2, #16
 800157e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	893a      	ldrh	r2, [r7, #8]
 8001592:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a50      	ldr	r2, [pc, #320]	@ (80016e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015a4:	8979      	ldrh	r1, [r7, #10]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 f89c 	bl	80016e8 <I2C_MasterRequestWrite>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e08d      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015d0:	e066      	b.n	80016a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fa22 	bl	8001a20 <I2C_WaitOnTXEFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00d      	beq.n	80015fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	d107      	bne.n	80015fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e06b      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	3b01      	subs	r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001626:	3b01      	subs	r3, #1
 8001628:	b29a      	uxth	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b04      	cmp	r3, #4
 800163a:	d11b      	bne.n	8001674 <HAL_I2C_Master_Transmit+0x188>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001640:	2b00      	cmp	r3, #0
 8001642:	d017      	beq.n	8001674 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800165e:	b29b      	uxth	r3, r3
 8001660:	3b01      	subs	r3, #1
 8001662:	b29a      	uxth	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	6a39      	ldr	r1, [r7, #32]
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 fa19 	bl	8001ab0 <I2C_WaitOnBTFFlagUntilTimeout>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00d      	beq.n	80016a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	2b04      	cmp	r3, #4
 800168a:	d107      	bne.n	800169c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800169a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e01a      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d194      	bne.n	80015d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2220      	movs	r2, #32
 80016bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	e000      	b.n	80016d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016d4:	2302      	movs	r3, #2
  }
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	00100002 	.word	0x00100002
 80016e4:	ffff0000 	.word	0xffff0000

080016e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	460b      	mov	r3, r1
 80016f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d006      	beq.n	8001712 <I2C_MasterRequestWrite+0x2a>
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d003      	beq.n	8001712 <I2C_MasterRequestWrite+0x2a>
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001710:	d108      	bne.n	8001724 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00b      	b.n	800173c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	2b12      	cmp	r3, #18
 800172a:	d107      	bne.n	800173c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800173a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f84f 	bl	80017ec <I2C_WaitOnFlagUntilTimeout>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00d      	beq.n	8001770 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001762:	d103      	bne.n	800176c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e035      	b.n	80017dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001778:	d108      	bne.n	800178c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800177a:	897b      	ldrh	r3, [r7, #10]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	e01b      	b.n	80017c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800178c:	897b      	ldrh	r3, [r7, #10]
 800178e:	11db      	asrs	r3, r3, #7
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0306 	and.w	r3, r3, #6
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f063 030f 	orn	r3, r3, #15
 800179c:	b2da      	uxtb	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	490e      	ldr	r1, [pc, #56]	@ (80017e4 <I2C_MasterRequestWrite+0xfc>)
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f898 	bl	80018e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e010      	b.n	80017dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4907      	ldr	r1, [pc, #28]	@ (80017e8 <I2C_MasterRequestWrite+0x100>)
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f888 	bl	80018e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	00010008 	.word	0x00010008
 80017e8:	00010002 	.word	0x00010002

080017ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	603b      	str	r3, [r7, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fc:	e048      	b.n	8001890 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d044      	beq.n	8001890 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001806:	f7ff fa97 	bl	8000d38 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d302      	bcc.n	800181c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d139      	bne.n	8001890 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10d      	bne.n	8001842 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	43da      	mvns	r2, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	4013      	ands	r3, r2
 8001832:	b29b      	uxth	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
 8001840:	e00c      	b.n	800185c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	43da      	mvns	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4013      	ands	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf0c      	ite	eq
 8001854:	2301      	moveq	r3, #1
 8001856:	2300      	movne	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	429a      	cmp	r2, r3
 8001860:	d116      	bne.n	8001890 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2220      	movs	r2, #32
 800186c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187c:	f043 0220 	orr.w	r2, r3, #32
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e023      	b.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	0c1b      	lsrs	r3, r3, #16
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b01      	cmp	r3, #1
 8001898:	d10d      	bne.n	80018b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	43da      	mvns	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	4013      	ands	r3, r2
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	e00c      	b.n	80018d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	43da      	mvns	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4013      	ands	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d093      	beq.n	80017fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018ee:	e071      	b.n	80019d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fe:	d123      	bne.n	8001948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800190e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001918:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	f043 0204 	orr.w	r2, r3, #4
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e067      	b.n	8001a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d041      	beq.n	80019d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001950:	f7ff f9f2 	bl	8000d38 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	429a      	cmp	r2, r3
 800195e:	d302      	bcc.n	8001966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d136      	bne.n	80019d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	d10c      	bne.n	800198a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4013      	ands	r3, r2
 800197c:	b29b      	uxth	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf14      	ite	ne
 8001982:	2301      	movne	r3, #1
 8001984:	2300      	moveq	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	e00b      	b.n	80019a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	43da      	mvns	r2, r3
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	4013      	ands	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d016      	beq.n	80019d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2220      	movs	r2, #32
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f043 0220 	orr.w	r2, r3, #32
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e021      	b.n	8001a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10c      	bne.n	80019f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	43da      	mvns	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	4013      	ands	r3, r2
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	bf14      	ite	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	2300      	moveq	r3, #0
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	e00b      	b.n	8001a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	4013      	ands	r3, r2
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f af6d 	bne.w	80018f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a2c:	e034      	b.n	8001a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f886 	bl	8001b40 <I2C_IsAcknowledgeFailed>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e034      	b.n	8001aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d028      	beq.n	8001a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff f977 	bl	8000d38 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11d      	bne.n	8001a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	2b80      	cmp	r3, #128	@ 0x80
 8001a68:	d016      	beq.n	8001a98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e007      	b.n	8001aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	2b80      	cmp	r3, #128	@ 0x80
 8001aa4:	d1c3      	bne.n	8001a2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001abc:	e034      	b.n	8001b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f83e 	bl	8001b40 <I2C_IsAcknowledgeFailed>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e034      	b.n	8001b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad4:	d028      	beq.n	8001b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ad6:	f7ff f92f 	bl	8000d38 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d302      	bcc.n	8001aec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11d      	bne.n	8001b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d016      	beq.n	8001b28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f043 0220 	orr.w	r2, r3, #32
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e007      	b.n	8001b38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d1c3      	bne.n	8001abe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b56:	d11b      	bne.n	8001b90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e24c      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f85e 	bl	8000d38 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f85a 	bl	8000d38 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	@ 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e200      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f84a 	bl	8000d38 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f846 	bl	8000d38 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1ec      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c0      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe ffff 	bl	8000d38 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7fe fffb 	bl	8000d38 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7fe ffde 	bl	8000d38 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7fe ffda 	bl	8000d38 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e180      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7fe ffbe 	bl	8000d38 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7fe ffba 	bl	8000d38 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e160      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 face 	bl	8002380 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7fe ffa4 	bl	8000d38 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7fe ffa0 	bl	8000d38 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e146      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b8b      	ldr	r3, [pc, #556]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b88      	ldr	r3, [pc, #544]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a87      	ldr	r2, [pc, #540]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b85      	ldr	r3, [pc, #532]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	@ (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe ff61 	bl	8000d38 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7fe ff5d 	bl	8000d38 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	@ 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e103      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b75      	ldr	r3, [pc, #468]	@ (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a69      	ldr	r2, [pc, #420]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a66      	ldr	r2, [pc, #408]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a60      	ldr	r2, [pc, #384]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a5a      	ldr	r2, [pc, #360]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b58      	ldr	r3, [pc, #352]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a57      	ldr	r2, [pc, #348]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff11 	bl	8000d38 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ff0d 	bl	8000d38 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b4b      	ldr	r3, [pc, #300]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe fefb 	bl	8000d38 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe fef7 	bl	8000d38 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09b      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b36      	ldr	r3, [pc, #216]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	@ (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fecb 	bl	8000d38 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe fec7 	bl	8000d38 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b24      	ldr	r3, [pc, #144]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4921      	ldr	r1, [pc, #132]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	491b      	ldr	r1, [pc, #108]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fe9b 	bl	8000d38 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe fe97 	bl	8000d38 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e035      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fe84 	bl	8000d38 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fe80 	bl	8000d38 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e026      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e019      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_RCC_OscConfig+0x500>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7fe fdd2 	bl	8000d38 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fdce 	bl	8000d38 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	@ (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	@ (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fd30 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	080036cc 	.word	0x080036cc
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	@ (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	080036e4 	.word	0x080036e4
 8002314:	080036f4 	.word	0x080036f4
 8002318:	003d0900 	.word	0x003d0900

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	@ (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	@ (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	080036dc 	.word	0x080036dc

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800235c:	f7ff ffde 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	@ (800237c <HAL_RCC_GetPCLK2Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	080036dc 	.word	0x080036dc

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000000 	.word	0x20000000
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e041      	b.n	8002452 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe fb7a 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f000 f940 	bl	8002680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a18      	ldr	r2, [pc, #96]	@ (80024e4 <HAL_TIM_Base_Start+0x88>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00e      	beq.n	80024a4 <HAL_TIM_Base_Start+0x48>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800248e:	d009      	beq.n	80024a4 <HAL_TIM_Base_Start+0x48>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a14      	ldr	r2, [pc, #80]	@ (80024e8 <HAL_TIM_Base_Start+0x8c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_TIM_Base_Start+0x48>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a13      	ldr	r2, [pc, #76]	@ (80024ec <HAL_TIM_Base_Start+0x90>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d111      	bne.n	80024c8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2b06      	cmp	r3, #6
 80024b4:	d010      	beq.n	80024d8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c6:	e007      	b.n	80024d8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIM_ConfigClockSource+0x1c>
 8002508:	2302      	movs	r3, #2
 800250a:	e0b4      	b.n	8002676 <HAL_TIM_ConfigClockSource+0x186>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800252a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002544:	d03e      	beq.n	80025c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800254a:	f200 8087 	bhi.w	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800254e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002552:	f000 8086 	beq.w	8002662 <HAL_TIM_ConfigClockSource+0x172>
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800255a:	d87f      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b70      	cmp	r3, #112	@ 0x70
 800255e:	d01a      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0xa6>
 8002560:	2b70      	cmp	r3, #112	@ 0x70
 8002562:	d87b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b60      	cmp	r3, #96	@ 0x60
 8002566:	d050      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x11a>
 8002568:	2b60      	cmp	r3, #96	@ 0x60
 800256a:	d877      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b50      	cmp	r3, #80	@ 0x50
 800256e:	d03c      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xfa>
 8002570:	2b50      	cmp	r3, #80	@ 0x50
 8002572:	d873      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	d058      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x13a>
 8002578:	2b40      	cmp	r3, #64	@ 0x40
 800257a:	d86f      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b30      	cmp	r3, #48	@ 0x30
 800257e:	d064      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b30      	cmp	r3, #48	@ 0x30
 8002582:	d86b      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 8002584:	2b20      	cmp	r3, #32
 8002586:	d060      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002588:	2b20      	cmp	r3, #32
 800258a:	d867      	bhi.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
 800258c:	2b00      	cmp	r3, #0
 800258e:	d05c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002590:	2b10      	cmp	r3, #16
 8002592:	d05a      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x15a>
 8002594:	e062      	b.n	800265c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025a6:	f000 f950 	bl	800284a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80025b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	609a      	str	r2, [r3, #8]
      break;
 80025c2:	e04f      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80025d4:	f000 f939 	bl	800284a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025e6:	609a      	str	r2, [r3, #8]
      break;
 80025e8:	e03c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f8b0 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2150      	movs	r1, #80	@ 0x50
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f907 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 8002608:	e02c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f8ce 	bl	80027b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2160      	movs	r1, #96	@ 0x60
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8f7 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 8002628:	e01c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	461a      	mov	r2, r3
 8002638:	f000 f890 	bl	800275c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2140      	movs	r1, #64	@ 0x40
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8e7 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 8002648:	e00c      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f000 f8de 	bl	8002816 <TIM_ITRx_SetConfig>
      break;
 800265a:	e003      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
      break;
 8002660:	e000      	b.n	8002664 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002662:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a2f      	ldr	r2, [pc, #188]	@ (8002750 <TIM_Base_SetConfig+0xd0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00b      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800269e:	d007      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002754 <TIM_Base_SetConfig+0xd4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0x30>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a2b      	ldr	r2, [pc, #172]	@ (8002758 <TIM_Base_SetConfig+0xd8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d108      	bne.n	80026c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a22      	ldr	r2, [pc, #136]	@ (8002750 <TIM_Base_SetConfig+0xd0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00b      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d0:	d007      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002754 <TIM_Base_SetConfig+0xd4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d003      	beq.n	80026e2 <TIM_Base_SetConfig+0x62>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002758 <TIM_Base_SetConfig+0xd8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <TIM_Base_SetConfig+0xd0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d103      	bne.n	8002728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f023 0201 	bic.w	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
  }
}
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800

0800275c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800275c:	b480      	push	{r7}
 800275e:	b087      	sub	sp, #28
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0201 	bic.w	r2, r3, #1
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 030a 	bic.w	r3, r3, #10
 8002798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	621a      	str	r2, [r3, #32]
}
 80027ae:	bf00      	nop
 80027b0:	371c      	adds	r7, #28
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b087      	sub	sp, #28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	f023 0210 	bic.w	r2, r3, #16
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	031b      	lsls	r3, r3, #12
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	621a      	str	r2, [r3, #32]
}
 800280c:	bf00      	nop
 800280e:	371c      	adds	r7, #28
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002816:	b480      	push	{r7}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800282c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4313      	orrs	r3, r2
 8002834:	f043 0307 	orr.w	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002864:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	431a      	orrs	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800289c:	2302      	movs	r3, #2
 800289e:	e046      	b.n	800292e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a16      	ldr	r2, [pc, #88]	@ (8002938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00e      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ec:	d009      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d004      	beq.n	8002902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a10      	ldr	r2, [pc, #64]	@ (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10c      	bne.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40000400 	.word	0x40000400
 8002940:	40000800 	.word	0x40000800

08002944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e042      	b.n	80029dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe f91c 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	@ 0x24
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f82b 	bl	80029e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800299c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695a      	ldr	r2, [r3, #20]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002a1e:	f023 030c 	bic.w	r3, r3, #12
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a2c      	ldr	r2, [pc, #176]	@ (8002af8 <UART_SetConfig+0x114>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d103      	bne.n	8002a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7ff fc84 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	e002      	b.n	8002a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff fc6c 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a22      	ldr	r2, [pc, #136]	@ (8002afc <UART_SetConfig+0x118>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	0119      	lsls	r1, r3, #4
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b1a      	ldr	r3, [pc, #104]	@ (8002afc <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	@ 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	@ 0x32
 8002aa4:	4a15      	ldr	r2, [pc, #84]	@ (8002afc <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab0:	4419      	add	r1, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <UART_SetConfig+0x118>)
 8002aca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2064      	movs	r0, #100	@ 0x64
 8002ad2:	fb00 f303 	mul.w	r3, r0, r3
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	@ 0x32
 8002adc:	4a07      	ldr	r2, [pc, #28]	@ (8002afc <UART_SetConfig+0x118>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 020f 	and.w	r2, r3, #15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	440a      	add	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002af0:	bf00      	nop
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40013800 	.word	0x40013800
 8002afc:	51eb851f 	.word	0x51eb851f

08002b00 <siprintf>:
 8002b00:	b40e      	push	{r1, r2, r3}
 8002b02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b06:	b510      	push	{r4, lr}
 8002b08:	2400      	movs	r4, #0
 8002b0a:	b09d      	sub	sp, #116	@ 0x74
 8002b0c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002b0e:	9002      	str	r0, [sp, #8]
 8002b10:	9006      	str	r0, [sp, #24]
 8002b12:	9107      	str	r1, [sp, #28]
 8002b14:	9104      	str	r1, [sp, #16]
 8002b16:	4809      	ldr	r0, [pc, #36]	@ (8002b3c <siprintf+0x3c>)
 8002b18:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <siprintf+0x40>)
 8002b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b1e:	9105      	str	r1, [sp, #20]
 8002b20:	6800      	ldr	r0, [r0, #0]
 8002b22:	a902      	add	r1, sp, #8
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002b28:	f000 f9a0 	bl	8002e6c <_svfiprintf_r>
 8002b2c:	9b02      	ldr	r3, [sp, #8]
 8002b2e:	701c      	strb	r4, [r3, #0]
 8002b30:	b01d      	add	sp, #116	@ 0x74
 8002b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b36:	b003      	add	sp, #12
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	2000000c 	.word	0x2000000c
 8002b40:	ffff0208 	.word	0xffff0208

08002b44 <memset>:
 8002b44:	4603      	mov	r3, r0
 8002b46:	4402      	add	r2, r0
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d100      	bne.n	8002b4e <memset+0xa>
 8002b4c:	4770      	bx	lr
 8002b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b52:	e7f9      	b.n	8002b48 <memset+0x4>

08002b54 <__errno>:
 8002b54:	4b01      	ldr	r3, [pc, #4]	@ (8002b5c <__errno+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <__libc_init_array>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	2600      	movs	r6, #0
 8002b64:	4d0c      	ldr	r5, [pc, #48]	@ (8002b98 <__libc_init_array+0x38>)
 8002b66:	4c0d      	ldr	r4, [pc, #52]	@ (8002b9c <__libc_init_array+0x3c>)
 8002b68:	1b64      	subs	r4, r4, r5
 8002b6a:	10a4      	asrs	r4, r4, #2
 8002b6c:	42a6      	cmp	r6, r4
 8002b6e:	d109      	bne.n	8002b84 <__libc_init_array+0x24>
 8002b70:	f000 fc76 	bl	8003460 <_init>
 8002b74:	2600      	movs	r6, #0
 8002b76:	4d0a      	ldr	r5, [pc, #40]	@ (8002ba0 <__libc_init_array+0x40>)
 8002b78:	4c0a      	ldr	r4, [pc, #40]	@ (8002ba4 <__libc_init_array+0x44>)
 8002b7a:	1b64      	subs	r4, r4, r5
 8002b7c:	10a4      	asrs	r4, r4, #2
 8002b7e:	42a6      	cmp	r6, r4
 8002b80:	d105      	bne.n	8002b8e <__libc_init_array+0x2e>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b88:	4798      	blx	r3
 8002b8a:	3601      	adds	r6, #1
 8002b8c:	e7ee      	b.n	8002b6c <__libc_init_array+0xc>
 8002b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b92:	4798      	blx	r3
 8002b94:	3601      	adds	r6, #1
 8002b96:	e7f2      	b.n	8002b7e <__libc_init_array+0x1e>
 8002b98:	0800372c 	.word	0x0800372c
 8002b9c:	0800372c 	.word	0x0800372c
 8002ba0:	0800372c 	.word	0x0800372c
 8002ba4:	08003730 	.word	0x08003730

08002ba8 <__retarget_lock_acquire_recursive>:
 8002ba8:	4770      	bx	lr

08002baa <__retarget_lock_release_recursive>:
 8002baa:	4770      	bx	lr

08002bac <memcpy>:
 8002bac:	440a      	add	r2, r1
 8002bae:	4291      	cmp	r1, r2
 8002bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bb4:	d100      	bne.n	8002bb8 <memcpy+0xc>
 8002bb6:	4770      	bx	lr
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bbe:	4291      	cmp	r1, r2
 8002bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bc4:	d1f9      	bne.n	8002bba <memcpy+0xe>
 8002bc6:	bd10      	pop	{r4, pc}

08002bc8 <_free_r>:
 8002bc8:	b538      	push	{r3, r4, r5, lr}
 8002bca:	4605      	mov	r5, r0
 8002bcc:	2900      	cmp	r1, #0
 8002bce:	d040      	beq.n	8002c52 <_free_r+0x8a>
 8002bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bd4:	1f0c      	subs	r4, r1, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	18e4      	addlt	r4, r4, r3
 8002bdc:	f000 f8de 	bl	8002d9c <__malloc_lock>
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <_free_r+0x8c>)
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	b933      	cbnz	r3, 8002bf4 <_free_r+0x2c>
 8002be6:	6063      	str	r3, [r4, #4]
 8002be8:	6014      	str	r4, [r2, #0]
 8002bea:	4628      	mov	r0, r5
 8002bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf0:	f000 b8da 	b.w	8002da8 <__malloc_unlock>
 8002bf4:	42a3      	cmp	r3, r4
 8002bf6:	d908      	bls.n	8002c0a <_free_r+0x42>
 8002bf8:	6820      	ldr	r0, [r4, #0]
 8002bfa:	1821      	adds	r1, r4, r0
 8002bfc:	428b      	cmp	r3, r1
 8002bfe:	bf01      	itttt	eq
 8002c00:	6819      	ldreq	r1, [r3, #0]
 8002c02:	685b      	ldreq	r3, [r3, #4]
 8002c04:	1809      	addeq	r1, r1, r0
 8002c06:	6021      	streq	r1, [r4, #0]
 8002c08:	e7ed      	b.n	8002be6 <_free_r+0x1e>
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	b10b      	cbz	r3, 8002c14 <_free_r+0x4c>
 8002c10:	42a3      	cmp	r3, r4
 8002c12:	d9fa      	bls.n	8002c0a <_free_r+0x42>
 8002c14:	6811      	ldr	r1, [r2, #0]
 8002c16:	1850      	adds	r0, r2, r1
 8002c18:	42a0      	cmp	r0, r4
 8002c1a:	d10b      	bne.n	8002c34 <_free_r+0x6c>
 8002c1c:	6820      	ldr	r0, [r4, #0]
 8002c1e:	4401      	add	r1, r0
 8002c20:	1850      	adds	r0, r2, r1
 8002c22:	4283      	cmp	r3, r0
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	d1e0      	bne.n	8002bea <_free_r+0x22>
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4408      	add	r0, r1
 8002c2e:	6010      	str	r0, [r2, #0]
 8002c30:	6053      	str	r3, [r2, #4]
 8002c32:	e7da      	b.n	8002bea <_free_r+0x22>
 8002c34:	d902      	bls.n	8002c3c <_free_r+0x74>
 8002c36:	230c      	movs	r3, #12
 8002c38:	602b      	str	r3, [r5, #0]
 8002c3a:	e7d6      	b.n	8002bea <_free_r+0x22>
 8002c3c:	6820      	ldr	r0, [r4, #0]
 8002c3e:	1821      	adds	r1, r4, r0
 8002c40:	428b      	cmp	r3, r1
 8002c42:	bf01      	itttt	eq
 8002c44:	6819      	ldreq	r1, [r3, #0]
 8002c46:	685b      	ldreq	r3, [r3, #4]
 8002c48:	1809      	addeq	r1, r1, r0
 8002c4a:	6021      	streq	r1, [r4, #0]
 8002c4c:	6063      	str	r3, [r4, #4]
 8002c4e:	6054      	str	r4, [r2, #4]
 8002c50:	e7cb      	b.n	8002bea <_free_r+0x22>
 8002c52:	bd38      	pop	{r3, r4, r5, pc}
 8002c54:	20000730 	.word	0x20000730

08002c58 <sbrk_aligned>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8002c98 <sbrk_aligned+0x40>)
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	6831      	ldr	r1, [r6, #0]
 8002c60:	4605      	mov	r5, r0
 8002c62:	b911      	cbnz	r1, 8002c6a <sbrk_aligned+0x12>
 8002c64:	f000 fba8 	bl	80033b8 <_sbrk_r>
 8002c68:	6030      	str	r0, [r6, #0]
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	f000 fba3 	bl	80033b8 <_sbrk_r>
 8002c72:	1c43      	adds	r3, r0, #1
 8002c74:	d103      	bne.n	8002c7e <sbrk_aligned+0x26>
 8002c76:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	bd70      	pop	{r4, r5, r6, pc}
 8002c7e:	1cc4      	adds	r4, r0, #3
 8002c80:	f024 0403 	bic.w	r4, r4, #3
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d0f8      	beq.n	8002c7a <sbrk_aligned+0x22>
 8002c88:	1a21      	subs	r1, r4, r0
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 fb94 	bl	80033b8 <_sbrk_r>
 8002c90:	3001      	adds	r0, #1
 8002c92:	d1f2      	bne.n	8002c7a <sbrk_aligned+0x22>
 8002c94:	e7ef      	b.n	8002c76 <sbrk_aligned+0x1e>
 8002c96:	bf00      	nop
 8002c98:	2000072c 	.word	0x2000072c

08002c9c <_malloc_r>:
 8002c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ca0:	1ccd      	adds	r5, r1, #3
 8002ca2:	f025 0503 	bic.w	r5, r5, #3
 8002ca6:	3508      	adds	r5, #8
 8002ca8:	2d0c      	cmp	r5, #12
 8002caa:	bf38      	it	cc
 8002cac:	250c      	movcc	r5, #12
 8002cae:	2d00      	cmp	r5, #0
 8002cb0:	4606      	mov	r6, r0
 8002cb2:	db01      	blt.n	8002cb8 <_malloc_r+0x1c>
 8002cb4:	42a9      	cmp	r1, r5
 8002cb6:	d904      	bls.n	8002cc2 <_malloc_r+0x26>
 8002cb8:	230c      	movs	r3, #12
 8002cba:	6033      	str	r3, [r6, #0]
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002d98 <_malloc_r+0xfc>
 8002cc6:	f000 f869 	bl	8002d9c <__malloc_lock>
 8002cca:	f8d8 3000 	ldr.w	r3, [r8]
 8002cce:	461c      	mov	r4, r3
 8002cd0:	bb44      	cbnz	r4, 8002d24 <_malloc_r+0x88>
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	f7ff ffbf 	bl	8002c58 <sbrk_aligned>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	4604      	mov	r4, r0
 8002cde:	d158      	bne.n	8002d92 <_malloc_r+0xf6>
 8002ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8002ce4:	4627      	mov	r7, r4
 8002ce6:	2f00      	cmp	r7, #0
 8002ce8:	d143      	bne.n	8002d72 <_malloc_r+0xd6>
 8002cea:	2c00      	cmp	r4, #0
 8002cec:	d04b      	beq.n	8002d86 <_malloc_r+0xea>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	4639      	mov	r1, r7
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	eb04 0903 	add.w	r9, r4, r3
 8002cf8:	f000 fb5e 	bl	80033b8 <_sbrk_r>
 8002cfc:	4581      	cmp	r9, r0
 8002cfe:	d142      	bne.n	8002d86 <_malloc_r+0xea>
 8002d00:	6821      	ldr	r1, [r4, #0]
 8002d02:	4630      	mov	r0, r6
 8002d04:	1a6d      	subs	r5, r5, r1
 8002d06:	4629      	mov	r1, r5
 8002d08:	f7ff ffa6 	bl	8002c58 <sbrk_aligned>
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d03a      	beq.n	8002d86 <_malloc_r+0xea>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	442b      	add	r3, r5
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	f8d8 3000 	ldr.w	r3, [r8]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	bb62      	cbnz	r2, 8002d78 <_malloc_r+0xdc>
 8002d1e:	f8c8 7000 	str.w	r7, [r8]
 8002d22:	e00f      	b.n	8002d44 <_malloc_r+0xa8>
 8002d24:	6822      	ldr	r2, [r4, #0]
 8002d26:	1b52      	subs	r2, r2, r5
 8002d28:	d420      	bmi.n	8002d6c <_malloc_r+0xd0>
 8002d2a:	2a0b      	cmp	r2, #11
 8002d2c:	d917      	bls.n	8002d5e <_malloc_r+0xc2>
 8002d2e:	1961      	adds	r1, r4, r5
 8002d30:	42a3      	cmp	r3, r4
 8002d32:	6025      	str	r5, [r4, #0]
 8002d34:	bf18      	it	ne
 8002d36:	6059      	strne	r1, [r3, #4]
 8002d38:	6863      	ldr	r3, [r4, #4]
 8002d3a:	bf08      	it	eq
 8002d3c:	f8c8 1000 	streq.w	r1, [r8]
 8002d40:	5162      	str	r2, [r4, r5]
 8002d42:	604b      	str	r3, [r1, #4]
 8002d44:	4630      	mov	r0, r6
 8002d46:	f000 f82f 	bl	8002da8 <__malloc_unlock>
 8002d4a:	f104 000b 	add.w	r0, r4, #11
 8002d4e:	1d23      	adds	r3, r4, #4
 8002d50:	f020 0007 	bic.w	r0, r0, #7
 8002d54:	1ac2      	subs	r2, r0, r3
 8002d56:	bf1c      	itt	ne
 8002d58:	1a1b      	subne	r3, r3, r0
 8002d5a:	50a3      	strne	r3, [r4, r2]
 8002d5c:	e7af      	b.n	8002cbe <_malloc_r+0x22>
 8002d5e:	6862      	ldr	r2, [r4, #4]
 8002d60:	42a3      	cmp	r3, r4
 8002d62:	bf0c      	ite	eq
 8002d64:	f8c8 2000 	streq.w	r2, [r8]
 8002d68:	605a      	strne	r2, [r3, #4]
 8002d6a:	e7eb      	b.n	8002d44 <_malloc_r+0xa8>
 8002d6c:	4623      	mov	r3, r4
 8002d6e:	6864      	ldr	r4, [r4, #4]
 8002d70:	e7ae      	b.n	8002cd0 <_malloc_r+0x34>
 8002d72:	463c      	mov	r4, r7
 8002d74:	687f      	ldr	r7, [r7, #4]
 8002d76:	e7b6      	b.n	8002ce6 <_malloc_r+0x4a>
 8002d78:	461a      	mov	r2, r3
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	42a3      	cmp	r3, r4
 8002d7e:	d1fb      	bne.n	8002d78 <_malloc_r+0xdc>
 8002d80:	2300      	movs	r3, #0
 8002d82:	6053      	str	r3, [r2, #4]
 8002d84:	e7de      	b.n	8002d44 <_malloc_r+0xa8>
 8002d86:	230c      	movs	r3, #12
 8002d88:	4630      	mov	r0, r6
 8002d8a:	6033      	str	r3, [r6, #0]
 8002d8c:	f000 f80c 	bl	8002da8 <__malloc_unlock>
 8002d90:	e794      	b.n	8002cbc <_malloc_r+0x20>
 8002d92:	6005      	str	r5, [r0, #0]
 8002d94:	e7d6      	b.n	8002d44 <_malloc_r+0xa8>
 8002d96:	bf00      	nop
 8002d98:	20000730 	.word	0x20000730

08002d9c <__malloc_lock>:
 8002d9c:	4801      	ldr	r0, [pc, #4]	@ (8002da4 <__malloc_lock+0x8>)
 8002d9e:	f7ff bf03 	b.w	8002ba8 <__retarget_lock_acquire_recursive>
 8002da2:	bf00      	nop
 8002da4:	20000728 	.word	0x20000728

08002da8 <__malloc_unlock>:
 8002da8:	4801      	ldr	r0, [pc, #4]	@ (8002db0 <__malloc_unlock+0x8>)
 8002daa:	f7ff befe 	b.w	8002baa <__retarget_lock_release_recursive>
 8002dae:	bf00      	nop
 8002db0:	20000728 	.word	0x20000728

08002db4 <__ssputs_r>:
 8002db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002db8:	461f      	mov	r7, r3
 8002dba:	688e      	ldr	r6, [r1, #8]
 8002dbc:	4682      	mov	sl, r0
 8002dbe:	42be      	cmp	r6, r7
 8002dc0:	460c      	mov	r4, r1
 8002dc2:	4690      	mov	r8, r2
 8002dc4:	680b      	ldr	r3, [r1, #0]
 8002dc6:	d82d      	bhi.n	8002e24 <__ssputs_r+0x70>
 8002dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002dd0:	d026      	beq.n	8002e20 <__ssputs_r+0x6c>
 8002dd2:	6965      	ldr	r5, [r4, #20]
 8002dd4:	6909      	ldr	r1, [r1, #16]
 8002dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002dda:	eba3 0901 	sub.w	r9, r3, r1
 8002dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002de2:	1c7b      	adds	r3, r7, #1
 8002de4:	444b      	add	r3, r9
 8002de6:	106d      	asrs	r5, r5, #1
 8002de8:	429d      	cmp	r5, r3
 8002dea:	bf38      	it	cc
 8002dec:	461d      	movcc	r5, r3
 8002dee:	0553      	lsls	r3, r2, #21
 8002df0:	d527      	bpl.n	8002e42 <__ssputs_r+0x8e>
 8002df2:	4629      	mov	r1, r5
 8002df4:	f7ff ff52 	bl	8002c9c <_malloc_r>
 8002df8:	4606      	mov	r6, r0
 8002dfa:	b360      	cbz	r0, 8002e56 <__ssputs_r+0xa2>
 8002dfc:	464a      	mov	r2, r9
 8002dfe:	6921      	ldr	r1, [r4, #16]
 8002e00:	f7ff fed4 	bl	8002bac <memcpy>
 8002e04:	89a3      	ldrh	r3, [r4, #12]
 8002e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e0e:	81a3      	strh	r3, [r4, #12]
 8002e10:	6126      	str	r6, [r4, #16]
 8002e12:	444e      	add	r6, r9
 8002e14:	6026      	str	r6, [r4, #0]
 8002e16:	463e      	mov	r6, r7
 8002e18:	6165      	str	r5, [r4, #20]
 8002e1a:	eba5 0509 	sub.w	r5, r5, r9
 8002e1e:	60a5      	str	r5, [r4, #8]
 8002e20:	42be      	cmp	r6, r7
 8002e22:	d900      	bls.n	8002e26 <__ssputs_r+0x72>
 8002e24:	463e      	mov	r6, r7
 8002e26:	4632      	mov	r2, r6
 8002e28:	4641      	mov	r1, r8
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	f000 faaa 	bl	8003384 <memmove>
 8002e30:	2000      	movs	r0, #0
 8002e32:	68a3      	ldr	r3, [r4, #8]
 8002e34:	1b9b      	subs	r3, r3, r6
 8002e36:	60a3      	str	r3, [r4, #8]
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	4433      	add	r3, r6
 8002e3c:	6023      	str	r3, [r4, #0]
 8002e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e42:	462a      	mov	r2, r5
 8002e44:	f000 fad6 	bl	80033f4 <_realloc_r>
 8002e48:	4606      	mov	r6, r0
 8002e4a:	2800      	cmp	r0, #0
 8002e4c:	d1e0      	bne.n	8002e10 <__ssputs_r+0x5c>
 8002e4e:	4650      	mov	r0, sl
 8002e50:	6921      	ldr	r1, [r4, #16]
 8002e52:	f7ff feb9 	bl	8002bc8 <_free_r>
 8002e56:	230c      	movs	r3, #12
 8002e58:	f8ca 3000 	str.w	r3, [sl]
 8002e5c:	89a3      	ldrh	r3, [r4, #12]
 8002e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e66:	81a3      	strh	r3, [r4, #12]
 8002e68:	e7e9      	b.n	8002e3e <__ssputs_r+0x8a>
	...

08002e6c <_svfiprintf_r>:
 8002e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e70:	4698      	mov	r8, r3
 8002e72:	898b      	ldrh	r3, [r1, #12]
 8002e74:	4607      	mov	r7, r0
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	460d      	mov	r5, r1
 8002e7a:	4614      	mov	r4, r2
 8002e7c:	b09d      	sub	sp, #116	@ 0x74
 8002e7e:	d510      	bpl.n	8002ea2 <_svfiprintf_r+0x36>
 8002e80:	690b      	ldr	r3, [r1, #16]
 8002e82:	b973      	cbnz	r3, 8002ea2 <_svfiprintf_r+0x36>
 8002e84:	2140      	movs	r1, #64	@ 0x40
 8002e86:	f7ff ff09 	bl	8002c9c <_malloc_r>
 8002e8a:	6028      	str	r0, [r5, #0]
 8002e8c:	6128      	str	r0, [r5, #16]
 8002e8e:	b930      	cbnz	r0, 8002e9e <_svfiprintf_r+0x32>
 8002e90:	230c      	movs	r3, #12
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	b01d      	add	sp, #116	@ 0x74
 8002e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e9e:	2340      	movs	r3, #64	@ 0x40
 8002ea0:	616b      	str	r3, [r5, #20]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002eac:	2330      	movs	r3, #48	@ 0x30
 8002eae:	f04f 0901 	mov.w	r9, #1
 8002eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eb6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003050 <_svfiprintf_r+0x1e4>
 8002eba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ebe:	4623      	mov	r3, r4
 8002ec0:	469a      	mov	sl, r3
 8002ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ec6:	b10a      	cbz	r2, 8002ecc <_svfiprintf_r+0x60>
 8002ec8:	2a25      	cmp	r2, #37	@ 0x25
 8002eca:	d1f9      	bne.n	8002ec0 <_svfiprintf_r+0x54>
 8002ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8002ed0:	d00b      	beq.n	8002eea <_svfiprintf_r+0x7e>
 8002ed2:	465b      	mov	r3, fp
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	4638      	mov	r0, r7
 8002eda:	f7ff ff6b 	bl	8002db4 <__ssputs_r>
 8002ede:	3001      	adds	r0, #1
 8002ee0:	f000 80a7 	beq.w	8003032 <_svfiprintf_r+0x1c6>
 8002ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ee6:	445a      	add	r2, fp
 8002ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8002eea:	f89a 3000 	ldrb.w	r3, [sl]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 809f 	beq.w	8003032 <_svfiprintf_r+0x1c6>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8002efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002efe:	f10a 0a01 	add.w	sl, sl, #1
 8002f02:	9304      	str	r3, [sp, #16]
 8002f04:	9307      	str	r3, [sp, #28]
 8002f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f0c:	4654      	mov	r4, sl
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f14:	484e      	ldr	r0, [pc, #312]	@ (8003050 <_svfiprintf_r+0x1e4>)
 8002f16:	f000 fa5f 	bl	80033d8 <memchr>
 8002f1a:	9a04      	ldr	r2, [sp, #16]
 8002f1c:	b9d8      	cbnz	r0, 8002f56 <_svfiprintf_r+0xea>
 8002f1e:	06d0      	lsls	r0, r2, #27
 8002f20:	bf44      	itt	mi
 8002f22:	2320      	movmi	r3, #32
 8002f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f28:	0711      	lsls	r1, r2, #28
 8002f2a:	bf44      	itt	mi
 8002f2c:	232b      	movmi	r3, #43	@ 0x2b
 8002f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f32:	f89a 3000 	ldrb.w	r3, [sl]
 8002f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f38:	d015      	beq.n	8002f66 <_svfiprintf_r+0xfa>
 8002f3a:	4654      	mov	r4, sl
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f04f 0c0a 	mov.w	ip, #10
 8002f42:	9a07      	ldr	r2, [sp, #28]
 8002f44:	4621      	mov	r1, r4
 8002f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f4a:	3b30      	subs	r3, #48	@ 0x30
 8002f4c:	2b09      	cmp	r3, #9
 8002f4e:	d94b      	bls.n	8002fe8 <_svfiprintf_r+0x17c>
 8002f50:	b1b0      	cbz	r0, 8002f80 <_svfiprintf_r+0x114>
 8002f52:	9207      	str	r2, [sp, #28]
 8002f54:	e014      	b.n	8002f80 <_svfiprintf_r+0x114>
 8002f56:	eba0 0308 	sub.w	r3, r0, r8
 8002f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	46a2      	mov	sl, r4
 8002f62:	9304      	str	r3, [sp, #16]
 8002f64:	e7d2      	b.n	8002f0c <_svfiprintf_r+0xa0>
 8002f66:	9b03      	ldr	r3, [sp, #12]
 8002f68:	1d19      	adds	r1, r3, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	9103      	str	r1, [sp, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfbb      	ittet	lt
 8002f72:	425b      	neglt	r3, r3
 8002f74:	f042 0202 	orrlt.w	r2, r2, #2
 8002f78:	9307      	strge	r3, [sp, #28]
 8002f7a:	9307      	strlt	r3, [sp, #28]
 8002f7c:	bfb8      	it	lt
 8002f7e:	9204      	strlt	r2, [sp, #16]
 8002f80:	7823      	ldrb	r3, [r4, #0]
 8002f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f84:	d10a      	bne.n	8002f9c <_svfiprintf_r+0x130>
 8002f86:	7863      	ldrb	r3, [r4, #1]
 8002f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f8a:	d132      	bne.n	8002ff2 <_svfiprintf_r+0x186>
 8002f8c:	9b03      	ldr	r3, [sp, #12]
 8002f8e:	3402      	adds	r4, #2
 8002f90:	1d1a      	adds	r2, r3, #4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	9203      	str	r2, [sp, #12]
 8002f96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003054 <_svfiprintf_r+0x1e8>
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4650      	mov	r0, sl
 8002fa4:	7821      	ldrb	r1, [r4, #0]
 8002fa6:	f000 fa17 	bl	80033d8 <memchr>
 8002faa:	b138      	cbz	r0, 8002fbc <_svfiprintf_r+0x150>
 8002fac:	2240      	movs	r2, #64	@ 0x40
 8002fae:	9b04      	ldr	r3, [sp, #16]
 8002fb0:	eba0 000a 	sub.w	r0, r0, sl
 8002fb4:	4082      	lsls	r2, r0
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	3401      	adds	r4, #1
 8002fba:	9304      	str	r3, [sp, #16]
 8002fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fc0:	2206      	movs	r2, #6
 8002fc2:	4825      	ldr	r0, [pc, #148]	@ (8003058 <_svfiprintf_r+0x1ec>)
 8002fc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002fc8:	f000 fa06 	bl	80033d8 <memchr>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	d036      	beq.n	800303e <_svfiprintf_r+0x1d2>
 8002fd0:	4b22      	ldr	r3, [pc, #136]	@ (800305c <_svfiprintf_r+0x1f0>)
 8002fd2:	bb1b      	cbnz	r3, 800301c <_svfiprintf_r+0x1b0>
 8002fd4:	9b03      	ldr	r3, [sp, #12]
 8002fd6:	3307      	adds	r3, #7
 8002fd8:	f023 0307 	bic.w	r3, r3, #7
 8002fdc:	3308      	adds	r3, #8
 8002fde:	9303      	str	r3, [sp, #12]
 8002fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fe2:	4433      	add	r3, r6
 8002fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fe6:	e76a      	b.n	8002ebe <_svfiprintf_r+0x52>
 8002fe8:	460c      	mov	r4, r1
 8002fea:	2001      	movs	r0, #1
 8002fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ff0:	e7a8      	b.n	8002f44 <_svfiprintf_r+0xd8>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f04f 0c0a 	mov.w	ip, #10
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	3401      	adds	r4, #1
 8002ffc:	9305      	str	r3, [sp, #20]
 8002ffe:	4620      	mov	r0, r4
 8003000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003004:	3a30      	subs	r2, #48	@ 0x30
 8003006:	2a09      	cmp	r2, #9
 8003008:	d903      	bls.n	8003012 <_svfiprintf_r+0x1a6>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0c6      	beq.n	8002f9c <_svfiprintf_r+0x130>
 800300e:	9105      	str	r1, [sp, #20]
 8003010:	e7c4      	b.n	8002f9c <_svfiprintf_r+0x130>
 8003012:	4604      	mov	r4, r0
 8003014:	2301      	movs	r3, #1
 8003016:	fb0c 2101 	mla	r1, ip, r1, r2
 800301a:	e7f0      	b.n	8002ffe <_svfiprintf_r+0x192>
 800301c:	ab03      	add	r3, sp, #12
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	462a      	mov	r2, r5
 8003022:	4638      	mov	r0, r7
 8003024:	4b0e      	ldr	r3, [pc, #56]	@ (8003060 <_svfiprintf_r+0x1f4>)
 8003026:	a904      	add	r1, sp, #16
 8003028:	f3af 8000 	nop.w
 800302c:	1c42      	adds	r2, r0, #1
 800302e:	4606      	mov	r6, r0
 8003030:	d1d6      	bne.n	8002fe0 <_svfiprintf_r+0x174>
 8003032:	89ab      	ldrh	r3, [r5, #12]
 8003034:	065b      	lsls	r3, r3, #25
 8003036:	f53f af2d 	bmi.w	8002e94 <_svfiprintf_r+0x28>
 800303a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800303c:	e72c      	b.n	8002e98 <_svfiprintf_r+0x2c>
 800303e:	ab03      	add	r3, sp, #12
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	462a      	mov	r2, r5
 8003044:	4638      	mov	r0, r7
 8003046:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <_svfiprintf_r+0x1f4>)
 8003048:	a904      	add	r1, sp, #16
 800304a:	f000 f87d 	bl	8003148 <_printf_i>
 800304e:	e7ed      	b.n	800302c <_svfiprintf_r+0x1c0>
 8003050:	080036f6 	.word	0x080036f6
 8003054:	080036fc 	.word	0x080036fc
 8003058:	08003700 	.word	0x08003700
 800305c:	00000000 	.word	0x00000000
 8003060:	08002db5 	.word	0x08002db5

08003064 <_printf_common>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	4616      	mov	r6, r2
 800306a:	4698      	mov	r8, r3
 800306c:	688a      	ldr	r2, [r1, #8]
 800306e:	690b      	ldr	r3, [r1, #16]
 8003070:	4607      	mov	r7, r0
 8003072:	4293      	cmp	r3, r2
 8003074:	bfb8      	it	lt
 8003076:	4613      	movlt	r3, r2
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800307e:	460c      	mov	r4, r1
 8003080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003084:	b10a      	cbz	r2, 800308a <_printf_common+0x26>
 8003086:	3301      	adds	r3, #1
 8003088:	6033      	str	r3, [r6, #0]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	0699      	lsls	r1, r3, #26
 800308e:	bf42      	ittt	mi
 8003090:	6833      	ldrmi	r3, [r6, #0]
 8003092:	3302      	addmi	r3, #2
 8003094:	6033      	strmi	r3, [r6, #0]
 8003096:	6825      	ldr	r5, [r4, #0]
 8003098:	f015 0506 	ands.w	r5, r5, #6
 800309c:	d106      	bne.n	80030ac <_printf_common+0x48>
 800309e:	f104 0a19 	add.w	sl, r4, #25
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	6832      	ldr	r2, [r6, #0]
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	dc2b      	bgt.n	8003104 <_printf_common+0xa0>
 80030ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	3b00      	subs	r3, #0
 80030b4:	bf18      	it	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	0692      	lsls	r2, r2, #26
 80030ba:	d430      	bmi.n	800311e <_printf_common+0xba>
 80030bc:	4641      	mov	r1, r8
 80030be:	4638      	mov	r0, r7
 80030c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030c4:	47c8      	blx	r9
 80030c6:	3001      	adds	r0, #1
 80030c8:	d023      	beq.n	8003112 <_printf_common+0xae>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	6922      	ldr	r2, [r4, #16]
 80030ce:	f003 0306 	and.w	r3, r3, #6
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf14      	ite	ne
 80030d6:	2500      	movne	r5, #0
 80030d8:	6833      	ldreq	r3, [r6, #0]
 80030da:	f04f 0600 	mov.w	r6, #0
 80030de:	bf08      	it	eq
 80030e0:	68e5      	ldreq	r5, [r4, #12]
 80030e2:	f104 041a 	add.w	r4, r4, #26
 80030e6:	bf08      	it	eq
 80030e8:	1aed      	subeq	r5, r5, r3
 80030ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ee:	bf08      	it	eq
 80030f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bfc4      	itt	gt
 80030f8:	1a9b      	subgt	r3, r3, r2
 80030fa:	18ed      	addgt	r5, r5, r3
 80030fc:	42b5      	cmp	r5, r6
 80030fe:	d11a      	bne.n	8003136 <_printf_common+0xd2>
 8003100:	2000      	movs	r0, #0
 8003102:	e008      	b.n	8003116 <_printf_common+0xb2>
 8003104:	2301      	movs	r3, #1
 8003106:	4652      	mov	r2, sl
 8003108:	4641      	mov	r1, r8
 800310a:	4638      	mov	r0, r7
 800310c:	47c8      	blx	r9
 800310e:	3001      	adds	r0, #1
 8003110:	d103      	bne.n	800311a <_printf_common+0xb6>
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311a:	3501      	adds	r5, #1
 800311c:	e7c1      	b.n	80030a2 <_printf_common+0x3e>
 800311e:	2030      	movs	r0, #48	@ 0x30
 8003120:	18e1      	adds	r1, r4, r3
 8003122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800312c:	4422      	add	r2, r4
 800312e:	3302      	adds	r3, #2
 8003130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003134:	e7c2      	b.n	80030bc <_printf_common+0x58>
 8003136:	2301      	movs	r3, #1
 8003138:	4622      	mov	r2, r4
 800313a:	4641      	mov	r1, r8
 800313c:	4638      	mov	r0, r7
 800313e:	47c8      	blx	r9
 8003140:	3001      	adds	r0, #1
 8003142:	d0e6      	beq.n	8003112 <_printf_common+0xae>
 8003144:	3601      	adds	r6, #1
 8003146:	e7d9      	b.n	80030fc <_printf_common+0x98>

08003148 <_printf_i>:
 8003148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	7e0f      	ldrb	r7, [r1, #24]
 800314e:	4691      	mov	r9, r2
 8003150:	2f78      	cmp	r7, #120	@ 0x78
 8003152:	4680      	mov	r8, r0
 8003154:	460c      	mov	r4, r1
 8003156:	469a      	mov	sl, r3
 8003158:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800315a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800315e:	d807      	bhi.n	8003170 <_printf_i+0x28>
 8003160:	2f62      	cmp	r7, #98	@ 0x62
 8003162:	d80a      	bhi.n	800317a <_printf_i+0x32>
 8003164:	2f00      	cmp	r7, #0
 8003166:	f000 80d1 	beq.w	800330c <_printf_i+0x1c4>
 800316a:	2f58      	cmp	r7, #88	@ 0x58
 800316c:	f000 80b8 	beq.w	80032e0 <_printf_i+0x198>
 8003170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003178:	e03a      	b.n	80031f0 <_printf_i+0xa8>
 800317a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800317e:	2b15      	cmp	r3, #21
 8003180:	d8f6      	bhi.n	8003170 <_printf_i+0x28>
 8003182:	a101      	add	r1, pc, #4	@ (adr r1, 8003188 <_printf_i+0x40>)
 8003184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031f5 	.word	0x080031f5
 8003190:	08003171 	.word	0x08003171
 8003194:	08003171 	.word	0x08003171
 8003198:	08003171 	.word	0x08003171
 800319c:	08003171 	.word	0x08003171
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	08003171 	.word	0x08003171
 80031a8:	08003171 	.word	0x08003171
 80031ac:	08003171 	.word	0x08003171
 80031b0:	08003171 	.word	0x08003171
 80031b4:	080032f3 	.word	0x080032f3
 80031b8:	0800321f 	.word	0x0800321f
 80031bc:	080032ad 	.word	0x080032ad
 80031c0:	08003171 	.word	0x08003171
 80031c4:	08003171 	.word	0x08003171
 80031c8:	08003315 	.word	0x08003315
 80031cc:	08003171 	.word	0x08003171
 80031d0:	0800321f 	.word	0x0800321f
 80031d4:	08003171 	.word	0x08003171
 80031d8:	08003171 	.word	0x08003171
 80031dc:	080032b5 	.word	0x080032b5
 80031e0:	6833      	ldr	r3, [r6, #0]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6032      	str	r2, [r6, #0]
 80031e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031f0:	2301      	movs	r3, #1
 80031f2:	e09c      	b.n	800332e <_printf_i+0x1e6>
 80031f4:	6833      	ldr	r3, [r6, #0]
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	1d19      	adds	r1, r3, #4
 80031fa:	6031      	str	r1, [r6, #0]
 80031fc:	0606      	lsls	r6, r0, #24
 80031fe:	d501      	bpl.n	8003204 <_printf_i+0xbc>
 8003200:	681d      	ldr	r5, [r3, #0]
 8003202:	e003      	b.n	800320c <_printf_i+0xc4>
 8003204:	0645      	lsls	r5, r0, #25
 8003206:	d5fb      	bpl.n	8003200 <_printf_i+0xb8>
 8003208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800320c:	2d00      	cmp	r5, #0
 800320e:	da03      	bge.n	8003218 <_printf_i+0xd0>
 8003210:	232d      	movs	r3, #45	@ 0x2d
 8003212:	426d      	negs	r5, r5
 8003214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003218:	230a      	movs	r3, #10
 800321a:	4858      	ldr	r0, [pc, #352]	@ (800337c <_printf_i+0x234>)
 800321c:	e011      	b.n	8003242 <_printf_i+0xfa>
 800321e:	6821      	ldr	r1, [r4, #0]
 8003220:	6833      	ldr	r3, [r6, #0]
 8003222:	0608      	lsls	r0, r1, #24
 8003224:	f853 5b04 	ldr.w	r5, [r3], #4
 8003228:	d402      	bmi.n	8003230 <_printf_i+0xe8>
 800322a:	0649      	lsls	r1, r1, #25
 800322c:	bf48      	it	mi
 800322e:	b2ad      	uxthmi	r5, r5
 8003230:	2f6f      	cmp	r7, #111	@ 0x6f
 8003232:	6033      	str	r3, [r6, #0]
 8003234:	bf14      	ite	ne
 8003236:	230a      	movne	r3, #10
 8003238:	2308      	moveq	r3, #8
 800323a:	4850      	ldr	r0, [pc, #320]	@ (800337c <_printf_i+0x234>)
 800323c:	2100      	movs	r1, #0
 800323e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003242:	6866      	ldr	r6, [r4, #4]
 8003244:	2e00      	cmp	r6, #0
 8003246:	60a6      	str	r6, [r4, #8]
 8003248:	db05      	blt.n	8003256 <_printf_i+0x10e>
 800324a:	6821      	ldr	r1, [r4, #0]
 800324c:	432e      	orrs	r6, r5
 800324e:	f021 0104 	bic.w	r1, r1, #4
 8003252:	6021      	str	r1, [r4, #0]
 8003254:	d04b      	beq.n	80032ee <_printf_i+0x1a6>
 8003256:	4616      	mov	r6, r2
 8003258:	fbb5 f1f3 	udiv	r1, r5, r3
 800325c:	fb03 5711 	mls	r7, r3, r1, r5
 8003260:	5dc7      	ldrb	r7, [r0, r7]
 8003262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003266:	462f      	mov	r7, r5
 8003268:	42bb      	cmp	r3, r7
 800326a:	460d      	mov	r5, r1
 800326c:	d9f4      	bls.n	8003258 <_printf_i+0x110>
 800326e:	2b08      	cmp	r3, #8
 8003270:	d10b      	bne.n	800328a <_printf_i+0x142>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	07df      	lsls	r7, r3, #31
 8003276:	d508      	bpl.n	800328a <_printf_i+0x142>
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	6861      	ldr	r1, [r4, #4]
 800327c:	4299      	cmp	r1, r3
 800327e:	bfde      	ittt	le
 8003280:	2330      	movle	r3, #48	@ 0x30
 8003282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800328a:	1b92      	subs	r2, r2, r6
 800328c:	6122      	str	r2, [r4, #16]
 800328e:	464b      	mov	r3, r9
 8003290:	4621      	mov	r1, r4
 8003292:	4640      	mov	r0, r8
 8003294:	f8cd a000 	str.w	sl, [sp]
 8003298:	aa03      	add	r2, sp, #12
 800329a:	f7ff fee3 	bl	8003064 <_printf_common>
 800329e:	3001      	adds	r0, #1
 80032a0:	d14a      	bne.n	8003338 <_printf_i+0x1f0>
 80032a2:	f04f 30ff 	mov.w	r0, #4294967295
 80032a6:	b004      	add	sp, #16
 80032a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	f043 0320 	orr.w	r3, r3, #32
 80032b2:	6023      	str	r3, [r4, #0]
 80032b4:	2778      	movs	r7, #120	@ 0x78
 80032b6:	4832      	ldr	r0, [pc, #200]	@ (8003380 <_printf_i+0x238>)
 80032b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	6831      	ldr	r1, [r6, #0]
 80032c0:	061f      	lsls	r7, r3, #24
 80032c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80032c6:	d402      	bmi.n	80032ce <_printf_i+0x186>
 80032c8:	065f      	lsls	r7, r3, #25
 80032ca:	bf48      	it	mi
 80032cc:	b2ad      	uxthmi	r5, r5
 80032ce:	6031      	str	r1, [r6, #0]
 80032d0:	07d9      	lsls	r1, r3, #31
 80032d2:	bf44      	itt	mi
 80032d4:	f043 0320 	orrmi.w	r3, r3, #32
 80032d8:	6023      	strmi	r3, [r4, #0]
 80032da:	b11d      	cbz	r5, 80032e4 <_printf_i+0x19c>
 80032dc:	2310      	movs	r3, #16
 80032de:	e7ad      	b.n	800323c <_printf_i+0xf4>
 80032e0:	4826      	ldr	r0, [pc, #152]	@ (800337c <_printf_i+0x234>)
 80032e2:	e7e9      	b.n	80032b8 <_printf_i+0x170>
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f023 0320 	bic.w	r3, r3, #32
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	e7f6      	b.n	80032dc <_printf_i+0x194>
 80032ee:	4616      	mov	r6, r2
 80032f0:	e7bd      	b.n	800326e <_printf_i+0x126>
 80032f2:	6833      	ldr	r3, [r6, #0]
 80032f4:	6825      	ldr	r5, [r4, #0]
 80032f6:	1d18      	adds	r0, r3, #4
 80032f8:	6961      	ldr	r1, [r4, #20]
 80032fa:	6030      	str	r0, [r6, #0]
 80032fc:	062e      	lsls	r6, r5, #24
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	d501      	bpl.n	8003306 <_printf_i+0x1be>
 8003302:	6019      	str	r1, [r3, #0]
 8003304:	e002      	b.n	800330c <_printf_i+0x1c4>
 8003306:	0668      	lsls	r0, r5, #25
 8003308:	d5fb      	bpl.n	8003302 <_printf_i+0x1ba>
 800330a:	8019      	strh	r1, [r3, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	4616      	mov	r6, r2
 8003310:	6123      	str	r3, [r4, #16]
 8003312:	e7bc      	b.n	800328e <_printf_i+0x146>
 8003314:	6833      	ldr	r3, [r6, #0]
 8003316:	2100      	movs	r1, #0
 8003318:	1d1a      	adds	r2, r3, #4
 800331a:	6032      	str	r2, [r6, #0]
 800331c:	681e      	ldr	r6, [r3, #0]
 800331e:	6862      	ldr	r2, [r4, #4]
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f859 	bl	80033d8 <memchr>
 8003326:	b108      	cbz	r0, 800332c <_printf_i+0x1e4>
 8003328:	1b80      	subs	r0, r0, r6
 800332a:	6060      	str	r0, [r4, #4]
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	6123      	str	r3, [r4, #16]
 8003330:	2300      	movs	r3, #0
 8003332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003336:	e7aa      	b.n	800328e <_printf_i+0x146>
 8003338:	4632      	mov	r2, r6
 800333a:	4649      	mov	r1, r9
 800333c:	4640      	mov	r0, r8
 800333e:	6923      	ldr	r3, [r4, #16]
 8003340:	47d0      	blx	sl
 8003342:	3001      	adds	r0, #1
 8003344:	d0ad      	beq.n	80032a2 <_printf_i+0x15a>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	079b      	lsls	r3, r3, #30
 800334a:	d413      	bmi.n	8003374 <_printf_i+0x22c>
 800334c:	68e0      	ldr	r0, [r4, #12]
 800334e:	9b03      	ldr	r3, [sp, #12]
 8003350:	4298      	cmp	r0, r3
 8003352:	bfb8      	it	lt
 8003354:	4618      	movlt	r0, r3
 8003356:	e7a6      	b.n	80032a6 <_printf_i+0x15e>
 8003358:	2301      	movs	r3, #1
 800335a:	4632      	mov	r2, r6
 800335c:	4649      	mov	r1, r9
 800335e:	4640      	mov	r0, r8
 8003360:	47d0      	blx	sl
 8003362:	3001      	adds	r0, #1
 8003364:	d09d      	beq.n	80032a2 <_printf_i+0x15a>
 8003366:	3501      	adds	r5, #1
 8003368:	68e3      	ldr	r3, [r4, #12]
 800336a:	9903      	ldr	r1, [sp, #12]
 800336c:	1a5b      	subs	r3, r3, r1
 800336e:	42ab      	cmp	r3, r5
 8003370:	dcf2      	bgt.n	8003358 <_printf_i+0x210>
 8003372:	e7eb      	b.n	800334c <_printf_i+0x204>
 8003374:	2500      	movs	r5, #0
 8003376:	f104 0619 	add.w	r6, r4, #25
 800337a:	e7f5      	b.n	8003368 <_printf_i+0x220>
 800337c:	08003707 	.word	0x08003707
 8003380:	08003718 	.word	0x08003718

08003384 <memmove>:
 8003384:	4288      	cmp	r0, r1
 8003386:	b510      	push	{r4, lr}
 8003388:	eb01 0402 	add.w	r4, r1, r2
 800338c:	d902      	bls.n	8003394 <memmove+0x10>
 800338e:	4284      	cmp	r4, r0
 8003390:	4623      	mov	r3, r4
 8003392:	d807      	bhi.n	80033a4 <memmove+0x20>
 8003394:	1e43      	subs	r3, r0, #1
 8003396:	42a1      	cmp	r1, r4
 8003398:	d008      	beq.n	80033ac <memmove+0x28>
 800339a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800339e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033a2:	e7f8      	b.n	8003396 <memmove+0x12>
 80033a4:	4601      	mov	r1, r0
 80033a6:	4402      	add	r2, r0
 80033a8:	428a      	cmp	r2, r1
 80033aa:	d100      	bne.n	80033ae <memmove+0x2a>
 80033ac:	bd10      	pop	{r4, pc}
 80033ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033b6:	e7f7      	b.n	80033a8 <memmove+0x24>

080033b8 <_sbrk_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	2300      	movs	r3, #0
 80033bc:	4d05      	ldr	r5, [pc, #20]	@ (80033d4 <_sbrk_r+0x1c>)
 80033be:	4604      	mov	r4, r0
 80033c0:	4608      	mov	r0, r1
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	f7fd fafc 	bl	80009c0 <_sbrk>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_sbrk_r+0x1a>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_sbrk_r+0x1a>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	20000724 	.word	0x20000724

080033d8 <memchr>:
 80033d8:	4603      	mov	r3, r0
 80033da:	b510      	push	{r4, lr}
 80033dc:	b2c9      	uxtb	r1, r1
 80033de:	4402      	add	r2, r0
 80033e0:	4293      	cmp	r3, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	d101      	bne.n	80033ea <memchr+0x12>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e003      	b.n	80033f2 <memchr+0x1a>
 80033ea:	7804      	ldrb	r4, [r0, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	428c      	cmp	r4, r1
 80033f0:	d1f6      	bne.n	80033e0 <memchr+0x8>
 80033f2:	bd10      	pop	{r4, pc}

080033f4 <_realloc_r>:
 80033f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033f8:	4607      	mov	r7, r0
 80033fa:	4614      	mov	r4, r2
 80033fc:	460d      	mov	r5, r1
 80033fe:	b921      	cbnz	r1, 800340a <_realloc_r+0x16>
 8003400:	4611      	mov	r1, r2
 8003402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	f7ff bc49 	b.w	8002c9c <_malloc_r>
 800340a:	b92a      	cbnz	r2, 8003418 <_realloc_r+0x24>
 800340c:	f7ff fbdc 	bl	8002bc8 <_free_r>
 8003410:	4625      	mov	r5, r4
 8003412:	4628      	mov	r0, r5
 8003414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003418:	f000 f81a 	bl	8003450 <_malloc_usable_size_r>
 800341c:	4284      	cmp	r4, r0
 800341e:	4606      	mov	r6, r0
 8003420:	d802      	bhi.n	8003428 <_realloc_r+0x34>
 8003422:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003426:	d8f4      	bhi.n	8003412 <_realloc_r+0x1e>
 8003428:	4621      	mov	r1, r4
 800342a:	4638      	mov	r0, r7
 800342c:	f7ff fc36 	bl	8002c9c <_malloc_r>
 8003430:	4680      	mov	r8, r0
 8003432:	b908      	cbnz	r0, 8003438 <_realloc_r+0x44>
 8003434:	4645      	mov	r5, r8
 8003436:	e7ec      	b.n	8003412 <_realloc_r+0x1e>
 8003438:	42b4      	cmp	r4, r6
 800343a:	4622      	mov	r2, r4
 800343c:	4629      	mov	r1, r5
 800343e:	bf28      	it	cs
 8003440:	4632      	movcs	r2, r6
 8003442:	f7ff fbb3 	bl	8002bac <memcpy>
 8003446:	4629      	mov	r1, r5
 8003448:	4638      	mov	r0, r7
 800344a:	f7ff fbbd 	bl	8002bc8 <_free_r>
 800344e:	e7f1      	b.n	8003434 <_realloc_r+0x40>

08003450 <_malloc_usable_size_r>:
 8003450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003454:	1f18      	subs	r0, r3, #4
 8003456:	2b00      	cmp	r3, #0
 8003458:	bfbc      	itt	lt
 800345a:	580b      	ldrlt	r3, [r1, r0]
 800345c:	18c0      	addlt	r0, r0, r3
 800345e:	4770      	bx	lr

08003460 <_init>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr

0800346c <_fini>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr
