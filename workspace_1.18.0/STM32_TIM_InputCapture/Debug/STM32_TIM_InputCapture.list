
STM32_TIM_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  08008760  08008760  00009760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091b4  080091b4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080091b4  080091b4  0000a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091bc  080091bc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091bc  080091bc  0000a1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080091c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  200001d4  08009398  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08009398  0000b874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb73  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002317  00000000  00000000  00017d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019150  00000000  00000000  0001ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011068  00000000  00000000  00033fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008ce82  00000000  00000000  00045050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000d1ed2  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000aec  00000000  00000000  000d1f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f20  00000000  00000000  000d2a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d7924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008748 	.word	0x08008748

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008748 	.word	0x08008748

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bee:	f043 0320 	orr.w	r3, r3, #32
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0320 	and.w	r3, r3, #32
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	4a17      	ldr	r2, [pc, #92]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	6193      	str	r3, [r2, #24]
 8000c0c:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	4a11      	ldr	r2, [pc, #68]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c1e:	f043 0308 	orr.w	r3, r3, #8
 8000c22:	6193      	str	r3, [r2, #24]
 8000c24:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <MX_GPIO_Init+0x90>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	f003 0308 	and.w	r3, r3, #8
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port, HC_SR04_Trig_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c36:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <MX_GPIO_Init+0x94>)
 8000c38:	f001 f95c 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HC_SR04_Trig_Pin */
  GPIO_InitStruct.Pin = HC_SR04_Trig_Pin;
 8000c3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HC_SR04_Trig_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0310 	add.w	r3, r7, #16
 8000c52:	4619      	mov	r1, r3
 8000c54:	4804      	ldr	r0, [pc, #16]	@ (8000c68 <MX_GPIO_Init+0x94>)
 8000c56:	f000 ffc9 	bl	8001bec <HAL_GPIO_Init>

}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010800 	.word	0x40010800

08000c6c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c72:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <MX_I2C1_Init+0x54>)
 8000c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c76:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c78:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_I2C1_Init+0x58>)
 8000c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c9c:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_I2C1_Init+0x50>)
 8000caa:	f001 f93b 	bl	8001f24 <HAL_I2C_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb4:	f000 f935 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001f0 	.word	0x200001f0
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	000186a0 	.word	0x000186a0

08000cc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a15      	ldr	r2, [pc, #84]	@ (8000d38 <HAL_I2C_MspInit+0x70>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d123      	bne.n	8000d30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a13      	ldr	r2, [pc, #76]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000cee:	f043 0308 	orr.w	r3, r3, #8
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0308 	and.w	r3, r3, #8
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d00:	23c0      	movs	r3, #192	@ 0xc0
 8000d02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d04:	2312      	movs	r3, #18
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0310 	add.w	r3, r7, #16
 8000d10:	4619      	mov	r1, r3
 8000d12:	480b      	ldr	r0, [pc, #44]	@ (8000d40 <HAL_I2C_MspInit+0x78>)
 8000d14:	f000 ff6a 	bl	8001bec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d22:	61d3      	str	r3, [r2, #28]
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <HAL_I2C_MspInit+0x74>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010c00 	.word	0x40010c00
 8000d44:	00000000 	.word	0x00000000

08000d48 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    if (htim==&htim1 && htim->Channel==HAL_TIM_ACTIVE_CHANNEL_4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d131      	bne.n	8000dbc <HAL_TIM_IC_CaptureCallback+0x74>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	7f1b      	ldrb	r3, [r3, #28]
 8000d5c:	2b08      	cmp	r3, #8
 8000d5e:	d12d      	bne.n	8000dbc <HAL_TIM_IC_CaptureCallback+0x74>
    {
        upEdge=HAL_TIM_ReadCapturedValue(&htim1,TIM_CHANNEL_3);
 8000d60:	2108      	movs	r1, #8
 8000d62:	481b      	ldr	r0, [pc, #108]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d64:	f002 fe88 	bl	8003a78 <HAL_TIM_ReadCapturedValue>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d6c:	6013      	str	r3, [r2, #0]
        downEdge= HAL_TIM_ReadCapturedValue(&htim1,TIM_CHANNEL_4);
 8000d6e:	210c      	movs	r1, #12
 8000d70:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000d72:	f002 fe81 	bl	8003a78 <HAL_TIM_ReadCapturedValue>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d7a:	6013      	str	r3, [r2, #0]
        distance=((downEdge-upEdge)*0.034)/2;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fb2c 	bl	80003e4 <__aeabi_ui2d>
 8000d8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000dc8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	f7ff fba1 	bl	80004d8 <__aeabi_dmul>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000da6:	f7ff fcc1 	bl	800072c <__aeabi_ddiv>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	4610      	mov	r0, r2
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fe89 	bl	8000ac8 <__aeabi_d2f>
 8000db6:	4603      	mov	r3, r0
 8000db8:	4a08      	ldr	r2, [pc, #32]	@ (8000ddc <HAL_TIM_IC_CaptureCallback+0x94>)
 8000dba:	6013      	str	r3, [r2, #0]

    }


}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	f3af 8000 	nop.w
 8000dc8:	b020c49c 	.word	0xb020c49c
 8000dcc:	3fa16872 	.word	0x3fa16872
 8000dd0:	200006dc 	.word	0x200006dc
 8000dd4:	20000244 	.word	0x20000244
 8000dd8:	20000248 	.word	0x20000248
 8000ddc:	2000024c 	.word	0x2000024c

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de6:	f000 fd6d 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dea:	f000 f855 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dee:	f7ff fef1 	bl	8000bd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000df2:	f7ff ff3b 	bl	8000c6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000df6:	f000 fc75 	bl	80016e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    HAL_Delay(20);
 8000dfa:	2014      	movs	r0, #20
 8000dfc:	f000 fdc4 	bl	8001988 <HAL_Delay>
    OLED_Init();
 8000e00:	f000 f8be 	bl	8000f80 <OLED_Init>
    HAL_TIM_Base_Start(&htim1);//可省略
 8000e04:	481f      	ldr	r0, [pc, #124]	@ (8000e84 <main+0xa4>)
 8000e06:	f002 f975 	bl	80030f4 <HAL_TIM_Base_Start>
    HAL_TIM_IC_Start(&htim1,TIM_CHANNEL_3);
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	481d      	ldr	r0, [pc, #116]	@ (8000e84 <main+0xa4>)
 8000e0e:	f002 fa13 	bl	8003238 <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_4);
 8000e12:	210c      	movs	r1, #12
 8000e14:	481b      	ldr	r0, [pc, #108]	@ (8000e84 <main+0xa4>)
 8000e16:	f002 facf 	bl	80033b8 <HAL_TIM_IC_Start_IT>
    OLED_Clean();
 8000e1a:	f000 f947 	bl	80010ac <OLED_Clean>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e24:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <main+0xa8>)
 8000e26:	f001 f865 	bl	8001ef4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 fdac 	bl	8001988 <HAL_Delay>
      HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e36:	4814      	ldr	r0, [pc, #80]	@ (8000e88 <main+0xa8>)
 8000e38:	f001 f85c 	bl	8001ef4 <HAL_GPIO_WritePin>
      __HAL_TIM_SET_COUNTER(&htim1,0);//计时器归零防止多次测量后溢出
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <main+0xa4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2200      	movs	r2, #0
 8000e42:	625a      	str	r2, [r3, #36]	@ 0x24
      HAL_Delay(20);
 8000e44:	2014      	movs	r0, #20
 8000e46:	f000 fd9f 	bl	8001988 <HAL_Delay>

    OLED_Clean();
 8000e4a:	f000 f92f 	bl	80010ac <OLED_Clean>
      sprintf(message,"%.1f cm",distance);
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <main+0xac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fae8 	bl	8000428 <__aeabi_f2d>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	490c      	ldr	r1, [pc, #48]	@ (8000e90 <main+0xb0>)
 8000e60:	f004 f83e 	bl	8004ee0 <siprintf>
      OLED_PrintASCIIString(0,0,message,&afont16x8,OLED_COLOR_NORMAL);
 8000e64:	463a      	mov	r2, r7
 8000e66:	2300      	movs	r3, #0
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <main+0xb4>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 fae0 	bl	8001434 <OLED_PrintASCIIString>
    OLED_ShowFrame();
 8000e74:	f000 f8e6 	bl	8001044 <OLED_ShowFrame>
      HAL_Delay(500);
 8000e78:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e7c:	f000 fd84 	bl	8001988 <HAL_Delay>
      HAL_GPIO_WritePin(HC_SR04_Trig_GPIO_Port,HC_SR04_Trig_Pin,GPIO_PIN_SET);
 8000e80:	bf00      	nop
 8000e82:	e7cc      	b.n	8000e1e <main+0x3e>
 8000e84:	200006dc 	.word	0x200006dc
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	2000024c 	.word	0x2000024c
 8000e90:	08008760 	.word	0x08008760
 8000e94:	08008d58 	.word	0x08008d58

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	@ 0x40
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2228      	movs	r2, #40	@ 0x28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f87f 	bl	8004faa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ed0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ed6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000edc:	f107 0318 	add.w	r3, r7, #24
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fcbb 	bl	800285c <HAL_RCC_OscConfig>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000eec:	f000 f819 	bl	8000f22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 ff28 	bl	8002d60 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000f16:	f000 f804 	bl	8000f22 <Error_Handler>
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3740      	adds	r7, #64	@ 0x40
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <Error_Handler+0x8>
	...

08000f30 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	9200      	str	r2, [sp, #0]
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	217a      	movs	r1, #122	@ 0x7a
 8000f4a:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <OLED_Send+0x28>)
 8000f4c:	f001 f92e 	bl	80021ac <HAL_I2C_Master_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200001f0 	.word	0x200001f0

08000f5c <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000f66:	4a05      	ldr	r2, [pc, #20]	@ (8000f7c <OLED_SendCmd+0x20>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <OLED_SendCmd+0x20>)
 8000f70:	f7ff ffde 	bl	8000f30 <OLED_Send>
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000650 	.word	0x20000650

08000f80 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000f84:	20ae      	movs	r0, #174	@ 0xae
 8000f86:	f7ff ffe9 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 8000f8a:	2002      	movs	r0, #2
 8000f8c:	f7ff ffe6 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 8000f90:	2010      	movs	r0, #16
 8000f92:	f7ff ffe3 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 8000f96:	2040      	movs	r0, #64	@ 0x40
 8000f98:	f7ff ffe0 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 8000f9c:	20b0      	movs	r0, #176	@ 0xb0
 8000f9e:	f7ff ffdd 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 8000fa2:	2081      	movs	r0, #129	@ 0x81
 8000fa4:	f7ff ffda 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 8000fa8:	20cf      	movs	r0, #207	@ 0xcf
 8000faa:	f7ff ffd7 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 8000fae:	20a1      	movs	r0, #161	@ 0xa1
 8000fb0:	f7ff ffd4 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 8000fb4:	20a6      	movs	r0, #166	@ 0xa6
 8000fb6:	f7ff ffd1 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 8000fba:	20a8      	movs	r0, #168	@ 0xa8
 8000fbc:	f7ff ffce 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 8000fc0:	203f      	movs	r0, #63	@ 0x3f
 8000fc2:	f7ff ffcb 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 8000fc6:	20ad      	movs	r0, #173	@ 0xad
 8000fc8:	f7ff ffc8 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 8000fcc:	208b      	movs	r0, #139	@ 0x8b
 8000fce:	f7ff ffc5 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 8000fd2:	2033      	movs	r0, #51	@ 0x33
 8000fd4:	f7ff ffc2 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000fd8:	20c8      	movs	r0, #200	@ 0xc8
 8000fda:	f7ff ffbf 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 8000fde:	20d3      	movs	r0, #211	@ 0xd3
 8000fe0:	f7ff ffbc 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ffb9 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 8000fea:	20d5      	movs	r0, #213	@ 0xd5
 8000fec:	f7ff ffb6 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000ff0:	20c0      	movs	r0, #192	@ 0xc0
 8000ff2:	f7ff ffb3 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8000ff6:	20d9      	movs	r0, #217	@ 0xd9
 8000ff8:	f7ff ffb0 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 8000ffc:	201f      	movs	r0, #31
 8000ffe:	f7ff ffad 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8001002:	20da      	movs	r0, #218	@ 0xda
 8001004:	f7ff ffaa 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8001008:	2012      	movs	r0, #18
 800100a:	f7ff ffa7 	bl	8000f5c <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800100e:	20db      	movs	r0, #219	@ 0xdb
 8001010:	f7ff ffa4 	bl	8000f5c <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8001014:	2040      	movs	r0, #64	@ 0x40
 8001016:	f7ff ffa1 	bl	8000f5c <OLED_SendCmd>

  OLED_NewFrame();
 800101a:	f000 f807 	bl	800102c <OLED_NewFrame>
  OLED_ShowFrame();
 800101e:	f000 f811 	bl	8001044 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001022:	20af      	movs	r0, #175	@ 0xaf
 8001024:	f7ff ff9a 	bl	8000f5c <OLED_SendCmd>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001034:	2100      	movs	r1, #0
 8001036:	4802      	ldr	r0, [pc, #8]	@ (8001040 <OLED_NewFrame+0x14>)
 8001038:	f003 ffb7 	bl	8004faa <memset>
  
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000250 	.word	0x20000250

08001044 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <OLED_ShowFrame+0x5c>)
 800104c:	2240      	movs	r2, #64	@ 0x40
 800104e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e01b      	b.n	800108e <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3b50      	subs	r3, #80	@ 0x50
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff7d 	bl	8000f5c <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff ff7a 	bl	8000f5c <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001068:	2010      	movs	r0, #16
 800106a:	f7ff ff77 	bl	8000f5c <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800106e:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <OLED_ShowFrame+0x60>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	01db      	lsls	r3, r3, #7
 8001074:	4a0c      	ldr	r2, [pc, #48]	@ (80010a8 <OLED_ShowFrame+0x64>)
 8001076:	4413      	add	r3, r2
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	4619      	mov	r1, r3
 800107c:	f004 f823 	bl	80050c6 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001080:	2181      	movs	r1, #129	@ 0x81
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <OLED_ShowFrame+0x5c>)
 8001084:	f7ff ff54 	bl	8000f30 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3301      	adds	r3, #1
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d9e0      	bls.n	8001056 <OLED_ShowFrame+0x12>
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000654 	.word	0x20000654
 80010a4:	20000655 	.word	0x20000655
 80010a8:	20000250 	.word	0x20000250

080010ac <OLED_Clean>:

//清屏
void OLED_Clean()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 80010b0:	f7ff ffbc 	bl	800102c <OLED_NewFrame>
    OLED_ShowFrame();
 80010b4:	f7ff ffc6 	bl	8001044 <OLED_ShowFrame>
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 80010bc:	b490      	push	{r4, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	d85f      	bhi.n	80011a0 <OLED_SetByte_Fine+0xe4>
 80010e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db5b      	blt.n	80011a0 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 80010e8:	7d3b      	ldrb	r3, [r7, #20]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <OLED_SetByte_Fine+0x38>
 80010ee:	797b      	ldrb	r3, [r7, #5]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80010f4:	7c3b      	ldrb	r3, [r7, #16]
 80010f6:	3301      	adds	r3, #1
 80010f8:	22ff      	movs	r2, #255	@ 0xff
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	b25a      	sxtb	r2, r3
 8001100:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001104:	4313      	orrs	r3, r2
 8001106:	b25a      	sxtb	r2, r3
 8001108:	793b      	ldrb	r3, [r7, #4]
 800110a:	f1c3 0308 	rsb	r3, r3, #8
 800110e:	21ff      	movs	r1, #255	@ 0xff
 8001110:	fa41 f303 	asr.w	r3, r1, r3
 8001114:	b25b      	sxtb	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b25b      	sxtb	r3, r3
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <OLED_SetByte_Fine+0xf0>)
 800111e:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8001120:	79fa      	ldrb	r2, [r7, #7]
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	4922      	ldr	r1, [pc, #136]	@ (80011b0 <OLED_SetByte_Fine+0xf4>)
 8001126:	01d2      	lsls	r2, r2, #7
 8001128:	440a      	add	r2, r1
 800112a:	4413      	add	r3, r2
 800112c:	7818      	ldrb	r0, [r3, #0]
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <OLED_SetByte_Fine+0xf0>)
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	79bb      	ldrb	r3, [r7, #6]
 8001136:	4001      	ands	r1, r0
 8001138:	b2c8      	uxtb	r0, r1
 800113a:	491d      	ldr	r1, [pc, #116]	@ (80011b0 <OLED_SetByte_Fine+0xf4>)
 800113c:	01d2      	lsls	r2, r2, #7
 800113e:	440a      	add	r2, r1
 8001140:	4413      	add	r3, r2
 8001142:	4602      	mov	r2, r0
 8001144:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001146:	7c3b      	ldrb	r3, [r7, #16]
 8001148:	3301      	adds	r3, #1
 800114a:	22ff      	movs	r2, #255	@ 0xff
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	b25b      	sxtb	r3, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	b25a      	sxtb	r2, r3
 8001156:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800115a:	4013      	ands	r3, r2
 800115c:	b25a      	sxtb	r2, r3
 800115e:	793b      	ldrb	r3, [r7, #4]
 8001160:	f1c3 0308 	rsb	r3, r3, #8
 8001164:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8001168:	fa41 f303 	asr.w	r3, r1, r3
 800116c:	b25b      	sxtb	r3, r3
 800116e:	4013      	ands	r3, r2
 8001170:	b25b      	sxtb	r3, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <OLED_SetByte_Fine+0xf0>)
 8001176:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8001178:	79fa      	ldrb	r2, [r7, #7]
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	490c      	ldr	r1, [pc, #48]	@ (80011b0 <OLED_SetByte_Fine+0xf4>)
 800117e:	01d2      	lsls	r2, r2, #7
 8001180:	440a      	add	r2, r1
 8001182:	4413      	add	r3, r2
 8001184:	7818      	ldrb	r0, [r3, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <OLED_SetByte_Fine+0xf0>)
 8001188:	7819      	ldrb	r1, [r3, #0]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	79bb      	ldrb	r3, [r7, #6]
 800118e:	4301      	orrs	r1, r0
 8001190:	b2c8      	uxtb	r0, r1
 8001192:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <OLED_SetByte_Fine+0xf4>)
 8001194:	01d2      	lsls	r2, r2, #7
 8001196:	440a      	add	r2, r1
 8001198:	4413      	add	r3, r2
 800119a:	4602      	mov	r2, r0
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	e000      	b.n	80011a2 <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80011a0:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc90      	pop	{r4, r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200006d5 	.word	0x200006d5
 80011b0:	20000250 	.word	0x20000250

080011b4 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 80011b4:	b5b0      	push	{r4, r5, r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	71fb      	strb	r3, [r7, #7]
 80011c6:	4603      	mov	r3, r0
 80011c8:	71bb      	strb	r3, [r7, #6]
 80011ca:	460b      	mov	r3, r1
 80011cc:	717b      	strb	r3, [r7, #5]
 80011ce:	4613      	mov	r3, r2
 80011d0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 80011e0:	7bba      	ldrb	r2, [r7, #14]
 80011e2:	793b      	ldrb	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	2b08      	cmp	r3, #8
 80011e8:	dd29      	ble.n	800123e <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80011ea:	797a      	ldrb	r2, [r7, #5]
 80011ec:	7bbb      	ldrb	r3, [r7, #14]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	7bbc      	ldrb	r4, [r7, #14]
 80011f6:	79f9      	ldrb	r1, [r7, #7]
 80011f8:	7bf8      	ldrb	r0, [r7, #15]
 80011fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2307      	movs	r3, #7
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	4623      	mov	r3, r4
 8001206:	f7ff ff59 	bl	80010bc <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	b2d8      	uxtb	r0, r3
 8001210:	797a      	ldrb	r2, [r7, #5]
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f1c3 0308 	rsb	r3, r3, #8
 8001218:	fa42 f303 	asr.w	r3, r2, r3
 800121c:	b2dc      	uxtb	r4, r3
 800121e:	793a      	ldrb	r2, [r7, #4]
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	4413      	add	r3, r2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	3b09      	subs	r3, #9
 8001228:	b2db      	uxtb	r3, r3
 800122a:	79f9      	ldrb	r1, [r7, #7]
 800122c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001230:	9201      	str	r2, [sp, #4]
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2300      	movs	r3, #0
 8001236:	4622      	mov	r2, r4
 8001238:	f7ff ff40 	bl	80010bc <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800123c:	e015      	b.n	800126a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800123e:	797a      	ldrb	r2, [r7, #5]
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	b2dc      	uxtb	r4, r3
 8001248:	7bba      	ldrb	r2, [r7, #14]
 800124a:	793b      	ldrb	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	3b01      	subs	r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	7bbd      	ldrb	r5, [r7, #14]
 8001256:	79f9      	ldrb	r1, [r7, #7]
 8001258:	7bf8      	ldrb	r0, [r7, #15]
 800125a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	462b      	mov	r3, r5
 8001264:	4622      	mov	r2, r4
 8001266:	f7ff ff29 	bl	80010bc <OLED_SetByte_Fine>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bdb0      	pop	{r4, r5, r7, pc}

08001272 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 8001272:	b590      	push	{r4, r7, lr}
 8001274:	b087      	sub	sp, #28
 8001276:	af02      	add	r7, sp, #8
 8001278:	4604      	mov	r4, r0
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	461a      	mov	r2, r3
 8001280:	4623      	mov	r3, r4
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4603      	mov	r3, r0
 8001286:	71bb      	strb	r3, [r7, #6]
 8001288:	460b      	mov	r3, r1
 800128a:	717b      	strb	r3, [r7, #5]
 800128c:	4613      	mov	r3, r2
 800128e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	08db      	lsrs	r3, r3, #3
 8001294:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800129e:	797a      	ldrb	r2, [r7, #5]
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	7bbc      	ldrb	r4, [r7, #14]
 80012aa:	79f9      	ldrb	r1, [r7, #7]
 80012ac:	7bf8      	ldrb	r0, [r7, #15]
 80012ae:	793b      	ldrb	r3, [r7, #4]
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2307      	movs	r3, #7
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4623      	mov	r3, r4
 80012b8:	f7ff ff00 	bl	80010bc <OLED_SetByte_Fine>
  if (bit) {
 80012bc:	7bbb      	ldrb	r3, [r7, #14]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d014      	beq.n	80012ec <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2d8      	uxtb	r0, r3
 80012c8:	797a      	ldrb	r2, [r7, #5]
 80012ca:	7bbb      	ldrb	r3, [r7, #14]
 80012cc:	f1c3 0308 	rsb	r3, r3, #8
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	b2dc      	uxtb	r4, r3
 80012d6:	7bbb      	ldrb	r3, [r7, #14]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	79f9      	ldrb	r1, [r7, #7]
 80012de:	793a      	ldrb	r2, [r7, #4]
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	2300      	movs	r3, #0
 80012e6:	4622      	mov	r2, r4
 80012e8:	f7ff fee8 	bl	80010bc <OLED_SetByte_Fine>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd90      	pop	{r4, r7, pc}

080012f4 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	603a      	str	r2, [r7, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	460b      	mov	r3, r1
 8001304:	71bb      	strb	r3, [r7, #6]
 8001306:	4613      	mov	r3, r2
 8001308:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 800130a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 8001312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e025      	b.n	800136e <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8001322:	2300      	movs	r3, #0
 8001324:	73bb      	strb	r3, [r7, #14]
 8001326:	e01b      	b.n	8001360 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001328:	79fa      	ldrb	r2, [r7, #7]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4413      	add	r3, r2
 800132e:	b2d8      	uxtb	r0, r3
 8001330:	7bbb      	ldrb	r3, [r7, #14]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	79bb      	ldrb	r3, [r7, #6]
 8001338:	4413      	add	r3, r2
 800133a:	b2dc      	uxtb	r4, r3
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	7979      	ldrb	r1, [r7, #5]
 8001342:	fb01 f303 	mul.w	r3, r1, r3
 8001346:	4413      	add	r3, r2
 8001348:	461a      	mov	r2, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001354:	4621      	mov	r1, r4
 8001356:	f7ff ff8c 	bl	8001272 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	3301      	adds	r3, #1
 800135e:	73bb      	strb	r3, [r7, #14]
 8001360:	7bba      	ldrb	r2, [r7, #14]
 8001362:	7b3b      	ldrb	r3, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d3df      	bcc.n	8001328 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3d5      	bcc.n	8001322 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d028      	beq.n	80013ce <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 800137c:	797b      	ldrb	r3, [r7, #5]
 800137e:	b29b      	uxth	r3, r3
 8001380:	7b3a      	ldrb	r2, [r7, #12]
 8001382:	b292      	uxth	r2, r2
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 800138a:	2300      	movs	r3, #0
 800138c:	737b      	strb	r3, [r7, #13]
 800138e:	e01a      	b.n	80013c6 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	4413      	add	r3, r2
 8001396:	b2d8      	uxtb	r0, r3
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	4413      	add	r3, r2
 80013a2:	b2d9      	uxtb	r1, r3
 80013a4:	893a      	ldrh	r2, [r7, #8]
 80013a6:	7b7b      	ldrb	r3, [r7, #13]
 80013a8:	4413      	add	r3, r2
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	781a      	ldrb	r2, [r3, #0]
 80013b2:	7afc      	ldrb	r4, [r7, #11]
 80013b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4623      	mov	r3, r4
 80013bc:	f7ff fefa 	bl	80011b4 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	3301      	adds	r3, #1
 80013c4:	737b      	strb	r3, [r7, #13]
 80013c6:	7b7a      	ldrb	r2, [r7, #13]
 80013c8:	797b      	ldrb	r3, [r7, #5]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d3e0      	bcc.n	8001390 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 80013ce:	bf00      	nop
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd90      	pop	{r4, r7, pc}

080013d6 <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 80013d6:	b5b0      	push	{r4, r5, r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af02      	add	r7, sp, #8
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	460b      	mov	r3, r1
 80013e4:	71bb      	strb	r3, [r7, #6]
 80013e6:	4613      	mov	r3, r2
 80013e8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	f1a3 0120 	sub.w	r1, r3, #32
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	3307      	adds	r3, #7
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da00      	bge.n	8001400 <OLED_PrintASCIIChar+0x2a>
 80013fe:	3307      	adds	r3, #7
 8001400:	10db      	asrs	r3, r3, #3
 8001402:	4618      	mov	r0, r3
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	785b      	ldrb	r3, [r3, #1]
 8001408:	fb00 f303 	mul.w	r3, r0, r3
 800140c:	fb01 f303 	mul.w	r3, r1, r3
 8001410:	18d4      	adds	r4, r2, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	785d      	ldrb	r5, [r3, #1]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	79b9      	ldrb	r1, [r7, #6]
 800141c:	79f8      	ldrb	r0, [r7, #7]
 800141e:	7e3a      	ldrb	r2, [r7, #24]
 8001420:	9201      	str	r2, [sp, #4]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	462b      	mov	r3, r5
 8001426:	4622      	mov	r2, r4
 8001428:	f7ff ff64 	bl	80012f4 <OLED_SetBlock>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}

08001434 <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60ba      	str	r2, [r7, #8]
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
 8001442:	460b      	mov	r3, r1
 8001444:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 800144a:	e011      	b.n	8001470 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	7bb9      	ldrb	r1, [r7, #14]
 8001452:	7df8      	ldrb	r0, [r7, #23]
 8001454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f7ff ffbb 	bl	80013d6 <OLED_PrintASCIIChar>
    x0 += font->w;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	785a      	ldrb	r2, [r3, #1]
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	4413      	add	r3, r2
 8001468:	75fb      	strb	r3, [r7, #23]
    str++;
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1e9      	bne.n	800144c <OLED_PrintASCIIString+0x18>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <HAL_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6193      	str	r3, [r2, #24]
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	4a0e      	ldr	r2, [pc, #56]	@ (80014e0 <HAL_MspInit+0x5c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	61d3      	str	r3, [r2, #28]
 80014ae:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ba:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <HAL_MspInit+0x60>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <HAL_MspInit+0x60>)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001538:	f000 fa0a 	bl	8001950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <TIM1_CC_IRQHandler+0x10>)
 8001546:	f002 f843 	bl	80035d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200006dc 	.word	0x200006dc

08001554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <_kill>:

int _kill(int pid, int sig)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800156c:	f003 fd70 	bl	8005050 <__errno>
 8001570:	4603      	mov	r3, r0
 8001572:	2216      	movs	r2, #22
 8001574:	601a      	str	r2, [r3, #0]
  return -1;
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <_exit>:

void _exit (int status)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800158a:	f04f 31ff 	mov.w	r1, #4294967295
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffe7 	bl	8001562 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <_exit+0x12>

08001598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
  }

  return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e009      	b.n	80015f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <_write+0x12>
  }
  return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001630:	605a      	str	r2, [r3, #4]
  return 0;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
	...

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f003 fcd8 	bl	8005050 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20005000 	.word	0x20005000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200006d8 	.word	0x200006d8
 80016d4:	20000878 	.word	0x20000878

080016d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001710:	4a34      	ldr	r2, [pc, #208]	@ (80017e4 <MX_TIM1_Init+0x100>)
 8001712:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001716:	2247      	movs	r2, #71	@ 0x47
 8001718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001720:	4b2f      	ldr	r3, [pc, #188]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001722:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b2d      	ldr	r3, [pc, #180]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172e:	4b2c      	ldr	r3, [pc, #176]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b2a      	ldr	r3, [pc, #168]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800173a:	4829      	ldr	r0, [pc, #164]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 800173c:	f001 fc8a 	bl	8003054 <HAL_TIM_Base_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001746:	f7ff fbec 	bl	8000f22 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	4619      	mov	r1, r3
 8001756:	4822      	ldr	r0, [pc, #136]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001758:	f002 f8c6 	bl	80038e8 <HAL_TIM_ConfigClockSource>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001762:	f7ff fbde 	bl	8000f22 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001766:	481e      	ldr	r0, [pc, #120]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001768:	f001 fd0e 	bl	8003188 <HAL_TIM_IC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001772:	f7ff fbd6 	bl	8000f22 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	4816      	ldr	r0, [pc, #88]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 8001786:	f002 fc15 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001790:	f7ff fbc7 	bl	8000f22 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001798:	2301      	movs	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	2208      	movs	r2, #8
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 80017ac:	f002 f800 	bl	80037b0 <HAL_TIM_IC_ConfigChannel>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80017b6:	f7ff fbb4 	bl	8000f22 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017ba:	2302      	movs	r3, #2
 80017bc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017be:	2302      	movs	r3, #2
 80017c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80017c2:	463b      	mov	r3, r7
 80017c4:	220c      	movs	r2, #12
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_TIM1_Init+0xfc>)
 80017ca:	f001 fff1 	bl	80037b0 <HAL_TIM_IC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80017d4:	f7ff fba5 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3728      	adds	r7, #40	@ 0x28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200006dc 	.word	0x200006dc
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a1a      	ldr	r2, [pc, #104]	@ (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d12c      	bne.n	8001862 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 800180e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001812:	6193      	str	r3, [r2, #24]
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <HAL_TIM_Base_MspInit+0x88>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001838:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800183c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 800184e:	f000 f9cd 	bl	8001bec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	201b      	movs	r0, #27
 8001858:	f000 f991 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800185c:	201b      	movs	r0, #27
 800185e:	f000 f9aa 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40010800 	.word	0x40010800

08001878 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001878:	f7ff ff2e 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480b      	ldr	r0, [pc, #44]	@ (80018ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800187e:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001880:	4a0c      	ldr	r2, [pc, #48]	@ (80018b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a09      	ldr	r2, [pc, #36]	@ (80018b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001894:	4c09      	ldr	r4, [pc, #36]	@ (80018bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018a2:	f003 fbdb 	bl	800505c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018a6:	f7ff fa9b 	bl	8000de0 <main>
  bx lr
 80018aa:	4770      	bx	lr
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018b4:	080091c4 	.word	0x080091c4
  ldr r2, =_sbss
 80018b8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018bc:	20000874 	.word	0x20000874

080018c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC1_2_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_Init+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a07      	ldr	r2, [pc, #28]	@ (80018ec <HAL_Init+0x28>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d4:	2003      	movs	r0, #3
 80018d6:	f000 f947 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018da:	200f      	movs	r0, #15
 80018dc:	f000 f808 	bl	80018f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e0:	f7ff fdd0 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40022000 	.word	0x40022000

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_InitTick+0x54>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_InitTick+0x58>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001906:	fbb3 f3f1 	udiv	r3, r3, r1
 800190a:	fbb2 f3f3 	udiv	r3, r2, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f95f 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e00e      	b.n	800193c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b0f      	cmp	r3, #15
 8001922:	d80a      	bhi.n	800193a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001924:	2200      	movs	r2, #0
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f000 f927 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <HAL_InitTick+0x5c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
 8001938:	e000      	b.n	800193c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000008 	.word	0x20000008
 800194c:	20000004 	.word	0x20000004

08001950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x1c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_IncTick+0x20>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4413      	add	r3, r2
 8001960:	4a03      	ldr	r2, [pc, #12]	@ (8001970 <HAL_IncTick+0x20>)
 8001962:	6013      	str	r3, [r2, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	20000008 	.word	0x20000008
 8001970:	20000724 	.word	0x20000724

08001974 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b02      	ldr	r3, [pc, #8]	@ (8001984 <HAL_GetTick+0x10>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	20000724 	.word	0x20000724

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff fff0 	bl	8001974 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	@ (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffe0 	bl	8001974 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4906      	ldr	r1, [pc, #24]	@ (8001a68 <__NVIC_EnableIRQ+0x34>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff90 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff2d 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff42 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff90 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5f 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff35 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b08b      	sub	sp, #44	@ 0x2c
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bfe:	e169      	b.n	8001ed4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c00:	2201      	movs	r2, #1
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 8158 	bne.w	8001ece <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4a9a      	ldr	r2, [pc, #616]	@ (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d05e      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c28:	4a98      	ldr	r2, [pc, #608]	@ (8001e8c <HAL_GPIO_Init+0x2a0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d875      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c2e:	4a98      	ldr	r2, [pc, #608]	@ (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d058      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c34:	4a96      	ldr	r2, [pc, #600]	@ (8001e90 <HAL_GPIO_Init+0x2a4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d86f      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c3a:	4a96      	ldr	r2, [pc, #600]	@ (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d052      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c40:	4a94      	ldr	r2, [pc, #592]	@ (8001e94 <HAL_GPIO_Init+0x2a8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d869      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c46:	4a94      	ldr	r2, [pc, #592]	@ (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d04c      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a92      	ldr	r2, [pc, #584]	@ (8001e98 <HAL_GPIO_Init+0x2ac>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d863      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c52:	4a92      	ldr	r2, [pc, #584]	@ (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d046      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
 8001c58:	4a90      	ldr	r2, [pc, #576]	@ (8001e9c <HAL_GPIO_Init+0x2b0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d85d      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c5e:	2b12      	cmp	r3, #18
 8001c60:	d82a      	bhi.n	8001cb8 <HAL_GPIO_Init+0xcc>
 8001c62:	2b12      	cmp	r3, #18
 8001c64:	d859      	bhi.n	8001d1a <HAL_GPIO_Init+0x12e>
 8001c66:	a201      	add	r2, pc, #4	@ (adr r2, 8001c6c <HAL_GPIO_Init+0x80>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001ce7 	.word	0x08001ce7
 8001c70:	08001cc1 	.word	0x08001cc1
 8001c74:	08001cd3 	.word	0x08001cd3
 8001c78:	08001d15 	.word	0x08001d15
 8001c7c:	08001d1b 	.word	0x08001d1b
 8001c80:	08001d1b 	.word	0x08001d1b
 8001c84:	08001d1b 	.word	0x08001d1b
 8001c88:	08001d1b 	.word	0x08001d1b
 8001c8c:	08001d1b 	.word	0x08001d1b
 8001c90:	08001d1b 	.word	0x08001d1b
 8001c94:	08001d1b 	.word	0x08001d1b
 8001c98:	08001d1b 	.word	0x08001d1b
 8001c9c:	08001d1b 	.word	0x08001d1b
 8001ca0:	08001d1b 	.word	0x08001d1b
 8001ca4:	08001d1b 	.word	0x08001d1b
 8001ca8:	08001d1b 	.word	0x08001d1b
 8001cac:	08001d1b 	.word	0x08001d1b
 8001cb0:	08001cc9 	.word	0x08001cc9
 8001cb4:	08001cdd 	.word	0x08001cdd
 8001cb8:	4a79      	ldr	r2, [pc, #484]	@ (8001ea0 <HAL_GPIO_Init+0x2b4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d013      	beq.n	8001ce6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cbe:	e02c      	b.n	8001d1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	623b      	str	r3, [r7, #32]
          break;
 8001cc6:	e029      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	623b      	str	r3, [r7, #32]
          break;
 8001cd0:	e024      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	623b      	str	r3, [r7, #32]
          break;
 8001cda:	e01f      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	623b      	str	r3, [r7, #32]
          break;
 8001ce4:	e01a      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e013      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d105      	bne.n	8001d08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	611a      	str	r2, [r3, #16]
          break;
 8001d06:	e009      	b.n	8001d1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	615a      	str	r2, [r3, #20]
          break;
 8001d12:	e003      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
          break;
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x130>
          break;
 8001d1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2bff      	cmp	r3, #255	@ 0xff
 8001d20:	d801      	bhi.n	8001d26 <HAL_GPIO_Init+0x13a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_Init+0x13e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2bff      	cmp	r3, #255	@ 0xff
 8001d30:	d802      	bhi.n	8001d38 <HAL_GPIO_Init+0x14c>
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	e002      	b.n	8001d3e <HAL_GPIO_Init+0x152>
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	3b08      	subs	r3, #8
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	210f      	movs	r1, #15
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	6a39      	ldr	r1, [r7, #32]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80b1 	beq.w	8001ece <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6193      	str	r3, [r2, #24]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d84:	4a48      	ldr	r2, [pc, #288]	@ (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a40      	ldr	r2, [pc, #256]	@ (8001eac <HAL_GPIO_Init+0x2c0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_GPIO_Init+0x1ec>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3f      	ldr	r2, [pc, #252]	@ (8001eb0 <HAL_GPIO_Init+0x2c4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb4 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1e4>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb8 <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1e0>
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dcc:	2304      	movs	r3, #4
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1ee>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dea:	492f      	ldr	r1, [pc, #188]	@ (8001ea8 <HAL_GPIO_Init+0x2bc>)
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e04:	4b2d      	ldr	r3, [pc, #180]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	492c      	ldr	r1, [pc, #176]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4928      	ldr	r1, [pc, #160]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4922      	ldr	r1, [pc, #136]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	491e      	ldr	r1, [pc, #120]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4918      	ldr	r1, [pc, #96]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]
 8001e60:	e006      	b.n	8001e70 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	4914      	ldr	r1, [pc, #80]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d021      	beq.n	8001ec0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_GPIO_Init+0x2d0>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e021      	b.n	8001ece <HAL_GPIO_Init+0x2e2>
 8001e8a:	bf00      	nop
 8001e8c:	10320000 	.word	0x10320000
 8001e90:	10310000 	.word	0x10310000
 8001e94:	10220000 	.word	0x10220000
 8001e98:	10210000 	.word	0x10210000
 8001e9c:	10120000 	.word	0x10120000
 8001ea0:	10110000 	.word	0x10110000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40010c00 	.word	0x40010c00
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40011400 	.word	0x40011400
 8001ebc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4909      	ldr	r1, [pc, #36]	@ (8001ef0 <HAL_GPIO_Init+0x304>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	fa22 f303 	lsr.w	r3, r2, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f47f ae8e 	bne.w	8001c00 <HAL_GPIO_Init+0x14>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	372c      	adds	r7, #44	@ 0x2c
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e12b      	b.n	800218e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe febc 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	@ 0x24
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f88:	f001 f832 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8001f8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4a81      	ldr	r2, [pc, #516]	@ (8002198 <HAL_I2C_Init+0x274>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d807      	bhi.n	8001fa8 <HAL_I2C_Init+0x84>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a80      	ldr	r2, [pc, #512]	@ (800219c <HAL_I2C_Init+0x278>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	bf94      	ite	ls
 8001fa0:	2301      	movls	r3, #1
 8001fa2:	2300      	movhi	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e006      	b.n	8001fb6 <HAL_I2C_Init+0x92>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a7d      	ldr	r2, [pc, #500]	@ (80021a0 <HAL_I2C_Init+0x27c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0e7      	b.n	800218e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4a78      	ldr	r2, [pc, #480]	@ (80021a4 <HAL_I2C_Init+0x280>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a6a      	ldr	r2, [pc, #424]	@ (8002198 <HAL_I2C_Init+0x274>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d802      	bhi.n	8001ff8 <HAL_I2C_Init+0xd4>
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	e009      	b.n	800200c <HAL_I2C_Init+0xe8>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	4a69      	ldr	r2, [pc, #420]	@ (80021a8 <HAL_I2C_Init+0x284>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	099b      	lsrs	r3, r3, #6
 800200a:	3301      	adds	r3, #1
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	430b      	orrs	r3, r1
 8002012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800201e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	495c      	ldr	r1, [pc, #368]	@ (8002198 <HAL_I2C_Init+0x274>)
 8002028:	428b      	cmp	r3, r1
 800202a:	d819      	bhi.n	8002060 <HAL_I2C_Init+0x13c>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e59      	subs	r1, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	fbb1 f3f3 	udiv	r3, r1, r3
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002040:	400b      	ands	r3, r1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_I2C_Init+0x138>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1e59      	subs	r1, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fbb1 f3f3 	udiv	r3, r1, r3
 8002054:	3301      	adds	r3, #1
 8002056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800205a:	e051      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 800205c:	2304      	movs	r3, #4
 800205e:	e04f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d111      	bne.n	800208c <HAL_I2C_Init+0x168>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1e58      	subs	r0, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6859      	ldr	r1, [r3, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	440b      	add	r3, r1
 8002076:	fbb0 f3f3 	udiv	r3, r0, r3
 800207a:	3301      	adds	r3, #1
 800207c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	e012      	b.n	80020b2 <HAL_I2C_Init+0x18e>
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1e58      	subs	r0, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	0099      	lsls	r1, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	fbb0 f3f3 	udiv	r3, r0, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Init+0x196>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e022      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <HAL_I2C_Init+0x1bc>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e58      	subs	r0, r3, #1
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6859      	ldr	r1, [r3, #4]
 80020ca:	460b      	mov	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020de:	e00f      	b.n	8002100 <HAL_I2C_Init+0x1dc>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	6809      	ldr	r1, [r1, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69da      	ldr	r2, [r3, #28]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800212e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6911      	ldr	r1, [r2, #16]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68d2      	ldr	r2, [r2, #12]
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	430b      	orrs	r3, r1
 8002142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	000186a0 	.word	0x000186a0
 800219c:	001e847f 	.word	0x001e847f
 80021a0:	003d08ff 	.word	0x003d08ff
 80021a4:	431bde83 	.word	0x431bde83
 80021a8:	10624dd3 	.word	0x10624dd3

080021ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	607a      	str	r2, [r7, #4]
 80021b6:	461a      	mov	r2, r3
 80021b8:	460b      	mov	r3, r1
 80021ba:	817b      	strh	r3, [r7, #10]
 80021bc:	4613      	mov	r3, r2
 80021be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fbd8 	bl	8001974 <HAL_GetTick>
 80021c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b20      	cmp	r3, #32
 80021d0:	f040 80e0 	bne.w	8002394 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2319      	movs	r3, #25
 80021da:	2201      	movs	r2, #1
 80021dc:	4970      	ldr	r1, [pc, #448]	@ (80023a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f964 	bl	80024ac <I2C_WaitOnFlagUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
 80021ec:	e0d3      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d101      	bne.n	80021fc <HAL_I2C_Master_Transmit+0x50>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e0cc      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d007      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f042 0201 	orr.w	r2, r2, #1
 8002220:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002230:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2221      	movs	r2, #33	@ 0x21
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2210      	movs	r2, #16
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	893a      	ldrh	r2, [r7, #8]
 8002252:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29a      	uxth	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a50      	ldr	r2, [pc, #320]	@ (80023a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002264:	8979      	ldrh	r1, [r7, #10]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f89c 	bl	80023a8 <I2C_MasterRequestWrite>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e08d      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227a:	2300      	movs	r3, #0
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002290:	e066      	b.n	8002360 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 fa22 	bl	80026e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00d      	beq.n	80022be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d107      	bne.n	80022ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06b      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_I2C_Master_Transmit+0x188>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d017      	beq.n	8002334 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	6a39      	ldr	r1, [r7, #32]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 fa19 	bl	8002770 <I2C_WaitOnBTFFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00d      	beq.n	8002360 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	2b04      	cmp	r3, #4
 800234a:	d107      	bne.n	800235c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800235a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e01a      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	2b00      	cmp	r3, #0
 8002366:	d194      	bne.n	8002292 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	e000      	b.n	8002396 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002394:	2302      	movs	r3, #2
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	00100002 	.word	0x00100002
 80023a4:	ffff0000 	.word	0xffff0000

080023a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d006      	beq.n	80023d2 <I2C_MasterRequestWrite+0x2a>
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d003      	beq.n	80023d2 <I2C_MasterRequestWrite+0x2a>
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023d0:	d108      	bne.n	80023e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e00b      	b.n	80023fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d107      	bne.n	80023fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f84f 	bl	80024ac <I2C_WaitOnFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800241e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002422:	d103      	bne.n	800242c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800242a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e035      	b.n	800249c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002438:	d108      	bne.n	800244c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800243a:	897b      	ldrh	r3, [r7, #10]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	e01b      	b.n	8002484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800244c:	897b      	ldrh	r3, [r7, #10]
 800244e:	11db      	asrs	r3, r3, #7
 8002450:	b2db      	uxtb	r3, r3
 8002452:	f003 0306 	and.w	r3, r3, #6
 8002456:	b2db      	uxtb	r3, r3
 8002458:	f063 030f 	orn	r3, r3, #15
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	490e      	ldr	r1, [pc, #56]	@ (80024a4 <I2C_MasterRequestWrite+0xfc>)
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f898 	bl	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e010      	b.n	800249c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800247a:	897b      	ldrh	r3, [r7, #10]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	4907      	ldr	r1, [pc, #28]	@ (80024a8 <I2C_MasterRequestWrite+0x100>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f888 	bl	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	00010008 	.word	0x00010008
 80024a8:	00010002 	.word	0x00010002

080024ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	4613      	mov	r3, r2
 80024ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024bc:	e048      	b.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d044      	beq.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c6:	f7ff fa55 	bl	8001974 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d139      	bne.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0c1b      	lsrs	r3, r3, #16
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10d      	bne.n	8002502 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	43da      	mvns	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4013      	ands	r3, r2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf0c      	ite	eq
 80024f8:	2301      	moveq	r3, #1
 80024fa:	2300      	movne	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	e00c      	b.n	800251c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	43da      	mvns	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	79fb      	ldrb	r3, [r7, #7]
 800251e:	429a      	cmp	r2, r3
 8002520:	d116      	bne.n	8002550 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e023      	b.n	8002598 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	0c1b      	lsrs	r3, r3, #16
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10d      	bne.n	8002576 <I2C_WaitOnFlagUntilTimeout+0xca>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	e00c      	b.n	8002590 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	43da      	mvns	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4013      	ands	r3, r2
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf0c      	ite	eq
 8002588:	2301      	moveq	r3, #1
 800258a:	2300      	movne	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	461a      	mov	r2, r3
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	429a      	cmp	r2, r3
 8002594:	d093      	beq.n	80024be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ae:	e071      	b.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025be:	d123      	bne.n	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e067      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d041      	beq.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7ff f9b0 	bl	8001974 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	429a      	cmp	r2, r3
 800261e:	d302      	bcc.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d136      	bne.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	0c1b      	lsrs	r3, r3, #16
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10c      	bne.n	800264a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4013      	ands	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e00b      	b.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	43da      	mvns	r2, r3
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4013      	ands	r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	f043 0220 	orr.w	r2, r3, #32
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e021      	b.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0c1b      	lsrs	r3, r3, #16
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10c      	bne.n	80026b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	43da      	mvns	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	4013      	ands	r3, r2
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	bf14      	ite	ne
 80026b0:	2301      	movne	r3, #1
 80026b2:	2300      	moveq	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e00b      	b.n	80026d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf14      	ite	ne
 80026ca:	2301      	movne	r3, #1
 80026cc:	2300      	moveq	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f af6d 	bne.w	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ec:	e034      	b.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f886 	bl	8002800 <I2C_IsAcknowledgeFailed>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e034      	b.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002704:	d028      	beq.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002706:	f7ff f935 	bl	8001974 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d302      	bcc.n	800271c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d11d      	bne.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002726:	2b80      	cmp	r3, #128	@ 0x80
 8002728:	d016      	beq.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e007      	b.n	8002768 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002762:	2b80      	cmp	r3, #128	@ 0x80
 8002764:	d1c3      	bne.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f83e 	bl	8002800 <I2C_IsAcknowledgeFailed>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e034      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d028      	beq.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7ff f8ed 	bl	8001974 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11d      	bne.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d016      	beq.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d1c3      	bne.n	800277e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d11b      	bne.n	8002850 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002820:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e272      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8087 	beq.w	800298a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287c:	4b92      	ldr	r3, [pc, #584]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b04      	cmp	r3, #4
 8002886:	d00c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002888:	4b8f      	ldr	r3, [pc, #572]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x5e>
 8002894:	4b8c      	ldr	r3, [pc, #560]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4b89      	ldr	r3, [pc, #548]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d06c      	beq.n	8002988 <HAL_RCC_OscConfig+0x12c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d168      	bne.n	8002988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e24c      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x76>
 80028c4:	4b80      	ldr	r3, [pc, #512]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e02e      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b7b      	ldr	r3, [pc, #492]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7a      	ldr	r2, [pc, #488]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b78      	ldr	r3, [pc, #480]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a77      	ldr	r2, [pc, #476]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0xbc>
 80028fe:	4b72      	ldr	r3, [pc, #456]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a71      	ldr	r2, [pc, #452]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 8002918:	4b6b      	ldr	r3, [pc, #428]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b68      	ldr	r3, [pc, #416]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a67      	ldr	r2, [pc, #412]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff f81c 	bl	8001974 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff f818 	bl	8001974 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	@ 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e200      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b5d      	ldr	r3, [pc, #372]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xe4>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff f808 	bl	8001974 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff f804 	bl	8001974 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	@ 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1ec      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b53      	ldr	r3, [pc, #332]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x10c>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d063      	beq.n	8002a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b4c      	ldr	r3, [pc, #304]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a2:	4b49      	ldr	r3, [pc, #292]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x18c>
 80029ae:	4b46      	ldr	r3, [pc, #280]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b43      	ldr	r3, [pc, #268]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x176>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1c0      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4939      	ldr	r1, [pc, #228]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <HAL_RCC_OscConfig+0x270>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7fe ffbd 	bl	8001974 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe ffb9 	bl	8001974 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1a1      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2d      	ldr	r3, [pc, #180]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4927      	ldr	r1, [pc, #156]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <HAL_RCC_OscConfig+0x270>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe ff9c 	bl	8001974 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe ff98 	bl	8001974 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e180      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d03a      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d019      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b17      	ldr	r3, [pc, #92]	@ (8002ad0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7fe ff7c 	bl	8001974 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe ff78 	bl	8001974 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e160      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 faba 	bl	8003018 <RCC_Delay>
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7fe ff62 	bl	8001974 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe ff5e 	bl	8001974 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d908      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e146      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	42420000 	.word	0x42420000
 8002ad0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b92      	ldr	r3, [pc, #584]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e9      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a6 	beq.w	8002c3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b8b      	ldr	r3, [pc, #556]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b88      	ldr	r3, [pc, #544]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a87      	ldr	r2, [pc, #540]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	61d3      	str	r3, [r2, #28]
 8002b0a:	4b85      	ldr	r3, [pc, #532]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b82      	ldr	r3, [pc, #520]	@ (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b7f      	ldr	r3, [pc, #508]	@ (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7fe ff1f 	bl	8001974 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7fe ff1b 	bl	8001974 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	@ 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e103      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b75      	ldr	r3, [pc, #468]	@ (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x312>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a69      	ldr	r2, [pc, #420]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b67      	ldr	r3, [pc, #412]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a66      	ldr	r2, [pc, #408]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	e01c      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x356>
 8002b98:	4b61      	ldr	r3, [pc, #388]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a60      	ldr	r2, [pc, #384]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e00b      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b58      	ldr	r3, [pc, #352]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a57      	ldr	r2, [pc, #348]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fecf 	bl	8001974 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7fe fecb 	bl	8001974 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0b1      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCC_OscConfig+0x37e>
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7fe feb9 	bl	8001974 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7fe feb5 	bl	8001974 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e09b      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	4b40      	ldr	r3, [pc, #256]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8087 	beq.w	8002d52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c44:	4b36      	ldr	r3, [pc, #216]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d061      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d146      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b33      	ldr	r3, [pc, #204]	@ (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fe fe89 	bl	8001974 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7fe fe85 	bl	8001974 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e06d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c78:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4921      	ldr	r1, [pc, #132]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a19      	ldr	r1, [r3, #32]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	491b      	ldr	r1, [pc, #108]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe fe59 	bl	8001974 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fe fe55 	bl	8001974 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x46a>
 8002ce4:	e035      	b.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fe42 	bl	8001974 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fe3e 	bl	8001974 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e026      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x498>
 8002d12:	e01e      	b.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e019      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_RCC_OscConfig+0x500>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d0      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d74:	4b6a      	ldr	r3, [pc, #424]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d910      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b67      	ldr	r3, [pc, #412]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4965      	ldr	r1, [pc, #404]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d040      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b41      	ldr	r3, [pc, #260]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e073      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3e:	4b39      	ldr	r3, [pc, #228]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4936      	ldr	r1, [pc, #216]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7fe fd90 	bl	8001974 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7fe fd8c 	bl	8001974 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e053      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 020c 	and.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1eb      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d210      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b24      	ldr	r3, [pc, #144]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4922      	ldr	r1, [pc, #136]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eda:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	@ (8002f28 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1cc>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_RCC_ClockConfig+0x1d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe fcee 	bl	80018f0 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08008d60 	.word	0x08008d60
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x30>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x36>
 8002f62:	e027      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f64:	4b19      	ldr	r3, [pc, #100]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f66:	613b      	str	r3, [r7, #16]
      break;
 8002f68:	e027      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0c9b      	lsrs	r3, r3, #18
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0c5b      	lsrs	r3, r3, #17
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	4a11      	ldr	r2, [pc, #68]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a0d      	ldr	r2, [pc, #52]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e004      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
      break;
 8002fb2:	e002      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb6:	613b      	str	r3, [r7, #16]
      break;
 8002fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fba:	693b      	ldr	r3, [r7, #16]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	007a1200 	.word	0x007a1200
 8002fd0:	08008d78 	.word	0x08008d78
 8002fd4:	08008d88 	.word	0x08008d88
 8002fd8:	003d0900 	.word	0x003d0900

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	@ (8002fec <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff2 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	@ (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08008d70 	.word	0x08008d70

08003018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <RCC_Delay+0x34>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <RCC_Delay+0x38>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0a5b      	lsrs	r3, r3, #9
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003034:	bf00      	nop
  }
  while (Delay --);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	60fa      	str	r2, [r7, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f9      	bne.n	8003034 <RCC_Delay+0x1c>
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	20000000 	.word	0x20000000
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e041      	b.n	80030ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe fbb4 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	4619      	mov	r1, r3
 8003092:	4610      	mov	r0, r2
 8003094:	f000 fd58 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a18      	ldr	r2, [pc, #96]	@ (800317c <HAL_TIM_Base_Start+0x88>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00e      	beq.n	800313c <HAL_TIM_Base_Start+0x48>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003126:	d009      	beq.n	800313c <HAL_TIM_Base_Start+0x48>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <HAL_TIM_Base_Start+0x8c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d004      	beq.n	800313c <HAL_TIM_Base_Start+0x48>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a13      	ldr	r2, [pc, #76]	@ (8003184 <HAL_TIM_Base_Start+0x90>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d111      	bne.n	8003160 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b06      	cmp	r3, #6
 800314c:	d010      	beq.n	8003170 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f042 0201 	orr.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315e:	e007      	b.n	8003170 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800

08003188 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e041      	b.n	800321e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f839 	bl	8003226 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 fcbe 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_TIM_IC_Start+0x1a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800324e:	b2db      	uxtb	r3, r3
 8003250:	e013      	b.n	800327a <HAL_TIM_IC_Start+0x42>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d104      	bne.n	8003262 <HAL_TIM_IC_Start+0x2a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e00b      	b.n	800327a <HAL_TIM_IC_Start+0x42>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d104      	bne.n	8003272 <HAL_TIM_IC_Start+0x3a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e003      	b.n	800327a <HAL_TIM_IC_Start+0x42>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d104      	bne.n	800328c <HAL_TIM_IC_Start+0x54>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e013      	b.n	80032b4 <HAL_TIM_IC_Start+0x7c>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d104      	bne.n	800329c <HAL_TIM_IC_Start+0x64>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003298:	b2db      	uxtb	r3, r3
 800329a:	e00b      	b.n	80032b4 <HAL_TIM_IC_Start+0x7c>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d104      	bne.n	80032ac <HAL_TIM_IC_Start+0x74>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e003      	b.n	80032b4 <HAL_TIM_IC_Start+0x7c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032bc:	7bbb      	ldrb	r3, [r7, #14]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e06d      	b.n	80033a2 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d104      	bne.n	80032d6 <HAL_TIM_IC_Start+0x9e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d4:	e013      	b.n	80032fe <HAL_TIM_IC_Start+0xc6>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_IC_Start+0xae>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e4:	e00b      	b.n	80032fe <HAL_TIM_IC_Start+0xc6>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_IC_Start+0xbe>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032f4:	e003      	b.n	80032fe <HAL_TIM_IC_Start+0xc6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d104      	bne.n	800330e <HAL_TIM_IC_Start+0xd6>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800330c:	e013      	b.n	8003336 <HAL_TIM_IC_Start+0xfe>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b04      	cmp	r3, #4
 8003312:	d104      	bne.n	800331e <HAL_TIM_IC_Start+0xe6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800331c:	e00b      	b.n	8003336 <HAL_TIM_IC_Start+0xfe>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d104      	bne.n	800332e <HAL_TIM_IC_Start+0xf6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332c:	e003      	b.n	8003336 <HAL_TIM_IC_Start+0xfe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	6839      	ldr	r1, [r7, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fe13 	bl	8003f6a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	@ (80033ac <HAL_TIM_IC_Start+0x174>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_IC_Start+0x134>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003356:	d009      	beq.n	800336c <HAL_TIM_IC_Start+0x134>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <HAL_TIM_IC_Start+0x178>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_IC_Start+0x134>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a13      	ldr	r2, [pc, #76]	@ (80033b4 <HAL_TIM_IC_Start+0x17c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d010      	beq.n	80033a0 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e007      	b.n	80033a0 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40000800 	.word	0x40000800

080033b8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <HAL_TIM_IC_Start_IT+0x1e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	e013      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x46>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d104      	bne.n	80033e6 <HAL_TIM_IC_Start_IT+0x2e>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	e00b      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x46>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_TIM_IC_Start_IT+0x3e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	e003      	b.n	80033fe <HAL_TIM_IC_Start_IT+0x46>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <HAL_TIM_IC_Start_IT+0x58>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e013      	b.n	8003438 <HAL_TIM_IC_Start_IT+0x80>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d104      	bne.n	8003420 <HAL_TIM_IC_Start_IT+0x68>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e00b      	b.n	8003438 <HAL_TIM_IC_Start_IT+0x80>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b08      	cmp	r3, #8
 8003424:	d104      	bne.n	8003430 <HAL_TIM_IC_Start_IT+0x78>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800342c:	b2db      	uxtb	r3, r3
 800342e:	e003      	b.n	8003438 <HAL_TIM_IC_Start_IT+0x80>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003436:	b2db      	uxtb	r3, r3
 8003438:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003440:	7b7b      	ldrb	r3, [r7, #13]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d001      	beq.n	800344a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e0b8      	b.n	80035bc <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <HAL_TIM_IC_Start_IT+0xa2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003458:	e013      	b.n	8003482 <HAL_TIM_IC_Start_IT+0xca>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b04      	cmp	r3, #4
 800345e:	d104      	bne.n	800346a <HAL_TIM_IC_Start_IT+0xb2>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003468:	e00b      	b.n	8003482 <HAL_TIM_IC_Start_IT+0xca>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d104      	bne.n	800347a <HAL_TIM_IC_Start_IT+0xc2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003478:	e003      	b.n	8003482 <HAL_TIM_IC_Start_IT+0xca>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d104      	bne.n	8003492 <HAL_TIM_IC_Start_IT+0xda>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003490:	e013      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x102>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b04      	cmp	r3, #4
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_IC_Start_IT+0xea>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a0:	e00b      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x102>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_IC_Start_IT+0xfa>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b0:	e003      	b.n	80034ba <HAL_TIM_IC_Start_IT+0x102>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d841      	bhi.n	8003544 <HAL_TIM_IC_Start_IT+0x18c>
 80034c0:	a201      	add	r2, pc, #4	@ (adr r2, 80034c8 <HAL_TIM_IC_Start_IT+0x110>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003545 	.word	0x08003545
 80034d0:	08003545 	.word	0x08003545
 80034d4:	08003545 	.word	0x08003545
 80034d8:	0800350f 	.word	0x0800350f
 80034dc:	08003545 	.word	0x08003545
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003545 	.word	0x08003545
 80034e8:	08003521 	.word	0x08003521
 80034ec:	08003545 	.word	0x08003545
 80034f0:	08003545 	.word	0x08003545
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003533 	.word	0x08003533
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0202 	orr.w	r2, r2, #2
 800350a:	60da      	str	r2, [r3, #12]
      break;
 800350c:	e01d      	b.n	800354a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0204 	orr.w	r2, r2, #4
 800351c:	60da      	str	r2, [r3, #12]
      break;
 800351e:	e014      	b.n	800354a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0208 	orr.w	r2, r2, #8
 800352e:	60da      	str	r2, [r3, #12]
      break;
 8003530:	e00b      	b.n	800354a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0210 	orr.w	r2, r2, #16
 8003540:	60da      	str	r2, [r3, #12]
      break;
 8003542:	e002      	b.n	800354a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      break;
 8003548:	bf00      	nop
  }

  if (status == HAL_OK)
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d134      	bne.n	80035ba <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fd06 	bl	8003f6a <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <HAL_TIM_IC_Start_IT+0x20c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIM_IC_Start_IT+0x1ce>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003570:	d009      	beq.n	8003586 <HAL_TIM_IC_Start_IT+0x1ce>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <HAL_TIM_IC_Start_IT+0x210>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIM_IC_Start_IT+0x1ce>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a12      	ldr	r2, [pc, #72]	@ (80035cc <HAL_TIM_IC_Start_IT+0x214>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d111      	bne.n	80035aa <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d010      	beq.n	80035ba <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a8:	e007      	b.n	80035ba <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800

080035d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d020      	beq.n	8003634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01b      	beq.n	8003634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0202 	mvn.w	r2, #2
 8003604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fd fb94 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fa75 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fa7b 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b00      	cmp	r3, #0
 800363c:	d020      	beq.n	8003680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01b      	beq.n	8003680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0204 	mvn.w	r2, #4
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fb6e 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa4f 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fa55 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d020      	beq.n	80036cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01b      	beq.n	80036cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f06f 0208 	mvn.w	r2, #8
 800369c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2204      	movs	r2, #4
 80036a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fd fb48 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa29 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fa2f 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d020      	beq.n	8003718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0310 	and.w	r3, r3, #16
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01b      	beq.n	8003718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f06f 0210 	mvn.w	r2, #16
 80036e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2208      	movs	r2, #8
 80036ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fb22 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
 8003704:	e005      	b.n	8003712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fa03 	bl	8003b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa09 	bl	8003b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00c      	beq.n	800373c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0201 	mvn.w	r2, #1
 8003734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9e2 	bl	8003b00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fc91 	bl	8004082 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00c      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f9d9 	bl	8003b36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00c      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0220 	mvn.w	r2, #32
 80037a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fc64 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80037ca:	2302      	movs	r3, #2
 80037cc:	e088      	b.n	80038e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80037ec:	f000 fa1a 	bl	8003c24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 020c 	bic.w	r2, r2, #12
 80037fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	619a      	str	r2, [r3, #24]
 8003812:	e060      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b04      	cmp	r3, #4
 8003818:	d11c      	bne.n	8003854 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800382a:	f000 fa83 	bl	8003d34 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800383c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6999      	ldr	r1, [r3, #24]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	021a      	lsls	r2, r3, #8
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	619a      	str	r2, [r3, #24]
 8003852:	e040      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11b      	bne.n	8003892 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800386a:	f000 face 	bl	8003e0a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 020c 	bic.w	r2, r2, #12
 800387c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69d9      	ldr	r1, [r3, #28]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	61da      	str	r2, [r3, #28]
 8003890:	e021      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d11c      	bne.n	80038d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80038a8:	f000 faea 	bl	8003e80 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80038ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69d9      	ldr	r1, [r3, #28]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	021a      	lsls	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
 80038d0:	e001      	b.n	80038d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_TIM_ConfigClockSource+0x1c>
 8003900:	2302      	movs	r3, #2
 8003902:	e0b4      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x186>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800392a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800393c:	d03e      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0xd4>
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003942:	f200 8087 	bhi.w	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800394a:	f000 8086 	beq.w	8003a5a <HAL_TIM_ConfigClockSource+0x172>
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003952:	d87f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003954:	2b70      	cmp	r3, #112	@ 0x70
 8003956:	d01a      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xa6>
 8003958:	2b70      	cmp	r3, #112	@ 0x70
 800395a:	d87b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800395c:	2b60      	cmp	r3, #96	@ 0x60
 800395e:	d050      	beq.n	8003a02 <HAL_TIM_ConfigClockSource+0x11a>
 8003960:	2b60      	cmp	r3, #96	@ 0x60
 8003962:	d877      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003964:	2b50      	cmp	r3, #80	@ 0x50
 8003966:	d03c      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003968:	2b50      	cmp	r3, #80	@ 0x50
 800396a:	d873      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d058      	beq.n	8003a22 <HAL_TIM_ConfigClockSource+0x13a>
 8003970:	2b40      	cmp	r3, #64	@ 0x40
 8003972:	d86f      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003974:	2b30      	cmp	r3, #48	@ 0x30
 8003976:	d064      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003978:	2b30      	cmp	r3, #48	@ 0x30
 800397a:	d86b      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 800397c:	2b20      	cmp	r3, #32
 800397e:	d060      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003980:	2b20      	cmp	r3, #32
 8003982:	d867      	bhi.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d05c      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 8003988:	2b10      	cmp	r3, #16
 800398a:	d05a      	beq.n	8003a42 <HAL_TIM_ConfigClockSource+0x15a>
 800398c:	e062      	b.n	8003a54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800399e:	f000 fac5 	bl	8003f2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]
      break;
 80039ba:	e04f      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039cc:	f000 faae 	bl	8003f2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80039de:	609a      	str	r2, [r3, #8]
      break;
 80039e0:	e03c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	461a      	mov	r2, r3
 80039f0:	f000 f972 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2150      	movs	r1, #80	@ 0x50
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fa7c 	bl	8003ef8 <TIM_ITRx_SetConfig>
      break;
 8003a00:	e02c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a0e:	461a      	mov	r2, r3
 8003a10:	f000 f9cc 	bl	8003dac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2160      	movs	r1, #96	@ 0x60
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa6c 	bl	8003ef8 <TIM_ITRx_SetConfig>
      break;
 8003a20:	e01c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f000 f952 	bl	8003cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2140      	movs	r1, #64	@ 0x40
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa5c 	bl	8003ef8 <TIM_ITRx_SetConfig>
      break;
 8003a40:	e00c      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f000 fa53 	bl	8003ef8 <TIM_ITRx_SetConfig>
      break;
 8003a52:	e003      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
      break;
 8003a58:	e000      	b.n	8003a5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d831      	bhi.n	8003af0 <HAL_TIM_ReadCapturedValue+0x78>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003ad3 	.word	0x08003ad3
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003ae7 	.word	0x08003ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ace:	60fb      	str	r3, [r7, #12]

      break;
 8003ad0:	e00f      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad8:	60fb      	str	r3, [r7, #12]

      break;
 8003ada:	e00a      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	60fb      	str	r3, [r7, #12]

      break;
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aec:	60fb      	str	r3, [r7, #12]

      break;
 8003aee:	e000      	b.n	8003af2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003af0:	bf00      	nop
  }

  return tmpreg;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bc80      	pop	{r7}
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003c18 <TIM_Base_SetConfig+0xd0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c1c <TIM_Base_SetConfig+0xd4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2b      	ldr	r2, [pc, #172]	@ (8003c20 <TIM_Base_SetConfig+0xd8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a22      	ldr	r2, [pc, #136]	@ (8003c18 <TIM_Base_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d00b      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b98:	d007      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c1c <TIM_Base_SetConfig+0xd4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d003      	beq.n	8003baa <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <TIM_Base_SetConfig+0xd8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d108      	bne.n	8003bbc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c18 <TIM_Base_SetConfig+0xd0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d005      	beq.n	8003c0e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f023 0201 	bic.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	611a      	str	r2, [r3, #16]
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800

08003c24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f023 0201 	bic.w	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <TIM_TI1_SetConfig+0xa8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00b      	beq.n	8003c6a <TIM_TI1_SetConfig+0x46>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c58:	d007      	beq.n	8003c6a <TIM_TI1_SetConfig+0x46>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd0 <TIM_TI1_SetConfig+0xac>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <TIM_TI1_SetConfig+0x46>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <TIM_TI1_SetConfig+0xb0>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d101      	bne.n	8003c6e <TIM_TI1_SetConfig+0x4a>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <TIM_TI1_SetConfig+0x4c>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e003      	b.n	8003c8e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f023 030a 	bic.w	r3, r3, #10
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f003 030a 	and.w	r3, r3, #10
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800

08003cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b087      	sub	sp, #28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0201 	bic.w	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 030a 	bic.w	r3, r3, #10
 8003d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	621a      	str	r2, [r3, #32]
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
 8003d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f023 0210 	bic.w	r2, r3, #16
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	031b      	lsls	r3, r3, #12
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	621a      	str	r2, [r3, #32]
}
 8003da2:	bf00      	nop
 8003da4:	371c      	adds	r7, #28
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bc80      	pop	{r7}
 8003daa:	4770      	bx	lr

08003dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0210 	bic.w	r2, r3, #16
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	031b      	lsls	r3, r3, #12
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003de8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	621a      	str	r2, [r3, #32]
}
 8003e00:	bf00      	nop
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e46:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	621a      	str	r2, [r3, #32]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr

08003e80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
 8003e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	031b      	lsls	r3, r3, #12
 8003ed8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bc80      	pop	{r7}
 8003ef6:	4770      	bx	lr

08003ef8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f043 0307 	orr.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	609a      	str	r2, [r3, #8]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b087      	sub	sp, #28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6a1a      	ldr	r2, [r3, #32]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
}
 8003fa8:	bf00      	nop
 8003faa:	371c      	adds	r7, #28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e046      	b.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004018:	d009      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a10      	ldr	r2, [pc, #64]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10c      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	40012c00 	.word	0x40012c00
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <__cvt>:
 8004094:	2b00      	cmp	r3, #0
 8004096:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409a:	461d      	mov	r5, r3
 800409c:	bfbb      	ittet	lt
 800409e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80040a2:	461d      	movlt	r5, r3
 80040a4:	2300      	movge	r3, #0
 80040a6:	232d      	movlt	r3, #45	@ 0x2d
 80040a8:	b088      	sub	sp, #32
 80040aa:	4614      	mov	r4, r2
 80040ac:	bfb8      	it	lt
 80040ae:	4614      	movlt	r4, r2
 80040b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80040b2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80040b4:	7013      	strb	r3, [r2, #0]
 80040b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040b8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80040bc:	f023 0820 	bic.w	r8, r3, #32
 80040c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040c4:	d005      	beq.n	80040d2 <__cvt+0x3e>
 80040c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040ca:	d100      	bne.n	80040ce <__cvt+0x3a>
 80040cc:	3601      	adds	r6, #1
 80040ce:	2302      	movs	r3, #2
 80040d0:	e000      	b.n	80040d4 <__cvt+0x40>
 80040d2:	2303      	movs	r3, #3
 80040d4:	aa07      	add	r2, sp, #28
 80040d6:	9204      	str	r2, [sp, #16]
 80040d8:	aa06      	add	r2, sp, #24
 80040da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040de:	e9cd 3600 	strd	r3, r6, [sp]
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f001 f88b 	bl	8005200 <_dtoa_r>
 80040ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040ee:	4607      	mov	r7, r0
 80040f0:	d119      	bne.n	8004126 <__cvt+0x92>
 80040f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040f4:	07db      	lsls	r3, r3, #31
 80040f6:	d50e      	bpl.n	8004116 <__cvt+0x82>
 80040f8:	eb00 0906 	add.w	r9, r0, r6
 80040fc:	2200      	movs	r2, #0
 80040fe:	2300      	movs	r3, #0
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8004108:	b108      	cbz	r0, 800410e <__cvt+0x7a>
 800410a:	f8cd 901c 	str.w	r9, [sp, #28]
 800410e:	2230      	movs	r2, #48	@ 0x30
 8004110:	9b07      	ldr	r3, [sp, #28]
 8004112:	454b      	cmp	r3, r9
 8004114:	d31e      	bcc.n	8004154 <__cvt+0xc0>
 8004116:	4638      	mov	r0, r7
 8004118:	9b07      	ldr	r3, [sp, #28]
 800411a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800411c:	1bdb      	subs	r3, r3, r7
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	b008      	add	sp, #32
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004126:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800412a:	eb00 0906 	add.w	r9, r0, r6
 800412e:	d1e5      	bne.n	80040fc <__cvt+0x68>
 8004130:	7803      	ldrb	r3, [r0, #0]
 8004132:	2b30      	cmp	r3, #48	@ 0x30
 8004134:	d10a      	bne.n	800414c <__cvt+0xb8>
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc fc33 	bl	80009a8 <__aeabi_dcmpeq>
 8004142:	b918      	cbnz	r0, 800414c <__cvt+0xb8>
 8004144:	f1c6 0601 	rsb	r6, r6, #1
 8004148:	f8ca 6000 	str.w	r6, [sl]
 800414c:	f8da 3000 	ldr.w	r3, [sl]
 8004150:	4499      	add	r9, r3
 8004152:	e7d3      	b.n	80040fc <__cvt+0x68>
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	9107      	str	r1, [sp, #28]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e7d9      	b.n	8004110 <__cvt+0x7c>

0800415c <__exponent>:
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	2900      	cmp	r1, #0
 8004160:	bfb6      	itet	lt
 8004162:	232d      	movlt	r3, #45	@ 0x2d
 8004164:	232b      	movge	r3, #43	@ 0x2b
 8004166:	4249      	neglt	r1, r1
 8004168:	2909      	cmp	r1, #9
 800416a:	7002      	strb	r2, [r0, #0]
 800416c:	7043      	strb	r3, [r0, #1]
 800416e:	dd29      	ble.n	80041c4 <__exponent+0x68>
 8004170:	f10d 0307 	add.w	r3, sp, #7
 8004174:	461d      	mov	r5, r3
 8004176:	270a      	movs	r7, #10
 8004178:	fbb1 f6f7 	udiv	r6, r1, r7
 800417c:	461a      	mov	r2, r3
 800417e:	fb07 1416 	mls	r4, r7, r6, r1
 8004182:	3430      	adds	r4, #48	@ 0x30
 8004184:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004188:	460c      	mov	r4, r1
 800418a:	2c63      	cmp	r4, #99	@ 0x63
 800418c:	4631      	mov	r1, r6
 800418e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004192:	dcf1      	bgt.n	8004178 <__exponent+0x1c>
 8004194:	3130      	adds	r1, #48	@ 0x30
 8004196:	1e94      	subs	r4, r2, #2
 8004198:	f803 1c01 	strb.w	r1, [r3, #-1]
 800419c:	4623      	mov	r3, r4
 800419e:	1c41      	adds	r1, r0, #1
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	d30a      	bcc.n	80041ba <__exponent+0x5e>
 80041a4:	f10d 0309 	add.w	r3, sp, #9
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	42ac      	cmp	r4, r5
 80041ac:	bf88      	it	hi
 80041ae:	2300      	movhi	r3, #0
 80041b0:	3302      	adds	r3, #2
 80041b2:	4403      	add	r3, r0
 80041b4:	1a18      	subs	r0, r3, r0
 80041b6:	b003      	add	sp, #12
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80041be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80041c2:	e7ed      	b.n	80041a0 <__exponent+0x44>
 80041c4:	2330      	movs	r3, #48	@ 0x30
 80041c6:	3130      	adds	r1, #48	@ 0x30
 80041c8:	7083      	strb	r3, [r0, #2]
 80041ca:	70c1      	strb	r1, [r0, #3]
 80041cc:	1d03      	adds	r3, r0, #4
 80041ce:	e7f1      	b.n	80041b4 <__exponent+0x58>

080041d0 <_printf_float>:
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b091      	sub	sp, #68	@ 0x44
 80041d6:	460c      	mov	r4, r1
 80041d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80041dc:	4616      	mov	r6, r2
 80041de:	461f      	mov	r7, r3
 80041e0:	4605      	mov	r5, r0
 80041e2:	f000 feeb 	bl	8004fbc <_localeconv_r>
 80041e6:	6803      	ldr	r3, [r0, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	9308      	str	r3, [sp, #32]
 80041ec:	f7fb ffb0 	bl	8000150 <strlen>
 80041f0:	2300      	movs	r3, #0
 80041f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80041f4:	f8d8 3000 	ldr.w	r3, [r8]
 80041f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80041fa:	3307      	adds	r3, #7
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	f103 0208 	add.w	r2, r3, #8
 8004204:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004208:	f8d4 b000 	ldr.w	fp, [r4]
 800420c:	f8c8 2000 	str.w	r2, [r8]
 8004210:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004214:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800421a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004226:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800422a:	4b9c      	ldr	r3, [pc, #624]	@ (800449c <_printf_float+0x2cc>)
 800422c:	f7fc fbee 	bl	8000a0c <__aeabi_dcmpun>
 8004230:	bb70      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004236:	f04f 32ff 	mov.w	r2, #4294967295
 800423a:	4b98      	ldr	r3, [pc, #608]	@ (800449c <_printf_float+0x2cc>)
 800423c:	f7fc fbc8 	bl	80009d0 <__aeabi_dcmple>
 8004240:	bb30      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004242:	2200      	movs	r2, #0
 8004244:	2300      	movs	r3, #0
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7fc fbb7 	bl	80009bc <__aeabi_dcmplt>
 800424e:	b110      	cbz	r0, 8004256 <_printf_float+0x86>
 8004250:	232d      	movs	r3, #45	@ 0x2d
 8004252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004256:	4a92      	ldr	r2, [pc, #584]	@ (80044a0 <_printf_float+0x2d0>)
 8004258:	4b92      	ldr	r3, [pc, #584]	@ (80044a4 <_printf_float+0x2d4>)
 800425a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800425e:	bf8c      	ite	hi
 8004260:	4690      	movhi	r8, r2
 8004262:	4698      	movls	r8, r3
 8004264:	2303      	movs	r3, #3
 8004266:	f04f 0900 	mov.w	r9, #0
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	f02b 0304 	bic.w	r3, fp, #4
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	4633      	mov	r3, r6
 8004274:	4621      	mov	r1, r4
 8004276:	4628      	mov	r0, r5
 8004278:	9700      	str	r7, [sp, #0]
 800427a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800427c:	f000 f9d4 	bl	8004628 <_printf_common>
 8004280:	3001      	adds	r0, #1
 8004282:	f040 8090 	bne.w	80043a6 <_printf_float+0x1d6>
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	b011      	add	sp, #68	@ 0x44
 800428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	4640      	mov	r0, r8
 8004296:	4649      	mov	r1, r9
 8004298:	f7fc fbb8 	bl	8000a0c <__aeabi_dcmpun>
 800429c:	b148      	cbz	r0, 80042b2 <_printf_float+0xe2>
 800429e:	464b      	mov	r3, r9
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bfb8      	it	lt
 80042a4:	232d      	movlt	r3, #45	@ 0x2d
 80042a6:	4a80      	ldr	r2, [pc, #512]	@ (80044a8 <_printf_float+0x2d8>)
 80042a8:	bfb8      	it	lt
 80042aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042ae:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <_printf_float+0x2dc>)
 80042b0:	e7d3      	b.n	800425a <_printf_float+0x8a>
 80042b2:	6863      	ldr	r3, [r4, #4]
 80042b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	d13f      	bne.n	800433c <_printf_float+0x16c>
 80042bc:	2306      	movs	r3, #6
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80042c6:	6023      	str	r3, [r4, #0]
 80042c8:	9206      	str	r2, [sp, #24]
 80042ca:	aa0e      	add	r2, sp, #56	@ 0x38
 80042cc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80042d0:	aa0d      	add	r2, sp, #52	@ 0x34
 80042d2:	9203      	str	r2, [sp, #12]
 80042d4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80042d8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	4642      	mov	r2, r8
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	4628      	mov	r0, r5
 80042e4:	464b      	mov	r3, r9
 80042e6:	910a      	str	r1, [sp, #40]	@ 0x28
 80042e8:	f7ff fed4 	bl	8004094 <__cvt>
 80042ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042ee:	4680      	mov	r8, r0
 80042f0:	2947      	cmp	r1, #71	@ 0x47
 80042f2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80042f4:	d128      	bne.n	8004348 <_printf_float+0x178>
 80042f6:	1cc8      	adds	r0, r1, #3
 80042f8:	db02      	blt.n	8004300 <_printf_float+0x130>
 80042fa:	6863      	ldr	r3, [r4, #4]
 80042fc:	4299      	cmp	r1, r3
 80042fe:	dd40      	ble.n	8004382 <_printf_float+0x1b2>
 8004300:	f1aa 0a02 	sub.w	sl, sl, #2
 8004304:	fa5f fa8a 	uxtb.w	sl, sl
 8004308:	4652      	mov	r2, sl
 800430a:	3901      	subs	r1, #1
 800430c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004310:	910d      	str	r1, [sp, #52]	@ 0x34
 8004312:	f7ff ff23 	bl	800415c <__exponent>
 8004316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004318:	4681      	mov	r9, r0
 800431a:	1813      	adds	r3, r2, r0
 800431c:	2a01      	cmp	r2, #1
 800431e:	6123      	str	r3, [r4, #16]
 8004320:	dc02      	bgt.n	8004328 <_printf_float+0x158>
 8004322:	6822      	ldr	r2, [r4, #0]
 8004324:	07d2      	lsls	r2, r2, #31
 8004326:	d501      	bpl.n	800432c <_printf_float+0x15c>
 8004328:	3301      	adds	r3, #1
 800432a:	6123      	str	r3, [r4, #16]
 800432c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004330:	2b00      	cmp	r3, #0
 8004332:	d09e      	beq.n	8004272 <_printf_float+0xa2>
 8004334:	232d      	movs	r3, #45	@ 0x2d
 8004336:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800433a:	e79a      	b.n	8004272 <_printf_float+0xa2>
 800433c:	2947      	cmp	r1, #71	@ 0x47
 800433e:	d1bf      	bne.n	80042c0 <_printf_float+0xf0>
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1bd      	bne.n	80042c0 <_printf_float+0xf0>
 8004344:	2301      	movs	r3, #1
 8004346:	e7ba      	b.n	80042be <_printf_float+0xee>
 8004348:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800434c:	d9dc      	bls.n	8004308 <_printf_float+0x138>
 800434e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004352:	d118      	bne.n	8004386 <_printf_float+0x1b6>
 8004354:	2900      	cmp	r1, #0
 8004356:	6863      	ldr	r3, [r4, #4]
 8004358:	dd0b      	ble.n	8004372 <_printf_float+0x1a2>
 800435a:	6121      	str	r1, [r4, #16]
 800435c:	b913      	cbnz	r3, 8004364 <_printf_float+0x194>
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	07d0      	lsls	r0, r2, #31
 8004362:	d502      	bpl.n	800436a <_printf_float+0x19a>
 8004364:	3301      	adds	r3, #1
 8004366:	440b      	add	r3, r1
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	f04f 0900 	mov.w	r9, #0
 800436e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004370:	e7dc      	b.n	800432c <_printf_float+0x15c>
 8004372:	b913      	cbnz	r3, 800437a <_printf_float+0x1aa>
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	07d2      	lsls	r2, r2, #31
 8004378:	d501      	bpl.n	800437e <_printf_float+0x1ae>
 800437a:	3302      	adds	r3, #2
 800437c:	e7f4      	b.n	8004368 <_printf_float+0x198>
 800437e:	2301      	movs	r3, #1
 8004380:	e7f2      	b.n	8004368 <_printf_float+0x198>
 8004382:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004388:	4299      	cmp	r1, r3
 800438a:	db05      	blt.n	8004398 <_printf_float+0x1c8>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	6121      	str	r1, [r4, #16]
 8004390:	07d8      	lsls	r0, r3, #31
 8004392:	d5ea      	bpl.n	800436a <_printf_float+0x19a>
 8004394:	1c4b      	adds	r3, r1, #1
 8004396:	e7e7      	b.n	8004368 <_printf_float+0x198>
 8004398:	2900      	cmp	r1, #0
 800439a:	bfcc      	ite	gt
 800439c:	2201      	movgt	r2, #1
 800439e:	f1c1 0202 	rsble	r2, r1, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	e7e0      	b.n	8004368 <_printf_float+0x198>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	055a      	lsls	r2, r3, #21
 80043aa:	d407      	bmi.n	80043bc <_printf_float+0x1ec>
 80043ac:	6923      	ldr	r3, [r4, #16]
 80043ae:	4642      	mov	r2, r8
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b8      	blx	r7
 80043b6:	3001      	adds	r0, #1
 80043b8:	d12b      	bne.n	8004412 <_printf_float+0x242>
 80043ba:	e764      	b.n	8004286 <_printf_float+0xb6>
 80043bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043c0:	f240 80dc 	bls.w	800457c <_printf_float+0x3ac>
 80043c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	f7fc faec 	bl	80009a8 <__aeabi_dcmpeq>
 80043d0:	2800      	cmp	r0, #0
 80043d2:	d033      	beq.n	800443c <_printf_float+0x26c>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	4a35      	ldr	r2, [pc, #212]	@ (80044b0 <_printf_float+0x2e0>)
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	f43f af51 	beq.w	8004286 <_printf_float+0xb6>
 80043e4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80043e8:	4543      	cmp	r3, r8
 80043ea:	db02      	blt.n	80043f2 <_printf_float+0x222>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07d8      	lsls	r0, r3, #31
 80043f0:	d50f      	bpl.n	8004412 <_printf_float+0x242>
 80043f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	f43f af42 	beq.w	8004286 <_printf_float+0xb6>
 8004402:	f04f 0900 	mov.w	r9, #0
 8004406:	f108 38ff 	add.w	r8, r8, #4294967295
 800440a:	f104 0a1a 	add.w	sl, r4, #26
 800440e:	45c8      	cmp	r8, r9
 8004410:	dc09      	bgt.n	8004426 <_printf_float+0x256>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	079b      	lsls	r3, r3, #30
 8004416:	f100 8102 	bmi.w	800461e <_printf_float+0x44e>
 800441a:	68e0      	ldr	r0, [r4, #12]
 800441c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800441e:	4298      	cmp	r0, r3
 8004420:	bfb8      	it	lt
 8004422:	4618      	movlt	r0, r3
 8004424:	e731      	b.n	800428a <_printf_float+0xba>
 8004426:	2301      	movs	r3, #1
 8004428:	4652      	mov	r2, sl
 800442a:	4631      	mov	r1, r6
 800442c:	4628      	mov	r0, r5
 800442e:	47b8      	blx	r7
 8004430:	3001      	adds	r0, #1
 8004432:	f43f af28 	beq.w	8004286 <_printf_float+0xb6>
 8004436:	f109 0901 	add.w	r9, r9, #1
 800443a:	e7e8      	b.n	800440e <_printf_float+0x23e>
 800443c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800443e:	2b00      	cmp	r3, #0
 8004440:	dc38      	bgt.n	80044b4 <_printf_float+0x2e4>
 8004442:	2301      	movs	r3, #1
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	4a19      	ldr	r2, [pc, #100]	@ (80044b0 <_printf_float+0x2e0>)
 800444a:	47b8      	blx	r7
 800444c:	3001      	adds	r0, #1
 800444e:	f43f af1a 	beq.w	8004286 <_printf_float+0xb6>
 8004452:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004456:	ea59 0303 	orrs.w	r3, r9, r3
 800445a:	d102      	bne.n	8004462 <_printf_float+0x292>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	07d9      	lsls	r1, r3, #31
 8004460:	d5d7      	bpl.n	8004412 <_printf_float+0x242>
 8004462:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004466:	4631      	mov	r1, r6
 8004468:	4628      	mov	r0, r5
 800446a:	47b8      	blx	r7
 800446c:	3001      	adds	r0, #1
 800446e:	f43f af0a 	beq.w	8004286 <_printf_float+0xb6>
 8004472:	f04f 0a00 	mov.w	sl, #0
 8004476:	f104 0b1a 	add.w	fp, r4, #26
 800447a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800447c:	425b      	negs	r3, r3
 800447e:	4553      	cmp	r3, sl
 8004480:	dc01      	bgt.n	8004486 <_printf_float+0x2b6>
 8004482:	464b      	mov	r3, r9
 8004484:	e793      	b.n	80043ae <_printf_float+0x1de>
 8004486:	2301      	movs	r3, #1
 8004488:	465a      	mov	r2, fp
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f aef8 	beq.w	8004286 <_printf_float+0xb6>
 8004496:	f10a 0a01 	add.w	sl, sl, #1
 800449a:	e7ee      	b.n	800447a <_printf_float+0x2aa>
 800449c:	7fefffff 	.word	0x7fefffff
 80044a0:	08008d8e 	.word	0x08008d8e
 80044a4:	08008d8a 	.word	0x08008d8a
 80044a8:	08008d96 	.word	0x08008d96
 80044ac:	08008d92 	.word	0x08008d92
 80044b0:	08008d9a 	.word	0x08008d9a
 80044b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044ba:	4553      	cmp	r3, sl
 80044bc:	bfa8      	it	ge
 80044be:	4653      	movge	r3, sl
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	4699      	mov	r9, r3
 80044c4:	dc36      	bgt.n	8004534 <_printf_float+0x364>
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ce:	f104 021a 	add.w	r2, r4, #26
 80044d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80044d6:	eba3 0309 	sub.w	r3, r3, r9
 80044da:	455b      	cmp	r3, fp
 80044dc:	dc31      	bgt.n	8004542 <_printf_float+0x372>
 80044de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044e0:	459a      	cmp	sl, r3
 80044e2:	dc3a      	bgt.n	800455a <_printf_float+0x38a>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d437      	bmi.n	800455a <_printf_float+0x38a>
 80044ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044ec:	ebaa 0903 	sub.w	r9, sl, r3
 80044f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044f2:	ebaa 0303 	sub.w	r3, sl, r3
 80044f6:	4599      	cmp	r9, r3
 80044f8:	bfa8      	it	ge
 80044fa:	4699      	movge	r9, r3
 80044fc:	f1b9 0f00 	cmp.w	r9, #0
 8004500:	dc33      	bgt.n	800456a <_printf_float+0x39a>
 8004502:	f04f 0800 	mov.w	r8, #0
 8004506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800450a:	f104 0b1a 	add.w	fp, r4, #26
 800450e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004510:	ebaa 0303 	sub.w	r3, sl, r3
 8004514:	eba3 0309 	sub.w	r3, r3, r9
 8004518:	4543      	cmp	r3, r8
 800451a:	f77f af7a 	ble.w	8004412 <_printf_float+0x242>
 800451e:	2301      	movs	r3, #1
 8004520:	465a      	mov	r2, fp
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f aeac 	beq.w	8004286 <_printf_float+0xb6>
 800452e:	f108 0801 	add.w	r8, r8, #1
 8004532:	e7ec      	b.n	800450e <_printf_float+0x33e>
 8004534:	4642      	mov	r2, r8
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	d1c2      	bne.n	80044c6 <_printf_float+0x2f6>
 8004540:	e6a1      	b.n	8004286 <_printf_float+0xb6>
 8004542:	2301      	movs	r3, #1
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	920a      	str	r2, [sp, #40]	@ 0x28
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f ae9a 	beq.w	8004286 <_printf_float+0xb6>
 8004552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004554:	f10b 0b01 	add.w	fp, fp, #1
 8004558:	e7bb      	b.n	80044d2 <_printf_float+0x302>
 800455a:	4631      	mov	r1, r6
 800455c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	d1c0      	bne.n	80044ea <_printf_float+0x31a>
 8004568:	e68d      	b.n	8004286 <_printf_float+0xb6>
 800456a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800456c:	464b      	mov	r3, r9
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	4442      	add	r2, r8
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d1c3      	bne.n	8004502 <_printf_float+0x332>
 800457a:	e684      	b.n	8004286 <_printf_float+0xb6>
 800457c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004580:	f1ba 0f01 	cmp.w	sl, #1
 8004584:	dc01      	bgt.n	800458a <_printf_float+0x3ba>
 8004586:	07db      	lsls	r3, r3, #31
 8004588:	d536      	bpl.n	80045f8 <_printf_float+0x428>
 800458a:	2301      	movs	r3, #1
 800458c:	4642      	mov	r2, r8
 800458e:	4631      	mov	r1, r6
 8004590:	4628      	mov	r0, r5
 8004592:	47b8      	blx	r7
 8004594:	3001      	adds	r0, #1
 8004596:	f43f ae76 	beq.w	8004286 <_printf_float+0xb6>
 800459a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	f43f ae6e 	beq.w	8004286 <_printf_float+0xb6>
 80045aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b6:	f7fc f9f7 	bl	80009a8 <__aeabi_dcmpeq>
 80045ba:	b9c0      	cbnz	r0, 80045ee <_printf_float+0x41e>
 80045bc:	4653      	mov	r3, sl
 80045be:	f108 0201 	add.w	r2, r8, #1
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	d10c      	bne.n	80045e6 <_printf_float+0x416>
 80045cc:	e65b      	b.n	8004286 <_printf_float+0xb6>
 80045ce:	2301      	movs	r3, #1
 80045d0:	465a      	mov	r2, fp
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f ae54 	beq.w	8004286 <_printf_float+0xb6>
 80045de:	f108 0801 	add.w	r8, r8, #1
 80045e2:	45d0      	cmp	r8, sl
 80045e4:	dbf3      	blt.n	80045ce <_printf_float+0x3fe>
 80045e6:	464b      	mov	r3, r9
 80045e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045ec:	e6e0      	b.n	80043b0 <_printf_float+0x1e0>
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f104 0b1a 	add.w	fp, r4, #26
 80045f6:	e7f4      	b.n	80045e2 <_printf_float+0x412>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4642      	mov	r2, r8
 80045fc:	e7e1      	b.n	80045c2 <_printf_float+0x3f2>
 80045fe:	2301      	movs	r3, #1
 8004600:	464a      	mov	r2, r9
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae3c 	beq.w	8004286 <_printf_float+0xb6>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	4543      	cmp	r3, r8
 800461a:	dcf0      	bgt.n	80045fe <_printf_float+0x42e>
 800461c:	e6fd      	b.n	800441a <_printf_float+0x24a>
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	f104 0919 	add.w	r9, r4, #25
 8004626:	e7f4      	b.n	8004612 <_printf_float+0x442>

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4698      	mov	r8, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	4607      	mov	r7, r0
 8004636:	4293      	cmp	r3, r2
 8004638:	bfb8      	it	lt
 800463a:	4613      	movlt	r3, r2
 800463c:	6033      	str	r3, [r6, #0]
 800463e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004642:	460c      	mov	r4, r1
 8004644:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc2b      	bgt.n	80046c8 <_printf_common+0xa0>
 8004670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004674:	6822      	ldr	r2, [r4, #0]
 8004676:	3b00      	subs	r3, #0
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d430      	bmi.n	80046e2 <_printf_common+0xba>
 8004680:	4641      	mov	r1, r8
 8004682:	4638      	mov	r0, r7
 8004684:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004688:	47c8      	blx	r9
 800468a:	3001      	adds	r0, #1
 800468c:	d023      	beq.n	80046d6 <_printf_common+0xae>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf14      	ite	ne
 800469a:	2500      	movne	r5, #0
 800469c:	6833      	ldreq	r3, [r6, #0]
 800469e:	f04f 0600 	mov.w	r6, #0
 80046a2:	bf08      	it	eq
 80046a4:	68e5      	ldreq	r5, [r4, #12]
 80046a6:	f104 041a 	add.w	r4, r4, #26
 80046aa:	bf08      	it	eq
 80046ac:	1aed      	subeq	r5, r5, r3
 80046ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80046b2:	bf08      	it	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfc4      	itt	gt
 80046bc:	1a9b      	subgt	r3, r3, r2
 80046be:	18ed      	addgt	r5, r5, r3
 80046c0:	42b5      	cmp	r5, r6
 80046c2:	d11a      	bne.n	80046fa <_printf_common+0xd2>
 80046c4:	2000      	movs	r0, #0
 80046c6:	e008      	b.n	80046da <_printf_common+0xb2>
 80046c8:	2301      	movs	r3, #1
 80046ca:	4652      	mov	r2, sl
 80046cc:	4641      	mov	r1, r8
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c8      	blx	r9
 80046d2:	3001      	adds	r0, #1
 80046d4:	d103      	bne.n	80046de <_printf_common+0xb6>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046de:	3501      	adds	r5, #1
 80046e0:	e7c1      	b.n	8004666 <_printf_common+0x3e>
 80046e2:	2030      	movs	r0, #48	@ 0x30
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046f0:	4422      	add	r2, r4
 80046f2:	3302      	adds	r3, #2
 80046f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046f8:	e7c2      	b.n	8004680 <_printf_common+0x58>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4622      	mov	r2, r4
 80046fe:	4641      	mov	r1, r8
 8004700:	4638      	mov	r0, r7
 8004702:	47c8      	blx	r9
 8004704:	3001      	adds	r0, #1
 8004706:	d0e6      	beq.n	80046d6 <_printf_common+0xae>
 8004708:	3601      	adds	r6, #1
 800470a:	e7d9      	b.n	80046c0 <_printf_common+0x98>

0800470c <_printf_i>:
 800470c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	7e0f      	ldrb	r7, [r1, #24]
 8004712:	4691      	mov	r9, r2
 8004714:	2f78      	cmp	r7, #120	@ 0x78
 8004716:	4680      	mov	r8, r0
 8004718:	460c      	mov	r4, r1
 800471a:	469a      	mov	sl, r3
 800471c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800471e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004722:	d807      	bhi.n	8004734 <_printf_i+0x28>
 8004724:	2f62      	cmp	r7, #98	@ 0x62
 8004726:	d80a      	bhi.n	800473e <_printf_i+0x32>
 8004728:	2f00      	cmp	r7, #0
 800472a:	f000 80d1 	beq.w	80048d0 <_printf_i+0x1c4>
 800472e:	2f58      	cmp	r7, #88	@ 0x58
 8004730:	f000 80b8 	beq.w	80048a4 <_printf_i+0x198>
 8004734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800473c:	e03a      	b.n	80047b4 <_printf_i+0xa8>
 800473e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004742:	2b15      	cmp	r3, #21
 8004744:	d8f6      	bhi.n	8004734 <_printf_i+0x28>
 8004746:	a101      	add	r1, pc, #4	@ (adr r1, 800474c <_printf_i+0x40>)
 8004748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800474c:	080047a5 	.word	0x080047a5
 8004750:	080047b9 	.word	0x080047b9
 8004754:	08004735 	.word	0x08004735
 8004758:	08004735 	.word	0x08004735
 800475c:	08004735 	.word	0x08004735
 8004760:	08004735 	.word	0x08004735
 8004764:	080047b9 	.word	0x080047b9
 8004768:	08004735 	.word	0x08004735
 800476c:	08004735 	.word	0x08004735
 8004770:	08004735 	.word	0x08004735
 8004774:	08004735 	.word	0x08004735
 8004778:	080048b7 	.word	0x080048b7
 800477c:	080047e3 	.word	0x080047e3
 8004780:	08004871 	.word	0x08004871
 8004784:	08004735 	.word	0x08004735
 8004788:	08004735 	.word	0x08004735
 800478c:	080048d9 	.word	0x080048d9
 8004790:	08004735 	.word	0x08004735
 8004794:	080047e3 	.word	0x080047e3
 8004798:	08004735 	.word	0x08004735
 800479c:	08004735 	.word	0x08004735
 80047a0:	08004879 	.word	0x08004879
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	1d1a      	adds	r2, r3, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6032      	str	r2, [r6, #0]
 80047ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047b4:	2301      	movs	r3, #1
 80047b6:	e09c      	b.n	80048f2 <_printf_i+0x1e6>
 80047b8:	6833      	ldr	r3, [r6, #0]
 80047ba:	6820      	ldr	r0, [r4, #0]
 80047bc:	1d19      	adds	r1, r3, #4
 80047be:	6031      	str	r1, [r6, #0]
 80047c0:	0606      	lsls	r6, r0, #24
 80047c2:	d501      	bpl.n	80047c8 <_printf_i+0xbc>
 80047c4:	681d      	ldr	r5, [r3, #0]
 80047c6:	e003      	b.n	80047d0 <_printf_i+0xc4>
 80047c8:	0645      	lsls	r5, r0, #25
 80047ca:	d5fb      	bpl.n	80047c4 <_printf_i+0xb8>
 80047cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	da03      	bge.n	80047dc <_printf_i+0xd0>
 80047d4:	232d      	movs	r3, #45	@ 0x2d
 80047d6:	426d      	negs	r5, r5
 80047d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047dc:	230a      	movs	r3, #10
 80047de:	4858      	ldr	r0, [pc, #352]	@ (8004940 <_printf_i+0x234>)
 80047e0:	e011      	b.n	8004806 <_printf_i+0xfa>
 80047e2:	6821      	ldr	r1, [r4, #0]
 80047e4:	6833      	ldr	r3, [r6, #0]
 80047e6:	0608      	lsls	r0, r1, #24
 80047e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80047ec:	d402      	bmi.n	80047f4 <_printf_i+0xe8>
 80047ee:	0649      	lsls	r1, r1, #25
 80047f0:	bf48      	it	mi
 80047f2:	b2ad      	uxthmi	r5, r5
 80047f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80047f6:	6033      	str	r3, [r6, #0]
 80047f8:	bf14      	ite	ne
 80047fa:	230a      	movne	r3, #10
 80047fc:	2308      	moveq	r3, #8
 80047fe:	4850      	ldr	r0, [pc, #320]	@ (8004940 <_printf_i+0x234>)
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004806:	6866      	ldr	r6, [r4, #4]
 8004808:	2e00      	cmp	r6, #0
 800480a:	60a6      	str	r6, [r4, #8]
 800480c:	db05      	blt.n	800481a <_printf_i+0x10e>
 800480e:	6821      	ldr	r1, [r4, #0]
 8004810:	432e      	orrs	r6, r5
 8004812:	f021 0104 	bic.w	r1, r1, #4
 8004816:	6021      	str	r1, [r4, #0]
 8004818:	d04b      	beq.n	80048b2 <_printf_i+0x1a6>
 800481a:	4616      	mov	r6, r2
 800481c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004820:	fb03 5711 	mls	r7, r3, r1, r5
 8004824:	5dc7      	ldrb	r7, [r0, r7]
 8004826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800482a:	462f      	mov	r7, r5
 800482c:	42bb      	cmp	r3, r7
 800482e:	460d      	mov	r5, r1
 8004830:	d9f4      	bls.n	800481c <_printf_i+0x110>
 8004832:	2b08      	cmp	r3, #8
 8004834:	d10b      	bne.n	800484e <_printf_i+0x142>
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	07df      	lsls	r7, r3, #31
 800483a:	d508      	bpl.n	800484e <_printf_i+0x142>
 800483c:	6923      	ldr	r3, [r4, #16]
 800483e:	6861      	ldr	r1, [r4, #4]
 8004840:	4299      	cmp	r1, r3
 8004842:	bfde      	ittt	le
 8004844:	2330      	movle	r3, #48	@ 0x30
 8004846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800484a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800484e:	1b92      	subs	r2, r2, r6
 8004850:	6122      	str	r2, [r4, #16]
 8004852:	464b      	mov	r3, r9
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f8cd a000 	str.w	sl, [sp]
 800485c:	aa03      	add	r2, sp, #12
 800485e:	f7ff fee3 	bl	8004628 <_printf_common>
 8004862:	3001      	adds	r0, #1
 8004864:	d14a      	bne.n	80048fc <_printf_i+0x1f0>
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	b004      	add	sp, #16
 800486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	f043 0320 	orr.w	r3, r3, #32
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	2778      	movs	r7, #120	@ 0x78
 800487a:	4832      	ldr	r0, [pc, #200]	@ (8004944 <_printf_i+0x238>)
 800487c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	6831      	ldr	r1, [r6, #0]
 8004884:	061f      	lsls	r7, r3, #24
 8004886:	f851 5b04 	ldr.w	r5, [r1], #4
 800488a:	d402      	bmi.n	8004892 <_printf_i+0x186>
 800488c:	065f      	lsls	r7, r3, #25
 800488e:	bf48      	it	mi
 8004890:	b2ad      	uxthmi	r5, r5
 8004892:	6031      	str	r1, [r6, #0]
 8004894:	07d9      	lsls	r1, r3, #31
 8004896:	bf44      	itt	mi
 8004898:	f043 0320 	orrmi.w	r3, r3, #32
 800489c:	6023      	strmi	r3, [r4, #0]
 800489e:	b11d      	cbz	r5, 80048a8 <_printf_i+0x19c>
 80048a0:	2310      	movs	r3, #16
 80048a2:	e7ad      	b.n	8004800 <_printf_i+0xf4>
 80048a4:	4826      	ldr	r0, [pc, #152]	@ (8004940 <_printf_i+0x234>)
 80048a6:	e7e9      	b.n	800487c <_printf_i+0x170>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f023 0320 	bic.w	r3, r3, #32
 80048ae:	6023      	str	r3, [r4, #0]
 80048b0:	e7f6      	b.n	80048a0 <_printf_i+0x194>
 80048b2:	4616      	mov	r6, r2
 80048b4:	e7bd      	b.n	8004832 <_printf_i+0x126>
 80048b6:	6833      	ldr	r3, [r6, #0]
 80048b8:	6825      	ldr	r5, [r4, #0]
 80048ba:	1d18      	adds	r0, r3, #4
 80048bc:	6961      	ldr	r1, [r4, #20]
 80048be:	6030      	str	r0, [r6, #0]
 80048c0:	062e      	lsls	r6, r5, #24
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	d501      	bpl.n	80048ca <_printf_i+0x1be>
 80048c6:	6019      	str	r1, [r3, #0]
 80048c8:	e002      	b.n	80048d0 <_printf_i+0x1c4>
 80048ca:	0668      	lsls	r0, r5, #25
 80048cc:	d5fb      	bpl.n	80048c6 <_printf_i+0x1ba>
 80048ce:	8019      	strh	r1, [r3, #0]
 80048d0:	2300      	movs	r3, #0
 80048d2:	4616      	mov	r6, r2
 80048d4:	6123      	str	r3, [r4, #16]
 80048d6:	e7bc      	b.n	8004852 <_printf_i+0x146>
 80048d8:	6833      	ldr	r3, [r6, #0]
 80048da:	2100      	movs	r1, #0
 80048dc:	1d1a      	adds	r2, r3, #4
 80048de:	6032      	str	r2, [r6, #0]
 80048e0:	681e      	ldr	r6, [r3, #0]
 80048e2:	6862      	ldr	r2, [r4, #4]
 80048e4:	4630      	mov	r0, r6
 80048e6:	f000 fbe0 	bl	80050aa <memchr>
 80048ea:	b108      	cbz	r0, 80048f0 <_printf_i+0x1e4>
 80048ec:	1b80      	subs	r0, r0, r6
 80048ee:	6060      	str	r0, [r4, #4]
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	6123      	str	r3, [r4, #16]
 80048f4:	2300      	movs	r3, #0
 80048f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048fa:	e7aa      	b.n	8004852 <_printf_i+0x146>
 80048fc:	4632      	mov	r2, r6
 80048fe:	4649      	mov	r1, r9
 8004900:	4640      	mov	r0, r8
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	47d0      	blx	sl
 8004906:	3001      	adds	r0, #1
 8004908:	d0ad      	beq.n	8004866 <_printf_i+0x15a>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	079b      	lsls	r3, r3, #30
 800490e:	d413      	bmi.n	8004938 <_printf_i+0x22c>
 8004910:	68e0      	ldr	r0, [r4, #12]
 8004912:	9b03      	ldr	r3, [sp, #12]
 8004914:	4298      	cmp	r0, r3
 8004916:	bfb8      	it	lt
 8004918:	4618      	movlt	r0, r3
 800491a:	e7a6      	b.n	800486a <_printf_i+0x15e>
 800491c:	2301      	movs	r3, #1
 800491e:	4632      	mov	r2, r6
 8004920:	4649      	mov	r1, r9
 8004922:	4640      	mov	r0, r8
 8004924:	47d0      	blx	sl
 8004926:	3001      	adds	r0, #1
 8004928:	d09d      	beq.n	8004866 <_printf_i+0x15a>
 800492a:	3501      	adds	r5, #1
 800492c:	68e3      	ldr	r3, [r4, #12]
 800492e:	9903      	ldr	r1, [sp, #12]
 8004930:	1a5b      	subs	r3, r3, r1
 8004932:	42ab      	cmp	r3, r5
 8004934:	dcf2      	bgt.n	800491c <_printf_i+0x210>
 8004936:	e7eb      	b.n	8004910 <_printf_i+0x204>
 8004938:	2500      	movs	r5, #0
 800493a:	f104 0619 	add.w	r6, r4, #25
 800493e:	e7f5      	b.n	800492c <_printf_i+0x220>
 8004940:	08008d9c 	.word	0x08008d9c
 8004944:	08008dad 	.word	0x08008dad

08004948 <_scanf_float>:
 8004948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800494c:	b087      	sub	sp, #28
 800494e:	9303      	str	r3, [sp, #12]
 8004950:	688b      	ldr	r3, [r1, #8]
 8004952:	4691      	mov	r9, r2
 8004954:	1e5a      	subs	r2, r3, #1
 8004956:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800495a:	bf82      	ittt	hi
 800495c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004960:	eb03 0b05 	addhi.w	fp, r3, r5
 8004964:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004968:	460a      	mov	r2, r1
 800496a:	f04f 0500 	mov.w	r5, #0
 800496e:	bf88      	it	hi
 8004970:	608b      	strhi	r3, [r1, #8]
 8004972:	680b      	ldr	r3, [r1, #0]
 8004974:	4680      	mov	r8, r0
 8004976:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800497a:	f842 3b1c 	str.w	r3, [r2], #28
 800497e:	460c      	mov	r4, r1
 8004980:	bf98      	it	ls
 8004982:	f04f 0b00 	movls.w	fp, #0
 8004986:	4616      	mov	r6, r2
 8004988:	46aa      	mov	sl, r5
 800498a:	462f      	mov	r7, r5
 800498c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	9502      	str	r5, [sp, #8]
 8004994:	68a2      	ldr	r2, [r4, #8]
 8004996:	b15a      	cbz	r2, 80049b0 <_scanf_float+0x68>
 8004998:	f8d9 3000 	ldr.w	r3, [r9]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b4e      	cmp	r3, #78	@ 0x4e
 80049a0:	d862      	bhi.n	8004a68 <_scanf_float+0x120>
 80049a2:	2b40      	cmp	r3, #64	@ 0x40
 80049a4:	d83a      	bhi.n	8004a1c <_scanf_float+0xd4>
 80049a6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80049aa:	b2c8      	uxtb	r0, r1
 80049ac:	280e      	cmp	r0, #14
 80049ae:	d938      	bls.n	8004a22 <_scanf_float+0xda>
 80049b0:	b11f      	cbz	r7, 80049ba <_scanf_float+0x72>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b8:	6023      	str	r3, [r4, #0]
 80049ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049be:	f1ba 0f01 	cmp.w	sl, #1
 80049c2:	f200 8114 	bhi.w	8004bee <_scanf_float+0x2a6>
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	429e      	cmp	r6, r3
 80049ca:	f200 8105 	bhi.w	8004bd8 <_scanf_float+0x290>
 80049ce:	2001      	movs	r0, #1
 80049d0:	b007      	add	sp, #28
 80049d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80049da:	2a0d      	cmp	r2, #13
 80049dc:	d8e8      	bhi.n	80049b0 <_scanf_float+0x68>
 80049de:	a101      	add	r1, pc, #4	@ (adr r1, 80049e4 <_scanf_float+0x9c>)
 80049e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049e4:	08004b2d 	.word	0x08004b2d
 80049e8:	080049b1 	.word	0x080049b1
 80049ec:	080049b1 	.word	0x080049b1
 80049f0:	080049b1 	.word	0x080049b1
 80049f4:	08004b89 	.word	0x08004b89
 80049f8:	08004b63 	.word	0x08004b63
 80049fc:	080049b1 	.word	0x080049b1
 8004a00:	080049b1 	.word	0x080049b1
 8004a04:	08004b3b 	.word	0x08004b3b
 8004a08:	080049b1 	.word	0x080049b1
 8004a0c:	080049b1 	.word	0x080049b1
 8004a10:	080049b1 	.word	0x080049b1
 8004a14:	080049b1 	.word	0x080049b1
 8004a18:	08004af7 	.word	0x08004af7
 8004a1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004a20:	e7db      	b.n	80049da <_scanf_float+0x92>
 8004a22:	290e      	cmp	r1, #14
 8004a24:	d8c4      	bhi.n	80049b0 <_scanf_float+0x68>
 8004a26:	a001      	add	r0, pc, #4	@ (adr r0, 8004a2c <_scanf_float+0xe4>)
 8004a28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004a2c:	08004ae7 	.word	0x08004ae7
 8004a30:	080049b1 	.word	0x080049b1
 8004a34:	08004ae7 	.word	0x08004ae7
 8004a38:	08004b77 	.word	0x08004b77
 8004a3c:	080049b1 	.word	0x080049b1
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004acd 	.word	0x08004acd
 8004a48:	08004acd 	.word	0x08004acd
 8004a4c:	08004acd 	.word	0x08004acd
 8004a50:	08004acd 	.word	0x08004acd
 8004a54:	08004acd 	.word	0x08004acd
 8004a58:	08004acd 	.word	0x08004acd
 8004a5c:	08004acd 	.word	0x08004acd
 8004a60:	08004acd 	.word	0x08004acd
 8004a64:	08004acd 	.word	0x08004acd
 8004a68:	2b6e      	cmp	r3, #110	@ 0x6e
 8004a6a:	d809      	bhi.n	8004a80 <_scanf_float+0x138>
 8004a6c:	2b60      	cmp	r3, #96	@ 0x60
 8004a6e:	d8b2      	bhi.n	80049d6 <_scanf_float+0x8e>
 8004a70:	2b54      	cmp	r3, #84	@ 0x54
 8004a72:	d07b      	beq.n	8004b6c <_scanf_float+0x224>
 8004a74:	2b59      	cmp	r3, #89	@ 0x59
 8004a76:	d19b      	bne.n	80049b0 <_scanf_float+0x68>
 8004a78:	2d07      	cmp	r5, #7
 8004a7a:	d199      	bne.n	80049b0 <_scanf_float+0x68>
 8004a7c:	2508      	movs	r5, #8
 8004a7e:	e02f      	b.n	8004ae0 <_scanf_float+0x198>
 8004a80:	2b74      	cmp	r3, #116	@ 0x74
 8004a82:	d073      	beq.n	8004b6c <_scanf_float+0x224>
 8004a84:	2b79      	cmp	r3, #121	@ 0x79
 8004a86:	e7f6      	b.n	8004a76 <_scanf_float+0x12e>
 8004a88:	6821      	ldr	r1, [r4, #0]
 8004a8a:	05c8      	lsls	r0, r1, #23
 8004a8c:	d51e      	bpl.n	8004acc <_scanf_float+0x184>
 8004a8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004a92:	6021      	str	r1, [r4, #0]
 8004a94:	3701      	adds	r7, #1
 8004a96:	f1bb 0f00 	cmp.w	fp, #0
 8004a9a:	d003      	beq.n	8004aa4 <_scanf_float+0x15c>
 8004a9c:	3201      	adds	r2, #1
 8004a9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004aa2:	60a2      	str	r2, [r4, #8]
 8004aa4:	68a3      	ldr	r3, [r4, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60a3      	str	r3, [r4, #8]
 8004aaa:	6923      	ldr	r3, [r4, #16]
 8004aac:	3301      	adds	r3, #1
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f8c9 3004 	str.w	r3, [r9, #4]
 8004abc:	f340 8083 	ble.w	8004bc6 <_scanf_float+0x27e>
 8004ac0:	f8d9 3000 	ldr.w	r3, [r9]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f8c9 3000 	str.w	r3, [r9]
 8004aca:	e763      	b.n	8004994 <_scanf_float+0x4c>
 8004acc:	eb1a 0105 	adds.w	r1, sl, r5
 8004ad0:	f47f af6e 	bne.w	80049b0 <_scanf_float+0x68>
 8004ad4:	460d      	mov	r5, r1
 8004ad6:	468a      	mov	sl, r1
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004ade:	6022      	str	r2, [r4, #0]
 8004ae0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ae4:	e7de      	b.n	8004aa4 <_scanf_float+0x15c>
 8004ae6:	6822      	ldr	r2, [r4, #0]
 8004ae8:	0610      	lsls	r0, r2, #24
 8004aea:	f57f af61 	bpl.w	80049b0 <_scanf_float+0x68>
 8004aee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004af2:	6022      	str	r2, [r4, #0]
 8004af4:	e7f4      	b.n	8004ae0 <_scanf_float+0x198>
 8004af6:	f1ba 0f00 	cmp.w	sl, #0
 8004afa:	d10c      	bne.n	8004b16 <_scanf_float+0x1ce>
 8004afc:	b977      	cbnz	r7, 8004b1c <_scanf_float+0x1d4>
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b08:	d108      	bne.n	8004b1c <_scanf_float+0x1d4>
 8004b0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b0e:	f04f 0a01 	mov.w	sl, #1
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	e7e4      	b.n	8004ae0 <_scanf_float+0x198>
 8004b16:	f1ba 0f02 	cmp.w	sl, #2
 8004b1a:	d051      	beq.n	8004bc0 <_scanf_float+0x278>
 8004b1c:	2d01      	cmp	r5, #1
 8004b1e:	d002      	beq.n	8004b26 <_scanf_float+0x1de>
 8004b20:	2d04      	cmp	r5, #4
 8004b22:	f47f af45 	bne.w	80049b0 <_scanf_float+0x68>
 8004b26:	3501      	adds	r5, #1
 8004b28:	b2ed      	uxtb	r5, r5
 8004b2a:	e7d9      	b.n	8004ae0 <_scanf_float+0x198>
 8004b2c:	f1ba 0f01 	cmp.w	sl, #1
 8004b30:	f47f af3e 	bne.w	80049b0 <_scanf_float+0x68>
 8004b34:	f04f 0a02 	mov.w	sl, #2
 8004b38:	e7d2      	b.n	8004ae0 <_scanf_float+0x198>
 8004b3a:	b975      	cbnz	r5, 8004b5a <_scanf_float+0x212>
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f47f af38 	bne.w	80049b2 <_scanf_float+0x6a>
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004b48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004b4c:	f040 80ff 	bne.w	8004d4e <_scanf_float+0x406>
 8004b50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004b54:	2501      	movs	r5, #1
 8004b56:	6022      	str	r2, [r4, #0]
 8004b58:	e7c2      	b.n	8004ae0 <_scanf_float+0x198>
 8004b5a:	2d03      	cmp	r5, #3
 8004b5c:	d0e3      	beq.n	8004b26 <_scanf_float+0x1de>
 8004b5e:	2d05      	cmp	r5, #5
 8004b60:	e7df      	b.n	8004b22 <_scanf_float+0x1da>
 8004b62:	2d02      	cmp	r5, #2
 8004b64:	f47f af24 	bne.w	80049b0 <_scanf_float+0x68>
 8004b68:	2503      	movs	r5, #3
 8004b6a:	e7b9      	b.n	8004ae0 <_scanf_float+0x198>
 8004b6c:	2d06      	cmp	r5, #6
 8004b6e:	f47f af1f 	bne.w	80049b0 <_scanf_float+0x68>
 8004b72:	2507      	movs	r5, #7
 8004b74:	e7b4      	b.n	8004ae0 <_scanf_float+0x198>
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	0591      	lsls	r1, r2, #22
 8004b7a:	f57f af19 	bpl.w	80049b0 <_scanf_float+0x68>
 8004b7e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	9702      	str	r7, [sp, #8]
 8004b86:	e7ab      	b.n	8004ae0 <_scanf_float+0x198>
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004b8e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004b92:	d005      	beq.n	8004ba0 <_scanf_float+0x258>
 8004b94:	0550      	lsls	r0, r2, #21
 8004b96:	f57f af0b 	bpl.w	80049b0 <_scanf_float+0x68>
 8004b9a:	2f00      	cmp	r7, #0
 8004b9c:	f000 80d7 	beq.w	8004d4e <_scanf_float+0x406>
 8004ba0:	0591      	lsls	r1, r2, #22
 8004ba2:	bf58      	it	pl
 8004ba4:	9902      	ldrpl	r1, [sp, #8]
 8004ba6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004baa:	bf58      	it	pl
 8004bac:	1a79      	subpl	r1, r7, r1
 8004bae:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004bb2:	f04f 0700 	mov.w	r7, #0
 8004bb6:	bf58      	it	pl
 8004bb8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004bbc:	6022      	str	r2, [r4, #0]
 8004bbe:	e78f      	b.n	8004ae0 <_scanf_float+0x198>
 8004bc0:	f04f 0a03 	mov.w	sl, #3
 8004bc4:	e78c      	b.n	8004ae0 <_scanf_float+0x198>
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004bce:	4798      	blx	r3
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	f43f aedf 	beq.w	8004994 <_scanf_float+0x4c>
 8004bd6:	e6eb      	b.n	80049b0 <_scanf_float+0x68>
 8004bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bdc:	464a      	mov	r2, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004be4:	4798      	blx	r3
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	6123      	str	r3, [r4, #16]
 8004bec:	e6eb      	b.n	80049c6 <_scanf_float+0x7e>
 8004bee:	1e6b      	subs	r3, r5, #1
 8004bf0:	2b06      	cmp	r3, #6
 8004bf2:	d824      	bhi.n	8004c3e <_scanf_float+0x2f6>
 8004bf4:	2d02      	cmp	r5, #2
 8004bf6:	d836      	bhi.n	8004c66 <_scanf_float+0x31e>
 8004bf8:	9b01      	ldr	r3, [sp, #4]
 8004bfa:	429e      	cmp	r6, r3
 8004bfc:	f67f aee7 	bls.w	80049ce <_scanf_float+0x86>
 8004c00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c04:	464a      	mov	r2, r9
 8004c06:	4640      	mov	r0, r8
 8004c08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c0c:	4798      	blx	r3
 8004c0e:	6923      	ldr	r3, [r4, #16]
 8004c10:	3b01      	subs	r3, #1
 8004c12:	6123      	str	r3, [r4, #16]
 8004c14:	e7f0      	b.n	8004bf8 <_scanf_float+0x2b0>
 8004c16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004c22:	4798      	blx	r3
 8004c24:	6923      	ldr	r3, [r4, #16]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c2e:	fa5f fa8a 	uxtb.w	sl, sl
 8004c32:	f1ba 0f02 	cmp.w	sl, #2
 8004c36:	d1ee      	bne.n	8004c16 <_scanf_float+0x2ce>
 8004c38:	3d03      	subs	r5, #3
 8004c3a:	b2ed      	uxtb	r5, r5
 8004c3c:	1b76      	subs	r6, r6, r5
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	05da      	lsls	r2, r3, #23
 8004c42:	d530      	bpl.n	8004ca6 <_scanf_float+0x35e>
 8004c44:	055b      	lsls	r3, r3, #21
 8004c46:	d511      	bpl.n	8004c6c <_scanf_float+0x324>
 8004c48:	9b01      	ldr	r3, [sp, #4]
 8004c4a:	429e      	cmp	r6, r3
 8004c4c:	f67f aebf 	bls.w	80049ce <_scanf_float+0x86>
 8004c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c54:	464a      	mov	r2, r9
 8004c56:	4640      	mov	r0, r8
 8004c58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004c5c:	4798      	blx	r3
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	6123      	str	r3, [r4, #16]
 8004c64:	e7f0      	b.n	8004c48 <_scanf_float+0x300>
 8004c66:	46aa      	mov	sl, r5
 8004c68:	46b3      	mov	fp, r6
 8004c6a:	e7de      	b.n	8004c2a <_scanf_float+0x2e2>
 8004c6c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004c70:	6923      	ldr	r3, [r4, #16]
 8004c72:	2965      	cmp	r1, #101	@ 0x65
 8004c74:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c78:	f106 35ff 	add.w	r5, r6, #4294967295
 8004c7c:	6123      	str	r3, [r4, #16]
 8004c7e:	d00c      	beq.n	8004c9a <_scanf_float+0x352>
 8004c80:	2945      	cmp	r1, #69	@ 0x45
 8004c82:	d00a      	beq.n	8004c9a <_scanf_float+0x352>
 8004c84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004c88:	464a      	mov	r2, r9
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4798      	blx	r3
 8004c8e:	6923      	ldr	r3, [r4, #16]
 8004c90:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	1eb5      	subs	r5, r6, #2
 8004c98:	6123      	str	r3, [r4, #16]
 8004c9a:	464a      	mov	r2, r9
 8004c9c:	4640      	mov	r0, r8
 8004c9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ca2:	4798      	blx	r3
 8004ca4:	462e      	mov	r6, r5
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	f012 0210 	ands.w	r2, r2, #16
 8004cac:	d001      	beq.n	8004cb2 <_scanf_float+0x36a>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e68e      	b.n	80049d0 <_scanf_float+0x88>
 8004cb2:	7032      	strb	r2, [r6, #0]
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cbe:	d125      	bne.n	8004d0c <_scanf_float+0x3c4>
 8004cc0:	9b02      	ldr	r3, [sp, #8]
 8004cc2:	429f      	cmp	r7, r3
 8004cc4:	d00a      	beq.n	8004cdc <_scanf_float+0x394>
 8004cc6:	1bda      	subs	r2, r3, r7
 8004cc8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004ccc:	429e      	cmp	r6, r3
 8004cce:	bf28      	it	cs
 8004cd0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	491f      	ldr	r1, [pc, #124]	@ (8004d54 <_scanf_float+0x40c>)
 8004cd8:	f000 f902 	bl	8004ee0 <siprintf>
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4640      	mov	r0, r8
 8004ce0:	9901      	ldr	r1, [sp, #4]
 8004ce2:	f002 fbf9 	bl	80074d8 <_strtod_r>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	6825      	ldr	r5, [r4, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f015 0f02 	tst.w	r5, #2
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	460f      	mov	r7, r1
 8004cf4:	f103 0204 	add.w	r2, r3, #4
 8004cf8:	d015      	beq.n	8004d26 <_scanf_float+0x3de>
 8004cfa:	9903      	ldr	r1, [sp, #12]
 8004cfc:	600a      	str	r2, [r1, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	e9c3 6700 	strd	r6, r7, [r3]
 8004d04:	68e3      	ldr	r3, [r4, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60e3      	str	r3, [r4, #12]
 8004d0a:	e7d0      	b.n	8004cae <_scanf_float+0x366>
 8004d0c:	9b04      	ldr	r3, [sp, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0e4      	beq.n	8004cdc <_scanf_float+0x394>
 8004d12:	9905      	ldr	r1, [sp, #20]
 8004d14:	230a      	movs	r3, #10
 8004d16:	4640      	mov	r0, r8
 8004d18:	3101      	adds	r1, #1
 8004d1a:	f002 fc5d 	bl	80075d8 <_strtol_r>
 8004d1e:	9b04      	ldr	r3, [sp, #16]
 8004d20:	9e05      	ldr	r6, [sp, #20]
 8004d22:	1ac2      	subs	r2, r0, r3
 8004d24:	e7d0      	b.n	8004cc8 <_scanf_float+0x380>
 8004d26:	076d      	lsls	r5, r5, #29
 8004d28:	d4e7      	bmi.n	8004cfa <_scanf_float+0x3b2>
 8004d2a:	9d03      	ldr	r5, [sp, #12]
 8004d2c:	602a      	str	r2, [r5, #0]
 8004d2e:	681d      	ldr	r5, [r3, #0]
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	f7fb fe6a 	bl	8000a0c <__aeabi_dcmpun>
 8004d38:	b120      	cbz	r0, 8004d44 <_scanf_float+0x3fc>
 8004d3a:	4807      	ldr	r0, [pc, #28]	@ (8004d58 <_scanf_float+0x410>)
 8004d3c:	f000 f9d2 	bl	80050e4 <nanf>
 8004d40:	6028      	str	r0, [r5, #0]
 8004d42:	e7df      	b.n	8004d04 <_scanf_float+0x3bc>
 8004d44:	4630      	mov	r0, r6
 8004d46:	4639      	mov	r1, r7
 8004d48:	f7fb febe 	bl	8000ac8 <__aeabi_d2f>
 8004d4c:	e7f8      	b.n	8004d40 <_scanf_float+0x3f8>
 8004d4e:	2700      	movs	r7, #0
 8004d50:	e633      	b.n	80049ba <_scanf_float+0x72>
 8004d52:	bf00      	nop
 8004d54:	08008dbe 	.word	0x08008dbe
 8004d58:	08008eff 	.word	0x08008eff

08004d5c <std>:
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	4604      	mov	r4, r0
 8004d62:	e9c0 3300 	strd	r3, r3, [r0]
 8004d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d6a:	6083      	str	r3, [r0, #8]
 8004d6c:	8181      	strh	r1, [r0, #12]
 8004d6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d70:	81c2      	strh	r2, [r0, #14]
 8004d72:	6183      	str	r3, [r0, #24]
 8004d74:	4619      	mov	r1, r3
 8004d76:	2208      	movs	r2, #8
 8004d78:	305c      	adds	r0, #92	@ 0x5c
 8004d7a:	f000 f916 	bl	8004faa <memset>
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <std+0x58>)
 8004d80:	6224      	str	r4, [r4, #32]
 8004d82:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d84:	4b0c      	ldr	r3, [pc, #48]	@ (8004db8 <std+0x5c>)
 8004d86:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d88:	4b0c      	ldr	r3, [pc, #48]	@ (8004dbc <std+0x60>)
 8004d8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <std+0x64>)
 8004d8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <std+0x68>)
 8004d92:	429c      	cmp	r4, r3
 8004d94:	d006      	beq.n	8004da4 <std+0x48>
 8004d96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d9a:	4294      	cmp	r4, r2
 8004d9c:	d002      	beq.n	8004da4 <std+0x48>
 8004d9e:	33d0      	adds	r3, #208	@ 0xd0
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d105      	bne.n	8004db0 <std+0x54>
 8004da4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dac:	f000 b97a 	b.w	80050a4 <__retarget_lock_init_recursive>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	08004f25 	.word	0x08004f25
 8004db8:	08004f47 	.word	0x08004f47
 8004dbc:	08004f7f 	.word	0x08004f7f
 8004dc0:	08004fa3 	.word	0x08004fa3
 8004dc4:	20000728 	.word	0x20000728

08004dc8 <stdio_exit_handler>:
 8004dc8:	4a02      	ldr	r2, [pc, #8]	@ (8004dd4 <stdio_exit_handler+0xc>)
 8004dca:	4903      	ldr	r1, [pc, #12]	@ (8004dd8 <stdio_exit_handler+0x10>)
 8004dcc:	4803      	ldr	r0, [pc, #12]	@ (8004ddc <stdio_exit_handler+0x14>)
 8004dce:	f000 b869 	b.w	8004ea4 <_fwalk_sglue>
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c
 8004dd8:	0800798d 	.word	0x0800798d
 8004ddc:	2000001c 	.word	0x2000001c

08004de0 <cleanup_stdio>:
 8004de0:	6841      	ldr	r1, [r0, #4]
 8004de2:	4b0c      	ldr	r3, [pc, #48]	@ (8004e14 <cleanup_stdio+0x34>)
 8004de4:	b510      	push	{r4, lr}
 8004de6:	4299      	cmp	r1, r3
 8004de8:	4604      	mov	r4, r0
 8004dea:	d001      	beq.n	8004df0 <cleanup_stdio+0x10>
 8004dec:	f002 fdce 	bl	800798c <_fflush_r>
 8004df0:	68a1      	ldr	r1, [r4, #8]
 8004df2:	4b09      	ldr	r3, [pc, #36]	@ (8004e18 <cleanup_stdio+0x38>)
 8004df4:	4299      	cmp	r1, r3
 8004df6:	d002      	beq.n	8004dfe <cleanup_stdio+0x1e>
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f002 fdc7 	bl	800798c <_fflush_r>
 8004dfe:	68e1      	ldr	r1, [r4, #12]
 8004e00:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <cleanup_stdio+0x3c>)
 8004e02:	4299      	cmp	r1, r3
 8004e04:	d004      	beq.n	8004e10 <cleanup_stdio+0x30>
 8004e06:	4620      	mov	r0, r4
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f002 bdbe 	b.w	800798c <_fflush_r>
 8004e10:	bd10      	pop	{r4, pc}
 8004e12:	bf00      	nop
 8004e14:	20000728 	.word	0x20000728
 8004e18:	20000790 	.word	0x20000790
 8004e1c:	200007f8 	.word	0x200007f8

08004e20 <global_stdio_init.part.0>:
 8004e20:	b510      	push	{r4, lr}
 8004e22:	4b0b      	ldr	r3, [pc, #44]	@ (8004e50 <global_stdio_init.part.0+0x30>)
 8004e24:	4c0b      	ldr	r4, [pc, #44]	@ (8004e54 <global_stdio_init.part.0+0x34>)
 8004e26:	4a0c      	ldr	r2, [pc, #48]	@ (8004e58 <global_stdio_init.part.0+0x38>)
 8004e28:	4620      	mov	r0, r4
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f7ff ff94 	bl	8004d5c <std>
 8004e34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e38:	2201      	movs	r2, #1
 8004e3a:	2109      	movs	r1, #9
 8004e3c:	f7ff ff8e 	bl	8004d5c <std>
 8004e40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e44:	2202      	movs	r2, #2
 8004e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e4a:	2112      	movs	r1, #18
 8004e4c:	f7ff bf86 	b.w	8004d5c <std>
 8004e50:	20000860 	.word	0x20000860
 8004e54:	20000728 	.word	0x20000728
 8004e58:	08004dc9 	.word	0x08004dc9

08004e5c <__sfp_lock_acquire>:
 8004e5c:	4801      	ldr	r0, [pc, #4]	@ (8004e64 <__sfp_lock_acquire+0x8>)
 8004e5e:	f000 b922 	b.w	80050a6 <__retarget_lock_acquire_recursive>
 8004e62:	bf00      	nop
 8004e64:	20000869 	.word	0x20000869

08004e68 <__sfp_lock_release>:
 8004e68:	4801      	ldr	r0, [pc, #4]	@ (8004e70 <__sfp_lock_release+0x8>)
 8004e6a:	f000 b91d 	b.w	80050a8 <__retarget_lock_release_recursive>
 8004e6e:	bf00      	nop
 8004e70:	20000869 	.word	0x20000869

08004e74 <__sinit>:
 8004e74:	b510      	push	{r4, lr}
 8004e76:	4604      	mov	r4, r0
 8004e78:	f7ff fff0 	bl	8004e5c <__sfp_lock_acquire>
 8004e7c:	6a23      	ldr	r3, [r4, #32]
 8004e7e:	b11b      	cbz	r3, 8004e88 <__sinit+0x14>
 8004e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e84:	f7ff bff0 	b.w	8004e68 <__sfp_lock_release>
 8004e88:	4b04      	ldr	r3, [pc, #16]	@ (8004e9c <__sinit+0x28>)
 8004e8a:	6223      	str	r3, [r4, #32]
 8004e8c:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <__sinit+0x2c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f5      	bne.n	8004e80 <__sinit+0xc>
 8004e94:	f7ff ffc4 	bl	8004e20 <global_stdio_init.part.0>
 8004e98:	e7f2      	b.n	8004e80 <__sinit+0xc>
 8004e9a:	bf00      	nop
 8004e9c:	08004de1 	.word	0x08004de1
 8004ea0:	20000860 	.word	0x20000860

08004ea4 <_fwalk_sglue>:
 8004ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea8:	4607      	mov	r7, r0
 8004eaa:	4688      	mov	r8, r1
 8004eac:	4614      	mov	r4, r2
 8004eae:	2600      	movs	r6, #0
 8004eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8004eb8:	d505      	bpl.n	8004ec6 <_fwalk_sglue+0x22>
 8004eba:	6824      	ldr	r4, [r4, #0]
 8004ebc:	2c00      	cmp	r4, #0
 8004ebe:	d1f7      	bne.n	8004eb0 <_fwalk_sglue+0xc>
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec6:	89ab      	ldrh	r3, [r5, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d907      	bls.n	8004edc <_fwalk_sglue+0x38>
 8004ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	d003      	beq.n	8004edc <_fwalk_sglue+0x38>
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	47c0      	blx	r8
 8004eda:	4306      	orrs	r6, r0
 8004edc:	3568      	adds	r5, #104	@ 0x68
 8004ede:	e7e9      	b.n	8004eb4 <_fwalk_sglue+0x10>

08004ee0 <siprintf>:
 8004ee0:	b40e      	push	{r1, r2, r3}
 8004ee2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ee6:	b510      	push	{r4, lr}
 8004ee8:	2400      	movs	r4, #0
 8004eea:	b09d      	sub	sp, #116	@ 0x74
 8004eec:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004eee:	9002      	str	r0, [sp, #8]
 8004ef0:	9006      	str	r0, [sp, #24]
 8004ef2:	9107      	str	r1, [sp, #28]
 8004ef4:	9104      	str	r1, [sp, #16]
 8004ef6:	4809      	ldr	r0, [pc, #36]	@ (8004f1c <siprintf+0x3c>)
 8004ef8:	4909      	ldr	r1, [pc, #36]	@ (8004f20 <siprintf+0x40>)
 8004efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004efe:	9105      	str	r1, [sp, #20]
 8004f00:	6800      	ldr	r0, [r0, #0]
 8004f02:	a902      	add	r1, sp, #8
 8004f04:	9301      	str	r3, [sp, #4]
 8004f06:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004f08:	f002 fbc4 	bl	8007694 <_svfiprintf_r>
 8004f0c:	9b02      	ldr	r3, [sp, #8]
 8004f0e:	701c      	strb	r4, [r3, #0]
 8004f10:	b01d      	add	sp, #116	@ 0x74
 8004f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f16:	b003      	add	sp, #12
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000018 	.word	0x20000018
 8004f20:	ffff0208 	.word	0xffff0208

08004f24 <__sread>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	460c      	mov	r4, r1
 8004f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f2c:	f000 f86c 	bl	8005008 <_read_r>
 8004f30:	2800      	cmp	r0, #0
 8004f32:	bfab      	itete	ge
 8004f34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004f36:	89a3      	ldrhlt	r3, [r4, #12]
 8004f38:	181b      	addge	r3, r3, r0
 8004f3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004f3e:	bfac      	ite	ge
 8004f40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004f42:	81a3      	strhlt	r3, [r4, #12]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <__swrite>:
 8004f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	4605      	mov	r5, r0
 8004f50:	05db      	lsls	r3, r3, #23
 8004f52:	460c      	mov	r4, r1
 8004f54:	4616      	mov	r6, r2
 8004f56:	d505      	bpl.n	8004f64 <__swrite+0x1e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f60:	f000 f840 	bl	8004fe4 <_lseek_r>
 8004f64:	89a3      	ldrh	r3, [r4, #12]
 8004f66:	4632      	mov	r2, r6
 8004f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f6c:	81a3      	strh	r3, [r4, #12]
 8004f6e:	4628      	mov	r0, r5
 8004f70:	463b      	mov	r3, r7
 8004f72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7a:	f000 b857 	b.w	800502c <_write_r>

08004f7e <__sseek>:
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	460c      	mov	r4, r1
 8004f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f86:	f000 f82d 	bl	8004fe4 <_lseek_r>
 8004f8a:	1c43      	adds	r3, r0, #1
 8004f8c:	89a3      	ldrh	r3, [r4, #12]
 8004f8e:	bf15      	itete	ne
 8004f90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004f92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004f96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004f9a:	81a3      	strheq	r3, [r4, #12]
 8004f9c:	bf18      	it	ne
 8004f9e:	81a3      	strhne	r3, [r4, #12]
 8004fa0:	bd10      	pop	{r4, pc}

08004fa2 <__sclose>:
 8004fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa6:	f000 b80d 	b.w	8004fc4 <_close_r>

08004faa <memset>:
 8004faa:	4603      	mov	r3, r0
 8004fac:	4402      	add	r2, r0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <memset+0xa>
 8004fb2:	4770      	bx	lr
 8004fb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004fb8:	e7f9      	b.n	8004fae <memset+0x4>
	...

08004fbc <_localeconv_r>:
 8004fbc:	4800      	ldr	r0, [pc, #0]	@ (8004fc0 <_localeconv_r+0x4>)
 8004fbe:	4770      	bx	lr
 8004fc0:	20000158 	.word	0x20000158

08004fc4 <_close_r>:
 8004fc4:	b538      	push	{r3, r4, r5, lr}
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4d05      	ldr	r5, [pc, #20]	@ (8004fe0 <_close_r+0x1c>)
 8004fca:	4604      	mov	r4, r0
 8004fcc:	4608      	mov	r0, r1
 8004fce:	602b      	str	r3, [r5, #0]
 8004fd0:	f7fc fb1b 	bl	800160a <_close>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_close_r+0x1a>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_close_r+0x1a>
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	20000864 	.word	0x20000864

08004fe4 <_lseek_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	4611      	mov	r1, r2
 8004fec:	2200      	movs	r2, #0
 8004fee:	4d05      	ldr	r5, [pc, #20]	@ (8005004 <_lseek_r+0x20>)
 8004ff0:	602a      	str	r2, [r5, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f7fc fb2d 	bl	8001652 <_lseek>
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	d102      	bne.n	8005002 <_lseek_r+0x1e>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b103      	cbz	r3, 8005002 <_lseek_r+0x1e>
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	bd38      	pop	{r3, r4, r5, pc}
 8005004:	20000864 	.word	0x20000864

08005008 <_read_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	4611      	mov	r1, r2
 8005010:	2200      	movs	r2, #0
 8005012:	4d05      	ldr	r5, [pc, #20]	@ (8005028 <_read_r+0x20>)
 8005014:	602a      	str	r2, [r5, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	f7fc fabe 	bl	8001598 <_read>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_read_r+0x1e>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_read_r+0x1e>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000864 	.word	0x20000864

0800502c <_write_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	2200      	movs	r2, #0
 8005036:	4d05      	ldr	r5, [pc, #20]	@ (800504c <_write_r+0x20>)
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fc fac9 	bl	80015d2 <_write>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_write_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_write_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000864 	.word	0x20000864

08005050 <__errno>:
 8005050:	4b01      	ldr	r3, [pc, #4]	@ (8005058 <__errno+0x8>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000018 	.word	0x20000018

0800505c <__libc_init_array>:
 800505c:	b570      	push	{r4, r5, r6, lr}
 800505e:	2600      	movs	r6, #0
 8005060:	4d0c      	ldr	r5, [pc, #48]	@ (8005094 <__libc_init_array+0x38>)
 8005062:	4c0d      	ldr	r4, [pc, #52]	@ (8005098 <__libc_init_array+0x3c>)
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	42a6      	cmp	r6, r4
 800506a:	d109      	bne.n	8005080 <__libc_init_array+0x24>
 800506c:	f003 fb6c 	bl	8008748 <_init>
 8005070:	2600      	movs	r6, #0
 8005072:	4d0a      	ldr	r5, [pc, #40]	@ (800509c <__libc_init_array+0x40>)
 8005074:	4c0a      	ldr	r4, [pc, #40]	@ (80050a0 <__libc_init_array+0x44>)
 8005076:	1b64      	subs	r4, r4, r5
 8005078:	10a4      	asrs	r4, r4, #2
 800507a:	42a6      	cmp	r6, r4
 800507c:	d105      	bne.n	800508a <__libc_init_array+0x2e>
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	f855 3b04 	ldr.w	r3, [r5], #4
 8005084:	4798      	blx	r3
 8005086:	3601      	adds	r6, #1
 8005088:	e7ee      	b.n	8005068 <__libc_init_array+0xc>
 800508a:	f855 3b04 	ldr.w	r3, [r5], #4
 800508e:	4798      	blx	r3
 8005090:	3601      	adds	r6, #1
 8005092:	e7f2      	b.n	800507a <__libc_init_array+0x1e>
 8005094:	080091bc 	.word	0x080091bc
 8005098:	080091bc 	.word	0x080091bc
 800509c:	080091bc 	.word	0x080091bc
 80050a0:	080091c0 	.word	0x080091c0

080050a4 <__retarget_lock_init_recursive>:
 80050a4:	4770      	bx	lr

080050a6 <__retarget_lock_acquire_recursive>:
 80050a6:	4770      	bx	lr

080050a8 <__retarget_lock_release_recursive>:
 80050a8:	4770      	bx	lr

080050aa <memchr>:
 80050aa:	4603      	mov	r3, r0
 80050ac:	b510      	push	{r4, lr}
 80050ae:	b2c9      	uxtb	r1, r1
 80050b0:	4402      	add	r2, r0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	d101      	bne.n	80050bc <memchr+0x12>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e003      	b.n	80050c4 <memchr+0x1a>
 80050bc:	7804      	ldrb	r4, [r0, #0]
 80050be:	3301      	adds	r3, #1
 80050c0:	428c      	cmp	r4, r1
 80050c2:	d1f6      	bne.n	80050b2 <memchr+0x8>
 80050c4:	bd10      	pop	{r4, pc}

080050c6 <memcpy>:
 80050c6:	440a      	add	r2, r1
 80050c8:	4291      	cmp	r1, r2
 80050ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80050ce:	d100      	bne.n	80050d2 <memcpy+0xc>
 80050d0:	4770      	bx	lr
 80050d2:	b510      	push	{r4, lr}
 80050d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d8:	4291      	cmp	r1, r2
 80050da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050de:	d1f9      	bne.n	80050d4 <memcpy+0xe>
 80050e0:	bd10      	pop	{r4, pc}
	...

080050e4 <nanf>:
 80050e4:	4800      	ldr	r0, [pc, #0]	@ (80050e8 <nanf+0x4>)
 80050e6:	4770      	bx	lr
 80050e8:	7fc00000 	.word	0x7fc00000

080050ec <quorem>:
 80050ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	6903      	ldr	r3, [r0, #16]
 80050f2:	690c      	ldr	r4, [r1, #16]
 80050f4:	4607      	mov	r7, r0
 80050f6:	42a3      	cmp	r3, r4
 80050f8:	db7e      	blt.n	80051f8 <quorem+0x10c>
 80050fa:	3c01      	subs	r4, #1
 80050fc:	00a3      	lsls	r3, r4, #2
 80050fe:	f100 0514 	add.w	r5, r0, #20
 8005102:	f101 0814 	add.w	r8, r1, #20
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005112:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005116:	3301      	adds	r3, #1
 8005118:	429a      	cmp	r2, r3
 800511a:	fbb2 f6f3 	udiv	r6, r2, r3
 800511e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005122:	d32e      	bcc.n	8005182 <quorem+0x96>
 8005124:	f04f 0a00 	mov.w	sl, #0
 8005128:	46c4      	mov	ip, r8
 800512a:	46ae      	mov	lr, r5
 800512c:	46d3      	mov	fp, sl
 800512e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005132:	b298      	uxth	r0, r3
 8005134:	fb06 a000 	mla	r0, r6, r0, sl
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	0c02      	lsrs	r2, r0, #16
 800513c:	fb06 2303 	mla	r3, r6, r3, r2
 8005140:	f8de 2000 	ldr.w	r2, [lr]
 8005144:	b280      	uxth	r0, r0
 8005146:	b292      	uxth	r2, r2
 8005148:	1a12      	subs	r2, r2, r0
 800514a:	445a      	add	r2, fp
 800514c:	f8de 0000 	ldr.w	r0, [lr]
 8005150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005154:	b29b      	uxth	r3, r3
 8005156:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800515a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800515e:	b292      	uxth	r2, r2
 8005160:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005164:	45e1      	cmp	r9, ip
 8005166:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800516a:	f84e 2b04 	str.w	r2, [lr], #4
 800516e:	d2de      	bcs.n	800512e <quorem+0x42>
 8005170:	9b00      	ldr	r3, [sp, #0]
 8005172:	58eb      	ldr	r3, [r5, r3]
 8005174:	b92b      	cbnz	r3, 8005182 <quorem+0x96>
 8005176:	9b01      	ldr	r3, [sp, #4]
 8005178:	3b04      	subs	r3, #4
 800517a:	429d      	cmp	r5, r3
 800517c:	461a      	mov	r2, r3
 800517e:	d32f      	bcc.n	80051e0 <quorem+0xf4>
 8005180:	613c      	str	r4, [r7, #16]
 8005182:	4638      	mov	r0, r7
 8005184:	f001 f9ca 	bl	800651c <__mcmp>
 8005188:	2800      	cmp	r0, #0
 800518a:	db25      	blt.n	80051d8 <quorem+0xec>
 800518c:	4629      	mov	r1, r5
 800518e:	2000      	movs	r0, #0
 8005190:	f858 2b04 	ldr.w	r2, [r8], #4
 8005194:	f8d1 c000 	ldr.w	ip, [r1]
 8005198:	fa1f fe82 	uxth.w	lr, r2
 800519c:	fa1f f38c 	uxth.w	r3, ip
 80051a0:	eba3 030e 	sub.w	r3, r3, lr
 80051a4:	4403      	add	r3, r0
 80051a6:	0c12      	lsrs	r2, r2, #16
 80051a8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80051ac:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051b6:	45c1      	cmp	r9, r8
 80051b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80051bc:	f841 3b04 	str.w	r3, [r1], #4
 80051c0:	d2e6      	bcs.n	8005190 <quorem+0xa4>
 80051c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ca:	b922      	cbnz	r2, 80051d6 <quorem+0xea>
 80051cc:	3b04      	subs	r3, #4
 80051ce:	429d      	cmp	r5, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	d30b      	bcc.n	80051ec <quorem+0x100>
 80051d4:	613c      	str	r4, [r7, #16]
 80051d6:	3601      	adds	r6, #1
 80051d8:	4630      	mov	r0, r6
 80051da:	b003      	add	sp, #12
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	2a00      	cmp	r2, #0
 80051e6:	d1cb      	bne.n	8005180 <quorem+0x94>
 80051e8:	3c01      	subs	r4, #1
 80051ea:	e7c6      	b.n	800517a <quorem+0x8e>
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	3b04      	subs	r3, #4
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	d1ef      	bne.n	80051d4 <quorem+0xe8>
 80051f4:	3c01      	subs	r4, #1
 80051f6:	e7ea      	b.n	80051ce <quorem+0xe2>
 80051f8:	2000      	movs	r0, #0
 80051fa:	e7ee      	b.n	80051da <quorem+0xee>
 80051fc:	0000      	movs	r0, r0
	...

08005200 <_dtoa_r>:
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	69c7      	ldr	r7, [r0, #28]
 800520a:	b097      	sub	sp, #92	@ 0x5c
 800520c:	4681      	mov	r9, r0
 800520e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005212:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005214:	b97f      	cbnz	r7, 8005236 <_dtoa_r+0x36>
 8005216:	2010      	movs	r0, #16
 8005218:	f000 fe0e 	bl	8005e38 <malloc>
 800521c:	4602      	mov	r2, r0
 800521e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005222:	b920      	cbnz	r0, 800522e <_dtoa_r+0x2e>
 8005224:	21ef      	movs	r1, #239	@ 0xef
 8005226:	4bac      	ldr	r3, [pc, #688]	@ (80054d8 <_dtoa_r+0x2d8>)
 8005228:	48ac      	ldr	r0, [pc, #688]	@ (80054dc <_dtoa_r+0x2dc>)
 800522a:	f002 fc19 	bl	8007a60 <__assert_func>
 800522e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005232:	6007      	str	r7, [r0, #0]
 8005234:	60c7      	str	r7, [r0, #12]
 8005236:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800523a:	6819      	ldr	r1, [r3, #0]
 800523c:	b159      	cbz	r1, 8005256 <_dtoa_r+0x56>
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	2301      	movs	r3, #1
 8005242:	4093      	lsls	r3, r2
 8005244:	604a      	str	r2, [r1, #4]
 8005246:	608b      	str	r3, [r1, #8]
 8005248:	4648      	mov	r0, r9
 800524a:	f000 feeb 	bl	8006024 <_Bfree>
 800524e:	2200      	movs	r2, #0
 8005250:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	1e2b      	subs	r3, r5, #0
 8005258:	bfaf      	iteee	ge
 800525a:	2300      	movge	r3, #0
 800525c:	2201      	movlt	r2, #1
 800525e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005262:	9307      	strlt	r3, [sp, #28]
 8005264:	bfa8      	it	ge
 8005266:	6033      	strge	r3, [r6, #0]
 8005268:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800526c:	4b9c      	ldr	r3, [pc, #624]	@ (80054e0 <_dtoa_r+0x2e0>)
 800526e:	bfb8      	it	lt
 8005270:	6032      	strlt	r2, [r6, #0]
 8005272:	ea33 0308 	bics.w	r3, r3, r8
 8005276:	d112      	bne.n	800529e <_dtoa_r+0x9e>
 8005278:	f242 730f 	movw	r3, #9999	@ 0x270f
 800527c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005284:	4323      	orrs	r3, r4
 8005286:	f000 855e 	beq.w	8005d46 <_dtoa_r+0xb46>
 800528a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800528c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80054e4 <_dtoa_r+0x2e4>
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8560 	beq.w	8005d56 <_dtoa_r+0xb56>
 8005296:	f10a 0303 	add.w	r3, sl, #3
 800529a:	f000 bd5a 	b.w	8005d52 <_dtoa_r+0xb52>
 800529e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80052a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	f7fb fb7b 	bl	80009a8 <__aeabi_dcmpeq>
 80052b2:	4607      	mov	r7, r0
 80052b4:	b158      	cbz	r0, 80052ce <_dtoa_r+0xce>
 80052b6:	2301      	movs	r3, #1
 80052b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80052be:	b113      	cbz	r3, 80052c6 <_dtoa_r+0xc6>
 80052c0:	4b89      	ldr	r3, [pc, #548]	@ (80054e8 <_dtoa_r+0x2e8>)
 80052c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80054ec <_dtoa_r+0x2ec>
 80052ca:	f000 bd44 	b.w	8005d56 <_dtoa_r+0xb56>
 80052ce:	ab14      	add	r3, sp, #80	@ 0x50
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	ab15      	add	r3, sp, #84	@ 0x54
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4648      	mov	r0, r9
 80052d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80052dc:	f001 fa36 	bl	800674c <__d2b>
 80052e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80052e4:	9003      	str	r0, [sp, #12]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	d078      	beq.n	80053dc <_dtoa_r+0x1dc>
 80052ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80052ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80052f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80052fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005300:	9712      	str	r7, [sp, #72]	@ 0x48
 8005302:	4619      	mov	r1, r3
 8005304:	2200      	movs	r2, #0
 8005306:	4b7a      	ldr	r3, [pc, #488]	@ (80054f0 <_dtoa_r+0x2f0>)
 8005308:	f7fa ff2e 	bl	8000168 <__aeabi_dsub>
 800530c:	a36c      	add	r3, pc, #432	@ (adr r3, 80054c0 <_dtoa_r+0x2c0>)
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fb f8e1 	bl	80004d8 <__aeabi_dmul>
 8005316:	a36c      	add	r3, pc, #432	@ (adr r3, 80054c8 <_dtoa_r+0x2c8>)
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f7fa ff26 	bl	800016c <__adddf3>
 8005320:	4604      	mov	r4, r0
 8005322:	4630      	mov	r0, r6
 8005324:	460d      	mov	r5, r1
 8005326:	f7fb f86d 	bl	8000404 <__aeabi_i2d>
 800532a:	a369      	add	r3, pc, #420	@ (adr r3, 80054d0 <_dtoa_r+0x2d0>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fb f8d2 	bl	80004d8 <__aeabi_dmul>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4620      	mov	r0, r4
 800533a:	4629      	mov	r1, r5
 800533c:	f7fa ff16 	bl	800016c <__adddf3>
 8005340:	4604      	mov	r4, r0
 8005342:	460d      	mov	r5, r1
 8005344:	f7fb fb78 	bl	8000a38 <__aeabi_d2iz>
 8005348:	2200      	movs	r2, #0
 800534a:	4607      	mov	r7, r0
 800534c:	2300      	movs	r3, #0
 800534e:	4620      	mov	r0, r4
 8005350:	4629      	mov	r1, r5
 8005352:	f7fb fb33 	bl	80009bc <__aeabi_dcmplt>
 8005356:	b140      	cbz	r0, 800536a <_dtoa_r+0x16a>
 8005358:	4638      	mov	r0, r7
 800535a:	f7fb f853 	bl	8000404 <__aeabi_i2d>
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	f7fb fb21 	bl	80009a8 <__aeabi_dcmpeq>
 8005366:	b900      	cbnz	r0, 800536a <_dtoa_r+0x16a>
 8005368:	3f01      	subs	r7, #1
 800536a:	2f16      	cmp	r7, #22
 800536c:	d854      	bhi.n	8005418 <_dtoa_r+0x218>
 800536e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005372:	4b60      	ldr	r3, [pc, #384]	@ (80054f4 <_dtoa_r+0x2f4>)
 8005374:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb fb1e 	bl	80009bc <__aeabi_dcmplt>
 8005380:	2800      	cmp	r0, #0
 8005382:	d04b      	beq.n	800541c <_dtoa_r+0x21c>
 8005384:	2300      	movs	r3, #0
 8005386:	3f01      	subs	r7, #1
 8005388:	930f      	str	r3, [sp, #60]	@ 0x3c
 800538a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800538c:	1b9b      	subs	r3, r3, r6
 800538e:	1e5a      	subs	r2, r3, #1
 8005390:	bf49      	itett	mi
 8005392:	f1c3 0301 	rsbmi	r3, r3, #1
 8005396:	2300      	movpl	r3, #0
 8005398:	9304      	strmi	r3, [sp, #16]
 800539a:	2300      	movmi	r3, #0
 800539c:	9209      	str	r2, [sp, #36]	@ 0x24
 800539e:	bf54      	ite	pl
 80053a0:	9304      	strpl	r3, [sp, #16]
 80053a2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80053a4:	2f00      	cmp	r7, #0
 80053a6:	db3b      	blt.n	8005420 <_dtoa_r+0x220>
 80053a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053aa:	970e      	str	r7, [sp, #56]	@ 0x38
 80053ac:	443b      	add	r3, r7
 80053ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80053b0:	2300      	movs	r3, #0
 80053b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053b6:	2b09      	cmp	r3, #9
 80053b8:	d865      	bhi.n	8005486 <_dtoa_r+0x286>
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	bfc4      	itt	gt
 80053be:	3b04      	subgt	r3, #4
 80053c0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80053c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80053c4:	bfc8      	it	gt
 80053c6:	2400      	movgt	r4, #0
 80053c8:	f1a3 0302 	sub.w	r3, r3, #2
 80053cc:	bfd8      	it	le
 80053ce:	2401      	movle	r4, #1
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d864      	bhi.n	800549e <_dtoa_r+0x29e>
 80053d4:	e8df f003 	tbb	[pc, r3]
 80053d8:	2c385553 	.word	0x2c385553
 80053dc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80053e0:	441e      	add	r6, r3
 80053e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	bfc1      	itttt	gt
 80053ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80053ee:	fa08 f803 	lslgt.w	r8, r8, r3
 80053f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80053f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80053fa:	bfd6      	itet	le
 80053fc:	f1c3 0320 	rsble	r3, r3, #32
 8005400:	ea48 0003 	orrgt.w	r0, r8, r3
 8005404:	fa04 f003 	lslle.w	r0, r4, r3
 8005408:	f7fa ffec 	bl	80003e4 <__aeabi_ui2d>
 800540c:	2201      	movs	r2, #1
 800540e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005412:	3e01      	subs	r6, #1
 8005414:	9212      	str	r2, [sp, #72]	@ 0x48
 8005416:	e774      	b.n	8005302 <_dtoa_r+0x102>
 8005418:	2301      	movs	r3, #1
 800541a:	e7b5      	b.n	8005388 <_dtoa_r+0x188>
 800541c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800541e:	e7b4      	b.n	800538a <_dtoa_r+0x18a>
 8005420:	9b04      	ldr	r3, [sp, #16]
 8005422:	1bdb      	subs	r3, r3, r7
 8005424:	9304      	str	r3, [sp, #16]
 8005426:	427b      	negs	r3, r7
 8005428:	930a      	str	r3, [sp, #40]	@ 0x28
 800542a:	2300      	movs	r3, #0
 800542c:	930e      	str	r3, [sp, #56]	@ 0x38
 800542e:	e7c1      	b.n	80053b4 <_dtoa_r+0x1b4>
 8005430:	2301      	movs	r3, #1
 8005432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005434:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005436:	eb07 0b03 	add.w	fp, r7, r3
 800543a:	f10b 0301 	add.w	r3, fp, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	9308      	str	r3, [sp, #32]
 8005442:	bfb8      	it	lt
 8005444:	2301      	movlt	r3, #1
 8005446:	e006      	b.n	8005456 <_dtoa_r+0x256>
 8005448:	2301      	movs	r3, #1
 800544a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800544c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800544e:	2b00      	cmp	r3, #0
 8005450:	dd28      	ble.n	80054a4 <_dtoa_r+0x2a4>
 8005452:	469b      	mov	fp, r3
 8005454:	9308      	str	r3, [sp, #32]
 8005456:	2100      	movs	r1, #0
 8005458:	2204      	movs	r2, #4
 800545a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800545e:	f102 0514 	add.w	r5, r2, #20
 8005462:	429d      	cmp	r5, r3
 8005464:	d926      	bls.n	80054b4 <_dtoa_r+0x2b4>
 8005466:	6041      	str	r1, [r0, #4]
 8005468:	4648      	mov	r0, r9
 800546a:	f000 fd9b 	bl	8005fa4 <_Balloc>
 800546e:	4682      	mov	sl, r0
 8005470:	2800      	cmp	r0, #0
 8005472:	d143      	bne.n	80054fc <_dtoa_r+0x2fc>
 8005474:	4602      	mov	r2, r0
 8005476:	f240 11af 	movw	r1, #431	@ 0x1af
 800547a:	4b1f      	ldr	r3, [pc, #124]	@ (80054f8 <_dtoa_r+0x2f8>)
 800547c:	e6d4      	b.n	8005228 <_dtoa_r+0x28>
 800547e:	2300      	movs	r3, #0
 8005480:	e7e3      	b.n	800544a <_dtoa_r+0x24a>
 8005482:	2300      	movs	r3, #0
 8005484:	e7d5      	b.n	8005432 <_dtoa_r+0x232>
 8005486:	2401      	movs	r4, #1
 8005488:	2300      	movs	r3, #0
 800548a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800548c:	9320      	str	r3, [sp, #128]	@ 0x80
 800548e:	f04f 3bff 	mov.w	fp, #4294967295
 8005492:	2200      	movs	r2, #0
 8005494:	2312      	movs	r3, #18
 8005496:	f8cd b020 	str.w	fp, [sp, #32]
 800549a:	9221      	str	r2, [sp, #132]	@ 0x84
 800549c:	e7db      	b.n	8005456 <_dtoa_r+0x256>
 800549e:	2301      	movs	r3, #1
 80054a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054a2:	e7f4      	b.n	800548e <_dtoa_r+0x28e>
 80054a4:	f04f 0b01 	mov.w	fp, #1
 80054a8:	465b      	mov	r3, fp
 80054aa:	f8cd b020 	str.w	fp, [sp, #32]
 80054ae:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80054b2:	e7d0      	b.n	8005456 <_dtoa_r+0x256>
 80054b4:	3101      	adds	r1, #1
 80054b6:	0052      	lsls	r2, r2, #1
 80054b8:	e7d1      	b.n	800545e <_dtoa_r+0x25e>
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	636f4361 	.word	0x636f4361
 80054c4:	3fd287a7 	.word	0x3fd287a7
 80054c8:	8b60c8b3 	.word	0x8b60c8b3
 80054cc:	3fc68a28 	.word	0x3fc68a28
 80054d0:	509f79fb 	.word	0x509f79fb
 80054d4:	3fd34413 	.word	0x3fd34413
 80054d8:	08008dd0 	.word	0x08008dd0
 80054dc:	08008de7 	.word	0x08008de7
 80054e0:	7ff00000 	.word	0x7ff00000
 80054e4:	08008dcc 	.word	0x08008dcc
 80054e8:	08008d9b 	.word	0x08008d9b
 80054ec:	08008d9a 	.word	0x08008d9a
 80054f0:	3ff80000 	.word	0x3ff80000
 80054f4:	08008f98 	.word	0x08008f98
 80054f8:	08008e3f 	.word	0x08008e3f
 80054fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005500:	6018      	str	r0, [r3, #0]
 8005502:	9b08      	ldr	r3, [sp, #32]
 8005504:	2b0e      	cmp	r3, #14
 8005506:	f200 80a1 	bhi.w	800564c <_dtoa_r+0x44c>
 800550a:	2c00      	cmp	r4, #0
 800550c:	f000 809e 	beq.w	800564c <_dtoa_r+0x44c>
 8005510:	2f00      	cmp	r7, #0
 8005512:	dd33      	ble.n	800557c <_dtoa_r+0x37c>
 8005514:	4b9c      	ldr	r3, [pc, #624]	@ (8005788 <_dtoa_r+0x588>)
 8005516:	f007 020f 	and.w	r2, r7, #15
 800551a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800551e:	05f8      	lsls	r0, r7, #23
 8005520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005524:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005528:	ea4f 1427 	mov.w	r4, r7, asr #4
 800552c:	d516      	bpl.n	800555c <_dtoa_r+0x35c>
 800552e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005532:	4b96      	ldr	r3, [pc, #600]	@ (800578c <_dtoa_r+0x58c>)
 8005534:	2603      	movs	r6, #3
 8005536:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800553a:	f7fb f8f7 	bl	800072c <__aeabi_ddiv>
 800553e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005542:	f004 040f 	and.w	r4, r4, #15
 8005546:	4d91      	ldr	r5, [pc, #580]	@ (800578c <_dtoa_r+0x58c>)
 8005548:	b954      	cbnz	r4, 8005560 <_dtoa_r+0x360>
 800554a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800554e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005552:	f7fb f8eb 	bl	800072c <__aeabi_ddiv>
 8005556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800555a:	e028      	b.n	80055ae <_dtoa_r+0x3ae>
 800555c:	2602      	movs	r6, #2
 800555e:	e7f2      	b.n	8005546 <_dtoa_r+0x346>
 8005560:	07e1      	lsls	r1, r4, #31
 8005562:	d508      	bpl.n	8005576 <_dtoa_r+0x376>
 8005564:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800556c:	f7fa ffb4 	bl	80004d8 <__aeabi_dmul>
 8005570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005574:	3601      	adds	r6, #1
 8005576:	1064      	asrs	r4, r4, #1
 8005578:	3508      	adds	r5, #8
 800557a:	e7e5      	b.n	8005548 <_dtoa_r+0x348>
 800557c:	f000 80af 	beq.w	80056de <_dtoa_r+0x4de>
 8005580:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005584:	427c      	negs	r4, r7
 8005586:	4b80      	ldr	r3, [pc, #512]	@ (8005788 <_dtoa_r+0x588>)
 8005588:	f004 020f 	and.w	r2, r4, #15
 800558c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fa ffa0 	bl	80004d8 <__aeabi_dmul>
 8005598:	2602      	movs	r6, #2
 800559a:	2300      	movs	r3, #0
 800559c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055a0:	4d7a      	ldr	r5, [pc, #488]	@ (800578c <_dtoa_r+0x58c>)
 80055a2:	1124      	asrs	r4, r4, #4
 80055a4:	2c00      	cmp	r4, #0
 80055a6:	f040 808f 	bne.w	80056c8 <_dtoa_r+0x4c8>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1d3      	bne.n	8005556 <_dtoa_r+0x356>
 80055ae:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80055b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 8094 	beq.w	80056e2 <_dtoa_r+0x4e2>
 80055ba:	2200      	movs	r2, #0
 80055bc:	4620      	mov	r0, r4
 80055be:	4629      	mov	r1, r5
 80055c0:	4b73      	ldr	r3, [pc, #460]	@ (8005790 <_dtoa_r+0x590>)
 80055c2:	f7fb f9fb 	bl	80009bc <__aeabi_dcmplt>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f000 808b 	beq.w	80056e2 <_dtoa_r+0x4e2>
 80055cc:	9b08      	ldr	r3, [sp, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 8087 	beq.w	80056e2 <_dtoa_r+0x4e2>
 80055d4:	f1bb 0f00 	cmp.w	fp, #0
 80055d8:	dd34      	ble.n	8005644 <_dtoa_r+0x444>
 80055da:	4620      	mov	r0, r4
 80055dc:	2200      	movs	r2, #0
 80055de:	4629      	mov	r1, r5
 80055e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005794 <_dtoa_r+0x594>)
 80055e2:	f7fa ff79 	bl	80004d8 <__aeabi_dmul>
 80055e6:	465c      	mov	r4, fp
 80055e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055ec:	f107 38ff 	add.w	r8, r7, #4294967295
 80055f0:	3601      	adds	r6, #1
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7fa ff06 	bl	8000404 <__aeabi_i2d>
 80055f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055fc:	f7fa ff6c 	bl	80004d8 <__aeabi_dmul>
 8005600:	2200      	movs	r2, #0
 8005602:	4b65      	ldr	r3, [pc, #404]	@ (8005798 <_dtoa_r+0x598>)
 8005604:	f7fa fdb2 	bl	800016c <__adddf3>
 8005608:	4605      	mov	r5, r0
 800560a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800560e:	2c00      	cmp	r4, #0
 8005610:	d16a      	bne.n	80056e8 <_dtoa_r+0x4e8>
 8005612:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005616:	2200      	movs	r2, #0
 8005618:	4b60      	ldr	r3, [pc, #384]	@ (800579c <_dtoa_r+0x59c>)
 800561a:	f7fa fda5 	bl	8000168 <__aeabi_dsub>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005626:	462a      	mov	r2, r5
 8005628:	4633      	mov	r3, r6
 800562a:	f7fb f9e5 	bl	80009f8 <__aeabi_dcmpgt>
 800562e:	2800      	cmp	r0, #0
 8005630:	f040 8298 	bne.w	8005b64 <_dtoa_r+0x964>
 8005634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005638:	462a      	mov	r2, r5
 800563a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800563e:	f7fb f9bd 	bl	80009bc <__aeabi_dcmplt>
 8005642:	bb38      	cbnz	r0, 8005694 <_dtoa_r+0x494>
 8005644:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005648:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800564c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800564e:	2b00      	cmp	r3, #0
 8005650:	f2c0 8157 	blt.w	8005902 <_dtoa_r+0x702>
 8005654:	2f0e      	cmp	r7, #14
 8005656:	f300 8154 	bgt.w	8005902 <_dtoa_r+0x702>
 800565a:	4b4b      	ldr	r3, [pc, #300]	@ (8005788 <_dtoa_r+0x588>)
 800565c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005660:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005664:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800566a:	2b00      	cmp	r3, #0
 800566c:	f280 80e5 	bge.w	800583a <_dtoa_r+0x63a>
 8005670:	9b08      	ldr	r3, [sp, #32]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f300 80e1 	bgt.w	800583a <_dtoa_r+0x63a>
 8005678:	d10c      	bne.n	8005694 <_dtoa_r+0x494>
 800567a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800567e:	2200      	movs	r2, #0
 8005680:	4b46      	ldr	r3, [pc, #280]	@ (800579c <_dtoa_r+0x59c>)
 8005682:	f7fa ff29 	bl	80004d8 <__aeabi_dmul>
 8005686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800568a:	f7fb f9ab 	bl	80009e4 <__aeabi_dcmpge>
 800568e:	2800      	cmp	r0, #0
 8005690:	f000 8266 	beq.w	8005b60 <_dtoa_r+0x960>
 8005694:	2400      	movs	r4, #0
 8005696:	4625      	mov	r5, r4
 8005698:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800569a:	4656      	mov	r6, sl
 800569c:	ea6f 0803 	mvn.w	r8, r3
 80056a0:	2700      	movs	r7, #0
 80056a2:	4621      	mov	r1, r4
 80056a4:	4648      	mov	r0, r9
 80056a6:	f000 fcbd 	bl	8006024 <_Bfree>
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	f000 80bd 	beq.w	800582a <_dtoa_r+0x62a>
 80056b0:	b12f      	cbz	r7, 80056be <_dtoa_r+0x4be>
 80056b2:	42af      	cmp	r7, r5
 80056b4:	d003      	beq.n	80056be <_dtoa_r+0x4be>
 80056b6:	4639      	mov	r1, r7
 80056b8:	4648      	mov	r0, r9
 80056ba:	f000 fcb3 	bl	8006024 <_Bfree>
 80056be:	4629      	mov	r1, r5
 80056c0:	4648      	mov	r0, r9
 80056c2:	f000 fcaf 	bl	8006024 <_Bfree>
 80056c6:	e0b0      	b.n	800582a <_dtoa_r+0x62a>
 80056c8:	07e2      	lsls	r2, r4, #31
 80056ca:	d505      	bpl.n	80056d8 <_dtoa_r+0x4d8>
 80056cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056d0:	f7fa ff02 	bl	80004d8 <__aeabi_dmul>
 80056d4:	2301      	movs	r3, #1
 80056d6:	3601      	adds	r6, #1
 80056d8:	1064      	asrs	r4, r4, #1
 80056da:	3508      	adds	r5, #8
 80056dc:	e762      	b.n	80055a4 <_dtoa_r+0x3a4>
 80056de:	2602      	movs	r6, #2
 80056e0:	e765      	b.n	80055ae <_dtoa_r+0x3ae>
 80056e2:	46b8      	mov	r8, r7
 80056e4:	9c08      	ldr	r4, [sp, #32]
 80056e6:	e784      	b.n	80055f2 <_dtoa_r+0x3f2>
 80056e8:	4b27      	ldr	r3, [pc, #156]	@ (8005788 <_dtoa_r+0x588>)
 80056ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80056ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80056f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056f4:	4454      	add	r4, sl
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d054      	beq.n	80057a4 <_dtoa_r+0x5a4>
 80056fa:	2000      	movs	r0, #0
 80056fc:	4928      	ldr	r1, [pc, #160]	@ (80057a0 <_dtoa_r+0x5a0>)
 80056fe:	f7fb f815 	bl	800072c <__aeabi_ddiv>
 8005702:	4633      	mov	r3, r6
 8005704:	462a      	mov	r2, r5
 8005706:	f7fa fd2f 	bl	8000168 <__aeabi_dsub>
 800570a:	4656      	mov	r6, sl
 800570c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005714:	f7fb f990 	bl	8000a38 <__aeabi_d2iz>
 8005718:	4605      	mov	r5, r0
 800571a:	f7fa fe73 	bl	8000404 <__aeabi_i2d>
 800571e:	4602      	mov	r2, r0
 8005720:	460b      	mov	r3, r1
 8005722:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005726:	f7fa fd1f 	bl	8000168 <__aeabi_dsub>
 800572a:	4602      	mov	r2, r0
 800572c:	460b      	mov	r3, r1
 800572e:	3530      	adds	r5, #48	@ 0x30
 8005730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005734:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005738:	f806 5b01 	strb.w	r5, [r6], #1
 800573c:	f7fb f93e 	bl	80009bc <__aeabi_dcmplt>
 8005740:	2800      	cmp	r0, #0
 8005742:	d172      	bne.n	800582a <_dtoa_r+0x62a>
 8005744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005748:	2000      	movs	r0, #0
 800574a:	4911      	ldr	r1, [pc, #68]	@ (8005790 <_dtoa_r+0x590>)
 800574c:	f7fa fd0c 	bl	8000168 <__aeabi_dsub>
 8005750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005754:	f7fb f932 	bl	80009bc <__aeabi_dcmplt>
 8005758:	2800      	cmp	r0, #0
 800575a:	f040 80b4 	bne.w	80058c6 <_dtoa_r+0x6c6>
 800575e:	42a6      	cmp	r6, r4
 8005760:	f43f af70 	beq.w	8005644 <_dtoa_r+0x444>
 8005764:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005768:	2200      	movs	r2, #0
 800576a:	4b0a      	ldr	r3, [pc, #40]	@ (8005794 <_dtoa_r+0x594>)
 800576c:	f7fa feb4 	bl	80004d8 <__aeabi_dmul>
 8005770:	2200      	movs	r2, #0
 8005772:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005776:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <_dtoa_r+0x594>)
 800577c:	f7fa feac 	bl	80004d8 <__aeabi_dmul>
 8005780:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005784:	e7c4      	b.n	8005710 <_dtoa_r+0x510>
 8005786:	bf00      	nop
 8005788:	08008f98 	.word	0x08008f98
 800578c:	08008f70 	.word	0x08008f70
 8005790:	3ff00000 	.word	0x3ff00000
 8005794:	40240000 	.word	0x40240000
 8005798:	401c0000 	.word	0x401c0000
 800579c:	40140000 	.word	0x40140000
 80057a0:	3fe00000 	.word	0x3fe00000
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fa fe96 	bl	80004d8 <__aeabi_dmul>
 80057ac:	4656      	mov	r6, sl
 80057ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80057b2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80057b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b8:	f7fb f93e 	bl	8000a38 <__aeabi_d2iz>
 80057bc:	4605      	mov	r5, r0
 80057be:	f7fa fe21 	bl	8000404 <__aeabi_i2d>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ca:	f7fa fccd 	bl	8000168 <__aeabi_dsub>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	3530      	adds	r5, #48	@ 0x30
 80057d4:	f806 5b01 	strb.w	r5, [r6], #1
 80057d8:	42a6      	cmp	r6, r4
 80057da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	d124      	bne.n	800582e <_dtoa_r+0x62e>
 80057e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80057e8:	4bae      	ldr	r3, [pc, #696]	@ (8005aa4 <_dtoa_r+0x8a4>)
 80057ea:	f7fa fcbf 	bl	800016c <__adddf3>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057f6:	f7fb f8ff 	bl	80009f8 <__aeabi_dcmpgt>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d163      	bne.n	80058c6 <_dtoa_r+0x6c6>
 80057fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005802:	2000      	movs	r0, #0
 8005804:	49a7      	ldr	r1, [pc, #668]	@ (8005aa4 <_dtoa_r+0x8a4>)
 8005806:	f7fa fcaf 	bl	8000168 <__aeabi_dsub>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005812:	f7fb f8d3 	bl	80009bc <__aeabi_dcmplt>
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f af14 	beq.w	8005644 <_dtoa_r+0x444>
 800581c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800581e:	1e73      	subs	r3, r6, #1
 8005820:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005822:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005826:	2b30      	cmp	r3, #48	@ 0x30
 8005828:	d0f8      	beq.n	800581c <_dtoa_r+0x61c>
 800582a:	4647      	mov	r7, r8
 800582c:	e03b      	b.n	80058a6 <_dtoa_r+0x6a6>
 800582e:	4b9e      	ldr	r3, [pc, #632]	@ (8005aa8 <_dtoa_r+0x8a8>)
 8005830:	f7fa fe52 	bl	80004d8 <__aeabi_dmul>
 8005834:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005838:	e7bc      	b.n	80057b4 <_dtoa_r+0x5b4>
 800583a:	4656      	mov	r6, sl
 800583c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005844:	4620      	mov	r0, r4
 8005846:	4629      	mov	r1, r5
 8005848:	f7fa ff70 	bl	800072c <__aeabi_ddiv>
 800584c:	f7fb f8f4 	bl	8000a38 <__aeabi_d2iz>
 8005850:	4680      	mov	r8, r0
 8005852:	f7fa fdd7 	bl	8000404 <__aeabi_i2d>
 8005856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800585a:	f7fa fe3d 	bl	80004d8 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fc7f 	bl	8000168 <__aeabi_dsub>
 800586a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800586e:	9d08      	ldr	r5, [sp, #32]
 8005870:	f806 4b01 	strb.w	r4, [r6], #1
 8005874:	eba6 040a 	sub.w	r4, r6, sl
 8005878:	42a5      	cmp	r5, r4
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	d133      	bne.n	80058e8 <_dtoa_r+0x6e8>
 8005880:	f7fa fc74 	bl	800016c <__adddf3>
 8005884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005888:	4604      	mov	r4, r0
 800588a:	460d      	mov	r5, r1
 800588c:	f7fb f8b4 	bl	80009f8 <__aeabi_dcmpgt>
 8005890:	b9c0      	cbnz	r0, 80058c4 <_dtoa_r+0x6c4>
 8005892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f885 	bl	80009a8 <__aeabi_dcmpeq>
 800589e:	b110      	cbz	r0, 80058a6 <_dtoa_r+0x6a6>
 80058a0:	f018 0f01 	tst.w	r8, #1
 80058a4:	d10e      	bne.n	80058c4 <_dtoa_r+0x6c4>
 80058a6:	4648      	mov	r0, r9
 80058a8:	9903      	ldr	r1, [sp, #12]
 80058aa:	f000 fbbb 	bl	8006024 <_Bfree>
 80058ae:	2300      	movs	r3, #0
 80058b0:	7033      	strb	r3, [r6, #0]
 80058b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80058b4:	3701      	adds	r7, #1
 80058b6:	601f      	str	r7, [r3, #0]
 80058b8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 824b 	beq.w	8005d56 <_dtoa_r+0xb56>
 80058c0:	601e      	str	r6, [r3, #0]
 80058c2:	e248      	b.n	8005d56 <_dtoa_r+0xb56>
 80058c4:	46b8      	mov	r8, r7
 80058c6:	4633      	mov	r3, r6
 80058c8:	461e      	mov	r6, r3
 80058ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80058ce:	2a39      	cmp	r2, #57	@ 0x39
 80058d0:	d106      	bne.n	80058e0 <_dtoa_r+0x6e0>
 80058d2:	459a      	cmp	sl, r3
 80058d4:	d1f8      	bne.n	80058c8 <_dtoa_r+0x6c8>
 80058d6:	2230      	movs	r2, #48	@ 0x30
 80058d8:	f108 0801 	add.w	r8, r8, #1
 80058dc:	f88a 2000 	strb.w	r2, [sl]
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	3201      	adds	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e7a0      	b.n	800582a <_dtoa_r+0x62a>
 80058e8:	2200      	movs	r2, #0
 80058ea:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa8 <_dtoa_r+0x8a8>)
 80058ec:	f7fa fdf4 	bl	80004d8 <__aeabi_dmul>
 80058f0:	2200      	movs	r2, #0
 80058f2:	2300      	movs	r3, #0
 80058f4:	4604      	mov	r4, r0
 80058f6:	460d      	mov	r5, r1
 80058f8:	f7fb f856 	bl	80009a8 <__aeabi_dcmpeq>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d09f      	beq.n	8005840 <_dtoa_r+0x640>
 8005900:	e7d1      	b.n	80058a6 <_dtoa_r+0x6a6>
 8005902:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005904:	2a00      	cmp	r2, #0
 8005906:	f000 80ea 	beq.w	8005ade <_dtoa_r+0x8de>
 800590a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800590c:	2a01      	cmp	r2, #1
 800590e:	f300 80cd 	bgt.w	8005aac <_dtoa_r+0x8ac>
 8005912:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005914:	2a00      	cmp	r2, #0
 8005916:	f000 80c1 	beq.w	8005a9c <_dtoa_r+0x89c>
 800591a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800591e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005920:	9e04      	ldr	r6, [sp, #16]
 8005922:	9a04      	ldr	r2, [sp, #16]
 8005924:	2101      	movs	r1, #1
 8005926:	441a      	add	r2, r3
 8005928:	9204      	str	r2, [sp, #16]
 800592a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800592c:	4648      	mov	r0, r9
 800592e:	441a      	add	r2, r3
 8005930:	9209      	str	r2, [sp, #36]	@ 0x24
 8005932:	f000 fc75 	bl	8006220 <__i2b>
 8005936:	4605      	mov	r5, r0
 8005938:	b166      	cbz	r6, 8005954 <_dtoa_r+0x754>
 800593a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	dd09      	ble.n	8005954 <_dtoa_r+0x754>
 8005940:	42b3      	cmp	r3, r6
 8005942:	bfa8      	it	ge
 8005944:	4633      	movge	r3, r6
 8005946:	9a04      	ldr	r2, [sp, #16]
 8005948:	1af6      	subs	r6, r6, r3
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	9204      	str	r2, [sp, #16]
 800594e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	9309      	str	r3, [sp, #36]	@ 0x24
 8005954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005956:	b30b      	cbz	r3, 800599c <_dtoa_r+0x79c>
 8005958:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80c6 	beq.w	8005aec <_dtoa_r+0x8ec>
 8005960:	2c00      	cmp	r4, #0
 8005962:	f000 80c0 	beq.w	8005ae6 <_dtoa_r+0x8e6>
 8005966:	4629      	mov	r1, r5
 8005968:	4622      	mov	r2, r4
 800596a:	4648      	mov	r0, r9
 800596c:	f000 fd10 	bl	8006390 <__pow5mult>
 8005970:	9a03      	ldr	r2, [sp, #12]
 8005972:	4601      	mov	r1, r0
 8005974:	4605      	mov	r5, r0
 8005976:	4648      	mov	r0, r9
 8005978:	f000 fc68 	bl	800624c <__multiply>
 800597c:	9903      	ldr	r1, [sp, #12]
 800597e:	4680      	mov	r8, r0
 8005980:	4648      	mov	r0, r9
 8005982:	f000 fb4f 	bl	8006024 <_Bfree>
 8005986:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005988:	1b1b      	subs	r3, r3, r4
 800598a:	930a      	str	r3, [sp, #40]	@ 0x28
 800598c:	f000 80b1 	beq.w	8005af2 <_dtoa_r+0x8f2>
 8005990:	4641      	mov	r1, r8
 8005992:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005994:	4648      	mov	r0, r9
 8005996:	f000 fcfb 	bl	8006390 <__pow5mult>
 800599a:	9003      	str	r0, [sp, #12]
 800599c:	2101      	movs	r1, #1
 800599e:	4648      	mov	r0, r9
 80059a0:	f000 fc3e 	bl	8006220 <__i2b>
 80059a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059a6:	4604      	mov	r4, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 81d8 	beq.w	8005d5e <_dtoa_r+0xb5e>
 80059ae:	461a      	mov	r2, r3
 80059b0:	4601      	mov	r1, r0
 80059b2:	4648      	mov	r0, r9
 80059b4:	f000 fcec 	bl	8006390 <__pow5mult>
 80059b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059ba:	4604      	mov	r4, r0
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f300 809f 	bgt.w	8005b00 <_dtoa_r+0x900>
 80059c2:	9b06      	ldr	r3, [sp, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8097 	bne.w	8005af8 <_dtoa_r+0x8f8>
 80059ca:	9b07      	ldr	r3, [sp, #28]
 80059cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 8093 	bne.w	8005afc <_dtoa_r+0x8fc>
 80059d6:	9b07      	ldr	r3, [sp, #28]
 80059d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059dc:	0d1b      	lsrs	r3, r3, #20
 80059de:	051b      	lsls	r3, r3, #20
 80059e0:	b133      	cbz	r3, 80059f0 <_dtoa_r+0x7f0>
 80059e2:	9b04      	ldr	r3, [sp, #16]
 80059e4:	3301      	adds	r3, #1
 80059e6:	9304      	str	r3, [sp, #16]
 80059e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ea:	3301      	adds	r3, #1
 80059ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ee:	2301      	movs	r3, #1
 80059f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80059f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 81b8 	beq.w	8005d6a <_dtoa_r+0xb6a>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a00:	6918      	ldr	r0, [r3, #16]
 8005a02:	f000 fbc1 	bl	8006188 <__hi0bits>
 8005a06:	f1c0 0020 	rsb	r0, r0, #32
 8005a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a0c:	4418      	add	r0, r3
 8005a0e:	f010 001f 	ands.w	r0, r0, #31
 8005a12:	f000 8082 	beq.w	8005b1a <_dtoa_r+0x91a>
 8005a16:	f1c0 0320 	rsb	r3, r0, #32
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	dd73      	ble.n	8005b06 <_dtoa_r+0x906>
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	f1c0 001c 	rsb	r0, r0, #28
 8005a24:	4403      	add	r3, r0
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a2a:	4406      	add	r6, r0
 8005a2c:	4403      	add	r3, r0
 8005a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	dd05      	ble.n	8005a42 <_dtoa_r+0x842>
 8005a36:	461a      	mov	r2, r3
 8005a38:	4648      	mov	r0, r9
 8005a3a:	9903      	ldr	r1, [sp, #12]
 8005a3c:	f000 fd02 	bl	8006444 <__lshift>
 8005a40:	9003      	str	r0, [sp, #12]
 8005a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dd05      	ble.n	8005a54 <_dtoa_r+0x854>
 8005a48:	4621      	mov	r1, r4
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	4648      	mov	r0, r9
 8005a4e:	f000 fcf9 	bl	8006444 <__lshift>
 8005a52:	4604      	mov	r4, r0
 8005a54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d061      	beq.n	8005b1e <_dtoa_r+0x91e>
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	9803      	ldr	r0, [sp, #12]
 8005a5e:	f000 fd5d 	bl	800651c <__mcmp>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	da5b      	bge.n	8005b1e <_dtoa_r+0x91e>
 8005a66:	2300      	movs	r3, #0
 8005a68:	220a      	movs	r2, #10
 8005a6a:	4648      	mov	r0, r9
 8005a6c:	9903      	ldr	r1, [sp, #12]
 8005a6e:	f000 fafb 	bl	8006068 <__multadd>
 8005a72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a74:	f107 38ff 	add.w	r8, r7, #4294967295
 8005a78:	9003      	str	r0, [sp, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 8177 	beq.w	8005d6e <_dtoa_r+0xb6e>
 8005a80:	4629      	mov	r1, r5
 8005a82:	2300      	movs	r3, #0
 8005a84:	220a      	movs	r2, #10
 8005a86:	4648      	mov	r0, r9
 8005a88:	f000 faee 	bl	8006068 <__multadd>
 8005a8c:	f1bb 0f00 	cmp.w	fp, #0
 8005a90:	4605      	mov	r5, r0
 8005a92:	dc6f      	bgt.n	8005b74 <_dtoa_r+0x974>
 8005a94:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	dc49      	bgt.n	8005b2e <_dtoa_r+0x92e>
 8005a9a:	e06b      	b.n	8005b74 <_dtoa_r+0x974>
 8005a9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005aa2:	e73c      	b.n	800591e <_dtoa_r+0x71e>
 8005aa4:	3fe00000 	.word	0x3fe00000
 8005aa8:	40240000 	.word	0x40240000
 8005aac:	9b08      	ldr	r3, [sp, #32]
 8005aae:	1e5c      	subs	r4, r3, #1
 8005ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ab2:	42a3      	cmp	r3, r4
 8005ab4:	db09      	blt.n	8005aca <_dtoa_r+0x8ca>
 8005ab6:	1b1c      	subs	r4, r3, r4
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f6bf af30 	bge.w	8005920 <_dtoa_r+0x720>
 8005ac0:	9b04      	ldr	r3, [sp, #16]
 8005ac2:	9a08      	ldr	r2, [sp, #32]
 8005ac4:	1a9e      	subs	r6, r3, r2
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e72b      	b.n	8005922 <_dtoa_r+0x722>
 8005aca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005acc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ace:	1ae3      	subs	r3, r4, r3
 8005ad0:	441a      	add	r2, r3
 8005ad2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ad4:	9e04      	ldr	r6, [sp, #16]
 8005ad6:	2400      	movs	r4, #0
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	920e      	str	r2, [sp, #56]	@ 0x38
 8005adc:	e721      	b.n	8005922 <_dtoa_r+0x722>
 8005ade:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005ae0:	9e04      	ldr	r6, [sp, #16]
 8005ae2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005ae4:	e728      	b.n	8005938 <_dtoa_r+0x738>
 8005ae6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005aea:	e751      	b.n	8005990 <_dtoa_r+0x790>
 8005aec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005aee:	9903      	ldr	r1, [sp, #12]
 8005af0:	e750      	b.n	8005994 <_dtoa_r+0x794>
 8005af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005af6:	e751      	b.n	800599c <_dtoa_r+0x79c>
 8005af8:	2300      	movs	r3, #0
 8005afa:	e779      	b.n	80059f0 <_dtoa_r+0x7f0>
 8005afc:	9b06      	ldr	r3, [sp, #24]
 8005afe:	e777      	b.n	80059f0 <_dtoa_r+0x7f0>
 8005b00:	2300      	movs	r3, #0
 8005b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b04:	e779      	b.n	80059fa <_dtoa_r+0x7fa>
 8005b06:	d093      	beq.n	8005a30 <_dtoa_r+0x830>
 8005b08:	9a04      	ldr	r2, [sp, #16]
 8005b0a:	331c      	adds	r3, #28
 8005b0c:	441a      	add	r2, r3
 8005b0e:	9204      	str	r2, [sp, #16]
 8005b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b12:	441e      	add	r6, r3
 8005b14:	441a      	add	r2, r3
 8005b16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b18:	e78a      	b.n	8005a30 <_dtoa_r+0x830>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	e7f4      	b.n	8005b08 <_dtoa_r+0x908>
 8005b1e:	9b08      	ldr	r3, [sp, #32]
 8005b20:	46b8      	mov	r8, r7
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc20      	bgt.n	8005b68 <_dtoa_r+0x968>
 8005b26:	469b      	mov	fp, r3
 8005b28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	dd1e      	ble.n	8005b6c <_dtoa_r+0x96c>
 8005b2e:	f1bb 0f00 	cmp.w	fp, #0
 8005b32:	f47f adb1 	bne.w	8005698 <_dtoa_r+0x498>
 8005b36:	4621      	mov	r1, r4
 8005b38:	465b      	mov	r3, fp
 8005b3a:	2205      	movs	r2, #5
 8005b3c:	4648      	mov	r0, r9
 8005b3e:	f000 fa93 	bl	8006068 <__multadd>
 8005b42:	4601      	mov	r1, r0
 8005b44:	4604      	mov	r4, r0
 8005b46:	9803      	ldr	r0, [sp, #12]
 8005b48:	f000 fce8 	bl	800651c <__mcmp>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f77f ada3 	ble.w	8005698 <_dtoa_r+0x498>
 8005b52:	4656      	mov	r6, sl
 8005b54:	2331      	movs	r3, #49	@ 0x31
 8005b56:	f108 0801 	add.w	r8, r8, #1
 8005b5a:	f806 3b01 	strb.w	r3, [r6], #1
 8005b5e:	e59f      	b.n	80056a0 <_dtoa_r+0x4a0>
 8005b60:	46b8      	mov	r8, r7
 8005b62:	9c08      	ldr	r4, [sp, #32]
 8005b64:	4625      	mov	r5, r4
 8005b66:	e7f4      	b.n	8005b52 <_dtoa_r+0x952>
 8005b68:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005b6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8101 	beq.w	8005d76 <_dtoa_r+0xb76>
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	dd05      	ble.n	8005b84 <_dtoa_r+0x984>
 8005b78:	4629      	mov	r1, r5
 8005b7a:	4632      	mov	r2, r6
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 fc61 	bl	8006444 <__lshift>
 8005b82:	4605      	mov	r5, r0
 8005b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d05c      	beq.n	8005c44 <_dtoa_r+0xa44>
 8005b8a:	4648      	mov	r0, r9
 8005b8c:	6869      	ldr	r1, [r5, #4]
 8005b8e:	f000 fa09 	bl	8005fa4 <_Balloc>
 8005b92:	4606      	mov	r6, r0
 8005b94:	b928      	cbnz	r0, 8005ba2 <_dtoa_r+0x9a2>
 8005b96:	4602      	mov	r2, r0
 8005b98:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005b9c:	4b80      	ldr	r3, [pc, #512]	@ (8005da0 <_dtoa_r+0xba0>)
 8005b9e:	f7ff bb43 	b.w	8005228 <_dtoa_r+0x28>
 8005ba2:	692a      	ldr	r2, [r5, #16]
 8005ba4:	f105 010c 	add.w	r1, r5, #12
 8005ba8:	3202      	adds	r2, #2
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	300c      	adds	r0, #12
 8005bae:	f7ff fa8a 	bl	80050c6 <memcpy>
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4648      	mov	r0, r9
 8005bb8:	f000 fc44 	bl	8006444 <__lshift>
 8005bbc:	462f      	mov	r7, r5
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	f10a 0301 	add.w	r3, sl, #1
 8005bc4:	9304      	str	r3, [sp, #16]
 8005bc6:	eb0a 030b 	add.w	r3, sl, fp
 8005bca:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bcc:	9b06      	ldr	r3, [sp, #24]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd4:	9b04      	ldr	r3, [sp, #16]
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	9803      	ldr	r0, [sp, #12]
 8005bda:	f103 3bff 	add.w	fp, r3, #4294967295
 8005bde:	f7ff fa85 	bl	80050ec <quorem>
 8005be2:	4603      	mov	r3, r0
 8005be4:	4639      	mov	r1, r7
 8005be6:	3330      	adds	r3, #48	@ 0x30
 8005be8:	9006      	str	r0, [sp, #24]
 8005bea:	9803      	ldr	r0, [sp, #12]
 8005bec:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bee:	f000 fc95 	bl	800651c <__mcmp>
 8005bf2:	462a      	mov	r2, r5
 8005bf4:	9008      	str	r0, [sp, #32]
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	4648      	mov	r0, r9
 8005bfa:	f000 fcab 	bl	8006554 <__mdiff>
 8005bfe:	68c2      	ldr	r2, [r0, #12]
 8005c00:	4606      	mov	r6, r0
 8005c02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c04:	bb02      	cbnz	r2, 8005c48 <_dtoa_r+0xa48>
 8005c06:	4601      	mov	r1, r0
 8005c08:	9803      	ldr	r0, [sp, #12]
 8005c0a:	f000 fc87 	bl	800651c <__mcmp>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c12:	4631      	mov	r1, r6
 8005c14:	4648      	mov	r0, r9
 8005c16:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005c1a:	f000 fa03 	bl	8006024 <_Bfree>
 8005c1e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005c22:	9e04      	ldr	r6, [sp, #16]
 8005c24:	ea42 0103 	orr.w	r1, r2, r3
 8005c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2a:	4319      	orrs	r1, r3
 8005c2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c2e:	d10d      	bne.n	8005c4c <_dtoa_r+0xa4c>
 8005c30:	2b39      	cmp	r3, #57	@ 0x39
 8005c32:	d027      	beq.n	8005c84 <_dtoa_r+0xa84>
 8005c34:	9a08      	ldr	r2, [sp, #32]
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	dd01      	ble.n	8005c3e <_dtoa_r+0xa3e>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	3331      	adds	r3, #49	@ 0x31
 8005c3e:	f88b 3000 	strb.w	r3, [fp]
 8005c42:	e52e      	b.n	80056a2 <_dtoa_r+0x4a2>
 8005c44:	4628      	mov	r0, r5
 8005c46:	e7b9      	b.n	8005bbc <_dtoa_r+0x9bc>
 8005c48:	2201      	movs	r2, #1
 8005c4a:	e7e2      	b.n	8005c12 <_dtoa_r+0xa12>
 8005c4c:	9908      	ldr	r1, [sp, #32]
 8005c4e:	2900      	cmp	r1, #0
 8005c50:	db04      	blt.n	8005c5c <_dtoa_r+0xa5c>
 8005c52:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005c54:	4301      	orrs	r1, r0
 8005c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c58:	4301      	orrs	r1, r0
 8005c5a:	d120      	bne.n	8005c9e <_dtoa_r+0xa9e>
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	ddee      	ble.n	8005c3e <_dtoa_r+0xa3e>
 8005c60:	2201      	movs	r2, #1
 8005c62:	9903      	ldr	r1, [sp, #12]
 8005c64:	4648      	mov	r0, r9
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	f000 fbec 	bl	8006444 <__lshift>
 8005c6c:	4621      	mov	r1, r4
 8005c6e:	9003      	str	r0, [sp, #12]
 8005c70:	f000 fc54 	bl	800651c <__mcmp>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	9b04      	ldr	r3, [sp, #16]
 8005c78:	dc02      	bgt.n	8005c80 <_dtoa_r+0xa80>
 8005c7a:	d1e0      	bne.n	8005c3e <_dtoa_r+0xa3e>
 8005c7c:	07da      	lsls	r2, r3, #31
 8005c7e:	d5de      	bpl.n	8005c3e <_dtoa_r+0xa3e>
 8005c80:	2b39      	cmp	r3, #57	@ 0x39
 8005c82:	d1da      	bne.n	8005c3a <_dtoa_r+0xa3a>
 8005c84:	2339      	movs	r3, #57	@ 0x39
 8005c86:	f88b 3000 	strb.w	r3, [fp]
 8005c8a:	4633      	mov	r3, r6
 8005c8c:	461e      	mov	r6, r3
 8005c8e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	2a39      	cmp	r2, #57	@ 0x39
 8005c96:	d04e      	beq.n	8005d36 <_dtoa_r+0xb36>
 8005c98:	3201      	adds	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e501      	b.n	80056a2 <_dtoa_r+0x4a2>
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	dd03      	ble.n	8005caa <_dtoa_r+0xaaa>
 8005ca2:	2b39      	cmp	r3, #57	@ 0x39
 8005ca4:	d0ee      	beq.n	8005c84 <_dtoa_r+0xa84>
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	e7c9      	b.n	8005c3e <_dtoa_r+0xa3e>
 8005caa:	9a04      	ldr	r2, [sp, #16]
 8005cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005cb2:	428a      	cmp	r2, r1
 8005cb4:	d028      	beq.n	8005d08 <_dtoa_r+0xb08>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	220a      	movs	r2, #10
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	4648      	mov	r0, r9
 8005cbe:	f000 f9d3 	bl	8006068 <__multadd>
 8005cc2:	42af      	cmp	r7, r5
 8005cc4:	9003      	str	r0, [sp, #12]
 8005cc6:	f04f 0300 	mov.w	r3, #0
 8005cca:	f04f 020a 	mov.w	r2, #10
 8005cce:	4639      	mov	r1, r7
 8005cd0:	4648      	mov	r0, r9
 8005cd2:	d107      	bne.n	8005ce4 <_dtoa_r+0xae4>
 8005cd4:	f000 f9c8 	bl	8006068 <__multadd>
 8005cd8:	4607      	mov	r7, r0
 8005cda:	4605      	mov	r5, r0
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	e777      	b.n	8005bd4 <_dtoa_r+0x9d4>
 8005ce4:	f000 f9c0 	bl	8006068 <__multadd>
 8005ce8:	4629      	mov	r1, r5
 8005cea:	4607      	mov	r7, r0
 8005cec:	2300      	movs	r3, #0
 8005cee:	220a      	movs	r2, #10
 8005cf0:	4648      	mov	r0, r9
 8005cf2:	f000 f9b9 	bl	8006068 <__multadd>
 8005cf6:	4605      	mov	r5, r0
 8005cf8:	e7f0      	b.n	8005cdc <_dtoa_r+0xadc>
 8005cfa:	f1bb 0f00 	cmp.w	fp, #0
 8005cfe:	bfcc      	ite	gt
 8005d00:	465e      	movgt	r6, fp
 8005d02:	2601      	movle	r6, #1
 8005d04:	2700      	movs	r7, #0
 8005d06:	4456      	add	r6, sl
 8005d08:	2201      	movs	r2, #1
 8005d0a:	9903      	ldr	r1, [sp, #12]
 8005d0c:	4648      	mov	r0, r9
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	f000 fb98 	bl	8006444 <__lshift>
 8005d14:	4621      	mov	r1, r4
 8005d16:	9003      	str	r0, [sp, #12]
 8005d18:	f000 fc00 	bl	800651c <__mcmp>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	dcb4      	bgt.n	8005c8a <_dtoa_r+0xa8a>
 8005d20:	d102      	bne.n	8005d28 <_dtoa_r+0xb28>
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	07db      	lsls	r3, r3, #31
 8005d26:	d4b0      	bmi.n	8005c8a <_dtoa_r+0xa8a>
 8005d28:	4633      	mov	r3, r6
 8005d2a:	461e      	mov	r6, r3
 8005d2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d30:	2a30      	cmp	r2, #48	@ 0x30
 8005d32:	d0fa      	beq.n	8005d2a <_dtoa_r+0xb2a>
 8005d34:	e4b5      	b.n	80056a2 <_dtoa_r+0x4a2>
 8005d36:	459a      	cmp	sl, r3
 8005d38:	d1a8      	bne.n	8005c8c <_dtoa_r+0xa8c>
 8005d3a:	2331      	movs	r3, #49	@ 0x31
 8005d3c:	f108 0801 	add.w	r8, r8, #1
 8005d40:	f88a 3000 	strb.w	r3, [sl]
 8005d44:	e4ad      	b.n	80056a2 <_dtoa_r+0x4a2>
 8005d46:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005d48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005da4 <_dtoa_r+0xba4>
 8005d4c:	b11b      	cbz	r3, 8005d56 <_dtoa_r+0xb56>
 8005d4e:	f10a 0308 	add.w	r3, sl, #8
 8005d52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4650      	mov	r0, sl
 8005d58:	b017      	add	sp, #92	@ 0x5c
 8005d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	f77f ae2e 	ble.w	80059c2 <_dtoa_r+0x7c2>
 8005d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	e64d      	b.n	8005a0a <_dtoa_r+0x80a>
 8005d6e:	f1bb 0f00 	cmp.w	fp, #0
 8005d72:	f77f aed9 	ble.w	8005b28 <_dtoa_r+0x928>
 8005d76:	4656      	mov	r6, sl
 8005d78:	4621      	mov	r1, r4
 8005d7a:	9803      	ldr	r0, [sp, #12]
 8005d7c:	f7ff f9b6 	bl	80050ec <quorem>
 8005d80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005d84:	f806 3b01 	strb.w	r3, [r6], #1
 8005d88:	eba6 020a 	sub.w	r2, r6, sl
 8005d8c:	4593      	cmp	fp, r2
 8005d8e:	ddb4      	ble.n	8005cfa <_dtoa_r+0xafa>
 8005d90:	2300      	movs	r3, #0
 8005d92:	220a      	movs	r2, #10
 8005d94:	4648      	mov	r0, r9
 8005d96:	9903      	ldr	r1, [sp, #12]
 8005d98:	f000 f966 	bl	8006068 <__multadd>
 8005d9c:	9003      	str	r0, [sp, #12]
 8005d9e:	e7eb      	b.n	8005d78 <_dtoa_r+0xb78>
 8005da0:	08008e3f 	.word	0x08008e3f
 8005da4:	08008dc3 	.word	0x08008dc3

08005da8 <_free_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4605      	mov	r5, r0
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d040      	beq.n	8005e32 <_free_r+0x8a>
 8005db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005db4:	1f0c      	subs	r4, r1, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bfb8      	it	lt
 8005dba:	18e4      	addlt	r4, r4, r3
 8005dbc:	f000 f8e6 	bl	8005f8c <__malloc_lock>
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <_free_r+0x8c>)
 8005dc2:	6813      	ldr	r3, [r2, #0]
 8005dc4:	b933      	cbnz	r3, 8005dd4 <_free_r+0x2c>
 8005dc6:	6063      	str	r3, [r4, #4]
 8005dc8:	6014      	str	r4, [r2, #0]
 8005dca:	4628      	mov	r0, r5
 8005dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005dd0:	f000 b8e2 	b.w	8005f98 <__malloc_unlock>
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d908      	bls.n	8005dea <_free_r+0x42>
 8005dd8:	6820      	ldr	r0, [r4, #0]
 8005dda:	1821      	adds	r1, r4, r0
 8005ddc:	428b      	cmp	r3, r1
 8005dde:	bf01      	itttt	eq
 8005de0:	6819      	ldreq	r1, [r3, #0]
 8005de2:	685b      	ldreq	r3, [r3, #4]
 8005de4:	1809      	addeq	r1, r1, r0
 8005de6:	6021      	streq	r1, [r4, #0]
 8005de8:	e7ed      	b.n	8005dc6 <_free_r+0x1e>
 8005dea:	461a      	mov	r2, r3
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	b10b      	cbz	r3, 8005df4 <_free_r+0x4c>
 8005df0:	42a3      	cmp	r3, r4
 8005df2:	d9fa      	bls.n	8005dea <_free_r+0x42>
 8005df4:	6811      	ldr	r1, [r2, #0]
 8005df6:	1850      	adds	r0, r2, r1
 8005df8:	42a0      	cmp	r0, r4
 8005dfa:	d10b      	bne.n	8005e14 <_free_r+0x6c>
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	4401      	add	r1, r0
 8005e00:	1850      	adds	r0, r2, r1
 8005e02:	4283      	cmp	r3, r0
 8005e04:	6011      	str	r1, [r2, #0]
 8005e06:	d1e0      	bne.n	8005dca <_free_r+0x22>
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4408      	add	r0, r1
 8005e0e:	6010      	str	r0, [r2, #0]
 8005e10:	6053      	str	r3, [r2, #4]
 8005e12:	e7da      	b.n	8005dca <_free_r+0x22>
 8005e14:	d902      	bls.n	8005e1c <_free_r+0x74>
 8005e16:	230c      	movs	r3, #12
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	e7d6      	b.n	8005dca <_free_r+0x22>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	1821      	adds	r1, r4, r0
 8005e20:	428b      	cmp	r3, r1
 8005e22:	bf01      	itttt	eq
 8005e24:	6819      	ldreq	r1, [r3, #0]
 8005e26:	685b      	ldreq	r3, [r3, #4]
 8005e28:	1809      	addeq	r1, r1, r0
 8005e2a:	6021      	streq	r1, [r4, #0]
 8005e2c:	6063      	str	r3, [r4, #4]
 8005e2e:	6054      	str	r4, [r2, #4]
 8005e30:	e7cb      	b.n	8005dca <_free_r+0x22>
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000870 	.word	0x20000870

08005e38 <malloc>:
 8005e38:	4b02      	ldr	r3, [pc, #8]	@ (8005e44 <malloc+0xc>)
 8005e3a:	4601      	mov	r1, r0
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	f000 b825 	b.w	8005e8c <_malloc_r>
 8005e42:	bf00      	nop
 8005e44:	20000018 	.word	0x20000018

08005e48 <sbrk_aligned>:
 8005e48:	b570      	push	{r4, r5, r6, lr}
 8005e4a:	4e0f      	ldr	r6, [pc, #60]	@ (8005e88 <sbrk_aligned+0x40>)
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6831      	ldr	r1, [r6, #0]
 8005e50:	4605      	mov	r5, r0
 8005e52:	b911      	cbnz	r1, 8005e5a <sbrk_aligned+0x12>
 8005e54:	f001 fdee 	bl	8007a34 <_sbrk_r>
 8005e58:	6030      	str	r0, [r6, #0]
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f001 fde9 	bl	8007a34 <_sbrk_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d103      	bne.n	8005e6e <sbrk_aligned+0x26>
 8005e66:	f04f 34ff 	mov.w	r4, #4294967295
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	bd70      	pop	{r4, r5, r6, pc}
 8005e6e:	1cc4      	adds	r4, r0, #3
 8005e70:	f024 0403 	bic.w	r4, r4, #3
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d0f8      	beq.n	8005e6a <sbrk_aligned+0x22>
 8005e78:	1a21      	subs	r1, r4, r0
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f001 fdda 	bl	8007a34 <_sbrk_r>
 8005e80:	3001      	adds	r0, #1
 8005e82:	d1f2      	bne.n	8005e6a <sbrk_aligned+0x22>
 8005e84:	e7ef      	b.n	8005e66 <sbrk_aligned+0x1e>
 8005e86:	bf00      	nop
 8005e88:	2000086c 	.word	0x2000086c

08005e8c <_malloc_r>:
 8005e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e90:	1ccd      	adds	r5, r1, #3
 8005e92:	f025 0503 	bic.w	r5, r5, #3
 8005e96:	3508      	adds	r5, #8
 8005e98:	2d0c      	cmp	r5, #12
 8005e9a:	bf38      	it	cc
 8005e9c:	250c      	movcc	r5, #12
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	db01      	blt.n	8005ea8 <_malloc_r+0x1c>
 8005ea4:	42a9      	cmp	r1, r5
 8005ea6:	d904      	bls.n	8005eb2 <_malloc_r+0x26>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	2000      	movs	r0, #0
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f88 <_malloc_r+0xfc>
 8005eb6:	f000 f869 	bl	8005f8c <__malloc_lock>
 8005eba:	f8d8 3000 	ldr.w	r3, [r8]
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	bb44      	cbnz	r4, 8005f14 <_malloc_r+0x88>
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ffbf 	bl	8005e48 <sbrk_aligned>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	4604      	mov	r4, r0
 8005ece:	d158      	bne.n	8005f82 <_malloc_r+0xf6>
 8005ed0:	f8d8 4000 	ldr.w	r4, [r8]
 8005ed4:	4627      	mov	r7, r4
 8005ed6:	2f00      	cmp	r7, #0
 8005ed8:	d143      	bne.n	8005f62 <_malloc_r+0xd6>
 8005eda:	2c00      	cmp	r4, #0
 8005edc:	d04b      	beq.n	8005f76 <_malloc_r+0xea>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	4639      	mov	r1, r7
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	eb04 0903 	add.w	r9, r4, r3
 8005ee8:	f001 fda4 	bl	8007a34 <_sbrk_r>
 8005eec:	4581      	cmp	r9, r0
 8005eee:	d142      	bne.n	8005f76 <_malloc_r+0xea>
 8005ef0:	6821      	ldr	r1, [r4, #0]
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	1a6d      	subs	r5, r5, r1
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	f7ff ffa6 	bl	8005e48 <sbrk_aligned>
 8005efc:	3001      	adds	r0, #1
 8005efe:	d03a      	beq.n	8005f76 <_malloc_r+0xea>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	442b      	add	r3, r5
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	f8d8 3000 	ldr.w	r3, [r8]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	bb62      	cbnz	r2, 8005f68 <_malloc_r+0xdc>
 8005f0e:	f8c8 7000 	str.w	r7, [r8]
 8005f12:	e00f      	b.n	8005f34 <_malloc_r+0xa8>
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	1b52      	subs	r2, r2, r5
 8005f18:	d420      	bmi.n	8005f5c <_malloc_r+0xd0>
 8005f1a:	2a0b      	cmp	r2, #11
 8005f1c:	d917      	bls.n	8005f4e <_malloc_r+0xc2>
 8005f1e:	1961      	adds	r1, r4, r5
 8005f20:	42a3      	cmp	r3, r4
 8005f22:	6025      	str	r5, [r4, #0]
 8005f24:	bf18      	it	ne
 8005f26:	6059      	strne	r1, [r3, #4]
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	bf08      	it	eq
 8005f2c:	f8c8 1000 	streq.w	r1, [r8]
 8005f30:	5162      	str	r2, [r4, r5]
 8005f32:	604b      	str	r3, [r1, #4]
 8005f34:	4630      	mov	r0, r6
 8005f36:	f000 f82f 	bl	8005f98 <__malloc_unlock>
 8005f3a:	f104 000b 	add.w	r0, r4, #11
 8005f3e:	1d23      	adds	r3, r4, #4
 8005f40:	f020 0007 	bic.w	r0, r0, #7
 8005f44:	1ac2      	subs	r2, r0, r3
 8005f46:	bf1c      	itt	ne
 8005f48:	1a1b      	subne	r3, r3, r0
 8005f4a:	50a3      	strne	r3, [r4, r2]
 8005f4c:	e7af      	b.n	8005eae <_malloc_r+0x22>
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	bf0c      	ite	eq
 8005f54:	f8c8 2000 	streq.w	r2, [r8]
 8005f58:	605a      	strne	r2, [r3, #4]
 8005f5a:	e7eb      	b.n	8005f34 <_malloc_r+0xa8>
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	6864      	ldr	r4, [r4, #4]
 8005f60:	e7ae      	b.n	8005ec0 <_malloc_r+0x34>
 8005f62:	463c      	mov	r4, r7
 8005f64:	687f      	ldr	r7, [r7, #4]
 8005f66:	e7b6      	b.n	8005ed6 <_malloc_r+0x4a>
 8005f68:	461a      	mov	r2, r3
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	d1fb      	bne.n	8005f68 <_malloc_r+0xdc>
 8005f70:	2300      	movs	r3, #0
 8005f72:	6053      	str	r3, [r2, #4]
 8005f74:	e7de      	b.n	8005f34 <_malloc_r+0xa8>
 8005f76:	230c      	movs	r3, #12
 8005f78:	4630      	mov	r0, r6
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	f000 f80c 	bl	8005f98 <__malloc_unlock>
 8005f80:	e794      	b.n	8005eac <_malloc_r+0x20>
 8005f82:	6005      	str	r5, [r0, #0]
 8005f84:	e7d6      	b.n	8005f34 <_malloc_r+0xa8>
 8005f86:	bf00      	nop
 8005f88:	20000870 	.word	0x20000870

08005f8c <__malloc_lock>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	@ (8005f94 <__malloc_lock+0x8>)
 8005f8e:	f7ff b88a 	b.w	80050a6 <__retarget_lock_acquire_recursive>
 8005f92:	bf00      	nop
 8005f94:	20000868 	.word	0x20000868

08005f98 <__malloc_unlock>:
 8005f98:	4801      	ldr	r0, [pc, #4]	@ (8005fa0 <__malloc_unlock+0x8>)
 8005f9a:	f7ff b885 	b.w	80050a8 <__retarget_lock_release_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000868 	.word	0x20000868

08005fa4 <_Balloc>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	69c6      	ldr	r6, [r0, #28]
 8005fa8:	4604      	mov	r4, r0
 8005faa:	460d      	mov	r5, r1
 8005fac:	b976      	cbnz	r6, 8005fcc <_Balloc+0x28>
 8005fae:	2010      	movs	r0, #16
 8005fb0:	f7ff ff42 	bl	8005e38 <malloc>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	61e0      	str	r0, [r4, #28]
 8005fb8:	b920      	cbnz	r0, 8005fc4 <_Balloc+0x20>
 8005fba:	216b      	movs	r1, #107	@ 0x6b
 8005fbc:	4b17      	ldr	r3, [pc, #92]	@ (800601c <_Balloc+0x78>)
 8005fbe:	4818      	ldr	r0, [pc, #96]	@ (8006020 <_Balloc+0x7c>)
 8005fc0:	f001 fd4e 	bl	8007a60 <__assert_func>
 8005fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fc8:	6006      	str	r6, [r0, #0]
 8005fca:	60c6      	str	r6, [r0, #12]
 8005fcc:	69e6      	ldr	r6, [r4, #28]
 8005fce:	68f3      	ldr	r3, [r6, #12]
 8005fd0:	b183      	cbz	r3, 8005ff4 <_Balloc+0x50>
 8005fd2:	69e3      	ldr	r3, [r4, #28]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fda:	b9b8      	cbnz	r0, 800600c <_Balloc+0x68>
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f605 	lsl.w	r6, r1, r5
 8005fe2:	1d72      	adds	r2, r6, #5
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	0092      	lsls	r2, r2, #2
 8005fe8:	f001 fd58 	bl	8007a9c <_calloc_r>
 8005fec:	b160      	cbz	r0, 8006008 <_Balloc+0x64>
 8005fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ff2:	e00e      	b.n	8006012 <_Balloc+0x6e>
 8005ff4:	2221      	movs	r2, #33	@ 0x21
 8005ff6:	2104      	movs	r1, #4
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f001 fd4f 	bl	8007a9c <_calloc_r>
 8005ffe:	69e3      	ldr	r3, [r4, #28]
 8006000:	60f0      	str	r0, [r6, #12]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e4      	bne.n	8005fd2 <_Balloc+0x2e>
 8006008:	2000      	movs	r0, #0
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	6802      	ldr	r2, [r0, #0]
 800600e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006012:	2300      	movs	r3, #0
 8006014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006018:	e7f7      	b.n	800600a <_Balloc+0x66>
 800601a:	bf00      	nop
 800601c:	08008dd0 	.word	0x08008dd0
 8006020:	08008e50 	.word	0x08008e50

08006024 <_Bfree>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	69c6      	ldr	r6, [r0, #28]
 8006028:	4605      	mov	r5, r0
 800602a:	460c      	mov	r4, r1
 800602c:	b976      	cbnz	r6, 800604c <_Bfree+0x28>
 800602e:	2010      	movs	r0, #16
 8006030:	f7ff ff02 	bl	8005e38 <malloc>
 8006034:	4602      	mov	r2, r0
 8006036:	61e8      	str	r0, [r5, #28]
 8006038:	b920      	cbnz	r0, 8006044 <_Bfree+0x20>
 800603a:	218f      	movs	r1, #143	@ 0x8f
 800603c:	4b08      	ldr	r3, [pc, #32]	@ (8006060 <_Bfree+0x3c>)
 800603e:	4809      	ldr	r0, [pc, #36]	@ (8006064 <_Bfree+0x40>)
 8006040:	f001 fd0e 	bl	8007a60 <__assert_func>
 8006044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006048:	6006      	str	r6, [r0, #0]
 800604a:	60c6      	str	r6, [r0, #12]
 800604c:	b13c      	cbz	r4, 800605e <_Bfree+0x3a>
 800604e:	69eb      	ldr	r3, [r5, #28]
 8006050:	6862      	ldr	r2, [r4, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006058:	6021      	str	r1, [r4, #0]
 800605a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	08008dd0 	.word	0x08008dd0
 8006064:	08008e50 	.word	0x08008e50

08006068 <__multadd>:
 8006068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606c:	4607      	mov	r7, r0
 800606e:	460c      	mov	r4, r1
 8006070:	461e      	mov	r6, r3
 8006072:	2000      	movs	r0, #0
 8006074:	690d      	ldr	r5, [r1, #16]
 8006076:	f101 0c14 	add.w	ip, r1, #20
 800607a:	f8dc 3000 	ldr.w	r3, [ip]
 800607e:	3001      	adds	r0, #1
 8006080:	b299      	uxth	r1, r3
 8006082:	fb02 6101 	mla	r1, r2, r1, r6
 8006086:	0c1e      	lsrs	r6, r3, #16
 8006088:	0c0b      	lsrs	r3, r1, #16
 800608a:	fb02 3306 	mla	r3, r2, r6, r3
 800608e:	b289      	uxth	r1, r1
 8006090:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006094:	4285      	cmp	r5, r0
 8006096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800609a:	f84c 1b04 	str.w	r1, [ip], #4
 800609e:	dcec      	bgt.n	800607a <__multadd+0x12>
 80060a0:	b30e      	cbz	r6, 80060e6 <__multadd+0x7e>
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dc19      	bgt.n	80060dc <__multadd+0x74>
 80060a8:	6861      	ldr	r1, [r4, #4]
 80060aa:	4638      	mov	r0, r7
 80060ac:	3101      	adds	r1, #1
 80060ae:	f7ff ff79 	bl	8005fa4 <_Balloc>
 80060b2:	4680      	mov	r8, r0
 80060b4:	b928      	cbnz	r0, 80060c2 <__multadd+0x5a>
 80060b6:	4602      	mov	r2, r0
 80060b8:	21ba      	movs	r1, #186	@ 0xba
 80060ba:	4b0c      	ldr	r3, [pc, #48]	@ (80060ec <__multadd+0x84>)
 80060bc:	480c      	ldr	r0, [pc, #48]	@ (80060f0 <__multadd+0x88>)
 80060be:	f001 fccf 	bl	8007a60 <__assert_func>
 80060c2:	6922      	ldr	r2, [r4, #16]
 80060c4:	f104 010c 	add.w	r1, r4, #12
 80060c8:	3202      	adds	r2, #2
 80060ca:	0092      	lsls	r2, r2, #2
 80060cc:	300c      	adds	r0, #12
 80060ce:	f7fe fffa 	bl	80050c6 <memcpy>
 80060d2:	4621      	mov	r1, r4
 80060d4:	4638      	mov	r0, r7
 80060d6:	f7ff ffa5 	bl	8006024 <_Bfree>
 80060da:	4644      	mov	r4, r8
 80060dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060e0:	3501      	adds	r5, #1
 80060e2:	615e      	str	r6, [r3, #20]
 80060e4:	6125      	str	r5, [r4, #16]
 80060e6:	4620      	mov	r0, r4
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ec:	08008e3f 	.word	0x08008e3f
 80060f0:	08008e50 	.word	0x08008e50

080060f4 <__s2b>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	4615      	mov	r5, r2
 80060fa:	2209      	movs	r2, #9
 80060fc:	461f      	mov	r7, r3
 80060fe:	3308      	adds	r3, #8
 8006100:	460c      	mov	r4, r1
 8006102:	fb93 f3f2 	sdiv	r3, r3, r2
 8006106:	4606      	mov	r6, r0
 8006108:	2201      	movs	r2, #1
 800610a:	2100      	movs	r1, #0
 800610c:	429a      	cmp	r2, r3
 800610e:	db09      	blt.n	8006124 <__s2b+0x30>
 8006110:	4630      	mov	r0, r6
 8006112:	f7ff ff47 	bl	8005fa4 <_Balloc>
 8006116:	b940      	cbnz	r0, 800612a <__s2b+0x36>
 8006118:	4602      	mov	r2, r0
 800611a:	21d3      	movs	r1, #211	@ 0xd3
 800611c:	4b18      	ldr	r3, [pc, #96]	@ (8006180 <__s2b+0x8c>)
 800611e:	4819      	ldr	r0, [pc, #100]	@ (8006184 <__s2b+0x90>)
 8006120:	f001 fc9e 	bl	8007a60 <__assert_func>
 8006124:	0052      	lsls	r2, r2, #1
 8006126:	3101      	adds	r1, #1
 8006128:	e7f0      	b.n	800610c <__s2b+0x18>
 800612a:	9b08      	ldr	r3, [sp, #32]
 800612c:	2d09      	cmp	r5, #9
 800612e:	6143      	str	r3, [r0, #20]
 8006130:	f04f 0301 	mov.w	r3, #1
 8006134:	6103      	str	r3, [r0, #16]
 8006136:	dd16      	ble.n	8006166 <__s2b+0x72>
 8006138:	f104 0909 	add.w	r9, r4, #9
 800613c:	46c8      	mov	r8, r9
 800613e:	442c      	add	r4, r5
 8006140:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006144:	4601      	mov	r1, r0
 8006146:	220a      	movs	r2, #10
 8006148:	4630      	mov	r0, r6
 800614a:	3b30      	subs	r3, #48	@ 0x30
 800614c:	f7ff ff8c 	bl	8006068 <__multadd>
 8006150:	45a0      	cmp	r8, r4
 8006152:	d1f5      	bne.n	8006140 <__s2b+0x4c>
 8006154:	f1a5 0408 	sub.w	r4, r5, #8
 8006158:	444c      	add	r4, r9
 800615a:	1b2d      	subs	r5, r5, r4
 800615c:	1963      	adds	r3, r4, r5
 800615e:	42bb      	cmp	r3, r7
 8006160:	db04      	blt.n	800616c <__s2b+0x78>
 8006162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006166:	2509      	movs	r5, #9
 8006168:	340a      	adds	r4, #10
 800616a:	e7f6      	b.n	800615a <__s2b+0x66>
 800616c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006170:	4601      	mov	r1, r0
 8006172:	220a      	movs	r2, #10
 8006174:	4630      	mov	r0, r6
 8006176:	3b30      	subs	r3, #48	@ 0x30
 8006178:	f7ff ff76 	bl	8006068 <__multadd>
 800617c:	e7ee      	b.n	800615c <__s2b+0x68>
 800617e:	bf00      	nop
 8006180:	08008e3f 	.word	0x08008e3f
 8006184:	08008e50 	.word	0x08008e50

08006188 <__hi0bits>:
 8006188:	4603      	mov	r3, r0
 800618a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800618e:	bf3a      	itte	cc
 8006190:	0403      	lslcc	r3, r0, #16
 8006192:	2010      	movcc	r0, #16
 8006194:	2000      	movcs	r0, #0
 8006196:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800619a:	bf3c      	itt	cc
 800619c:	021b      	lslcc	r3, r3, #8
 800619e:	3008      	addcc	r0, #8
 80061a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a4:	bf3c      	itt	cc
 80061a6:	011b      	lslcc	r3, r3, #4
 80061a8:	3004      	addcc	r0, #4
 80061aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ae:	bf3c      	itt	cc
 80061b0:	009b      	lslcc	r3, r3, #2
 80061b2:	3002      	addcc	r0, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	db05      	blt.n	80061c4 <__hi0bits+0x3c>
 80061b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061bc:	f100 0001 	add.w	r0, r0, #1
 80061c0:	bf08      	it	eq
 80061c2:	2020      	moveq	r0, #32
 80061c4:	4770      	bx	lr

080061c6 <__lo0bits>:
 80061c6:	6803      	ldr	r3, [r0, #0]
 80061c8:	4602      	mov	r2, r0
 80061ca:	f013 0007 	ands.w	r0, r3, #7
 80061ce:	d00b      	beq.n	80061e8 <__lo0bits+0x22>
 80061d0:	07d9      	lsls	r1, r3, #31
 80061d2:	d421      	bmi.n	8006218 <__lo0bits+0x52>
 80061d4:	0798      	lsls	r0, r3, #30
 80061d6:	bf49      	itett	mi
 80061d8:	085b      	lsrmi	r3, r3, #1
 80061da:	089b      	lsrpl	r3, r3, #2
 80061dc:	2001      	movmi	r0, #1
 80061de:	6013      	strmi	r3, [r2, #0]
 80061e0:	bf5c      	itt	pl
 80061e2:	2002      	movpl	r0, #2
 80061e4:	6013      	strpl	r3, [r2, #0]
 80061e6:	4770      	bx	lr
 80061e8:	b299      	uxth	r1, r3
 80061ea:	b909      	cbnz	r1, 80061f0 <__lo0bits+0x2a>
 80061ec:	2010      	movs	r0, #16
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	b2d9      	uxtb	r1, r3
 80061f2:	b909      	cbnz	r1, 80061f8 <__lo0bits+0x32>
 80061f4:	3008      	adds	r0, #8
 80061f6:	0a1b      	lsrs	r3, r3, #8
 80061f8:	0719      	lsls	r1, r3, #28
 80061fa:	bf04      	itt	eq
 80061fc:	091b      	lsreq	r3, r3, #4
 80061fe:	3004      	addeq	r0, #4
 8006200:	0799      	lsls	r1, r3, #30
 8006202:	bf04      	itt	eq
 8006204:	089b      	lsreq	r3, r3, #2
 8006206:	3002      	addeq	r0, #2
 8006208:	07d9      	lsls	r1, r3, #31
 800620a:	d403      	bmi.n	8006214 <__lo0bits+0x4e>
 800620c:	085b      	lsrs	r3, r3, #1
 800620e:	f100 0001 	add.w	r0, r0, #1
 8006212:	d003      	beq.n	800621c <__lo0bits+0x56>
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	4770      	bx	lr
 8006218:	2000      	movs	r0, #0
 800621a:	4770      	bx	lr
 800621c:	2020      	movs	r0, #32
 800621e:	4770      	bx	lr

08006220 <__i2b>:
 8006220:	b510      	push	{r4, lr}
 8006222:	460c      	mov	r4, r1
 8006224:	2101      	movs	r1, #1
 8006226:	f7ff febd 	bl	8005fa4 <_Balloc>
 800622a:	4602      	mov	r2, r0
 800622c:	b928      	cbnz	r0, 800623a <__i2b+0x1a>
 800622e:	f240 1145 	movw	r1, #325	@ 0x145
 8006232:	4b04      	ldr	r3, [pc, #16]	@ (8006244 <__i2b+0x24>)
 8006234:	4804      	ldr	r0, [pc, #16]	@ (8006248 <__i2b+0x28>)
 8006236:	f001 fc13 	bl	8007a60 <__assert_func>
 800623a:	2301      	movs	r3, #1
 800623c:	6144      	str	r4, [r0, #20]
 800623e:	6103      	str	r3, [r0, #16]
 8006240:	bd10      	pop	{r4, pc}
 8006242:	bf00      	nop
 8006244:	08008e3f 	.word	0x08008e3f
 8006248:	08008e50 	.word	0x08008e50

0800624c <__multiply>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	4617      	mov	r7, r2
 8006252:	690a      	ldr	r2, [r1, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4689      	mov	r9, r1
 8006258:	429a      	cmp	r2, r3
 800625a:	bfa2      	ittt	ge
 800625c:	463b      	movge	r3, r7
 800625e:	460f      	movge	r7, r1
 8006260:	4699      	movge	r9, r3
 8006262:	693d      	ldr	r5, [r7, #16]
 8006264:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	eb05 060a 	add.w	r6, r5, sl
 8006270:	42b3      	cmp	r3, r6
 8006272:	b085      	sub	sp, #20
 8006274:	bfb8      	it	lt
 8006276:	3101      	addlt	r1, #1
 8006278:	f7ff fe94 	bl	8005fa4 <_Balloc>
 800627c:	b930      	cbnz	r0, 800628c <__multiply+0x40>
 800627e:	4602      	mov	r2, r0
 8006280:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006284:	4b40      	ldr	r3, [pc, #256]	@ (8006388 <__multiply+0x13c>)
 8006286:	4841      	ldr	r0, [pc, #260]	@ (800638c <__multiply+0x140>)
 8006288:	f001 fbea 	bl	8007a60 <__assert_func>
 800628c:	f100 0414 	add.w	r4, r0, #20
 8006290:	4623      	mov	r3, r4
 8006292:	2200      	movs	r2, #0
 8006294:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006298:	4573      	cmp	r3, lr
 800629a:	d320      	bcc.n	80062de <__multiply+0x92>
 800629c:	f107 0814 	add.w	r8, r7, #20
 80062a0:	f109 0114 	add.w	r1, r9, #20
 80062a4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80062a8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80062ac:	9302      	str	r3, [sp, #8]
 80062ae:	1beb      	subs	r3, r5, r7
 80062b0:	3b15      	subs	r3, #21
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	3304      	adds	r3, #4
 80062b8:	3715      	adds	r7, #21
 80062ba:	42bd      	cmp	r5, r7
 80062bc:	bf38      	it	cc
 80062be:	2304      	movcc	r3, #4
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	9b02      	ldr	r3, [sp, #8]
 80062c4:	9103      	str	r1, [sp, #12]
 80062c6:	428b      	cmp	r3, r1
 80062c8:	d80c      	bhi.n	80062e4 <__multiply+0x98>
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	dd03      	ble.n	80062d6 <__multiply+0x8a>
 80062ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d055      	beq.n	8006382 <__multiply+0x136>
 80062d6:	6106      	str	r6, [r0, #16]
 80062d8:	b005      	add	sp, #20
 80062da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062de:	f843 2b04 	str.w	r2, [r3], #4
 80062e2:	e7d9      	b.n	8006298 <__multiply+0x4c>
 80062e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80062e8:	f1ba 0f00 	cmp.w	sl, #0
 80062ec:	d01f      	beq.n	800632e <__multiply+0xe2>
 80062ee:	46c4      	mov	ip, r8
 80062f0:	46a1      	mov	r9, r4
 80062f2:	2700      	movs	r7, #0
 80062f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062f8:	f8d9 3000 	ldr.w	r3, [r9]
 80062fc:	fa1f fb82 	uxth.w	fp, r2
 8006300:	b29b      	uxth	r3, r3
 8006302:	fb0a 330b 	mla	r3, sl, fp, r3
 8006306:	443b      	add	r3, r7
 8006308:	f8d9 7000 	ldr.w	r7, [r9]
 800630c:	0c12      	lsrs	r2, r2, #16
 800630e:	0c3f      	lsrs	r7, r7, #16
 8006310:	fb0a 7202 	mla	r2, sl, r2, r7
 8006314:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006318:	b29b      	uxth	r3, r3
 800631a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800631e:	4565      	cmp	r5, ip
 8006320:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006324:	f849 3b04 	str.w	r3, [r9], #4
 8006328:	d8e4      	bhi.n	80062f4 <__multiply+0xa8>
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	50e7      	str	r7, [r4, r3]
 800632e:	9b03      	ldr	r3, [sp, #12]
 8006330:	3104      	adds	r1, #4
 8006332:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006336:	f1b9 0f00 	cmp.w	r9, #0
 800633a:	d020      	beq.n	800637e <__multiply+0x132>
 800633c:	4647      	mov	r7, r8
 800633e:	46a4      	mov	ip, r4
 8006340:	f04f 0a00 	mov.w	sl, #0
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	f8b7 b000 	ldrh.w	fp, [r7]
 800634a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800634e:	b29b      	uxth	r3, r3
 8006350:	fb09 220b 	mla	r2, r9, fp, r2
 8006354:	4452      	add	r2, sl
 8006356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635a:	f84c 3b04 	str.w	r3, [ip], #4
 800635e:	f857 3b04 	ldr.w	r3, [r7], #4
 8006362:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006366:	f8bc 3000 	ldrh.w	r3, [ip]
 800636a:	42bd      	cmp	r5, r7
 800636c:	fb09 330a 	mla	r3, r9, sl, r3
 8006370:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006374:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006378:	d8e5      	bhi.n	8006346 <__multiply+0xfa>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	50a3      	str	r3, [r4, r2]
 800637e:	3404      	adds	r4, #4
 8006380:	e79f      	b.n	80062c2 <__multiply+0x76>
 8006382:	3e01      	subs	r6, #1
 8006384:	e7a1      	b.n	80062ca <__multiply+0x7e>
 8006386:	bf00      	nop
 8006388:	08008e3f 	.word	0x08008e3f
 800638c:	08008e50 	.word	0x08008e50

08006390 <__pow5mult>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	4615      	mov	r5, r2
 8006396:	f012 0203 	ands.w	r2, r2, #3
 800639a:	4607      	mov	r7, r0
 800639c:	460e      	mov	r6, r1
 800639e:	d007      	beq.n	80063b0 <__pow5mult+0x20>
 80063a0:	4c25      	ldr	r4, [pc, #148]	@ (8006438 <__pow5mult+0xa8>)
 80063a2:	3a01      	subs	r2, #1
 80063a4:	2300      	movs	r3, #0
 80063a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063aa:	f7ff fe5d 	bl	8006068 <__multadd>
 80063ae:	4606      	mov	r6, r0
 80063b0:	10ad      	asrs	r5, r5, #2
 80063b2:	d03d      	beq.n	8006430 <__pow5mult+0xa0>
 80063b4:	69fc      	ldr	r4, [r7, #28]
 80063b6:	b97c      	cbnz	r4, 80063d8 <__pow5mult+0x48>
 80063b8:	2010      	movs	r0, #16
 80063ba:	f7ff fd3d 	bl	8005e38 <malloc>
 80063be:	4602      	mov	r2, r0
 80063c0:	61f8      	str	r0, [r7, #28]
 80063c2:	b928      	cbnz	r0, 80063d0 <__pow5mult+0x40>
 80063c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063c8:	4b1c      	ldr	r3, [pc, #112]	@ (800643c <__pow5mult+0xac>)
 80063ca:	481d      	ldr	r0, [pc, #116]	@ (8006440 <__pow5mult+0xb0>)
 80063cc:	f001 fb48 	bl	8007a60 <__assert_func>
 80063d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063d4:	6004      	str	r4, [r0, #0]
 80063d6:	60c4      	str	r4, [r0, #12]
 80063d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063e0:	b94c      	cbnz	r4, 80063f6 <__pow5mult+0x66>
 80063e2:	f240 2171 	movw	r1, #625	@ 0x271
 80063e6:	4638      	mov	r0, r7
 80063e8:	f7ff ff1a 	bl	8006220 <__i2b>
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	f04f 0900 	mov.w	r9, #0
 80063fa:	07eb      	lsls	r3, r5, #31
 80063fc:	d50a      	bpl.n	8006414 <__pow5mult+0x84>
 80063fe:	4631      	mov	r1, r6
 8006400:	4622      	mov	r2, r4
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ff22 	bl	800624c <__multiply>
 8006408:	4680      	mov	r8, r0
 800640a:	4631      	mov	r1, r6
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff fe09 	bl	8006024 <_Bfree>
 8006412:	4646      	mov	r6, r8
 8006414:	106d      	asrs	r5, r5, #1
 8006416:	d00b      	beq.n	8006430 <__pow5mult+0xa0>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	b938      	cbnz	r0, 800642c <__pow5mult+0x9c>
 800641c:	4622      	mov	r2, r4
 800641e:	4621      	mov	r1, r4
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff ff13 	bl	800624c <__multiply>
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	f8c0 9000 	str.w	r9, [r0]
 800642c:	4604      	mov	r4, r0
 800642e:	e7e4      	b.n	80063fa <__pow5mult+0x6a>
 8006430:	4630      	mov	r0, r6
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	bf00      	nop
 8006438:	08008f60 	.word	0x08008f60
 800643c:	08008dd0 	.word	0x08008dd0
 8006440:	08008e50 	.word	0x08008e50

08006444 <__lshift>:
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	460c      	mov	r4, r1
 800644a:	4607      	mov	r7, r0
 800644c:	4691      	mov	r9, r2
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	6849      	ldr	r1, [r1, #4]
 8006452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800645c:	f108 0601 	add.w	r6, r8, #1
 8006460:	42b3      	cmp	r3, r6
 8006462:	db0b      	blt.n	800647c <__lshift+0x38>
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff fd9d 	bl	8005fa4 <_Balloc>
 800646a:	4605      	mov	r5, r0
 800646c:	b948      	cbnz	r0, 8006482 <__lshift+0x3e>
 800646e:	4602      	mov	r2, r0
 8006470:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006474:	4b27      	ldr	r3, [pc, #156]	@ (8006514 <__lshift+0xd0>)
 8006476:	4828      	ldr	r0, [pc, #160]	@ (8006518 <__lshift+0xd4>)
 8006478:	f001 faf2 	bl	8007a60 <__assert_func>
 800647c:	3101      	adds	r1, #1
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	e7ee      	b.n	8006460 <__lshift+0x1c>
 8006482:	2300      	movs	r3, #0
 8006484:	f100 0114 	add.w	r1, r0, #20
 8006488:	f100 0210 	add.w	r2, r0, #16
 800648c:	4618      	mov	r0, r3
 800648e:	4553      	cmp	r3, sl
 8006490:	db33      	blt.n	80064fa <__lshift+0xb6>
 8006492:	6920      	ldr	r0, [r4, #16]
 8006494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006498:	f104 0314 	add.w	r3, r4, #20
 800649c:	f019 091f 	ands.w	r9, r9, #31
 80064a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80064a8:	d02b      	beq.n	8006502 <__lshift+0xbe>
 80064aa:	468a      	mov	sl, r1
 80064ac:	2200      	movs	r2, #0
 80064ae:	f1c9 0e20 	rsb	lr, r9, #32
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	fa00 f009 	lsl.w	r0, r0, r9
 80064b8:	4310      	orrs	r0, r2
 80064ba:	f84a 0b04 	str.w	r0, [sl], #4
 80064be:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c2:	459c      	cmp	ip, r3
 80064c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80064c8:	d8f3      	bhi.n	80064b2 <__lshift+0x6e>
 80064ca:	ebac 0304 	sub.w	r3, ip, r4
 80064ce:	3b15      	subs	r3, #21
 80064d0:	f023 0303 	bic.w	r3, r3, #3
 80064d4:	3304      	adds	r3, #4
 80064d6:	f104 0015 	add.w	r0, r4, #21
 80064da:	4560      	cmp	r0, ip
 80064dc:	bf88      	it	hi
 80064de:	2304      	movhi	r3, #4
 80064e0:	50ca      	str	r2, [r1, r3]
 80064e2:	b10a      	cbz	r2, 80064e8 <__lshift+0xa4>
 80064e4:	f108 0602 	add.w	r6, r8, #2
 80064e8:	3e01      	subs	r6, #1
 80064ea:	4638      	mov	r0, r7
 80064ec:	4621      	mov	r1, r4
 80064ee:	612e      	str	r6, [r5, #16]
 80064f0:	f7ff fd98 	bl	8006024 <_Bfree>
 80064f4:	4628      	mov	r0, r5
 80064f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80064fe:	3301      	adds	r3, #1
 8006500:	e7c5      	b.n	800648e <__lshift+0x4a>
 8006502:	3904      	subs	r1, #4
 8006504:	f853 2b04 	ldr.w	r2, [r3], #4
 8006508:	459c      	cmp	ip, r3
 800650a:	f841 2f04 	str.w	r2, [r1, #4]!
 800650e:	d8f9      	bhi.n	8006504 <__lshift+0xc0>
 8006510:	e7ea      	b.n	80064e8 <__lshift+0xa4>
 8006512:	bf00      	nop
 8006514:	08008e3f 	.word	0x08008e3f
 8006518:	08008e50 	.word	0x08008e50

0800651c <__mcmp>:
 800651c:	4603      	mov	r3, r0
 800651e:	690a      	ldr	r2, [r1, #16]
 8006520:	6900      	ldr	r0, [r0, #16]
 8006522:	b530      	push	{r4, r5, lr}
 8006524:	1a80      	subs	r0, r0, r2
 8006526:	d10e      	bne.n	8006546 <__mcmp+0x2a>
 8006528:	3314      	adds	r3, #20
 800652a:	3114      	adds	r1, #20
 800652c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006530:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006534:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006538:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800653c:	4295      	cmp	r5, r2
 800653e:	d003      	beq.n	8006548 <__mcmp+0x2c>
 8006540:	d205      	bcs.n	800654e <__mcmp+0x32>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	bd30      	pop	{r4, r5, pc}
 8006548:	42a3      	cmp	r3, r4
 800654a:	d3f3      	bcc.n	8006534 <__mcmp+0x18>
 800654c:	e7fb      	b.n	8006546 <__mcmp+0x2a>
 800654e:	2001      	movs	r0, #1
 8006550:	e7f9      	b.n	8006546 <__mcmp+0x2a>
	...

08006554 <__mdiff>:
 8006554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006558:	4689      	mov	r9, r1
 800655a:	4606      	mov	r6, r0
 800655c:	4611      	mov	r1, r2
 800655e:	4648      	mov	r0, r9
 8006560:	4614      	mov	r4, r2
 8006562:	f7ff ffdb 	bl	800651c <__mcmp>
 8006566:	1e05      	subs	r5, r0, #0
 8006568:	d112      	bne.n	8006590 <__mdiff+0x3c>
 800656a:	4629      	mov	r1, r5
 800656c:	4630      	mov	r0, r6
 800656e:	f7ff fd19 	bl	8005fa4 <_Balloc>
 8006572:	4602      	mov	r2, r0
 8006574:	b928      	cbnz	r0, 8006582 <__mdiff+0x2e>
 8006576:	f240 2137 	movw	r1, #567	@ 0x237
 800657a:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <__mdiff+0x120>)
 800657c:	483e      	ldr	r0, [pc, #248]	@ (8006678 <__mdiff+0x124>)
 800657e:	f001 fa6f 	bl	8007a60 <__assert_func>
 8006582:	2301      	movs	r3, #1
 8006584:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006588:	4610      	mov	r0, r2
 800658a:	b003      	add	sp, #12
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	bfbc      	itt	lt
 8006592:	464b      	movlt	r3, r9
 8006594:	46a1      	movlt	r9, r4
 8006596:	4630      	mov	r0, r6
 8006598:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800659c:	bfba      	itte	lt
 800659e:	461c      	movlt	r4, r3
 80065a0:	2501      	movlt	r5, #1
 80065a2:	2500      	movge	r5, #0
 80065a4:	f7ff fcfe 	bl	8005fa4 <_Balloc>
 80065a8:	4602      	mov	r2, r0
 80065aa:	b918      	cbnz	r0, 80065b4 <__mdiff+0x60>
 80065ac:	f240 2145 	movw	r1, #581	@ 0x245
 80065b0:	4b30      	ldr	r3, [pc, #192]	@ (8006674 <__mdiff+0x120>)
 80065b2:	e7e3      	b.n	800657c <__mdiff+0x28>
 80065b4:	f100 0b14 	add.w	fp, r0, #20
 80065b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065bc:	f109 0310 	add.w	r3, r9, #16
 80065c0:	60c5      	str	r5, [r0, #12]
 80065c2:	f04f 0c00 	mov.w	ip, #0
 80065c6:	f109 0514 	add.w	r5, r9, #20
 80065ca:	46d9      	mov	r9, fp
 80065cc:	6926      	ldr	r6, [r4, #16]
 80065ce:	f104 0e14 	add.w	lr, r4, #20
 80065d2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065d6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	9b01      	ldr	r3, [sp, #4]
 80065de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065e6:	b281      	uxth	r1, r0
 80065e8:	9301      	str	r3, [sp, #4]
 80065ea:	fa1f f38a 	uxth.w	r3, sl
 80065ee:	1a5b      	subs	r3, r3, r1
 80065f0:	0c00      	lsrs	r0, r0, #16
 80065f2:	4463      	add	r3, ip
 80065f4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80065f8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006602:	4576      	cmp	r6, lr
 8006604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006608:	f849 3b04 	str.w	r3, [r9], #4
 800660c:	d8e6      	bhi.n	80065dc <__mdiff+0x88>
 800660e:	1b33      	subs	r3, r6, r4
 8006610:	3b15      	subs	r3, #21
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	3415      	adds	r4, #21
 8006618:	3304      	adds	r3, #4
 800661a:	42a6      	cmp	r6, r4
 800661c:	bf38      	it	cc
 800661e:	2304      	movcc	r3, #4
 8006620:	441d      	add	r5, r3
 8006622:	445b      	add	r3, fp
 8006624:	461e      	mov	r6, r3
 8006626:	462c      	mov	r4, r5
 8006628:	4544      	cmp	r4, r8
 800662a:	d30e      	bcc.n	800664a <__mdiff+0xf6>
 800662c:	f108 0103 	add.w	r1, r8, #3
 8006630:	1b49      	subs	r1, r1, r5
 8006632:	f021 0103 	bic.w	r1, r1, #3
 8006636:	3d03      	subs	r5, #3
 8006638:	45a8      	cmp	r8, r5
 800663a:	bf38      	it	cc
 800663c:	2100      	movcc	r1, #0
 800663e:	440b      	add	r3, r1
 8006640:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006644:	b199      	cbz	r1, 800666e <__mdiff+0x11a>
 8006646:	6117      	str	r7, [r2, #16]
 8006648:	e79e      	b.n	8006588 <__mdiff+0x34>
 800664a:	46e6      	mov	lr, ip
 800664c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006650:	fa1f fc81 	uxth.w	ip, r1
 8006654:	44f4      	add	ip, lr
 8006656:	0c08      	lsrs	r0, r1, #16
 8006658:	4471      	add	r1, lr
 800665a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800665e:	b289      	uxth	r1, r1
 8006660:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006664:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006668:	f846 1b04 	str.w	r1, [r6], #4
 800666c:	e7dc      	b.n	8006628 <__mdiff+0xd4>
 800666e:	3f01      	subs	r7, #1
 8006670:	e7e6      	b.n	8006640 <__mdiff+0xec>
 8006672:	bf00      	nop
 8006674:	08008e3f 	.word	0x08008e3f
 8006678:	08008e50 	.word	0x08008e50

0800667c <__ulp>:
 800667c:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <__ulp+0x3c>)
 800667e:	400b      	ands	r3, r1
 8006680:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006684:	2b00      	cmp	r3, #0
 8006686:	dc08      	bgt.n	800669a <__ulp+0x1e>
 8006688:	425b      	negs	r3, r3
 800668a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800668e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006692:	da04      	bge.n	800669e <__ulp+0x22>
 8006694:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006698:	4113      	asrs	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	e008      	b.n	80066b0 <__ulp+0x34>
 800669e:	f1a2 0314 	sub.w	r3, r2, #20
 80066a2:	2b1e      	cmp	r3, #30
 80066a4:	bfd6      	itet	le
 80066a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80066aa:	2201      	movgt	r2, #1
 80066ac:	40da      	lsrle	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	4619      	mov	r1, r3
 80066b2:	4610      	mov	r0, r2
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	7ff00000 	.word	0x7ff00000

080066bc <__b2d>:
 80066bc:	6902      	ldr	r2, [r0, #16]
 80066be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c0:	f100 0614 	add.w	r6, r0, #20
 80066c4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80066c8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80066cc:	4f1e      	ldr	r7, [pc, #120]	@ (8006748 <__b2d+0x8c>)
 80066ce:	4620      	mov	r0, r4
 80066d0:	f7ff fd5a 	bl	8006188 <__hi0bits>
 80066d4:	4603      	mov	r3, r0
 80066d6:	f1c0 0020 	rsb	r0, r0, #32
 80066da:	2b0a      	cmp	r3, #10
 80066dc:	f1a2 0504 	sub.w	r5, r2, #4
 80066e0:	6008      	str	r0, [r1, #0]
 80066e2:	dc12      	bgt.n	800670a <__b2d+0x4e>
 80066e4:	42ae      	cmp	r6, r5
 80066e6:	bf2c      	ite	cs
 80066e8:	2200      	movcs	r2, #0
 80066ea:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80066ee:	f1c3 0c0b 	rsb	ip, r3, #11
 80066f2:	3315      	adds	r3, #21
 80066f4:	fa24 fe0c 	lsr.w	lr, r4, ip
 80066f8:	fa04 f303 	lsl.w	r3, r4, r3
 80066fc:	fa22 f20c 	lsr.w	r2, r2, ip
 8006700:	ea4e 0107 	orr.w	r1, lr, r7
 8006704:	431a      	orrs	r2, r3
 8006706:	4610      	mov	r0, r2
 8006708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800670a:	42ae      	cmp	r6, r5
 800670c:	bf36      	itet	cc
 800670e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006712:	2200      	movcs	r2, #0
 8006714:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006718:	3b0b      	subs	r3, #11
 800671a:	d012      	beq.n	8006742 <__b2d+0x86>
 800671c:	f1c3 0720 	rsb	r7, r3, #32
 8006720:	fa22 f107 	lsr.w	r1, r2, r7
 8006724:	409c      	lsls	r4, r3
 8006726:	430c      	orrs	r4, r1
 8006728:	42b5      	cmp	r5, r6
 800672a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800672e:	bf94      	ite	ls
 8006730:	2400      	movls	r4, #0
 8006732:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006736:	409a      	lsls	r2, r3
 8006738:	40fc      	lsrs	r4, r7
 800673a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800673e:	4322      	orrs	r2, r4
 8006740:	e7e1      	b.n	8006706 <__b2d+0x4a>
 8006742:	ea44 0107 	orr.w	r1, r4, r7
 8006746:	e7de      	b.n	8006706 <__b2d+0x4a>
 8006748:	3ff00000 	.word	0x3ff00000

0800674c <__d2b>:
 800674c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006750:	2101      	movs	r1, #1
 8006752:	4690      	mov	r8, r2
 8006754:	4699      	mov	r9, r3
 8006756:	9e08      	ldr	r6, [sp, #32]
 8006758:	f7ff fc24 	bl	8005fa4 <_Balloc>
 800675c:	4604      	mov	r4, r0
 800675e:	b930      	cbnz	r0, 800676e <__d2b+0x22>
 8006760:	4602      	mov	r2, r0
 8006762:	f240 310f 	movw	r1, #783	@ 0x30f
 8006766:	4b23      	ldr	r3, [pc, #140]	@ (80067f4 <__d2b+0xa8>)
 8006768:	4823      	ldr	r0, [pc, #140]	@ (80067f8 <__d2b+0xac>)
 800676a:	f001 f979 	bl	8007a60 <__assert_func>
 800676e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006772:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006776:	b10d      	cbz	r5, 800677c <__d2b+0x30>
 8006778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800677c:	9301      	str	r3, [sp, #4]
 800677e:	f1b8 0300 	subs.w	r3, r8, #0
 8006782:	d024      	beq.n	80067ce <__d2b+0x82>
 8006784:	4668      	mov	r0, sp
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	f7ff fd1d 	bl	80061c6 <__lo0bits>
 800678c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006790:	b1d8      	cbz	r0, 80067ca <__d2b+0x7e>
 8006792:	f1c0 0320 	rsb	r3, r0, #32
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	430b      	orrs	r3, r1
 800679c:	40c2      	lsrs	r2, r0
 800679e:	6163      	str	r3, [r4, #20]
 80067a0:	9201      	str	r2, [sp, #4]
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bf0c      	ite	eq
 80067a8:	2201      	moveq	r2, #1
 80067aa:	2202      	movne	r2, #2
 80067ac:	61a3      	str	r3, [r4, #24]
 80067ae:	6122      	str	r2, [r4, #16]
 80067b0:	b1ad      	cbz	r5, 80067de <__d2b+0x92>
 80067b2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067b6:	4405      	add	r5, r0
 80067b8:	6035      	str	r5, [r6, #0]
 80067ba:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c0:	6018      	str	r0, [r3, #0]
 80067c2:	4620      	mov	r0, r4
 80067c4:	b002      	add	sp, #8
 80067c6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80067ca:	6161      	str	r1, [r4, #20]
 80067cc:	e7e9      	b.n	80067a2 <__d2b+0x56>
 80067ce:	a801      	add	r0, sp, #4
 80067d0:	f7ff fcf9 	bl	80061c6 <__lo0bits>
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	6163      	str	r3, [r4, #20]
 80067da:	3020      	adds	r0, #32
 80067dc:	e7e7      	b.n	80067ae <__d2b+0x62>
 80067de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067e6:	6030      	str	r0, [r6, #0]
 80067e8:	6918      	ldr	r0, [r3, #16]
 80067ea:	f7ff fccd 	bl	8006188 <__hi0bits>
 80067ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067f2:	e7e4      	b.n	80067be <__d2b+0x72>
 80067f4:	08008e3f 	.word	0x08008e3f
 80067f8:	08008e50 	.word	0x08008e50

080067fc <__ratio>:
 80067fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006800:	b085      	sub	sp, #20
 8006802:	e9cd 1000 	strd	r1, r0, [sp]
 8006806:	a902      	add	r1, sp, #8
 8006808:	f7ff ff58 	bl	80066bc <__b2d>
 800680c:	468b      	mov	fp, r1
 800680e:	4606      	mov	r6, r0
 8006810:	460f      	mov	r7, r1
 8006812:	9800      	ldr	r0, [sp, #0]
 8006814:	a903      	add	r1, sp, #12
 8006816:	f7ff ff51 	bl	80066bc <__b2d>
 800681a:	460d      	mov	r5, r1
 800681c:	9b01      	ldr	r3, [sp, #4]
 800681e:	4689      	mov	r9, r1
 8006820:	6919      	ldr	r1, [r3, #16]
 8006822:	9b00      	ldr	r3, [sp, #0]
 8006824:	4604      	mov	r4, r0
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	4630      	mov	r0, r6
 800682a:	1ac9      	subs	r1, r1, r3
 800682c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfcd      	iteet	gt
 800683a:	463a      	movgt	r2, r7
 800683c:	462a      	movle	r2, r5
 800683e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006842:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006846:	bfd8      	it	le
 8006848:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800684c:	464b      	mov	r3, r9
 800684e:	4622      	mov	r2, r4
 8006850:	4659      	mov	r1, fp
 8006852:	f7f9 ff6b 	bl	800072c <__aeabi_ddiv>
 8006856:	b005      	add	sp, #20
 8006858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800685c <__copybits>:
 800685c:	3901      	subs	r1, #1
 800685e:	b570      	push	{r4, r5, r6, lr}
 8006860:	1149      	asrs	r1, r1, #5
 8006862:	6914      	ldr	r4, [r2, #16]
 8006864:	3101      	adds	r1, #1
 8006866:	f102 0314 	add.w	r3, r2, #20
 800686a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800686e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006872:	1f05      	subs	r5, r0, #4
 8006874:	42a3      	cmp	r3, r4
 8006876:	d30c      	bcc.n	8006892 <__copybits+0x36>
 8006878:	1aa3      	subs	r3, r4, r2
 800687a:	3b11      	subs	r3, #17
 800687c:	f023 0303 	bic.w	r3, r3, #3
 8006880:	3211      	adds	r2, #17
 8006882:	42a2      	cmp	r2, r4
 8006884:	bf88      	it	hi
 8006886:	2300      	movhi	r3, #0
 8006888:	4418      	add	r0, r3
 800688a:	2300      	movs	r3, #0
 800688c:	4288      	cmp	r0, r1
 800688e:	d305      	bcc.n	800689c <__copybits+0x40>
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	f853 6b04 	ldr.w	r6, [r3], #4
 8006896:	f845 6f04 	str.w	r6, [r5, #4]!
 800689a:	e7eb      	b.n	8006874 <__copybits+0x18>
 800689c:	f840 3b04 	str.w	r3, [r0], #4
 80068a0:	e7f4      	b.n	800688c <__copybits+0x30>

080068a2 <__any_on>:
 80068a2:	f100 0214 	add.w	r2, r0, #20
 80068a6:	6900      	ldr	r0, [r0, #16]
 80068a8:	114b      	asrs	r3, r1, #5
 80068aa:	4298      	cmp	r0, r3
 80068ac:	b510      	push	{r4, lr}
 80068ae:	db11      	blt.n	80068d4 <__any_on+0x32>
 80068b0:	dd0a      	ble.n	80068c8 <__any_on+0x26>
 80068b2:	f011 011f 	ands.w	r1, r1, #31
 80068b6:	d007      	beq.n	80068c8 <__any_on+0x26>
 80068b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80068bc:	fa24 f001 	lsr.w	r0, r4, r1
 80068c0:	fa00 f101 	lsl.w	r1, r0, r1
 80068c4:	428c      	cmp	r4, r1
 80068c6:	d10b      	bne.n	80068e0 <__any_on+0x3e>
 80068c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d803      	bhi.n	80068d8 <__any_on+0x36>
 80068d0:	2000      	movs	r0, #0
 80068d2:	bd10      	pop	{r4, pc}
 80068d4:	4603      	mov	r3, r0
 80068d6:	e7f7      	b.n	80068c8 <__any_on+0x26>
 80068d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068dc:	2900      	cmp	r1, #0
 80068de:	d0f5      	beq.n	80068cc <__any_on+0x2a>
 80068e0:	2001      	movs	r0, #1
 80068e2:	e7f6      	b.n	80068d2 <__any_on+0x30>

080068e4 <sulp>:
 80068e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e8:	460f      	mov	r7, r1
 80068ea:	4690      	mov	r8, r2
 80068ec:	f7ff fec6 	bl	800667c <__ulp>
 80068f0:	4604      	mov	r4, r0
 80068f2:	460d      	mov	r5, r1
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	d011      	beq.n	800691e <sulp+0x3a>
 80068fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80068fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd0b      	ble.n	800691e <sulp+0x3a>
 8006906:	2400      	movs	r4, #0
 8006908:	051b      	lsls	r3, r3, #20
 800690a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800690e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006912:	4622      	mov	r2, r4
 8006914:	462b      	mov	r3, r5
 8006916:	f7f9 fddf 	bl	80004d8 <__aeabi_dmul>
 800691a:	4604      	mov	r4, r0
 800691c:	460d      	mov	r5, r1
 800691e:	4620      	mov	r0, r4
 8006920:	4629      	mov	r1, r5
 8006922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006928 <_strtod_l>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	b09f      	sub	sp, #124	@ 0x7c
 800692e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006930:	2200      	movs	r2, #0
 8006932:	460c      	mov	r4, r1
 8006934:	921a      	str	r2, [sp, #104]	@ 0x68
 8006936:	f04f 0a00 	mov.w	sl, #0
 800693a:	f04f 0b00 	mov.w	fp, #0
 800693e:	460a      	mov	r2, r1
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	9219      	str	r2, [sp, #100]	@ 0x64
 8006944:	7811      	ldrb	r1, [r2, #0]
 8006946:	292b      	cmp	r1, #43	@ 0x2b
 8006948:	d048      	beq.n	80069dc <_strtod_l+0xb4>
 800694a:	d836      	bhi.n	80069ba <_strtod_l+0x92>
 800694c:	290d      	cmp	r1, #13
 800694e:	d830      	bhi.n	80069b2 <_strtod_l+0x8a>
 8006950:	2908      	cmp	r1, #8
 8006952:	d830      	bhi.n	80069b6 <_strtod_l+0x8e>
 8006954:	2900      	cmp	r1, #0
 8006956:	d039      	beq.n	80069cc <_strtod_l+0xa4>
 8006958:	2200      	movs	r2, #0
 800695a:	920e      	str	r2, [sp, #56]	@ 0x38
 800695c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800695e:	782a      	ldrb	r2, [r5, #0]
 8006960:	2a30      	cmp	r2, #48	@ 0x30
 8006962:	f040 80b0 	bne.w	8006ac6 <_strtod_l+0x19e>
 8006966:	786a      	ldrb	r2, [r5, #1]
 8006968:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800696c:	2a58      	cmp	r2, #88	@ 0x58
 800696e:	d16c      	bne.n	8006a4a <_strtod_l+0x122>
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006974:	4a8f      	ldr	r2, [pc, #572]	@ (8006bb4 <_strtod_l+0x28c>)
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	ab1a      	add	r3, sp, #104	@ 0x68
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	9805      	ldr	r0, [sp, #20]
 800697e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006980:	a919      	add	r1, sp, #100	@ 0x64
 8006982:	f001 f907 	bl	8007b94 <__gethex>
 8006986:	f010 060f 	ands.w	r6, r0, #15
 800698a:	4604      	mov	r4, r0
 800698c:	d005      	beq.n	800699a <_strtod_l+0x72>
 800698e:	2e06      	cmp	r6, #6
 8006990:	d126      	bne.n	80069e0 <_strtod_l+0xb8>
 8006992:	2300      	movs	r3, #0
 8006994:	3501      	adds	r5, #1
 8006996:	9519      	str	r5, [sp, #100]	@ 0x64
 8006998:	930e      	str	r3, [sp, #56]	@ 0x38
 800699a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800699c:	2b00      	cmp	r3, #0
 800699e:	f040 8582 	bne.w	80074a6 <_strtod_l+0xb7e>
 80069a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069a4:	b1bb      	cbz	r3, 80069d6 <_strtod_l+0xae>
 80069a6:	4650      	mov	r0, sl
 80069a8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80069ac:	b01f      	add	sp, #124	@ 0x7c
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b2:	2920      	cmp	r1, #32
 80069b4:	d1d0      	bne.n	8006958 <_strtod_l+0x30>
 80069b6:	3201      	adds	r2, #1
 80069b8:	e7c3      	b.n	8006942 <_strtod_l+0x1a>
 80069ba:	292d      	cmp	r1, #45	@ 0x2d
 80069bc:	d1cc      	bne.n	8006958 <_strtod_l+0x30>
 80069be:	2101      	movs	r1, #1
 80069c0:	910e      	str	r1, [sp, #56]	@ 0x38
 80069c2:	1c51      	adds	r1, r2, #1
 80069c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80069c6:	7852      	ldrb	r2, [r2, #1]
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	d1c7      	bne.n	800695c <_strtod_l+0x34>
 80069cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80069ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 8566 	bne.w	80074a2 <_strtod_l+0xb7a>
 80069d6:	4650      	mov	r0, sl
 80069d8:	4659      	mov	r1, fp
 80069da:	e7e7      	b.n	80069ac <_strtod_l+0x84>
 80069dc:	2100      	movs	r1, #0
 80069de:	e7ef      	b.n	80069c0 <_strtod_l+0x98>
 80069e0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80069e2:	b13a      	cbz	r2, 80069f4 <_strtod_l+0xcc>
 80069e4:	2135      	movs	r1, #53	@ 0x35
 80069e6:	a81c      	add	r0, sp, #112	@ 0x70
 80069e8:	f7ff ff38 	bl	800685c <__copybits>
 80069ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80069ee:	9805      	ldr	r0, [sp, #20]
 80069f0:	f7ff fb18 	bl	8006024 <_Bfree>
 80069f4:	3e01      	subs	r6, #1
 80069f6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80069f8:	2e04      	cmp	r6, #4
 80069fa:	d806      	bhi.n	8006a0a <_strtod_l+0xe2>
 80069fc:	e8df f006 	tbb	[pc, r6]
 8006a00:	201d0314 	.word	0x201d0314
 8006a04:	14          	.byte	0x14
 8006a05:	00          	.byte	0x00
 8006a06:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006a0a:	05e1      	lsls	r1, r4, #23
 8006a0c:	bf48      	it	mi
 8006a0e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006a12:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006a16:	0d1b      	lsrs	r3, r3, #20
 8006a18:	051b      	lsls	r3, r3, #20
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1bd      	bne.n	800699a <_strtod_l+0x72>
 8006a1e:	f7fe fb17 	bl	8005050 <__errno>
 8006a22:	2322      	movs	r3, #34	@ 0x22
 8006a24:	6003      	str	r3, [r0, #0]
 8006a26:	e7b8      	b.n	800699a <_strtod_l+0x72>
 8006a28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006a2c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006a30:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006a34:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006a38:	e7e7      	b.n	8006a0a <_strtod_l+0xe2>
 8006a3a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006bb8 <_strtod_l+0x290>
 8006a3e:	e7e4      	b.n	8006a0a <_strtod_l+0xe2>
 8006a40:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006a44:	f04f 3aff 	mov.w	sl, #4294967295
 8006a48:	e7df      	b.n	8006a0a <_strtod_l+0xe2>
 8006a4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a50:	785b      	ldrb	r3, [r3, #1]
 8006a52:	2b30      	cmp	r3, #48	@ 0x30
 8006a54:	d0f9      	beq.n	8006a4a <_strtod_l+0x122>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d09f      	beq.n	800699a <_strtod_l+0x72>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	2700      	movs	r7, #0
 8006a5e:	220a      	movs	r2, #10
 8006a60:	46b9      	mov	r9, r7
 8006a62:	9308      	str	r3, [sp, #32]
 8006a64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a66:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006a68:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a6a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006a6c:	7805      	ldrb	r5, [r0, #0]
 8006a6e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006a72:	b2d9      	uxtb	r1, r3
 8006a74:	2909      	cmp	r1, #9
 8006a76:	d928      	bls.n	8006aca <_strtod_l+0x1a2>
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4950      	ldr	r1, [pc, #320]	@ (8006bbc <_strtod_l+0x294>)
 8006a7c:	f000 ffc8 	bl	8007a10 <strncmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d032      	beq.n	8006aea <_strtod_l+0x1c2>
 8006a84:	2000      	movs	r0, #0
 8006a86:	462a      	mov	r2, r5
 8006a88:	4603      	mov	r3, r0
 8006a8a:	464d      	mov	r5, r9
 8006a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006a8e:	2a65      	cmp	r2, #101	@ 0x65
 8006a90:	d001      	beq.n	8006a96 <_strtod_l+0x16e>
 8006a92:	2a45      	cmp	r2, #69	@ 0x45
 8006a94:	d114      	bne.n	8006ac0 <_strtod_l+0x198>
 8006a96:	b91d      	cbnz	r5, 8006aa0 <_strtod_l+0x178>
 8006a98:	9a08      	ldr	r2, [sp, #32]
 8006a9a:	4302      	orrs	r2, r0
 8006a9c:	d096      	beq.n	80069cc <_strtod_l+0xa4>
 8006a9e:	2500      	movs	r5, #0
 8006aa0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006aa2:	1c62      	adds	r2, r4, #1
 8006aa4:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aa6:	7862      	ldrb	r2, [r4, #1]
 8006aa8:	2a2b      	cmp	r2, #43	@ 0x2b
 8006aaa:	d07a      	beq.n	8006ba2 <_strtod_l+0x27a>
 8006aac:	2a2d      	cmp	r2, #45	@ 0x2d
 8006aae:	d07e      	beq.n	8006bae <_strtod_l+0x286>
 8006ab0:	f04f 0c00 	mov.w	ip, #0
 8006ab4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006ab8:	2909      	cmp	r1, #9
 8006aba:	f240 8085 	bls.w	8006bc8 <_strtod_l+0x2a0>
 8006abe:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ac0:	f04f 0800 	mov.w	r8, #0
 8006ac4:	e0a5      	b.n	8006c12 <_strtod_l+0x2ea>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e7c8      	b.n	8006a5c <_strtod_l+0x134>
 8006aca:	f1b9 0f08 	cmp.w	r9, #8
 8006ace:	bfd8      	it	le
 8006ad0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006ad2:	f100 0001 	add.w	r0, r0, #1
 8006ad6:	bfd6      	itet	le
 8006ad8:	fb02 3301 	mlale	r3, r2, r1, r3
 8006adc:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ae0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006ae2:	f109 0901 	add.w	r9, r9, #1
 8006ae6:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ae8:	e7bf      	b.n	8006a6a <_strtod_l+0x142>
 8006aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	9219      	str	r2, [sp, #100]	@ 0x64
 8006af0:	785a      	ldrb	r2, [r3, #1]
 8006af2:	f1b9 0f00 	cmp.w	r9, #0
 8006af6:	d03b      	beq.n	8006b70 <_strtod_l+0x248>
 8006af8:	464d      	mov	r5, r9
 8006afa:	900a      	str	r0, [sp, #40]	@ 0x28
 8006afc:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006b00:	2b09      	cmp	r3, #9
 8006b02:	d912      	bls.n	8006b2a <_strtod_l+0x202>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e7c2      	b.n	8006a8e <_strtod_l+0x166>
 8006b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b10:	785a      	ldrb	r2, [r3, #1]
 8006b12:	2a30      	cmp	r2, #48	@ 0x30
 8006b14:	d0f8      	beq.n	8006b08 <_strtod_l+0x1e0>
 8006b16:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006b1a:	2b08      	cmp	r3, #8
 8006b1c:	f200 84c8 	bhi.w	80074b0 <_strtod_l+0xb88>
 8006b20:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b22:	2000      	movs	r0, #0
 8006b24:	4605      	mov	r5, r0
 8006b26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b28:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b2a:	3a30      	subs	r2, #48	@ 0x30
 8006b2c:	f100 0301 	add.w	r3, r0, #1
 8006b30:	d018      	beq.n	8006b64 <_strtod_l+0x23c>
 8006b32:	462e      	mov	r6, r5
 8006b34:	f04f 0e0a 	mov.w	lr, #10
 8006b38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b3a:	4419      	add	r1, r3
 8006b3c:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b3e:	1c71      	adds	r1, r6, #1
 8006b40:	eba1 0c05 	sub.w	ip, r1, r5
 8006b44:	4563      	cmp	r3, ip
 8006b46:	dc15      	bgt.n	8006b74 <_strtod_l+0x24c>
 8006b48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006b4c:	182b      	adds	r3, r5, r0
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	f105 0501 	add.w	r5, r5, #1
 8006b54:	4405      	add	r5, r0
 8006b56:	dc1a      	bgt.n	8006b8e <_strtod_l+0x266>
 8006b58:	230a      	movs	r3, #10
 8006b5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b5c:	fb03 2301 	mla	r3, r3, r1, r2
 8006b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b62:	2300      	movs	r3, #0
 8006b64:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b66:	4618      	mov	r0, r3
 8006b68:	1c51      	adds	r1, r2, #1
 8006b6a:	9119      	str	r1, [sp, #100]	@ 0x64
 8006b6c:	7852      	ldrb	r2, [r2, #1]
 8006b6e:	e7c5      	b.n	8006afc <_strtod_l+0x1d4>
 8006b70:	4648      	mov	r0, r9
 8006b72:	e7ce      	b.n	8006b12 <_strtod_l+0x1ea>
 8006b74:	2e08      	cmp	r6, #8
 8006b76:	dc05      	bgt.n	8006b84 <_strtod_l+0x25c>
 8006b78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006b7a:	fb0e f606 	mul.w	r6, lr, r6
 8006b7e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006b80:	460e      	mov	r6, r1
 8006b82:	e7dc      	b.n	8006b3e <_strtod_l+0x216>
 8006b84:	2910      	cmp	r1, #16
 8006b86:	bfd8      	it	le
 8006b88:	fb0e f707 	mulle.w	r7, lr, r7
 8006b8c:	e7f8      	b.n	8006b80 <_strtod_l+0x258>
 8006b8e:	2b0f      	cmp	r3, #15
 8006b90:	bfdc      	itt	le
 8006b92:	230a      	movle	r3, #10
 8006b94:	fb03 2707 	mlale	r7, r3, r7, r2
 8006b98:	e7e3      	b.n	8006b62 <_strtod_l+0x23a>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e77a      	b.n	8006a98 <_strtod_l+0x170>
 8006ba2:	f04f 0c00 	mov.w	ip, #0
 8006ba6:	1ca2      	adds	r2, r4, #2
 8006ba8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006baa:	78a2      	ldrb	r2, [r4, #2]
 8006bac:	e782      	b.n	8006ab4 <_strtod_l+0x18c>
 8006bae:	f04f 0c01 	mov.w	ip, #1
 8006bb2:	e7f8      	b.n	8006ba6 <_strtod_l+0x27e>
 8006bb4:	08009074 	.word	0x08009074
 8006bb8:	7ff00000 	.word	0x7ff00000
 8006bbc:	08008ea9 	.word	0x08008ea9
 8006bc0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006bc2:	1c51      	adds	r1, r2, #1
 8006bc4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006bc6:	7852      	ldrb	r2, [r2, #1]
 8006bc8:	2a30      	cmp	r2, #48	@ 0x30
 8006bca:	d0f9      	beq.n	8006bc0 <_strtod_l+0x298>
 8006bcc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006bd0:	2908      	cmp	r1, #8
 8006bd2:	f63f af75 	bhi.w	8006ac0 <_strtod_l+0x198>
 8006bd6:	f04f 080a 	mov.w	r8, #10
 8006bda:	3a30      	subs	r2, #48	@ 0x30
 8006bdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006bde:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006be0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006be2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006be4:	1c56      	adds	r6, r2, #1
 8006be6:	9619      	str	r6, [sp, #100]	@ 0x64
 8006be8:	7852      	ldrb	r2, [r2, #1]
 8006bea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006bee:	f1be 0f09 	cmp.w	lr, #9
 8006bf2:	d939      	bls.n	8006c68 <_strtod_l+0x340>
 8006bf4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006bf6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006bfa:	1a76      	subs	r6, r6, r1
 8006bfc:	2e08      	cmp	r6, #8
 8006bfe:	dc03      	bgt.n	8006c08 <_strtod_l+0x2e0>
 8006c00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c02:	4588      	cmp	r8, r1
 8006c04:	bfa8      	it	ge
 8006c06:	4688      	movge	r8, r1
 8006c08:	f1bc 0f00 	cmp.w	ip, #0
 8006c0c:	d001      	beq.n	8006c12 <_strtod_l+0x2ea>
 8006c0e:	f1c8 0800 	rsb	r8, r8, #0
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	d14e      	bne.n	8006cb4 <_strtod_l+0x38c>
 8006c16:	9908      	ldr	r1, [sp, #32]
 8006c18:	4308      	orrs	r0, r1
 8006c1a:	f47f aebe 	bne.w	800699a <_strtod_l+0x72>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f aed4 	bne.w	80069cc <_strtod_l+0xa4>
 8006c24:	2a69      	cmp	r2, #105	@ 0x69
 8006c26:	d028      	beq.n	8006c7a <_strtod_l+0x352>
 8006c28:	dc25      	bgt.n	8006c76 <_strtod_l+0x34e>
 8006c2a:	2a49      	cmp	r2, #73	@ 0x49
 8006c2c:	d025      	beq.n	8006c7a <_strtod_l+0x352>
 8006c2e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006c30:	f47f aecc 	bne.w	80069cc <_strtod_l+0xa4>
 8006c34:	4999      	ldr	r1, [pc, #612]	@ (8006e9c <_strtod_l+0x574>)
 8006c36:	a819      	add	r0, sp, #100	@ 0x64
 8006c38:	f001 f9ce 	bl	8007fd8 <__match>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f43f aec5 	beq.w	80069cc <_strtod_l+0xa4>
 8006c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b28      	cmp	r3, #40	@ 0x28
 8006c48:	d12e      	bne.n	8006ca8 <_strtod_l+0x380>
 8006c4a:	4995      	ldr	r1, [pc, #596]	@ (8006ea0 <_strtod_l+0x578>)
 8006c4c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006c4e:	a819      	add	r0, sp, #100	@ 0x64
 8006c50:	f001 f9d6 	bl	8008000 <__hexnan>
 8006c54:	2805      	cmp	r0, #5
 8006c56:	d127      	bne.n	8006ca8 <_strtod_l+0x380>
 8006c58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006c5a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006c5e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006c62:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006c66:	e698      	b.n	800699a <_strtod_l+0x72>
 8006c68:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c6a:	fb08 2101 	mla	r1, r8, r1, r2
 8006c6e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006c72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c74:	e7b5      	b.n	8006be2 <_strtod_l+0x2ba>
 8006c76:	2a6e      	cmp	r2, #110	@ 0x6e
 8006c78:	e7da      	b.n	8006c30 <_strtod_l+0x308>
 8006c7a:	498a      	ldr	r1, [pc, #552]	@ (8006ea4 <_strtod_l+0x57c>)
 8006c7c:	a819      	add	r0, sp, #100	@ 0x64
 8006c7e:	f001 f9ab 	bl	8007fd8 <__match>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f43f aea2 	beq.w	80069cc <_strtod_l+0xa4>
 8006c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c8a:	4987      	ldr	r1, [pc, #540]	@ (8006ea8 <_strtod_l+0x580>)
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	a819      	add	r0, sp, #100	@ 0x64
 8006c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c92:	f001 f9a1 	bl	8007fd8 <__match>
 8006c96:	b910      	cbnz	r0, 8006c9e <_strtod_l+0x376>
 8006c98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006c9e:	f04f 0a00 	mov.w	sl, #0
 8006ca2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8006eac <_strtod_l+0x584>
 8006ca6:	e678      	b.n	800699a <_strtod_l+0x72>
 8006ca8:	4881      	ldr	r0, [pc, #516]	@ (8006eb0 <_strtod_l+0x588>)
 8006caa:	f000 fed3 	bl	8007a54 <nan>
 8006cae:	4682      	mov	sl, r0
 8006cb0:	468b      	mov	fp, r1
 8006cb2:	e672      	b.n	800699a <_strtod_l+0x72>
 8006cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cb6:	f1b9 0f00 	cmp.w	r9, #0
 8006cba:	bf08      	it	eq
 8006cbc:	46a9      	moveq	r9, r5
 8006cbe:	eba8 0303 	sub.w	r3, r8, r3
 8006cc2:	2d10      	cmp	r5, #16
 8006cc4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006cc6:	462c      	mov	r4, r5
 8006cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cca:	bfa8      	it	ge
 8006ccc:	2410      	movge	r4, #16
 8006cce:	f7f9 fb89 	bl	80003e4 <__aeabi_ui2d>
 8006cd2:	2d09      	cmp	r5, #9
 8006cd4:	4682      	mov	sl, r0
 8006cd6:	468b      	mov	fp, r1
 8006cd8:	dc11      	bgt.n	8006cfe <_strtod_l+0x3d6>
 8006cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f43f ae5c 	beq.w	800699a <_strtod_l+0x72>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce4:	dd76      	ble.n	8006dd4 <_strtod_l+0x4ac>
 8006ce6:	2b16      	cmp	r3, #22
 8006ce8:	dc5d      	bgt.n	8006da6 <_strtod_l+0x47e>
 8006cea:	4972      	ldr	r1, [pc, #456]	@ (8006eb4 <_strtod_l+0x58c>)
 8006cec:	4652      	mov	r2, sl
 8006cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cf2:	465b      	mov	r3, fp
 8006cf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf8:	f7f9 fbee 	bl	80004d8 <__aeabi_dmul>
 8006cfc:	e7d7      	b.n	8006cae <_strtod_l+0x386>
 8006cfe:	4b6d      	ldr	r3, [pc, #436]	@ (8006eb4 <_strtod_l+0x58c>)
 8006d00:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d04:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006d08:	f7f9 fbe6 	bl	80004d8 <__aeabi_dmul>
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	4638      	mov	r0, r7
 8006d10:	468b      	mov	fp, r1
 8006d12:	f7f9 fb67 	bl	80003e4 <__aeabi_ui2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	f7f9 fa25 	bl	800016c <__adddf3>
 8006d22:	2d0f      	cmp	r5, #15
 8006d24:	4682      	mov	sl, r0
 8006d26:	468b      	mov	fp, r1
 8006d28:	ddd7      	ble.n	8006cda <_strtod_l+0x3b2>
 8006d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2c:	1b2c      	subs	r4, r5, r4
 8006d2e:	441c      	add	r4, r3
 8006d30:	2c00      	cmp	r4, #0
 8006d32:	f340 8093 	ble.w	8006e5c <_strtod_l+0x534>
 8006d36:	f014 030f 	ands.w	r3, r4, #15
 8006d3a:	d00a      	beq.n	8006d52 <_strtod_l+0x42a>
 8006d3c:	495d      	ldr	r1, [pc, #372]	@ (8006eb4 <_strtod_l+0x58c>)
 8006d3e:	4652      	mov	r2, sl
 8006d40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d48:	465b      	mov	r3, fp
 8006d4a:	f7f9 fbc5 	bl	80004d8 <__aeabi_dmul>
 8006d4e:	4682      	mov	sl, r0
 8006d50:	468b      	mov	fp, r1
 8006d52:	f034 040f 	bics.w	r4, r4, #15
 8006d56:	d073      	beq.n	8006e40 <_strtod_l+0x518>
 8006d58:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006d5c:	dd49      	ble.n	8006df2 <_strtod_l+0x4ca>
 8006d5e:	2400      	movs	r4, #0
 8006d60:	46a0      	mov	r8, r4
 8006d62:	46a1      	mov	r9, r4
 8006d64:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d66:	2322      	movs	r3, #34	@ 0x22
 8006d68:	f04f 0a00 	mov.w	sl, #0
 8006d6c:	9a05      	ldr	r2, [sp, #20]
 8006d6e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8006eac <_strtod_l+0x584>
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f43f ae0f 	beq.w	800699a <_strtod_l+0x72>
 8006d7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d7e:	9805      	ldr	r0, [sp, #20]
 8006d80:	f7ff f950 	bl	8006024 <_Bfree>
 8006d84:	4649      	mov	r1, r9
 8006d86:	9805      	ldr	r0, [sp, #20]
 8006d88:	f7ff f94c 	bl	8006024 <_Bfree>
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	9805      	ldr	r0, [sp, #20]
 8006d90:	f7ff f948 	bl	8006024 <_Bfree>
 8006d94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d96:	9805      	ldr	r0, [sp, #20]
 8006d98:	f7ff f944 	bl	8006024 <_Bfree>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	9805      	ldr	r0, [sp, #20]
 8006da0:	f7ff f940 	bl	8006024 <_Bfree>
 8006da4:	e5f9      	b.n	800699a <_strtod_l+0x72>
 8006da6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006da8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006dac:	4293      	cmp	r3, r2
 8006dae:	dbbc      	blt.n	8006d2a <_strtod_l+0x402>
 8006db0:	4c40      	ldr	r4, [pc, #256]	@ (8006eb4 <_strtod_l+0x58c>)
 8006db2:	f1c5 050f 	rsb	r5, r5, #15
 8006db6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006dba:	4652      	mov	r2, sl
 8006dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc0:	465b      	mov	r3, fp
 8006dc2:	f7f9 fb89 	bl	80004d8 <__aeabi_dmul>
 8006dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc8:	1b5d      	subs	r5, r3, r5
 8006dca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006dce:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006dd2:	e791      	b.n	8006cf8 <_strtod_l+0x3d0>
 8006dd4:	3316      	adds	r3, #22
 8006dd6:	dba8      	blt.n	8006d2a <_strtod_l+0x402>
 8006dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dda:	4650      	mov	r0, sl
 8006ddc:	eba3 0808 	sub.w	r8, r3, r8
 8006de0:	4b34      	ldr	r3, [pc, #208]	@ (8006eb4 <_strtod_l+0x58c>)
 8006de2:	4659      	mov	r1, fp
 8006de4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006de8:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006dec:	f7f9 fc9e 	bl	800072c <__aeabi_ddiv>
 8006df0:	e75d      	b.n	8006cae <_strtod_l+0x386>
 8006df2:	2300      	movs	r3, #0
 8006df4:	4650      	mov	r0, sl
 8006df6:	4659      	mov	r1, fp
 8006df8:	461e      	mov	r6, r3
 8006dfa:	4f2f      	ldr	r7, [pc, #188]	@ (8006eb8 <_strtod_l+0x590>)
 8006dfc:	1124      	asrs	r4, r4, #4
 8006dfe:	2c01      	cmp	r4, #1
 8006e00:	dc21      	bgt.n	8006e46 <_strtod_l+0x51e>
 8006e02:	b10b      	cbz	r3, 8006e08 <_strtod_l+0x4e0>
 8006e04:	4682      	mov	sl, r0
 8006e06:	468b      	mov	fp, r1
 8006e08:	492b      	ldr	r1, [pc, #172]	@ (8006eb8 <_strtod_l+0x590>)
 8006e0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006e0e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006e12:	4652      	mov	r2, sl
 8006e14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e18:	465b      	mov	r3, fp
 8006e1a:	f7f9 fb5d 	bl	80004d8 <__aeabi_dmul>
 8006e1e:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <_strtod_l+0x584>)
 8006e20:	460a      	mov	r2, r1
 8006e22:	400b      	ands	r3, r1
 8006e24:	4925      	ldr	r1, [pc, #148]	@ (8006ebc <_strtod_l+0x594>)
 8006e26:	4682      	mov	sl, r0
 8006e28:	428b      	cmp	r3, r1
 8006e2a:	d898      	bhi.n	8006d5e <_strtod_l+0x436>
 8006e2c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006e30:	428b      	cmp	r3, r1
 8006e32:	bf86      	itte	hi
 8006e34:	f04f 3aff 	movhi.w	sl, #4294967295
 8006e38:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8006ec0 <_strtod_l+0x598>
 8006e3c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006e40:	2300      	movs	r3, #0
 8006e42:	9308      	str	r3, [sp, #32]
 8006e44:	e076      	b.n	8006f34 <_strtod_l+0x60c>
 8006e46:	07e2      	lsls	r2, r4, #31
 8006e48:	d504      	bpl.n	8006e54 <_strtod_l+0x52c>
 8006e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4e:	f7f9 fb43 	bl	80004d8 <__aeabi_dmul>
 8006e52:	2301      	movs	r3, #1
 8006e54:	3601      	adds	r6, #1
 8006e56:	1064      	asrs	r4, r4, #1
 8006e58:	3708      	adds	r7, #8
 8006e5a:	e7d0      	b.n	8006dfe <_strtod_l+0x4d6>
 8006e5c:	d0f0      	beq.n	8006e40 <_strtod_l+0x518>
 8006e5e:	4264      	negs	r4, r4
 8006e60:	f014 020f 	ands.w	r2, r4, #15
 8006e64:	d00a      	beq.n	8006e7c <_strtod_l+0x554>
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <_strtod_l+0x58c>)
 8006e68:	4650      	mov	r0, sl
 8006e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e6e:	4659      	mov	r1, fp
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f7f9 fc5a 	bl	800072c <__aeabi_ddiv>
 8006e78:	4682      	mov	sl, r0
 8006e7a:	468b      	mov	fp, r1
 8006e7c:	1124      	asrs	r4, r4, #4
 8006e7e:	d0df      	beq.n	8006e40 <_strtod_l+0x518>
 8006e80:	2c1f      	cmp	r4, #31
 8006e82:	dd1f      	ble.n	8006ec4 <_strtod_l+0x59c>
 8006e84:	2400      	movs	r4, #0
 8006e86:	46a0      	mov	r8, r4
 8006e88:	46a1      	mov	r9, r4
 8006e8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006e8c:	2322      	movs	r3, #34	@ 0x22
 8006e8e:	9a05      	ldr	r2, [sp, #20]
 8006e90:	f04f 0a00 	mov.w	sl, #0
 8006e94:	f04f 0b00 	mov.w	fp, #0
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e76b      	b.n	8006d74 <_strtod_l+0x44c>
 8006e9c:	08008d97 	.word	0x08008d97
 8006ea0:	08009060 	.word	0x08009060
 8006ea4:	08008d8f 	.word	0x08008d8f
 8006ea8:	08008dc6 	.word	0x08008dc6
 8006eac:	7ff00000 	.word	0x7ff00000
 8006eb0:	08008eff 	.word	0x08008eff
 8006eb4:	08008f98 	.word	0x08008f98
 8006eb8:	08008f70 	.word	0x08008f70
 8006ebc:	7ca00000 	.word	0x7ca00000
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	f014 0310 	ands.w	r3, r4, #16
 8006ec8:	bf18      	it	ne
 8006eca:	236a      	movne	r3, #106	@ 0x6a
 8006ecc:	4650      	mov	r0, sl
 8006ece:	9308      	str	r3, [sp, #32]
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	4e77      	ldr	r6, [pc, #476]	@ (80070b4 <_strtod_l+0x78c>)
 8006ed6:	07e7      	lsls	r7, r4, #31
 8006ed8:	d504      	bpl.n	8006ee4 <_strtod_l+0x5bc>
 8006eda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ede:	f7f9 fafb 	bl	80004d8 <__aeabi_dmul>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	1064      	asrs	r4, r4, #1
 8006ee6:	f106 0608 	add.w	r6, r6, #8
 8006eea:	d1f4      	bne.n	8006ed6 <_strtod_l+0x5ae>
 8006eec:	b10b      	cbz	r3, 8006ef2 <_strtod_l+0x5ca>
 8006eee:	4682      	mov	sl, r0
 8006ef0:	468b      	mov	fp, r1
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	b1b3      	cbz	r3, 8006f24 <_strtod_l+0x5fc>
 8006ef6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006efa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	4659      	mov	r1, fp
 8006f02:	dd0f      	ble.n	8006f24 <_strtod_l+0x5fc>
 8006f04:	2b1f      	cmp	r3, #31
 8006f06:	dd58      	ble.n	8006fba <_strtod_l+0x692>
 8006f08:	2b34      	cmp	r3, #52	@ 0x34
 8006f0a:	bfd8      	it	le
 8006f0c:	f04f 33ff 	movle.w	r3, #4294967295
 8006f10:	f04f 0a00 	mov.w	sl, #0
 8006f14:	bfcf      	iteee	gt
 8006f16:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006f1a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006f1e:	4093      	lslle	r3, r2
 8006f20:	ea03 0b01 	andle.w	fp, r3, r1
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	4650      	mov	r0, sl
 8006f2a:	4659      	mov	r1, fp
 8006f2c:	f7f9 fd3c 	bl	80009a8 <__aeabi_dcmpeq>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d1a7      	bne.n	8006e84 <_strtod_l+0x55c>
 8006f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f36:	464a      	mov	r2, r9
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	9805      	ldr	r0, [sp, #20]
 8006f40:	f7ff f8d8 	bl	80060f4 <__s2b>
 8006f44:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f43f af09 	beq.w	8006d5e <_strtod_l+0x436>
 8006f4c:	2400      	movs	r4, #0
 8006f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	eba3 0308 	sub.w	r3, r3, r8
 8006f58:	bfa8      	it	ge
 8006f5a:	2300      	movge	r3, #0
 8006f5c:	46a0      	mov	r8, r4
 8006f5e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f60:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006f64:	9316      	str	r3, [sp, #88]	@ 0x58
 8006f66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f68:	9805      	ldr	r0, [sp, #20]
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	f7ff f81a 	bl	8005fa4 <_Balloc>
 8006f70:	4681      	mov	r9, r0
 8006f72:	2800      	cmp	r0, #0
 8006f74:	f43f aef7 	beq.w	8006d66 <_strtod_l+0x43e>
 8006f78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f7a:	300c      	adds	r0, #12
 8006f7c:	691a      	ldr	r2, [r3, #16]
 8006f7e:	f103 010c 	add.w	r1, r3, #12
 8006f82:	3202      	adds	r2, #2
 8006f84:	0092      	lsls	r2, r2, #2
 8006f86:	f7fe f89e 	bl	80050c6 <memcpy>
 8006f8a:	ab1c      	add	r3, sp, #112	@ 0x70
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	4652      	mov	r2, sl
 8006f94:	465b      	mov	r3, fp
 8006f96:	9805      	ldr	r0, [sp, #20]
 8006f98:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006f9c:	f7ff fbd6 	bl	800674c <__d2b>
 8006fa0:	901a      	str	r0, [sp, #104]	@ 0x68
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f43f aedf 	beq.w	8006d66 <_strtod_l+0x43e>
 8006fa8:	2101      	movs	r1, #1
 8006faa:	9805      	ldr	r0, [sp, #20]
 8006fac:	f7ff f938 	bl	8006220 <__i2b>
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	b948      	cbnz	r0, 8006fc8 <_strtod_l+0x6a0>
 8006fb4:	f04f 0800 	mov.w	r8, #0
 8006fb8:	e6d5      	b.n	8006d66 <_strtod_l+0x43e>
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	ea03 0a0a 	and.w	sl, r3, sl
 8006fc6:	e7ad      	b.n	8006f24 <_strtod_l+0x5fc>
 8006fc8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006fca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006fcc:	2d00      	cmp	r5, #0
 8006fce:	bfab      	itete	ge
 8006fd0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006fd2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006fd4:	18ef      	addge	r7, r5, r3
 8006fd6:	1b5e      	sublt	r6, r3, r5
 8006fd8:	9b08      	ldr	r3, [sp, #32]
 8006fda:	bfa8      	it	ge
 8006fdc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006fde:	eba5 0503 	sub.w	r5, r5, r3
 8006fe2:	4415      	add	r5, r2
 8006fe4:	4b34      	ldr	r3, [pc, #208]	@ (80070b8 <_strtod_l+0x790>)
 8006fe6:	f105 35ff 	add.w	r5, r5, #4294967295
 8006fea:	bfb8      	it	lt
 8006fec:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006fee:	429d      	cmp	r5, r3
 8006ff0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006ff4:	da50      	bge.n	8007098 <_strtod_l+0x770>
 8006ff6:	1b5b      	subs	r3, r3, r5
 8006ff8:	2b1f      	cmp	r3, #31
 8006ffa:	f04f 0101 	mov.w	r1, #1
 8006ffe:	eba2 0203 	sub.w	r2, r2, r3
 8007002:	dc3d      	bgt.n	8007080 <_strtod_l+0x758>
 8007004:	fa01 f303 	lsl.w	r3, r1, r3
 8007008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800700a:	2300      	movs	r3, #0
 800700c:	9310      	str	r3, [sp, #64]	@ 0x40
 800700e:	18bd      	adds	r5, r7, r2
 8007010:	9b08      	ldr	r3, [sp, #32]
 8007012:	42af      	cmp	r7, r5
 8007014:	4416      	add	r6, r2
 8007016:	441e      	add	r6, r3
 8007018:	463b      	mov	r3, r7
 800701a:	bfa8      	it	ge
 800701c:	462b      	movge	r3, r5
 800701e:	42b3      	cmp	r3, r6
 8007020:	bfa8      	it	ge
 8007022:	4633      	movge	r3, r6
 8007024:	2b00      	cmp	r3, #0
 8007026:	bfc2      	ittt	gt
 8007028:	1aed      	subgt	r5, r5, r3
 800702a:	1af6      	subgt	r6, r6, r3
 800702c:	1aff      	subgt	r7, r7, r3
 800702e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007030:	2b00      	cmp	r3, #0
 8007032:	dd16      	ble.n	8007062 <_strtod_l+0x73a>
 8007034:	4641      	mov	r1, r8
 8007036:	461a      	mov	r2, r3
 8007038:	9805      	ldr	r0, [sp, #20]
 800703a:	f7ff f9a9 	bl	8006390 <__pow5mult>
 800703e:	4680      	mov	r8, r0
 8007040:	2800      	cmp	r0, #0
 8007042:	d0b7      	beq.n	8006fb4 <_strtod_l+0x68c>
 8007044:	4601      	mov	r1, r0
 8007046:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007048:	9805      	ldr	r0, [sp, #20]
 800704a:	f7ff f8ff 	bl	800624c <__multiply>
 800704e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007050:	2800      	cmp	r0, #0
 8007052:	f43f ae88 	beq.w	8006d66 <_strtod_l+0x43e>
 8007056:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007058:	9805      	ldr	r0, [sp, #20]
 800705a:	f7fe ffe3 	bl	8006024 <_Bfree>
 800705e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007060:	931a      	str	r3, [sp, #104]	@ 0x68
 8007062:	2d00      	cmp	r5, #0
 8007064:	dc1d      	bgt.n	80070a2 <_strtod_l+0x77a>
 8007066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	dd27      	ble.n	80070bc <_strtod_l+0x794>
 800706c:	4649      	mov	r1, r9
 800706e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007070:	9805      	ldr	r0, [sp, #20]
 8007072:	f7ff f98d 	bl	8006390 <__pow5mult>
 8007076:	4681      	mov	r9, r0
 8007078:	bb00      	cbnz	r0, 80070bc <_strtod_l+0x794>
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	e672      	b.n	8006d66 <_strtod_l+0x43e>
 8007080:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007084:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007088:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800708c:	35e2      	adds	r5, #226	@ 0xe2
 800708e:	fa01 f305 	lsl.w	r3, r1, r5
 8007092:	9310      	str	r3, [sp, #64]	@ 0x40
 8007094:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007096:	e7ba      	b.n	800700e <_strtod_l+0x6e6>
 8007098:	2300      	movs	r3, #0
 800709a:	9310      	str	r3, [sp, #64]	@ 0x40
 800709c:	2301      	movs	r3, #1
 800709e:	9313      	str	r3, [sp, #76]	@ 0x4c
 80070a0:	e7b5      	b.n	800700e <_strtod_l+0x6e6>
 80070a2:	462a      	mov	r2, r5
 80070a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070a6:	9805      	ldr	r0, [sp, #20]
 80070a8:	f7ff f9cc 	bl	8006444 <__lshift>
 80070ac:	901a      	str	r0, [sp, #104]	@ 0x68
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d1d9      	bne.n	8007066 <_strtod_l+0x73e>
 80070b2:	e658      	b.n	8006d66 <_strtod_l+0x43e>
 80070b4:	08009088 	.word	0x08009088
 80070b8:	fffffc02 	.word	0xfffffc02
 80070bc:	2e00      	cmp	r6, #0
 80070be:	dd07      	ble.n	80070d0 <_strtod_l+0x7a8>
 80070c0:	4649      	mov	r1, r9
 80070c2:	4632      	mov	r2, r6
 80070c4:	9805      	ldr	r0, [sp, #20]
 80070c6:	f7ff f9bd 	bl	8006444 <__lshift>
 80070ca:	4681      	mov	r9, r0
 80070cc:	2800      	cmp	r0, #0
 80070ce:	d0d4      	beq.n	800707a <_strtod_l+0x752>
 80070d0:	2f00      	cmp	r7, #0
 80070d2:	dd08      	ble.n	80070e6 <_strtod_l+0x7be>
 80070d4:	4641      	mov	r1, r8
 80070d6:	463a      	mov	r2, r7
 80070d8:	9805      	ldr	r0, [sp, #20]
 80070da:	f7ff f9b3 	bl	8006444 <__lshift>
 80070de:	4680      	mov	r8, r0
 80070e0:	2800      	cmp	r0, #0
 80070e2:	f43f ae40 	beq.w	8006d66 <_strtod_l+0x43e>
 80070e6:	464a      	mov	r2, r9
 80070e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070ea:	9805      	ldr	r0, [sp, #20]
 80070ec:	f7ff fa32 	bl	8006554 <__mdiff>
 80070f0:	4604      	mov	r4, r0
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f43f ae37 	beq.w	8006d66 <_strtod_l+0x43e>
 80070f8:	68c3      	ldr	r3, [r0, #12]
 80070fa:	4641      	mov	r1, r8
 80070fc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070fe:	2300      	movs	r3, #0
 8007100:	60c3      	str	r3, [r0, #12]
 8007102:	f7ff fa0b 	bl	800651c <__mcmp>
 8007106:	2800      	cmp	r0, #0
 8007108:	da3d      	bge.n	8007186 <_strtod_l+0x85e>
 800710a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800710c:	ea53 030a 	orrs.w	r3, r3, sl
 8007110:	d163      	bne.n	80071da <_strtod_l+0x8b2>
 8007112:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007116:	2b00      	cmp	r3, #0
 8007118:	d15f      	bne.n	80071da <_strtod_l+0x8b2>
 800711a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800711e:	0d1b      	lsrs	r3, r3, #20
 8007120:	051b      	lsls	r3, r3, #20
 8007122:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007126:	d958      	bls.n	80071da <_strtod_l+0x8b2>
 8007128:	6963      	ldr	r3, [r4, #20]
 800712a:	b913      	cbnz	r3, 8007132 <_strtod_l+0x80a>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	2b01      	cmp	r3, #1
 8007130:	dd53      	ble.n	80071da <_strtod_l+0x8b2>
 8007132:	4621      	mov	r1, r4
 8007134:	2201      	movs	r2, #1
 8007136:	9805      	ldr	r0, [sp, #20]
 8007138:	f7ff f984 	bl	8006444 <__lshift>
 800713c:	4641      	mov	r1, r8
 800713e:	4604      	mov	r4, r0
 8007140:	f7ff f9ec 	bl	800651c <__mcmp>
 8007144:	2800      	cmp	r0, #0
 8007146:	dd48      	ble.n	80071da <_strtod_l+0x8b2>
 8007148:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800714c:	9a08      	ldr	r2, [sp, #32]
 800714e:	0d1b      	lsrs	r3, r3, #20
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	2a00      	cmp	r2, #0
 8007154:	d062      	beq.n	800721c <_strtod_l+0x8f4>
 8007156:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800715a:	d85f      	bhi.n	800721c <_strtod_l+0x8f4>
 800715c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007160:	f67f ae94 	bls.w	8006e8c <_strtod_l+0x564>
 8007164:	4650      	mov	r0, sl
 8007166:	4659      	mov	r1, fp
 8007168:	4ba3      	ldr	r3, [pc, #652]	@ (80073f8 <_strtod_l+0xad0>)
 800716a:	2200      	movs	r2, #0
 800716c:	f7f9 f9b4 	bl	80004d8 <__aeabi_dmul>
 8007170:	4ba2      	ldr	r3, [pc, #648]	@ (80073fc <_strtod_l+0xad4>)
 8007172:	4682      	mov	sl, r0
 8007174:	400b      	ands	r3, r1
 8007176:	468b      	mov	fp, r1
 8007178:	2b00      	cmp	r3, #0
 800717a:	f47f adff 	bne.w	8006d7c <_strtod_l+0x454>
 800717e:	2322      	movs	r3, #34	@ 0x22
 8007180:	9a05      	ldr	r2, [sp, #20]
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	e5fa      	b.n	8006d7c <_strtod_l+0x454>
 8007186:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800718a:	d165      	bne.n	8007258 <_strtod_l+0x930>
 800718c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800718e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007192:	b35a      	cbz	r2, 80071ec <_strtod_l+0x8c4>
 8007194:	4a9a      	ldr	r2, [pc, #616]	@ (8007400 <_strtod_l+0xad8>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d12b      	bne.n	80071f2 <_strtod_l+0x8ca>
 800719a:	9b08      	ldr	r3, [sp, #32]
 800719c:	4651      	mov	r1, sl
 800719e:	b303      	cbz	r3, 80071e2 <_strtod_l+0x8ba>
 80071a0:	465a      	mov	r2, fp
 80071a2:	4b96      	ldr	r3, [pc, #600]	@ (80073fc <_strtod_l+0xad4>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	d81b      	bhi.n	80071e8 <_strtod_l+0x8c0>
 80071b0:	0d1b      	lsrs	r3, r3, #20
 80071b2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80071b6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ba:	4299      	cmp	r1, r3
 80071bc:	d119      	bne.n	80071f2 <_strtod_l+0x8ca>
 80071be:	4b91      	ldr	r3, [pc, #580]	@ (8007404 <_strtod_l+0xadc>)
 80071c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d102      	bne.n	80071cc <_strtod_l+0x8a4>
 80071c6:	3101      	adds	r1, #1
 80071c8:	f43f adcd 	beq.w	8006d66 <_strtod_l+0x43e>
 80071cc:	f04f 0a00 	mov.w	sl, #0
 80071d0:	4b8a      	ldr	r3, [pc, #552]	@ (80073fc <_strtod_l+0xad4>)
 80071d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071d4:	401a      	ands	r2, r3
 80071d6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80071da:	9b08      	ldr	r3, [sp, #32]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1c1      	bne.n	8007164 <_strtod_l+0x83c>
 80071e0:	e5cc      	b.n	8006d7c <_strtod_l+0x454>
 80071e2:	f04f 33ff 	mov.w	r3, #4294967295
 80071e6:	e7e8      	b.n	80071ba <_strtod_l+0x892>
 80071e8:	4613      	mov	r3, r2
 80071ea:	e7e6      	b.n	80071ba <_strtod_l+0x892>
 80071ec:	ea53 030a 	orrs.w	r3, r3, sl
 80071f0:	d0aa      	beq.n	8007148 <_strtod_l+0x820>
 80071f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80071f4:	b1db      	cbz	r3, 800722e <_strtod_l+0x906>
 80071f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071f8:	4213      	tst	r3, r2
 80071fa:	d0ee      	beq.n	80071da <_strtod_l+0x8b2>
 80071fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fe:	4650      	mov	r0, sl
 8007200:	4659      	mov	r1, fp
 8007202:	9a08      	ldr	r2, [sp, #32]
 8007204:	b1bb      	cbz	r3, 8007236 <_strtod_l+0x90e>
 8007206:	f7ff fb6d 	bl	80068e4 <sulp>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007212:	f7f8 ffab 	bl	800016c <__adddf3>
 8007216:	4682      	mov	sl, r0
 8007218:	468b      	mov	fp, r1
 800721a:	e7de      	b.n	80071da <_strtod_l+0x8b2>
 800721c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007220:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007224:	f04f 3aff 	mov.w	sl, #4294967295
 8007228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800722c:	e7d5      	b.n	80071da <_strtod_l+0x8b2>
 800722e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007230:	ea13 0f0a 	tst.w	r3, sl
 8007234:	e7e1      	b.n	80071fa <_strtod_l+0x8d2>
 8007236:	f7ff fb55 	bl	80068e4 <sulp>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007242:	f7f8 ff91 	bl	8000168 <__aeabi_dsub>
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	f7f9 fbab 	bl	80009a8 <__aeabi_dcmpeq>
 8007252:	2800      	cmp	r0, #0
 8007254:	d0c1      	beq.n	80071da <_strtod_l+0x8b2>
 8007256:	e619      	b.n	8006e8c <_strtod_l+0x564>
 8007258:	4641      	mov	r1, r8
 800725a:	4620      	mov	r0, r4
 800725c:	f7ff face 	bl	80067fc <__ratio>
 8007260:	2200      	movs	r2, #0
 8007262:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	f7f9 fbb1 	bl	80009d0 <__aeabi_dcmple>
 800726e:	2800      	cmp	r0, #0
 8007270:	d06d      	beq.n	800734e <_strtod_l+0xa26>
 8007272:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d178      	bne.n	800736a <_strtod_l+0xa42>
 8007278:	f1ba 0f00 	cmp.w	sl, #0
 800727c:	d156      	bne.n	800732c <_strtod_l+0xa04>
 800727e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007284:	2b00      	cmp	r3, #0
 8007286:	d158      	bne.n	800733a <_strtod_l+0xa12>
 8007288:	2200      	movs	r2, #0
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	4b5e      	ldr	r3, [pc, #376]	@ (8007408 <_strtod_l+0xae0>)
 8007290:	f7f9 fb94 	bl	80009bc <__aeabi_dcmplt>
 8007294:	2800      	cmp	r0, #0
 8007296:	d157      	bne.n	8007348 <_strtod_l+0xa20>
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	2200      	movs	r2, #0
 800729e:	4b5b      	ldr	r3, [pc, #364]	@ (800740c <_strtod_l+0xae4>)
 80072a0:	f7f9 f91a 	bl	80004d8 <__aeabi_dmul>
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80072ac:	9606      	str	r6, [sp, #24]
 80072ae:	9307      	str	r3, [sp, #28]
 80072b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072b4:	4d51      	ldr	r5, [pc, #324]	@ (80073fc <_strtod_l+0xad4>)
 80072b6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072bc:	401d      	ands	r5, r3
 80072be:	4b54      	ldr	r3, [pc, #336]	@ (8007410 <_strtod_l+0xae8>)
 80072c0:	429d      	cmp	r5, r3
 80072c2:	f040 80ab 	bne.w	800741c <_strtod_l+0xaf4>
 80072c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072c8:	4650      	mov	r0, sl
 80072ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80072ce:	4659      	mov	r1, fp
 80072d0:	f7ff f9d4 	bl	800667c <__ulp>
 80072d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072d8:	f7f9 f8fe 	bl	80004d8 <__aeabi_dmul>
 80072dc:	4652      	mov	r2, sl
 80072de:	465b      	mov	r3, fp
 80072e0:	f7f8 ff44 	bl	800016c <__adddf3>
 80072e4:	460b      	mov	r3, r1
 80072e6:	4945      	ldr	r1, [pc, #276]	@ (80073fc <_strtod_l+0xad4>)
 80072e8:	4a4a      	ldr	r2, [pc, #296]	@ (8007414 <_strtod_l+0xaec>)
 80072ea:	4019      	ands	r1, r3
 80072ec:	4291      	cmp	r1, r2
 80072ee:	4682      	mov	sl, r0
 80072f0:	d942      	bls.n	8007378 <_strtod_l+0xa50>
 80072f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072f4:	4b43      	ldr	r3, [pc, #268]	@ (8007404 <_strtod_l+0xadc>)
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d103      	bne.n	8007302 <_strtod_l+0x9da>
 80072fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072fc:	3301      	adds	r3, #1
 80072fe:	f43f ad32 	beq.w	8006d66 <_strtod_l+0x43e>
 8007302:	f04f 3aff 	mov.w	sl, #4294967295
 8007306:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007404 <_strtod_l+0xadc>
 800730a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800730c:	9805      	ldr	r0, [sp, #20]
 800730e:	f7fe fe89 	bl	8006024 <_Bfree>
 8007312:	4649      	mov	r1, r9
 8007314:	9805      	ldr	r0, [sp, #20]
 8007316:	f7fe fe85 	bl	8006024 <_Bfree>
 800731a:	4641      	mov	r1, r8
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	f7fe fe81 	bl	8006024 <_Bfree>
 8007322:	4621      	mov	r1, r4
 8007324:	9805      	ldr	r0, [sp, #20]
 8007326:	f7fe fe7d 	bl	8006024 <_Bfree>
 800732a:	e61c      	b.n	8006f66 <_strtod_l+0x63e>
 800732c:	f1ba 0f01 	cmp.w	sl, #1
 8007330:	d103      	bne.n	800733a <_strtod_l+0xa12>
 8007332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007334:	2b00      	cmp	r3, #0
 8007336:	f43f ada9 	beq.w	8006e8c <_strtod_l+0x564>
 800733a:	2200      	movs	r2, #0
 800733c:	4b36      	ldr	r3, [pc, #216]	@ (8007418 <_strtod_l+0xaf0>)
 800733e:	2600      	movs	r6, #0
 8007340:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007344:	4f30      	ldr	r7, [pc, #192]	@ (8007408 <_strtod_l+0xae0>)
 8007346:	e7b3      	b.n	80072b0 <_strtod_l+0x988>
 8007348:	2600      	movs	r6, #0
 800734a:	4f30      	ldr	r7, [pc, #192]	@ (800740c <_strtod_l+0xae4>)
 800734c:	e7ac      	b.n	80072a8 <_strtod_l+0x980>
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	4b2e      	ldr	r3, [pc, #184]	@ (800740c <_strtod_l+0xae4>)
 8007354:	2200      	movs	r2, #0
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800735c:	4606      	mov	r6, r0
 800735e:	460f      	mov	r7, r1
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0a1      	beq.n	80072a8 <_strtod_l+0x980>
 8007364:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007368:	e7a2      	b.n	80072b0 <_strtod_l+0x988>
 800736a:	2200      	movs	r2, #0
 800736c:	4b26      	ldr	r3, [pc, #152]	@ (8007408 <_strtod_l+0xae0>)
 800736e:	4616      	mov	r6, r2
 8007370:	461f      	mov	r7, r3
 8007372:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007376:	e79b      	b.n	80072b0 <_strtod_l+0x988>
 8007378:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800737c:	9b08      	ldr	r3, [sp, #32]
 800737e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1c1      	bne.n	800730a <_strtod_l+0x9e2>
 8007386:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800738a:	0d1b      	lsrs	r3, r3, #20
 800738c:	051b      	lsls	r3, r3, #20
 800738e:	429d      	cmp	r5, r3
 8007390:	d1bb      	bne.n	800730a <_strtod_l+0x9e2>
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fbe7 	bl	8000b68 <__aeabi_d2lz>
 800739a:	f7f9 f86f 	bl	800047c <__aeabi_l2d>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4630      	mov	r0, r6
 80073a4:	4639      	mov	r1, r7
 80073a6:	f7f8 fedf 	bl	8000168 <__aeabi_dsub>
 80073aa:	460b      	mov	r3, r1
 80073ac:	4602      	mov	r2, r0
 80073ae:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80073b2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80073b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b8:	ea46 060a 	orr.w	r6, r6, sl
 80073bc:	431e      	orrs	r6, r3
 80073be:	d06a      	beq.n	8007496 <_strtod_l+0xb6e>
 80073c0:	a309      	add	r3, pc, #36	@ (adr r3, 80073e8 <_strtod_l+0xac0>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f9 faf9 	bl	80009bc <__aeabi_dcmplt>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f47f acd6 	bne.w	8006d7c <_strtod_l+0x454>
 80073d0:	a307      	add	r3, pc, #28	@ (adr r3, 80073f0 <_strtod_l+0xac8>)
 80073d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073da:	f7f9 fb0d 	bl	80009f8 <__aeabi_dcmpgt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d093      	beq.n	800730a <_strtod_l+0x9e2>
 80073e2:	e4cb      	b.n	8006d7c <_strtod_l+0x454>
 80073e4:	f3af 8000 	nop.w
 80073e8:	94a03595 	.word	0x94a03595
 80073ec:	3fdfffff 	.word	0x3fdfffff
 80073f0:	35afe535 	.word	0x35afe535
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	39500000 	.word	0x39500000
 80073fc:	7ff00000 	.word	0x7ff00000
 8007400:	000fffff 	.word	0x000fffff
 8007404:	7fefffff 	.word	0x7fefffff
 8007408:	3ff00000 	.word	0x3ff00000
 800740c:	3fe00000 	.word	0x3fe00000
 8007410:	7fe00000 	.word	0x7fe00000
 8007414:	7c9fffff 	.word	0x7c9fffff
 8007418:	bff00000 	.word	0xbff00000
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	b323      	cbz	r3, 800746a <_strtod_l+0xb42>
 8007420:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007424:	d821      	bhi.n	800746a <_strtod_l+0xb42>
 8007426:	a328      	add	r3, pc, #160	@ (adr r3, 80074c8 <_strtod_l+0xba0>)
 8007428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f9 face 	bl	80009d0 <__aeabi_dcmple>
 8007434:	b1a0      	cbz	r0, 8007460 <_strtod_l+0xb38>
 8007436:	4639      	mov	r1, r7
 8007438:	4630      	mov	r0, r6
 800743a:	f7f9 fb25 	bl	8000a88 <__aeabi_d2uiz>
 800743e:	2801      	cmp	r0, #1
 8007440:	bf38      	it	cc
 8007442:	2001      	movcc	r0, #1
 8007444:	f7f8 ffce 	bl	80003e4 <__aeabi_ui2d>
 8007448:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	b9fb      	cbnz	r3, 8007490 <_strtod_l+0xb68>
 8007450:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007454:	9014      	str	r0, [sp, #80]	@ 0x50
 8007456:	9315      	str	r3, [sp, #84]	@ 0x54
 8007458:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800745c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007460:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007462:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007466:	1b5b      	subs	r3, r3, r5
 8007468:	9311      	str	r3, [sp, #68]	@ 0x44
 800746a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800746e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007472:	f7ff f903 	bl	800667c <__ulp>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4650      	mov	r0, sl
 800747c:	4659      	mov	r1, fp
 800747e:	f7f9 f82b 	bl	80004d8 <__aeabi_dmul>
 8007482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007486:	f7f8 fe71 	bl	800016c <__adddf3>
 800748a:	4682      	mov	sl, r0
 800748c:	468b      	mov	fp, r1
 800748e:	e775      	b.n	800737c <_strtod_l+0xa54>
 8007490:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007494:	e7e0      	b.n	8007458 <_strtod_l+0xb30>
 8007496:	a30e      	add	r3, pc, #56	@ (adr r3, 80074d0 <_strtod_l+0xba8>)
 8007498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749c:	f7f9 fa8e 	bl	80009bc <__aeabi_dcmplt>
 80074a0:	e79d      	b.n	80073de <_strtod_l+0xab6>
 80074a2:	2300      	movs	r3, #0
 80074a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80074a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	f7ff ba79 	b.w	80069a2 <_strtod_l+0x7a>
 80074b0:	2a65      	cmp	r2, #101	@ 0x65
 80074b2:	f43f ab72 	beq.w	8006b9a <_strtod_l+0x272>
 80074b6:	2a45      	cmp	r2, #69	@ 0x45
 80074b8:	f43f ab6f 	beq.w	8006b9a <_strtod_l+0x272>
 80074bc:	2301      	movs	r3, #1
 80074be:	f7ff bbaa 	b.w	8006c16 <_strtod_l+0x2ee>
 80074c2:	bf00      	nop
 80074c4:	f3af 8000 	nop.w
 80074c8:	ffc00000 	.word	0xffc00000
 80074cc:	41dfffff 	.word	0x41dfffff
 80074d0:	94a03595 	.word	0x94a03595
 80074d4:	3fcfffff 	.word	0x3fcfffff

080074d8 <_strtod_r>:
 80074d8:	4b01      	ldr	r3, [pc, #4]	@ (80074e0 <_strtod_r+0x8>)
 80074da:	f7ff ba25 	b.w	8006928 <_strtod_l>
 80074de:	bf00      	nop
 80074e0:	20000068 	.word	0x20000068

080074e4 <_strtol_l.isra.0>:
 80074e4:	2b24      	cmp	r3, #36	@ 0x24
 80074e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ea:	4686      	mov	lr, r0
 80074ec:	4690      	mov	r8, r2
 80074ee:	d801      	bhi.n	80074f4 <_strtol_l.isra.0+0x10>
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d106      	bne.n	8007502 <_strtol_l.isra.0+0x1e>
 80074f4:	f7fd fdac 	bl	8005050 <__errno>
 80074f8:	2316      	movs	r3, #22
 80074fa:	6003      	str	r3, [r0, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	460d      	mov	r5, r1
 8007504:	4833      	ldr	r0, [pc, #204]	@ (80075d4 <_strtol_l.isra.0+0xf0>)
 8007506:	462a      	mov	r2, r5
 8007508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800750c:	5d06      	ldrb	r6, [r0, r4]
 800750e:	f016 0608 	ands.w	r6, r6, #8
 8007512:	d1f8      	bne.n	8007506 <_strtol_l.isra.0+0x22>
 8007514:	2c2d      	cmp	r4, #45	@ 0x2d
 8007516:	d110      	bne.n	800753a <_strtol_l.isra.0+0x56>
 8007518:	2601      	movs	r6, #1
 800751a:	782c      	ldrb	r4, [r5, #0]
 800751c:	1c95      	adds	r5, r2, #2
 800751e:	f033 0210 	bics.w	r2, r3, #16
 8007522:	d115      	bne.n	8007550 <_strtol_l.isra.0+0x6c>
 8007524:	2c30      	cmp	r4, #48	@ 0x30
 8007526:	d10d      	bne.n	8007544 <_strtol_l.isra.0+0x60>
 8007528:	782a      	ldrb	r2, [r5, #0]
 800752a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800752e:	2a58      	cmp	r2, #88	@ 0x58
 8007530:	d108      	bne.n	8007544 <_strtol_l.isra.0+0x60>
 8007532:	786c      	ldrb	r4, [r5, #1]
 8007534:	3502      	adds	r5, #2
 8007536:	2310      	movs	r3, #16
 8007538:	e00a      	b.n	8007550 <_strtol_l.isra.0+0x6c>
 800753a:	2c2b      	cmp	r4, #43	@ 0x2b
 800753c:	bf04      	itt	eq
 800753e:	782c      	ldrbeq	r4, [r5, #0]
 8007540:	1c95      	addeq	r5, r2, #2
 8007542:	e7ec      	b.n	800751e <_strtol_l.isra.0+0x3a>
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f6      	bne.n	8007536 <_strtol_l.isra.0+0x52>
 8007548:	2c30      	cmp	r4, #48	@ 0x30
 800754a:	bf14      	ite	ne
 800754c:	230a      	movne	r3, #10
 800754e:	2308      	moveq	r3, #8
 8007550:	2200      	movs	r2, #0
 8007552:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007556:	f10c 3cff 	add.w	ip, ip, #4294967295
 800755a:	fbbc f9f3 	udiv	r9, ip, r3
 800755e:	4610      	mov	r0, r2
 8007560:	fb03 ca19 	mls	sl, r3, r9, ip
 8007564:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007568:	2f09      	cmp	r7, #9
 800756a:	d80f      	bhi.n	800758c <_strtol_l.isra.0+0xa8>
 800756c:	463c      	mov	r4, r7
 800756e:	42a3      	cmp	r3, r4
 8007570:	dd1b      	ble.n	80075aa <_strtol_l.isra.0+0xc6>
 8007572:	1c57      	adds	r7, r2, #1
 8007574:	d007      	beq.n	8007586 <_strtol_l.isra.0+0xa2>
 8007576:	4581      	cmp	r9, r0
 8007578:	d314      	bcc.n	80075a4 <_strtol_l.isra.0+0xc0>
 800757a:	d101      	bne.n	8007580 <_strtol_l.isra.0+0x9c>
 800757c:	45a2      	cmp	sl, r4
 800757e:	db11      	blt.n	80075a4 <_strtol_l.isra.0+0xc0>
 8007580:	2201      	movs	r2, #1
 8007582:	fb00 4003 	mla	r0, r0, r3, r4
 8007586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800758a:	e7eb      	b.n	8007564 <_strtol_l.isra.0+0x80>
 800758c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007590:	2f19      	cmp	r7, #25
 8007592:	d801      	bhi.n	8007598 <_strtol_l.isra.0+0xb4>
 8007594:	3c37      	subs	r4, #55	@ 0x37
 8007596:	e7ea      	b.n	800756e <_strtol_l.isra.0+0x8a>
 8007598:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800759c:	2f19      	cmp	r7, #25
 800759e:	d804      	bhi.n	80075aa <_strtol_l.isra.0+0xc6>
 80075a0:	3c57      	subs	r4, #87	@ 0x57
 80075a2:	e7e4      	b.n	800756e <_strtol_l.isra.0+0x8a>
 80075a4:	f04f 32ff 	mov.w	r2, #4294967295
 80075a8:	e7ed      	b.n	8007586 <_strtol_l.isra.0+0xa2>
 80075aa:	1c53      	adds	r3, r2, #1
 80075ac:	d108      	bne.n	80075c0 <_strtol_l.isra.0+0xdc>
 80075ae:	2322      	movs	r3, #34	@ 0x22
 80075b0:	4660      	mov	r0, ip
 80075b2:	f8ce 3000 	str.w	r3, [lr]
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	d0a0      	beq.n	80074fe <_strtol_l.isra.0+0x1a>
 80075bc:	1e69      	subs	r1, r5, #1
 80075be:	e006      	b.n	80075ce <_strtol_l.isra.0+0xea>
 80075c0:	b106      	cbz	r6, 80075c4 <_strtol_l.isra.0+0xe0>
 80075c2:	4240      	negs	r0, r0
 80075c4:	f1b8 0f00 	cmp.w	r8, #0
 80075c8:	d099      	beq.n	80074fe <_strtol_l.isra.0+0x1a>
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d1f6      	bne.n	80075bc <_strtol_l.isra.0+0xd8>
 80075ce:	f8c8 1000 	str.w	r1, [r8]
 80075d2:	e794      	b.n	80074fe <_strtol_l.isra.0+0x1a>
 80075d4:	080090b1 	.word	0x080090b1

080075d8 <_strtol_r>:
 80075d8:	f7ff bf84 	b.w	80074e4 <_strtol_l.isra.0>

080075dc <__ssputs_r>:
 80075dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e0:	461f      	mov	r7, r3
 80075e2:	688e      	ldr	r6, [r1, #8]
 80075e4:	4682      	mov	sl, r0
 80075e6:	42be      	cmp	r6, r7
 80075e8:	460c      	mov	r4, r1
 80075ea:	4690      	mov	r8, r2
 80075ec:	680b      	ldr	r3, [r1, #0]
 80075ee:	d82d      	bhi.n	800764c <__ssputs_r+0x70>
 80075f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075f8:	d026      	beq.n	8007648 <__ssputs_r+0x6c>
 80075fa:	6965      	ldr	r5, [r4, #20]
 80075fc:	6909      	ldr	r1, [r1, #16]
 80075fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007602:	eba3 0901 	sub.w	r9, r3, r1
 8007606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800760a:	1c7b      	adds	r3, r7, #1
 800760c:	444b      	add	r3, r9
 800760e:	106d      	asrs	r5, r5, #1
 8007610:	429d      	cmp	r5, r3
 8007612:	bf38      	it	cc
 8007614:	461d      	movcc	r5, r3
 8007616:	0553      	lsls	r3, r2, #21
 8007618:	d527      	bpl.n	800766a <__ssputs_r+0x8e>
 800761a:	4629      	mov	r1, r5
 800761c:	f7fe fc36 	bl	8005e8c <_malloc_r>
 8007620:	4606      	mov	r6, r0
 8007622:	b360      	cbz	r0, 800767e <__ssputs_r+0xa2>
 8007624:	464a      	mov	r2, r9
 8007626:	6921      	ldr	r1, [r4, #16]
 8007628:	f7fd fd4d 	bl	80050c6 <memcpy>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007636:	81a3      	strh	r3, [r4, #12]
 8007638:	6126      	str	r6, [r4, #16]
 800763a:	444e      	add	r6, r9
 800763c:	6026      	str	r6, [r4, #0]
 800763e:	463e      	mov	r6, r7
 8007640:	6165      	str	r5, [r4, #20]
 8007642:	eba5 0509 	sub.w	r5, r5, r9
 8007646:	60a5      	str	r5, [r4, #8]
 8007648:	42be      	cmp	r6, r7
 800764a:	d900      	bls.n	800764e <__ssputs_r+0x72>
 800764c:	463e      	mov	r6, r7
 800764e:	4632      	mov	r2, r6
 8007650:	4641      	mov	r1, r8
 8007652:	6820      	ldr	r0, [r4, #0]
 8007654:	f000 f9c2 	bl	80079dc <memmove>
 8007658:	2000      	movs	r0, #0
 800765a:	68a3      	ldr	r3, [r4, #8]
 800765c:	1b9b      	subs	r3, r3, r6
 800765e:	60a3      	str	r3, [r4, #8]
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	4433      	add	r3, r6
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766a:	462a      	mov	r2, r5
 800766c:	f000 fd75 	bl	800815a <_realloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	2800      	cmp	r0, #0
 8007674:	d1e0      	bne.n	8007638 <__ssputs_r+0x5c>
 8007676:	4650      	mov	r0, sl
 8007678:	6921      	ldr	r1, [r4, #16]
 800767a:	f7fe fb95 	bl	8005da8 <_free_r>
 800767e:	230c      	movs	r3, #12
 8007680:	f8ca 3000 	str.w	r3, [sl]
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	e7e9      	b.n	8007666 <__ssputs_r+0x8a>
	...

08007694 <_svfiprintf_r>:
 8007694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	4698      	mov	r8, r3
 800769a:	898b      	ldrh	r3, [r1, #12]
 800769c:	4607      	mov	r7, r0
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	460d      	mov	r5, r1
 80076a2:	4614      	mov	r4, r2
 80076a4:	b09d      	sub	sp, #116	@ 0x74
 80076a6:	d510      	bpl.n	80076ca <_svfiprintf_r+0x36>
 80076a8:	690b      	ldr	r3, [r1, #16]
 80076aa:	b973      	cbnz	r3, 80076ca <_svfiprintf_r+0x36>
 80076ac:	2140      	movs	r1, #64	@ 0x40
 80076ae:	f7fe fbed 	bl	8005e8c <_malloc_r>
 80076b2:	6028      	str	r0, [r5, #0]
 80076b4:	6128      	str	r0, [r5, #16]
 80076b6:	b930      	cbnz	r0, 80076c6 <_svfiprintf_r+0x32>
 80076b8:	230c      	movs	r3, #12
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	f04f 30ff 	mov.w	r0, #4294967295
 80076c0:	b01d      	add	sp, #116	@ 0x74
 80076c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c6:	2340      	movs	r3, #64	@ 0x40
 80076c8:	616b      	str	r3, [r5, #20]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ce:	2320      	movs	r3, #32
 80076d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076d4:	2330      	movs	r3, #48	@ 0x30
 80076d6:	f04f 0901 	mov.w	r9, #1
 80076da:	f8cd 800c 	str.w	r8, [sp, #12]
 80076de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007878 <_svfiprintf_r+0x1e4>
 80076e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076e6:	4623      	mov	r3, r4
 80076e8:	469a      	mov	sl, r3
 80076ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ee:	b10a      	cbz	r2, 80076f4 <_svfiprintf_r+0x60>
 80076f0:	2a25      	cmp	r2, #37	@ 0x25
 80076f2:	d1f9      	bne.n	80076e8 <_svfiprintf_r+0x54>
 80076f4:	ebba 0b04 	subs.w	fp, sl, r4
 80076f8:	d00b      	beq.n	8007712 <_svfiprintf_r+0x7e>
 80076fa:	465b      	mov	r3, fp
 80076fc:	4622      	mov	r2, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ff6b 	bl	80075dc <__ssputs_r>
 8007706:	3001      	adds	r0, #1
 8007708:	f000 80a7 	beq.w	800785a <_svfiprintf_r+0x1c6>
 800770c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800770e:	445a      	add	r2, fp
 8007710:	9209      	str	r2, [sp, #36]	@ 0x24
 8007712:	f89a 3000 	ldrb.w	r3, [sl]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 809f 	beq.w	800785a <_svfiprintf_r+0x1c6>
 800771c:	2300      	movs	r3, #0
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007726:	f10a 0a01 	add.w	sl, sl, #1
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	9307      	str	r3, [sp, #28]
 800772e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007732:	931a      	str	r3, [sp, #104]	@ 0x68
 8007734:	4654      	mov	r4, sl
 8007736:	2205      	movs	r2, #5
 8007738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773c:	484e      	ldr	r0, [pc, #312]	@ (8007878 <_svfiprintf_r+0x1e4>)
 800773e:	f7fd fcb4 	bl	80050aa <memchr>
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	b9d8      	cbnz	r0, 800777e <_svfiprintf_r+0xea>
 8007746:	06d0      	lsls	r0, r2, #27
 8007748:	bf44      	itt	mi
 800774a:	2320      	movmi	r3, #32
 800774c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007750:	0711      	lsls	r1, r2, #28
 8007752:	bf44      	itt	mi
 8007754:	232b      	movmi	r3, #43	@ 0x2b
 8007756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007760:	d015      	beq.n	800778e <_svfiprintf_r+0xfa>
 8007762:	4654      	mov	r4, sl
 8007764:	2000      	movs	r0, #0
 8007766:	f04f 0c0a 	mov.w	ip, #10
 800776a:	9a07      	ldr	r2, [sp, #28]
 800776c:	4621      	mov	r1, r4
 800776e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007772:	3b30      	subs	r3, #48	@ 0x30
 8007774:	2b09      	cmp	r3, #9
 8007776:	d94b      	bls.n	8007810 <_svfiprintf_r+0x17c>
 8007778:	b1b0      	cbz	r0, 80077a8 <_svfiprintf_r+0x114>
 800777a:	9207      	str	r2, [sp, #28]
 800777c:	e014      	b.n	80077a8 <_svfiprintf_r+0x114>
 800777e:	eba0 0308 	sub.w	r3, r0, r8
 8007782:	fa09 f303 	lsl.w	r3, r9, r3
 8007786:	4313      	orrs	r3, r2
 8007788:	46a2      	mov	sl, r4
 800778a:	9304      	str	r3, [sp, #16]
 800778c:	e7d2      	b.n	8007734 <_svfiprintf_r+0xa0>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d19      	adds	r1, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9103      	str	r1, [sp, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfbb      	ittet	lt
 800779a:	425b      	neglt	r3, r3
 800779c:	f042 0202 	orrlt.w	r2, r2, #2
 80077a0:	9307      	strge	r3, [sp, #28]
 80077a2:	9307      	strlt	r3, [sp, #28]
 80077a4:	bfb8      	it	lt
 80077a6:	9204      	strlt	r2, [sp, #16]
 80077a8:	7823      	ldrb	r3, [r4, #0]
 80077aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80077ac:	d10a      	bne.n	80077c4 <_svfiprintf_r+0x130>
 80077ae:	7863      	ldrb	r3, [r4, #1]
 80077b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b2:	d132      	bne.n	800781a <_svfiprintf_r+0x186>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	3402      	adds	r4, #2
 80077b8:	1d1a      	adds	r2, r3, #4
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	9203      	str	r2, [sp, #12]
 80077be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077c2:	9305      	str	r3, [sp, #20]
 80077c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800787c <_svfiprintf_r+0x1e8>
 80077c8:	2203      	movs	r2, #3
 80077ca:	4650      	mov	r0, sl
 80077cc:	7821      	ldrb	r1, [r4, #0]
 80077ce:	f7fd fc6c 	bl	80050aa <memchr>
 80077d2:	b138      	cbz	r0, 80077e4 <_svfiprintf_r+0x150>
 80077d4:	2240      	movs	r2, #64	@ 0x40
 80077d6:	9b04      	ldr	r3, [sp, #16]
 80077d8:	eba0 000a 	sub.w	r0, r0, sl
 80077dc:	4082      	lsls	r2, r0
 80077de:	4313      	orrs	r3, r2
 80077e0:	3401      	adds	r4, #1
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e8:	2206      	movs	r2, #6
 80077ea:	4825      	ldr	r0, [pc, #148]	@ (8007880 <_svfiprintf_r+0x1ec>)
 80077ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077f0:	f7fd fc5b 	bl	80050aa <memchr>
 80077f4:	2800      	cmp	r0, #0
 80077f6:	d036      	beq.n	8007866 <_svfiprintf_r+0x1d2>
 80077f8:	4b22      	ldr	r3, [pc, #136]	@ (8007884 <_svfiprintf_r+0x1f0>)
 80077fa:	bb1b      	cbnz	r3, 8007844 <_svfiprintf_r+0x1b0>
 80077fc:	9b03      	ldr	r3, [sp, #12]
 80077fe:	3307      	adds	r3, #7
 8007800:	f023 0307 	bic.w	r3, r3, #7
 8007804:	3308      	adds	r3, #8
 8007806:	9303      	str	r3, [sp, #12]
 8007808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780a:	4433      	add	r3, r6
 800780c:	9309      	str	r3, [sp, #36]	@ 0x24
 800780e:	e76a      	b.n	80076e6 <_svfiprintf_r+0x52>
 8007810:	460c      	mov	r4, r1
 8007812:	2001      	movs	r0, #1
 8007814:	fb0c 3202 	mla	r2, ip, r2, r3
 8007818:	e7a8      	b.n	800776c <_svfiprintf_r+0xd8>
 800781a:	2300      	movs	r3, #0
 800781c:	f04f 0c0a 	mov.w	ip, #10
 8007820:	4619      	mov	r1, r3
 8007822:	3401      	adds	r4, #1
 8007824:	9305      	str	r3, [sp, #20]
 8007826:	4620      	mov	r0, r4
 8007828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800782c:	3a30      	subs	r2, #48	@ 0x30
 800782e:	2a09      	cmp	r2, #9
 8007830:	d903      	bls.n	800783a <_svfiprintf_r+0x1a6>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d0c6      	beq.n	80077c4 <_svfiprintf_r+0x130>
 8007836:	9105      	str	r1, [sp, #20]
 8007838:	e7c4      	b.n	80077c4 <_svfiprintf_r+0x130>
 800783a:	4604      	mov	r4, r0
 800783c:	2301      	movs	r3, #1
 800783e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007842:	e7f0      	b.n	8007826 <_svfiprintf_r+0x192>
 8007844:	ab03      	add	r3, sp, #12
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	462a      	mov	r2, r5
 800784a:	4638      	mov	r0, r7
 800784c:	4b0e      	ldr	r3, [pc, #56]	@ (8007888 <_svfiprintf_r+0x1f4>)
 800784e:	a904      	add	r1, sp, #16
 8007850:	f7fc fcbe 	bl	80041d0 <_printf_float>
 8007854:	1c42      	adds	r2, r0, #1
 8007856:	4606      	mov	r6, r0
 8007858:	d1d6      	bne.n	8007808 <_svfiprintf_r+0x174>
 800785a:	89ab      	ldrh	r3, [r5, #12]
 800785c:	065b      	lsls	r3, r3, #25
 800785e:	f53f af2d 	bmi.w	80076bc <_svfiprintf_r+0x28>
 8007862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007864:	e72c      	b.n	80076c0 <_svfiprintf_r+0x2c>
 8007866:	ab03      	add	r3, sp, #12
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	462a      	mov	r2, r5
 800786c:	4638      	mov	r0, r7
 800786e:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <_svfiprintf_r+0x1f4>)
 8007870:	a904      	add	r1, sp, #16
 8007872:	f7fc ff4b 	bl	800470c <_printf_i>
 8007876:	e7ed      	b.n	8007854 <_svfiprintf_r+0x1c0>
 8007878:	08008eab 	.word	0x08008eab
 800787c:	08008eb1 	.word	0x08008eb1
 8007880:	08008eb5 	.word	0x08008eb5
 8007884:	080041d1 	.word	0x080041d1
 8007888:	080075dd 	.word	0x080075dd

0800788c <__sflush_r>:
 800788c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007892:	0716      	lsls	r6, r2, #28
 8007894:	4605      	mov	r5, r0
 8007896:	460c      	mov	r4, r1
 8007898:	d454      	bmi.n	8007944 <__sflush_r+0xb8>
 800789a:	684b      	ldr	r3, [r1, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	dc02      	bgt.n	80078a6 <__sflush_r+0x1a>
 80078a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	dd48      	ble.n	8007938 <__sflush_r+0xac>
 80078a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	d045      	beq.n	8007938 <__sflush_r+0xac>
 80078ac:	2300      	movs	r3, #0
 80078ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078b2:	682f      	ldr	r7, [r5, #0]
 80078b4:	6a21      	ldr	r1, [r4, #32]
 80078b6:	602b      	str	r3, [r5, #0]
 80078b8:	d030      	beq.n	800791c <__sflush_r+0x90>
 80078ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	0759      	lsls	r1, r3, #29
 80078c0:	d505      	bpl.n	80078ce <__sflush_r+0x42>
 80078c2:	6863      	ldr	r3, [r4, #4]
 80078c4:	1ad2      	subs	r2, r2, r3
 80078c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078c8:	b10b      	cbz	r3, 80078ce <__sflush_r+0x42>
 80078ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078cc:	1ad2      	subs	r2, r2, r3
 80078ce:	2300      	movs	r3, #0
 80078d0:	4628      	mov	r0, r5
 80078d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d4:	6a21      	ldr	r1, [r4, #32]
 80078d6:	47b0      	blx	r6
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	d106      	bne.n	80078ec <__sflush_r+0x60>
 80078de:	6829      	ldr	r1, [r5, #0]
 80078e0:	291d      	cmp	r1, #29
 80078e2:	d82b      	bhi.n	800793c <__sflush_r+0xb0>
 80078e4:	4a28      	ldr	r2, [pc, #160]	@ (8007988 <__sflush_r+0xfc>)
 80078e6:	40ca      	lsrs	r2, r1
 80078e8:	07d6      	lsls	r6, r2, #31
 80078ea:	d527      	bpl.n	800793c <__sflush_r+0xb0>
 80078ec:	2200      	movs	r2, #0
 80078ee:	6062      	str	r2, [r4, #4]
 80078f0:	6922      	ldr	r2, [r4, #16]
 80078f2:	04d9      	lsls	r1, r3, #19
 80078f4:	6022      	str	r2, [r4, #0]
 80078f6:	d504      	bpl.n	8007902 <__sflush_r+0x76>
 80078f8:	1c42      	adds	r2, r0, #1
 80078fa:	d101      	bne.n	8007900 <__sflush_r+0x74>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b903      	cbnz	r3, 8007902 <__sflush_r+0x76>
 8007900:	6560      	str	r0, [r4, #84]	@ 0x54
 8007902:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007904:	602f      	str	r7, [r5, #0]
 8007906:	b1b9      	cbz	r1, 8007938 <__sflush_r+0xac>
 8007908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800790c:	4299      	cmp	r1, r3
 800790e:	d002      	beq.n	8007916 <__sflush_r+0x8a>
 8007910:	4628      	mov	r0, r5
 8007912:	f7fe fa49 	bl	8005da8 <_free_r>
 8007916:	2300      	movs	r3, #0
 8007918:	6363      	str	r3, [r4, #52]	@ 0x34
 800791a:	e00d      	b.n	8007938 <__sflush_r+0xac>
 800791c:	2301      	movs	r3, #1
 800791e:	4628      	mov	r0, r5
 8007920:	47b0      	blx	r6
 8007922:	4602      	mov	r2, r0
 8007924:	1c50      	adds	r0, r2, #1
 8007926:	d1c9      	bne.n	80078bc <__sflush_r+0x30>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0c6      	beq.n	80078bc <__sflush_r+0x30>
 800792e:	2b1d      	cmp	r3, #29
 8007930:	d001      	beq.n	8007936 <__sflush_r+0xaa>
 8007932:	2b16      	cmp	r3, #22
 8007934:	d11d      	bne.n	8007972 <__sflush_r+0xe6>
 8007936:	602f      	str	r7, [r5, #0]
 8007938:	2000      	movs	r0, #0
 800793a:	e021      	b.n	8007980 <__sflush_r+0xf4>
 800793c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007940:	b21b      	sxth	r3, r3
 8007942:	e01a      	b.n	800797a <__sflush_r+0xee>
 8007944:	690f      	ldr	r7, [r1, #16]
 8007946:	2f00      	cmp	r7, #0
 8007948:	d0f6      	beq.n	8007938 <__sflush_r+0xac>
 800794a:	0793      	lsls	r3, r2, #30
 800794c:	bf18      	it	ne
 800794e:	2300      	movne	r3, #0
 8007950:	680e      	ldr	r6, [r1, #0]
 8007952:	bf08      	it	eq
 8007954:	694b      	ldreq	r3, [r1, #20]
 8007956:	1bf6      	subs	r6, r6, r7
 8007958:	600f      	str	r7, [r1, #0]
 800795a:	608b      	str	r3, [r1, #8]
 800795c:	2e00      	cmp	r6, #0
 800795e:	ddeb      	ble.n	8007938 <__sflush_r+0xac>
 8007960:	4633      	mov	r3, r6
 8007962:	463a      	mov	r2, r7
 8007964:	4628      	mov	r0, r5
 8007966:	6a21      	ldr	r1, [r4, #32]
 8007968:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800796c:	47e0      	blx	ip
 800796e:	2800      	cmp	r0, #0
 8007970:	dc07      	bgt.n	8007982 <__sflush_r+0xf6>
 8007972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007976:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007982:	4407      	add	r7, r0
 8007984:	1a36      	subs	r6, r6, r0
 8007986:	e7e9      	b.n	800795c <__sflush_r+0xd0>
 8007988:	20400001 	.word	0x20400001

0800798c <_fflush_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	690b      	ldr	r3, [r1, #16]
 8007990:	4605      	mov	r5, r0
 8007992:	460c      	mov	r4, r1
 8007994:	b913      	cbnz	r3, 800799c <_fflush_r+0x10>
 8007996:	2500      	movs	r5, #0
 8007998:	4628      	mov	r0, r5
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	b118      	cbz	r0, 80079a6 <_fflush_r+0x1a>
 800799e:	6a03      	ldr	r3, [r0, #32]
 80079a0:	b90b      	cbnz	r3, 80079a6 <_fflush_r+0x1a>
 80079a2:	f7fd fa67 	bl	8004e74 <__sinit>
 80079a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0f3      	beq.n	8007996 <_fflush_r+0xa>
 80079ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079b0:	07d0      	lsls	r0, r2, #31
 80079b2:	d404      	bmi.n	80079be <_fflush_r+0x32>
 80079b4:	0599      	lsls	r1, r3, #22
 80079b6:	d402      	bmi.n	80079be <_fflush_r+0x32>
 80079b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ba:	f7fd fb74 	bl	80050a6 <__retarget_lock_acquire_recursive>
 80079be:	4628      	mov	r0, r5
 80079c0:	4621      	mov	r1, r4
 80079c2:	f7ff ff63 	bl	800788c <__sflush_r>
 80079c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079c8:	4605      	mov	r5, r0
 80079ca:	07da      	lsls	r2, r3, #31
 80079cc:	d4e4      	bmi.n	8007998 <_fflush_r+0xc>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	059b      	lsls	r3, r3, #22
 80079d2:	d4e1      	bmi.n	8007998 <_fflush_r+0xc>
 80079d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079d6:	f7fd fb67 	bl	80050a8 <__retarget_lock_release_recursive>
 80079da:	e7dd      	b.n	8007998 <_fflush_r+0xc>

080079dc <memmove>:
 80079dc:	4288      	cmp	r0, r1
 80079de:	b510      	push	{r4, lr}
 80079e0:	eb01 0402 	add.w	r4, r1, r2
 80079e4:	d902      	bls.n	80079ec <memmove+0x10>
 80079e6:	4284      	cmp	r4, r0
 80079e8:	4623      	mov	r3, r4
 80079ea:	d807      	bhi.n	80079fc <memmove+0x20>
 80079ec:	1e43      	subs	r3, r0, #1
 80079ee:	42a1      	cmp	r1, r4
 80079f0:	d008      	beq.n	8007a04 <memmove+0x28>
 80079f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079fa:	e7f8      	b.n	80079ee <memmove+0x12>
 80079fc:	4601      	mov	r1, r0
 80079fe:	4402      	add	r2, r0
 8007a00:	428a      	cmp	r2, r1
 8007a02:	d100      	bne.n	8007a06 <memmove+0x2a>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a0e:	e7f7      	b.n	8007a00 <memmove+0x24>

08007a10 <strncmp>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	b16a      	cbz	r2, 8007a30 <strncmp+0x20>
 8007a14:	3901      	subs	r1, #1
 8007a16:	1884      	adds	r4, r0, r2
 8007a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a1c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d103      	bne.n	8007a2c <strncmp+0x1c>
 8007a24:	42a0      	cmp	r0, r4
 8007a26:	d001      	beq.n	8007a2c <strncmp+0x1c>
 8007a28:	2a00      	cmp	r2, #0
 8007a2a:	d1f5      	bne.n	8007a18 <strncmp+0x8>
 8007a2c:	1ad0      	subs	r0, r2, r3
 8007a2e:	bd10      	pop	{r4, pc}
 8007a30:	4610      	mov	r0, r2
 8007a32:	e7fc      	b.n	8007a2e <strncmp+0x1e>

08007a34 <_sbrk_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	2300      	movs	r3, #0
 8007a38:	4d05      	ldr	r5, [pc, #20]	@ (8007a50 <_sbrk_r+0x1c>)
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7f9 fe14 	bl	800166c <_sbrk>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_sbrk_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_sbrk_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	20000864 	.word	0x20000864

08007a54 <nan>:
 8007a54:	2000      	movs	r0, #0
 8007a56:	4901      	ldr	r1, [pc, #4]	@ (8007a5c <nan+0x8>)
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	7ff80000 	.word	0x7ff80000

08007a60 <__assert_func>:
 8007a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a62:	4614      	mov	r4, r2
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b09      	ldr	r3, [pc, #36]	@ (8007a8c <__assert_func+0x2c>)
 8007a68:	4605      	mov	r5, r0
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68d8      	ldr	r0, [r3, #12]
 8007a6e:	b14c      	cbz	r4, 8007a84 <__assert_func+0x24>
 8007a70:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <__assert_func+0x30>)
 8007a72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a76:	9100      	str	r1, [sp, #0]
 8007a78:	462b      	mov	r3, r5
 8007a7a:	4906      	ldr	r1, [pc, #24]	@ (8007a94 <__assert_func+0x34>)
 8007a7c:	f000 fba8 	bl	80081d0 <fiprintf>
 8007a80:	f000 fbb8 	bl	80081f4 <abort>
 8007a84:	4b04      	ldr	r3, [pc, #16]	@ (8007a98 <__assert_func+0x38>)
 8007a86:	461c      	mov	r4, r3
 8007a88:	e7f3      	b.n	8007a72 <__assert_func+0x12>
 8007a8a:	bf00      	nop
 8007a8c:	20000018 	.word	0x20000018
 8007a90:	08008ec4 	.word	0x08008ec4
 8007a94:	08008ed1 	.word	0x08008ed1
 8007a98:	08008eff 	.word	0x08008eff

08007a9c <_calloc_r>:
 8007a9c:	b570      	push	{r4, r5, r6, lr}
 8007a9e:	fba1 5402 	umull	r5, r4, r1, r2
 8007aa2:	b934      	cbnz	r4, 8007ab2 <_calloc_r+0x16>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7fe f9f1 	bl	8005e8c <_malloc_r>
 8007aaa:	4606      	mov	r6, r0
 8007aac:	b928      	cbnz	r0, 8007aba <_calloc_r+0x1e>
 8007aae:	4630      	mov	r0, r6
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
 8007ab2:	220c      	movs	r2, #12
 8007ab4:	2600      	movs	r6, #0
 8007ab6:	6002      	str	r2, [r0, #0]
 8007ab8:	e7f9      	b.n	8007aae <_calloc_r+0x12>
 8007aba:	462a      	mov	r2, r5
 8007abc:	4621      	mov	r1, r4
 8007abe:	f7fd fa74 	bl	8004faa <memset>
 8007ac2:	e7f4      	b.n	8007aae <_calloc_r+0x12>

08007ac4 <rshift>:
 8007ac4:	6903      	ldr	r3, [r0, #16]
 8007ac6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ace:	f100 0414 	add.w	r4, r0, #20
 8007ad2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007ad6:	dd46      	ble.n	8007b66 <rshift+0xa2>
 8007ad8:	f011 011f 	ands.w	r1, r1, #31
 8007adc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ae0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ae4:	d10c      	bne.n	8007b00 <rshift+0x3c>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f100 0710 	add.w	r7, r0, #16
 8007aec:	42b1      	cmp	r1, r6
 8007aee:	d335      	bcc.n	8007b5c <rshift+0x98>
 8007af0:	1a9b      	subs	r3, r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	1eea      	subs	r2, r5, #3
 8007af6:	4296      	cmp	r6, r2
 8007af8:	bf38      	it	cc
 8007afa:	2300      	movcc	r3, #0
 8007afc:	4423      	add	r3, r4
 8007afe:	e015      	b.n	8007b2c <rshift+0x68>
 8007b00:	46a1      	mov	r9, r4
 8007b02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b06:	f1c1 0820 	rsb	r8, r1, #32
 8007b0a:	40cf      	lsrs	r7, r1
 8007b0c:	f105 0e04 	add.w	lr, r5, #4
 8007b10:	4576      	cmp	r6, lr
 8007b12:	46f4      	mov	ip, lr
 8007b14:	d816      	bhi.n	8007b44 <rshift+0x80>
 8007b16:	1a9a      	subs	r2, r3, r2
 8007b18:	0092      	lsls	r2, r2, #2
 8007b1a:	3a04      	subs	r2, #4
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	42ae      	cmp	r6, r5
 8007b20:	bf38      	it	cc
 8007b22:	2200      	movcc	r2, #0
 8007b24:	18a3      	adds	r3, r4, r2
 8007b26:	50a7      	str	r7, [r4, r2]
 8007b28:	b107      	cbz	r7, 8007b2c <rshift+0x68>
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	eba3 0204 	sub.w	r2, r3, r4
 8007b32:	bf08      	it	eq
 8007b34:	2300      	moveq	r3, #0
 8007b36:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b3a:	6102      	str	r2, [r0, #16]
 8007b3c:	bf08      	it	eq
 8007b3e:	6143      	streq	r3, [r0, #20]
 8007b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b44:	f8dc c000 	ldr.w	ip, [ip]
 8007b48:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b4c:	ea4c 0707 	orr.w	r7, ip, r7
 8007b50:	f849 7b04 	str.w	r7, [r9], #4
 8007b54:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b58:	40cf      	lsrs	r7, r1
 8007b5a:	e7d9      	b.n	8007b10 <rshift+0x4c>
 8007b5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b60:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b64:	e7c2      	b.n	8007aec <rshift+0x28>
 8007b66:	4623      	mov	r3, r4
 8007b68:	e7e0      	b.n	8007b2c <rshift+0x68>

08007b6a <__hexdig_fun>:
 8007b6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007b6e:	2b09      	cmp	r3, #9
 8007b70:	d802      	bhi.n	8007b78 <__hexdig_fun+0xe>
 8007b72:	3820      	subs	r0, #32
 8007b74:	b2c0      	uxtb	r0, r0
 8007b76:	4770      	bx	lr
 8007b78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007b7c:	2b05      	cmp	r3, #5
 8007b7e:	d801      	bhi.n	8007b84 <__hexdig_fun+0x1a>
 8007b80:	3847      	subs	r0, #71	@ 0x47
 8007b82:	e7f7      	b.n	8007b74 <__hexdig_fun+0xa>
 8007b84:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	d801      	bhi.n	8007b90 <__hexdig_fun+0x26>
 8007b8c:	3827      	subs	r0, #39	@ 0x27
 8007b8e:	e7f1      	b.n	8007b74 <__hexdig_fun+0xa>
 8007b90:	2000      	movs	r0, #0
 8007b92:	4770      	bx	lr

08007b94 <__gethex>:
 8007b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	468a      	mov	sl, r1
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	b085      	sub	sp, #20
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	680b      	ldr	r3, [r1, #0]
 8007ba2:	9001      	str	r0, [sp, #4]
 8007ba4:	1c9c      	adds	r4, r3, #2
 8007ba6:	46a1      	mov	r9, r4
 8007ba8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007bac:	2830      	cmp	r0, #48	@ 0x30
 8007bae:	d0fa      	beq.n	8007ba6 <__gethex+0x12>
 8007bb0:	eba9 0303 	sub.w	r3, r9, r3
 8007bb4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007bb8:	f7ff ffd7 	bl	8007b6a <__hexdig_fun>
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	d168      	bne.n	8007c94 <__gethex+0x100>
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	4648      	mov	r0, r9
 8007bc6:	499f      	ldr	r1, [pc, #636]	@ (8007e44 <__gethex+0x2b0>)
 8007bc8:	f7ff ff22 	bl	8007a10 <strncmp>
 8007bcc:	4607      	mov	r7, r0
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d167      	bne.n	8007ca2 <__gethex+0x10e>
 8007bd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007bd6:	4626      	mov	r6, r4
 8007bd8:	f7ff ffc7 	bl	8007b6a <__hexdig_fun>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d062      	beq.n	8007ca6 <__gethex+0x112>
 8007be0:	4623      	mov	r3, r4
 8007be2:	7818      	ldrb	r0, [r3, #0]
 8007be4:	4699      	mov	r9, r3
 8007be6:	2830      	cmp	r0, #48	@ 0x30
 8007be8:	f103 0301 	add.w	r3, r3, #1
 8007bec:	d0f9      	beq.n	8007be2 <__gethex+0x4e>
 8007bee:	f7ff ffbc 	bl	8007b6a <__hexdig_fun>
 8007bf2:	fab0 f580 	clz	r5, r0
 8007bf6:	f04f 0b01 	mov.w	fp, #1
 8007bfa:	096d      	lsrs	r5, r5, #5
 8007bfc:	464a      	mov	r2, r9
 8007bfe:	4616      	mov	r6, r2
 8007c00:	7830      	ldrb	r0, [r6, #0]
 8007c02:	3201      	adds	r2, #1
 8007c04:	f7ff ffb1 	bl	8007b6a <__hexdig_fun>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d1f8      	bne.n	8007bfe <__gethex+0x6a>
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4630      	mov	r0, r6
 8007c10:	498c      	ldr	r1, [pc, #560]	@ (8007e44 <__gethex+0x2b0>)
 8007c12:	f7ff fefd 	bl	8007a10 <strncmp>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d13f      	bne.n	8007c9a <__gethex+0x106>
 8007c1a:	b944      	cbnz	r4, 8007c2e <__gethex+0x9a>
 8007c1c:	1c74      	adds	r4, r6, #1
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4616      	mov	r6, r2
 8007c22:	7830      	ldrb	r0, [r6, #0]
 8007c24:	3201      	adds	r2, #1
 8007c26:	f7ff ffa0 	bl	8007b6a <__hexdig_fun>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	d1f8      	bne.n	8007c20 <__gethex+0x8c>
 8007c2e:	1ba4      	subs	r4, r4, r6
 8007c30:	00a7      	lsls	r7, r4, #2
 8007c32:	7833      	ldrb	r3, [r6, #0]
 8007c34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007c38:	2b50      	cmp	r3, #80	@ 0x50
 8007c3a:	d13e      	bne.n	8007cba <__gethex+0x126>
 8007c3c:	7873      	ldrb	r3, [r6, #1]
 8007c3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007c40:	d033      	beq.n	8007caa <__gethex+0x116>
 8007c42:	2b2d      	cmp	r3, #45	@ 0x2d
 8007c44:	d034      	beq.n	8007cb0 <__gethex+0x11c>
 8007c46:	2400      	movs	r4, #0
 8007c48:	1c71      	adds	r1, r6, #1
 8007c4a:	7808      	ldrb	r0, [r1, #0]
 8007c4c:	f7ff ff8d 	bl	8007b6a <__hexdig_fun>
 8007c50:	1e43      	subs	r3, r0, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b18      	cmp	r3, #24
 8007c56:	d830      	bhi.n	8007cba <__gethex+0x126>
 8007c58:	f1a0 0210 	sub.w	r2, r0, #16
 8007c5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c60:	f7ff ff83 	bl	8007b6a <__hexdig_fun>
 8007c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c68:	fa5f fc8c 	uxtb.w	ip, ip
 8007c6c:	f1bc 0f18 	cmp.w	ip, #24
 8007c70:	f04f 030a 	mov.w	r3, #10
 8007c74:	d91e      	bls.n	8007cb4 <__gethex+0x120>
 8007c76:	b104      	cbz	r4, 8007c7a <__gethex+0xe6>
 8007c78:	4252      	negs	r2, r2
 8007c7a:	4417      	add	r7, r2
 8007c7c:	f8ca 1000 	str.w	r1, [sl]
 8007c80:	b1ed      	cbz	r5, 8007cbe <__gethex+0x12a>
 8007c82:	f1bb 0f00 	cmp.w	fp, #0
 8007c86:	bf0c      	ite	eq
 8007c88:	2506      	moveq	r5, #6
 8007c8a:	2500      	movne	r5, #0
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	b005      	add	sp, #20
 8007c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c94:	2500      	movs	r5, #0
 8007c96:	462c      	mov	r4, r5
 8007c98:	e7b0      	b.n	8007bfc <__gethex+0x68>
 8007c9a:	2c00      	cmp	r4, #0
 8007c9c:	d1c7      	bne.n	8007c2e <__gethex+0x9a>
 8007c9e:	4627      	mov	r7, r4
 8007ca0:	e7c7      	b.n	8007c32 <__gethex+0x9e>
 8007ca2:	464e      	mov	r6, r9
 8007ca4:	462f      	mov	r7, r5
 8007ca6:	2501      	movs	r5, #1
 8007ca8:	e7c3      	b.n	8007c32 <__gethex+0x9e>
 8007caa:	2400      	movs	r4, #0
 8007cac:	1cb1      	adds	r1, r6, #2
 8007cae:	e7cc      	b.n	8007c4a <__gethex+0xb6>
 8007cb0:	2401      	movs	r4, #1
 8007cb2:	e7fb      	b.n	8007cac <__gethex+0x118>
 8007cb4:	fb03 0002 	mla	r0, r3, r2, r0
 8007cb8:	e7ce      	b.n	8007c58 <__gethex+0xc4>
 8007cba:	4631      	mov	r1, r6
 8007cbc:	e7de      	b.n	8007c7c <__gethex+0xe8>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	eba6 0309 	sub.w	r3, r6, r9
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	2b07      	cmp	r3, #7
 8007cc8:	dc0a      	bgt.n	8007ce0 <__gethex+0x14c>
 8007cca:	9801      	ldr	r0, [sp, #4]
 8007ccc:	f7fe f96a 	bl	8005fa4 <_Balloc>
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	b940      	cbnz	r0, 8007ce6 <__gethex+0x152>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	21e4      	movs	r1, #228	@ 0xe4
 8007cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8007e48 <__gethex+0x2b4>)
 8007cda:	485c      	ldr	r0, [pc, #368]	@ (8007e4c <__gethex+0x2b8>)
 8007cdc:	f7ff fec0 	bl	8007a60 <__assert_func>
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	105b      	asrs	r3, r3, #1
 8007ce4:	e7ef      	b.n	8007cc6 <__gethex+0x132>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	f100 0a14 	add.w	sl, r0, #20
 8007cec:	4655      	mov	r5, sl
 8007cee:	469b      	mov	fp, r3
 8007cf0:	45b1      	cmp	r9, r6
 8007cf2:	d337      	bcc.n	8007d64 <__gethex+0x1d0>
 8007cf4:	f845 bb04 	str.w	fp, [r5], #4
 8007cf8:	eba5 050a 	sub.w	r5, r5, sl
 8007cfc:	10ad      	asrs	r5, r5, #2
 8007cfe:	6125      	str	r5, [r4, #16]
 8007d00:	4658      	mov	r0, fp
 8007d02:	f7fe fa41 	bl	8006188 <__hi0bits>
 8007d06:	016d      	lsls	r5, r5, #5
 8007d08:	f8d8 6000 	ldr.w	r6, [r8]
 8007d0c:	1a2d      	subs	r5, r5, r0
 8007d0e:	42b5      	cmp	r5, r6
 8007d10:	dd54      	ble.n	8007dbc <__gethex+0x228>
 8007d12:	1bad      	subs	r5, r5, r6
 8007d14:	4629      	mov	r1, r5
 8007d16:	4620      	mov	r0, r4
 8007d18:	f7fe fdc3 	bl	80068a2 <__any_on>
 8007d1c:	4681      	mov	r9, r0
 8007d1e:	b178      	cbz	r0, 8007d40 <__gethex+0x1ac>
 8007d20:	f04f 0901 	mov.w	r9, #1
 8007d24:	1e6b      	subs	r3, r5, #1
 8007d26:	1159      	asrs	r1, r3, #5
 8007d28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d2c:	f003 021f 	and.w	r2, r3, #31
 8007d30:	fa09 f202 	lsl.w	r2, r9, r2
 8007d34:	420a      	tst	r2, r1
 8007d36:	d003      	beq.n	8007d40 <__gethex+0x1ac>
 8007d38:	454b      	cmp	r3, r9
 8007d3a:	dc36      	bgt.n	8007daa <__gethex+0x216>
 8007d3c:	f04f 0902 	mov.w	r9, #2
 8007d40:	4629      	mov	r1, r5
 8007d42:	4620      	mov	r0, r4
 8007d44:	f7ff febe 	bl	8007ac4 <rshift>
 8007d48:	442f      	add	r7, r5
 8007d4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d4e:	42bb      	cmp	r3, r7
 8007d50:	da42      	bge.n	8007dd8 <__gethex+0x244>
 8007d52:	4621      	mov	r1, r4
 8007d54:	9801      	ldr	r0, [sp, #4]
 8007d56:	f7fe f965 	bl	8006024 <_Bfree>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d5e:	25a3      	movs	r5, #163	@ 0xa3
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e793      	b.n	8007c8c <__gethex+0xf8>
 8007d64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007d68:	2a2e      	cmp	r2, #46	@ 0x2e
 8007d6a:	d012      	beq.n	8007d92 <__gethex+0x1fe>
 8007d6c:	2b20      	cmp	r3, #32
 8007d6e:	d104      	bne.n	8007d7a <__gethex+0x1e6>
 8007d70:	f845 bb04 	str.w	fp, [r5], #4
 8007d74:	f04f 0b00 	mov.w	fp, #0
 8007d78:	465b      	mov	r3, fp
 8007d7a:	7830      	ldrb	r0, [r6, #0]
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	f7ff fef4 	bl	8007b6a <__hexdig_fun>
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	f000 000f 	and.w	r0, r0, #15
 8007d88:	4098      	lsls	r0, r3
 8007d8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d8e:	3304      	adds	r3, #4
 8007d90:	e7ae      	b.n	8007cf0 <__gethex+0x15c>
 8007d92:	45b1      	cmp	r9, r6
 8007d94:	d8ea      	bhi.n	8007d6c <__gethex+0x1d8>
 8007d96:	2201      	movs	r2, #1
 8007d98:	4630      	mov	r0, r6
 8007d9a:	492a      	ldr	r1, [pc, #168]	@ (8007e44 <__gethex+0x2b0>)
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	f7ff fe37 	bl	8007a10 <strncmp>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	2800      	cmp	r0, #0
 8007da6:	d1e1      	bne.n	8007d6c <__gethex+0x1d8>
 8007da8:	e7a2      	b.n	8007cf0 <__gethex+0x15c>
 8007daa:	4620      	mov	r0, r4
 8007dac:	1ea9      	subs	r1, r5, #2
 8007dae:	f7fe fd78 	bl	80068a2 <__any_on>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d0c2      	beq.n	8007d3c <__gethex+0x1a8>
 8007db6:	f04f 0903 	mov.w	r9, #3
 8007dba:	e7c1      	b.n	8007d40 <__gethex+0x1ac>
 8007dbc:	da09      	bge.n	8007dd2 <__gethex+0x23e>
 8007dbe:	1b75      	subs	r5, r6, r5
 8007dc0:	4621      	mov	r1, r4
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	9801      	ldr	r0, [sp, #4]
 8007dc6:	f7fe fb3d 	bl	8006444 <__lshift>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	1b7f      	subs	r7, r7, r5
 8007dce:	f100 0a14 	add.w	sl, r0, #20
 8007dd2:	f04f 0900 	mov.w	r9, #0
 8007dd6:	e7b8      	b.n	8007d4a <__gethex+0x1b6>
 8007dd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ddc:	42bd      	cmp	r5, r7
 8007dde:	dd6f      	ble.n	8007ec0 <__gethex+0x32c>
 8007de0:	1bed      	subs	r5, r5, r7
 8007de2:	42ae      	cmp	r6, r5
 8007de4:	dc34      	bgt.n	8007e50 <__gethex+0x2bc>
 8007de6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d022      	beq.n	8007e34 <__gethex+0x2a0>
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d024      	beq.n	8007e3c <__gethex+0x2a8>
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d115      	bne.n	8007e22 <__gethex+0x28e>
 8007df6:	42ae      	cmp	r6, r5
 8007df8:	d113      	bne.n	8007e22 <__gethex+0x28e>
 8007dfa:	2e01      	cmp	r6, #1
 8007dfc:	d10b      	bne.n	8007e16 <__gethex+0x282>
 8007dfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e02:	9a02      	ldr	r2, [sp, #8]
 8007e04:	2562      	movs	r5, #98	@ 0x62
 8007e06:	6013      	str	r3, [r2, #0]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	6123      	str	r3, [r4, #16]
 8007e0c:	f8ca 3000 	str.w	r3, [sl]
 8007e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e12:	601c      	str	r4, [r3, #0]
 8007e14:	e73a      	b.n	8007c8c <__gethex+0xf8>
 8007e16:	4620      	mov	r0, r4
 8007e18:	1e71      	subs	r1, r6, #1
 8007e1a:	f7fe fd42 	bl	80068a2 <__any_on>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d1ed      	bne.n	8007dfe <__gethex+0x26a>
 8007e22:	4621      	mov	r1, r4
 8007e24:	9801      	ldr	r0, [sp, #4]
 8007e26:	f7fe f8fd 	bl	8006024 <_Bfree>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e2e:	2550      	movs	r5, #80	@ 0x50
 8007e30:	6013      	str	r3, [r2, #0]
 8007e32:	e72b      	b.n	8007c8c <__gethex+0xf8>
 8007e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f3      	bne.n	8007e22 <__gethex+0x28e>
 8007e3a:	e7e0      	b.n	8007dfe <__gethex+0x26a>
 8007e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1dd      	bne.n	8007dfe <__gethex+0x26a>
 8007e42:	e7ee      	b.n	8007e22 <__gethex+0x28e>
 8007e44:	08008ea9 	.word	0x08008ea9
 8007e48:	08008e3f 	.word	0x08008e3f
 8007e4c:	08008f00 	.word	0x08008f00
 8007e50:	1e6f      	subs	r7, r5, #1
 8007e52:	f1b9 0f00 	cmp.w	r9, #0
 8007e56:	d130      	bne.n	8007eba <__gethex+0x326>
 8007e58:	b127      	cbz	r7, 8007e64 <__gethex+0x2d0>
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f7fe fd20 	bl	80068a2 <__any_on>
 8007e62:	4681      	mov	r9, r0
 8007e64:	2301      	movs	r3, #1
 8007e66:	4629      	mov	r1, r5
 8007e68:	1b76      	subs	r6, r6, r5
 8007e6a:	2502      	movs	r5, #2
 8007e6c:	117a      	asrs	r2, r7, #5
 8007e6e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e72:	f007 071f 	and.w	r7, r7, #31
 8007e76:	40bb      	lsls	r3, r7
 8007e78:	4213      	tst	r3, r2
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	bf18      	it	ne
 8007e7e:	f049 0902 	orrne.w	r9, r9, #2
 8007e82:	f7ff fe1f 	bl	8007ac4 <rshift>
 8007e86:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007e8a:	f1b9 0f00 	cmp.w	r9, #0
 8007e8e:	d047      	beq.n	8007f20 <__gethex+0x38c>
 8007e90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d015      	beq.n	8007ec4 <__gethex+0x330>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d017      	beq.n	8007ecc <__gethex+0x338>
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d109      	bne.n	8007eb4 <__gethex+0x320>
 8007ea0:	f019 0f02 	tst.w	r9, #2
 8007ea4:	d006      	beq.n	8007eb4 <__gethex+0x320>
 8007ea6:	f8da 3000 	ldr.w	r3, [sl]
 8007eaa:	ea49 0903 	orr.w	r9, r9, r3
 8007eae:	f019 0f01 	tst.w	r9, #1
 8007eb2:	d10e      	bne.n	8007ed2 <__gethex+0x33e>
 8007eb4:	f045 0510 	orr.w	r5, r5, #16
 8007eb8:	e032      	b.n	8007f20 <__gethex+0x38c>
 8007eba:	f04f 0901 	mov.w	r9, #1
 8007ebe:	e7d1      	b.n	8007e64 <__gethex+0x2d0>
 8007ec0:	2501      	movs	r5, #1
 8007ec2:	e7e2      	b.n	8007e8a <__gethex+0x2f6>
 8007ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ec6:	f1c3 0301 	rsb	r3, r3, #1
 8007eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <__gethex+0x320>
 8007ed2:	f04f 0c00 	mov.w	ip, #0
 8007ed6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007eda:	f104 0314 	add.w	r3, r4, #20
 8007ede:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007ee2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ef0:	d01b      	beq.n	8007f2a <__gethex+0x396>
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	6002      	str	r2, [r0, #0]
 8007ef6:	2d02      	cmp	r5, #2
 8007ef8:	f104 0314 	add.w	r3, r4, #20
 8007efc:	d13c      	bne.n	8007f78 <__gethex+0x3e4>
 8007efe:	f8d8 2000 	ldr.w	r2, [r8]
 8007f02:	3a01      	subs	r2, #1
 8007f04:	42b2      	cmp	r2, r6
 8007f06:	d109      	bne.n	8007f1c <__gethex+0x388>
 8007f08:	2201      	movs	r2, #1
 8007f0a:	1171      	asrs	r1, r6, #5
 8007f0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f10:	f006 061f 	and.w	r6, r6, #31
 8007f14:	fa02 f606 	lsl.w	r6, r2, r6
 8007f18:	421e      	tst	r6, r3
 8007f1a:	d13a      	bne.n	8007f92 <__gethex+0x3fe>
 8007f1c:	f045 0520 	orr.w	r5, r5, #32
 8007f20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f22:	601c      	str	r4, [r3, #0]
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	601f      	str	r7, [r3, #0]
 8007f28:	e6b0      	b.n	8007c8c <__gethex+0xf8>
 8007f2a:	4299      	cmp	r1, r3
 8007f2c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f30:	d8d9      	bhi.n	8007ee6 <__gethex+0x352>
 8007f32:	68a3      	ldr	r3, [r4, #8]
 8007f34:	459b      	cmp	fp, r3
 8007f36:	db17      	blt.n	8007f68 <__gethex+0x3d4>
 8007f38:	6861      	ldr	r1, [r4, #4]
 8007f3a:	9801      	ldr	r0, [sp, #4]
 8007f3c:	3101      	adds	r1, #1
 8007f3e:	f7fe f831 	bl	8005fa4 <_Balloc>
 8007f42:	4681      	mov	r9, r0
 8007f44:	b918      	cbnz	r0, 8007f4e <__gethex+0x3ba>
 8007f46:	4602      	mov	r2, r0
 8007f48:	2184      	movs	r1, #132	@ 0x84
 8007f4a:	4b19      	ldr	r3, [pc, #100]	@ (8007fb0 <__gethex+0x41c>)
 8007f4c:	e6c5      	b.n	8007cda <__gethex+0x146>
 8007f4e:	6922      	ldr	r2, [r4, #16]
 8007f50:	f104 010c 	add.w	r1, r4, #12
 8007f54:	3202      	adds	r2, #2
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	300c      	adds	r0, #12
 8007f5a:	f7fd f8b4 	bl	80050c6 <memcpy>
 8007f5e:	4621      	mov	r1, r4
 8007f60:	9801      	ldr	r0, [sp, #4]
 8007f62:	f7fe f85f 	bl	8006024 <_Bfree>
 8007f66:	464c      	mov	r4, r9
 8007f68:	6923      	ldr	r3, [r4, #16]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	6122      	str	r2, [r4, #16]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f74:	615a      	str	r2, [r3, #20]
 8007f76:	e7be      	b.n	8007ef6 <__gethex+0x362>
 8007f78:	6922      	ldr	r2, [r4, #16]
 8007f7a:	455a      	cmp	r2, fp
 8007f7c:	dd0b      	ble.n	8007f96 <__gethex+0x402>
 8007f7e:	2101      	movs	r1, #1
 8007f80:	4620      	mov	r0, r4
 8007f82:	f7ff fd9f 	bl	8007ac4 <rshift>
 8007f86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f8a:	3701      	adds	r7, #1
 8007f8c:	42bb      	cmp	r3, r7
 8007f8e:	f6ff aee0 	blt.w	8007d52 <__gethex+0x1be>
 8007f92:	2501      	movs	r5, #1
 8007f94:	e7c2      	b.n	8007f1c <__gethex+0x388>
 8007f96:	f016 061f 	ands.w	r6, r6, #31
 8007f9a:	d0fa      	beq.n	8007f92 <__gethex+0x3fe>
 8007f9c:	4453      	add	r3, sl
 8007f9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007fa2:	f7fe f8f1 	bl	8006188 <__hi0bits>
 8007fa6:	f1c6 0620 	rsb	r6, r6, #32
 8007faa:	42b0      	cmp	r0, r6
 8007fac:	dbe7      	blt.n	8007f7e <__gethex+0x3ea>
 8007fae:	e7f0      	b.n	8007f92 <__gethex+0x3fe>
 8007fb0:	08008e3f 	.word	0x08008e3f

08007fb4 <L_shift>:
 8007fb4:	f1c2 0208 	rsb	r2, r2, #8
 8007fb8:	0092      	lsls	r2, r2, #2
 8007fba:	b570      	push	{r4, r5, r6, lr}
 8007fbc:	f1c2 0620 	rsb	r6, r2, #32
 8007fc0:	6843      	ldr	r3, [r0, #4]
 8007fc2:	6804      	ldr	r4, [r0, #0]
 8007fc4:	fa03 f506 	lsl.w	r5, r3, r6
 8007fc8:	432c      	orrs	r4, r5
 8007fca:	40d3      	lsrs	r3, r2
 8007fcc:	6004      	str	r4, [r0, #0]
 8007fce:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fd2:	4288      	cmp	r0, r1
 8007fd4:	d3f4      	bcc.n	8007fc0 <L_shift+0xc>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}

08007fd8 <__match>:
 8007fd8:	b530      	push	{r4, r5, lr}
 8007fda:	6803      	ldr	r3, [r0, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fe2:	b914      	cbnz	r4, 8007fea <__match+0x12>
 8007fe4:	6003      	str	r3, [r0, #0]
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	bd30      	pop	{r4, r5, pc}
 8007fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ff2:	2d19      	cmp	r5, #25
 8007ff4:	bf98      	it	ls
 8007ff6:	3220      	addls	r2, #32
 8007ff8:	42a2      	cmp	r2, r4
 8007ffa:	d0f0      	beq.n	8007fde <__match+0x6>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	e7f3      	b.n	8007fe8 <__match+0x10>

08008000 <__hexnan>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	2500      	movs	r5, #0
 8008006:	680b      	ldr	r3, [r1, #0]
 8008008:	4682      	mov	sl, r0
 800800a:	115e      	asrs	r6, r3, #5
 800800c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008010:	f013 031f 	ands.w	r3, r3, #31
 8008014:	bf18      	it	ne
 8008016:	3604      	addne	r6, #4
 8008018:	1f37      	subs	r7, r6, #4
 800801a:	4690      	mov	r8, r2
 800801c:	46b9      	mov	r9, r7
 800801e:	463c      	mov	r4, r7
 8008020:	46ab      	mov	fp, r5
 8008022:	b087      	sub	sp, #28
 8008024:	6801      	ldr	r1, [r0, #0]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	f846 5c04 	str.w	r5, [r6, #-4]
 800802c:	9502      	str	r5, [sp, #8]
 800802e:	784a      	ldrb	r2, [r1, #1]
 8008030:	1c4b      	adds	r3, r1, #1
 8008032:	9303      	str	r3, [sp, #12]
 8008034:	b342      	cbz	r2, 8008088 <__hexnan+0x88>
 8008036:	4610      	mov	r0, r2
 8008038:	9105      	str	r1, [sp, #20]
 800803a:	9204      	str	r2, [sp, #16]
 800803c:	f7ff fd95 	bl	8007b6a <__hexdig_fun>
 8008040:	2800      	cmp	r0, #0
 8008042:	d151      	bne.n	80080e8 <__hexnan+0xe8>
 8008044:	9a04      	ldr	r2, [sp, #16]
 8008046:	9905      	ldr	r1, [sp, #20]
 8008048:	2a20      	cmp	r2, #32
 800804a:	d818      	bhi.n	800807e <__hexnan+0x7e>
 800804c:	9b02      	ldr	r3, [sp, #8]
 800804e:	459b      	cmp	fp, r3
 8008050:	dd13      	ble.n	800807a <__hexnan+0x7a>
 8008052:	454c      	cmp	r4, r9
 8008054:	d206      	bcs.n	8008064 <__hexnan+0x64>
 8008056:	2d07      	cmp	r5, #7
 8008058:	dc04      	bgt.n	8008064 <__hexnan+0x64>
 800805a:	462a      	mov	r2, r5
 800805c:	4649      	mov	r1, r9
 800805e:	4620      	mov	r0, r4
 8008060:	f7ff ffa8 	bl	8007fb4 <L_shift>
 8008064:	4544      	cmp	r4, r8
 8008066:	d952      	bls.n	800810e <__hexnan+0x10e>
 8008068:	2300      	movs	r3, #0
 800806a:	f1a4 0904 	sub.w	r9, r4, #4
 800806e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008072:	461d      	mov	r5, r3
 8008074:	464c      	mov	r4, r9
 8008076:	f8cd b008 	str.w	fp, [sp, #8]
 800807a:	9903      	ldr	r1, [sp, #12]
 800807c:	e7d7      	b.n	800802e <__hexnan+0x2e>
 800807e:	2a29      	cmp	r2, #41	@ 0x29
 8008080:	d157      	bne.n	8008132 <__hexnan+0x132>
 8008082:	3102      	adds	r1, #2
 8008084:	f8ca 1000 	str.w	r1, [sl]
 8008088:	f1bb 0f00 	cmp.w	fp, #0
 800808c:	d051      	beq.n	8008132 <__hexnan+0x132>
 800808e:	454c      	cmp	r4, r9
 8008090:	d206      	bcs.n	80080a0 <__hexnan+0xa0>
 8008092:	2d07      	cmp	r5, #7
 8008094:	dc04      	bgt.n	80080a0 <__hexnan+0xa0>
 8008096:	462a      	mov	r2, r5
 8008098:	4649      	mov	r1, r9
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff ff8a 	bl	8007fb4 <L_shift>
 80080a0:	4544      	cmp	r4, r8
 80080a2:	d936      	bls.n	8008112 <__hexnan+0x112>
 80080a4:	4623      	mov	r3, r4
 80080a6:	f1a8 0204 	sub.w	r2, r8, #4
 80080aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80080ae:	429f      	cmp	r7, r3
 80080b0:	f842 1f04 	str.w	r1, [r2, #4]!
 80080b4:	d2f9      	bcs.n	80080aa <__hexnan+0xaa>
 80080b6:	1b3b      	subs	r3, r7, r4
 80080b8:	f023 0303 	bic.w	r3, r3, #3
 80080bc:	3304      	adds	r3, #4
 80080be:	3401      	adds	r4, #1
 80080c0:	3e03      	subs	r6, #3
 80080c2:	42b4      	cmp	r4, r6
 80080c4:	bf88      	it	hi
 80080c6:	2304      	movhi	r3, #4
 80080c8:	2200      	movs	r2, #0
 80080ca:	4443      	add	r3, r8
 80080cc:	f843 2b04 	str.w	r2, [r3], #4
 80080d0:	429f      	cmp	r7, r3
 80080d2:	d2fb      	bcs.n	80080cc <__hexnan+0xcc>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	b91b      	cbnz	r3, 80080e0 <__hexnan+0xe0>
 80080d8:	4547      	cmp	r7, r8
 80080da:	d128      	bne.n	800812e <__hexnan+0x12e>
 80080dc:	2301      	movs	r3, #1
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	2005      	movs	r0, #5
 80080e2:	b007      	add	sp, #28
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	3501      	adds	r5, #1
 80080ea:	2d08      	cmp	r5, #8
 80080ec:	f10b 0b01 	add.w	fp, fp, #1
 80080f0:	dd06      	ble.n	8008100 <__hexnan+0x100>
 80080f2:	4544      	cmp	r4, r8
 80080f4:	d9c1      	bls.n	800807a <__hexnan+0x7a>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2501      	movs	r5, #1
 80080fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80080fe:	3c04      	subs	r4, #4
 8008100:	6822      	ldr	r2, [r4, #0]
 8008102:	f000 000f 	and.w	r0, r0, #15
 8008106:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800810a:	6020      	str	r0, [r4, #0]
 800810c:	e7b5      	b.n	800807a <__hexnan+0x7a>
 800810e:	2508      	movs	r5, #8
 8008110:	e7b3      	b.n	800807a <__hexnan+0x7a>
 8008112:	9b01      	ldr	r3, [sp, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0dd      	beq.n	80080d4 <__hexnan+0xd4>
 8008118:	f04f 32ff 	mov.w	r2, #4294967295
 800811c:	f1c3 0320 	rsb	r3, r3, #32
 8008120:	40da      	lsrs	r2, r3
 8008122:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008126:	4013      	ands	r3, r2
 8008128:	f846 3c04 	str.w	r3, [r6, #-4]
 800812c:	e7d2      	b.n	80080d4 <__hexnan+0xd4>
 800812e:	3f04      	subs	r7, #4
 8008130:	e7d0      	b.n	80080d4 <__hexnan+0xd4>
 8008132:	2004      	movs	r0, #4
 8008134:	e7d5      	b.n	80080e2 <__hexnan+0xe2>

08008136 <__ascii_mbtowc>:
 8008136:	b082      	sub	sp, #8
 8008138:	b901      	cbnz	r1, 800813c <__ascii_mbtowc+0x6>
 800813a:	a901      	add	r1, sp, #4
 800813c:	b142      	cbz	r2, 8008150 <__ascii_mbtowc+0x1a>
 800813e:	b14b      	cbz	r3, 8008154 <__ascii_mbtowc+0x1e>
 8008140:	7813      	ldrb	r3, [r2, #0]
 8008142:	600b      	str	r3, [r1, #0]
 8008144:	7812      	ldrb	r2, [r2, #0]
 8008146:	1e10      	subs	r0, r2, #0
 8008148:	bf18      	it	ne
 800814a:	2001      	movne	r0, #1
 800814c:	b002      	add	sp, #8
 800814e:	4770      	bx	lr
 8008150:	4610      	mov	r0, r2
 8008152:	e7fb      	b.n	800814c <__ascii_mbtowc+0x16>
 8008154:	f06f 0001 	mvn.w	r0, #1
 8008158:	e7f8      	b.n	800814c <__ascii_mbtowc+0x16>

0800815a <_realloc_r>:
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	4607      	mov	r7, r0
 8008160:	4614      	mov	r4, r2
 8008162:	460d      	mov	r5, r1
 8008164:	b921      	cbnz	r1, 8008170 <_realloc_r+0x16>
 8008166:	4611      	mov	r1, r2
 8008168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	f7fd be8e 	b.w	8005e8c <_malloc_r>
 8008170:	b92a      	cbnz	r2, 800817e <_realloc_r+0x24>
 8008172:	f7fd fe19 	bl	8005da8 <_free_r>
 8008176:	4625      	mov	r5, r4
 8008178:	4628      	mov	r0, r5
 800817a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817e:	f000 f840 	bl	8008202 <_malloc_usable_size_r>
 8008182:	4284      	cmp	r4, r0
 8008184:	4606      	mov	r6, r0
 8008186:	d802      	bhi.n	800818e <_realloc_r+0x34>
 8008188:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800818c:	d8f4      	bhi.n	8008178 <_realloc_r+0x1e>
 800818e:	4621      	mov	r1, r4
 8008190:	4638      	mov	r0, r7
 8008192:	f7fd fe7b 	bl	8005e8c <_malloc_r>
 8008196:	4680      	mov	r8, r0
 8008198:	b908      	cbnz	r0, 800819e <_realloc_r+0x44>
 800819a:	4645      	mov	r5, r8
 800819c:	e7ec      	b.n	8008178 <_realloc_r+0x1e>
 800819e:	42b4      	cmp	r4, r6
 80081a0:	4622      	mov	r2, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	bf28      	it	cs
 80081a6:	4632      	movcs	r2, r6
 80081a8:	f7fc ff8d 	bl	80050c6 <memcpy>
 80081ac:	4629      	mov	r1, r5
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7fd fdfa 	bl	8005da8 <_free_r>
 80081b4:	e7f1      	b.n	800819a <_realloc_r+0x40>

080081b6 <__ascii_wctomb>:
 80081b6:	4603      	mov	r3, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	b141      	cbz	r1, 80081ce <__ascii_wctomb+0x18>
 80081bc:	2aff      	cmp	r2, #255	@ 0xff
 80081be:	d904      	bls.n	80081ca <__ascii_wctomb+0x14>
 80081c0:	228a      	movs	r2, #138	@ 0x8a
 80081c2:	f04f 30ff 	mov.w	r0, #4294967295
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	4770      	bx	lr
 80081ca:	2001      	movs	r0, #1
 80081cc:	700a      	strb	r2, [r1, #0]
 80081ce:	4770      	bx	lr

080081d0 <fiprintf>:
 80081d0:	b40e      	push	{r1, r2, r3}
 80081d2:	b503      	push	{r0, r1, lr}
 80081d4:	4601      	mov	r1, r0
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	4805      	ldr	r0, [pc, #20]	@ (80081f0 <fiprintf+0x20>)
 80081da:	f853 2b04 	ldr.w	r2, [r3], #4
 80081de:	6800      	ldr	r0, [r0, #0]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	f000 f83d 	bl	8008260 <_vfiprintf_r>
 80081e6:	b002      	add	sp, #8
 80081e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081ec:	b003      	add	sp, #12
 80081ee:	4770      	bx	lr
 80081f0:	20000018 	.word	0x20000018

080081f4 <abort>:
 80081f4:	2006      	movs	r0, #6
 80081f6:	b508      	push	{r3, lr}
 80081f8:	f000 fa06 	bl	8008608 <raise>
 80081fc:	2001      	movs	r0, #1
 80081fe:	f7f9 f9c0 	bl	8001582 <_exit>

08008202 <_malloc_usable_size_r>:
 8008202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008206:	1f18      	subs	r0, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	bfbc      	itt	lt
 800820c:	580b      	ldrlt	r3, [r1, r0]
 800820e:	18c0      	addlt	r0, r0, r3
 8008210:	4770      	bx	lr

08008212 <__sfputc_r>:
 8008212:	6893      	ldr	r3, [r2, #8]
 8008214:	b410      	push	{r4}
 8008216:	3b01      	subs	r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	6093      	str	r3, [r2, #8]
 800821c:	da07      	bge.n	800822e <__sfputc_r+0x1c>
 800821e:	6994      	ldr	r4, [r2, #24]
 8008220:	42a3      	cmp	r3, r4
 8008222:	db01      	blt.n	8008228 <__sfputc_r+0x16>
 8008224:	290a      	cmp	r1, #10
 8008226:	d102      	bne.n	800822e <__sfputc_r+0x1c>
 8008228:	bc10      	pop	{r4}
 800822a:	f000 b931 	b.w	8008490 <__swbuf_r>
 800822e:	6813      	ldr	r3, [r2, #0]
 8008230:	1c58      	adds	r0, r3, #1
 8008232:	6010      	str	r0, [r2, #0]
 8008234:	7019      	strb	r1, [r3, #0]
 8008236:	4608      	mov	r0, r1
 8008238:	bc10      	pop	{r4}
 800823a:	4770      	bx	lr

0800823c <__sfputs_r>:
 800823c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823e:	4606      	mov	r6, r0
 8008240:	460f      	mov	r7, r1
 8008242:	4614      	mov	r4, r2
 8008244:	18d5      	adds	r5, r2, r3
 8008246:	42ac      	cmp	r4, r5
 8008248:	d101      	bne.n	800824e <__sfputs_r+0x12>
 800824a:	2000      	movs	r0, #0
 800824c:	e007      	b.n	800825e <__sfputs_r+0x22>
 800824e:	463a      	mov	r2, r7
 8008250:	4630      	mov	r0, r6
 8008252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008256:	f7ff ffdc 	bl	8008212 <__sfputc_r>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	d1f3      	bne.n	8008246 <__sfputs_r+0xa>
 800825e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008260 <_vfiprintf_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	460d      	mov	r5, r1
 8008266:	4614      	mov	r4, r2
 8008268:	4698      	mov	r8, r3
 800826a:	4606      	mov	r6, r0
 800826c:	b09d      	sub	sp, #116	@ 0x74
 800826e:	b118      	cbz	r0, 8008278 <_vfiprintf_r+0x18>
 8008270:	6a03      	ldr	r3, [r0, #32]
 8008272:	b90b      	cbnz	r3, 8008278 <_vfiprintf_r+0x18>
 8008274:	f7fc fdfe 	bl	8004e74 <__sinit>
 8008278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800827a:	07d9      	lsls	r1, r3, #31
 800827c:	d405      	bmi.n	800828a <_vfiprintf_r+0x2a>
 800827e:	89ab      	ldrh	r3, [r5, #12]
 8008280:	059a      	lsls	r2, r3, #22
 8008282:	d402      	bmi.n	800828a <_vfiprintf_r+0x2a>
 8008284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008286:	f7fc ff0e 	bl	80050a6 <__retarget_lock_acquire_recursive>
 800828a:	89ab      	ldrh	r3, [r5, #12]
 800828c:	071b      	lsls	r3, r3, #28
 800828e:	d501      	bpl.n	8008294 <_vfiprintf_r+0x34>
 8008290:	692b      	ldr	r3, [r5, #16]
 8008292:	b99b      	cbnz	r3, 80082bc <_vfiprintf_r+0x5c>
 8008294:	4629      	mov	r1, r5
 8008296:	4630      	mov	r0, r6
 8008298:	f000 f938 	bl	800850c <__swsetup_r>
 800829c:	b170      	cbz	r0, 80082bc <_vfiprintf_r+0x5c>
 800829e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082a0:	07dc      	lsls	r4, r3, #31
 80082a2:	d504      	bpl.n	80082ae <_vfiprintf_r+0x4e>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b01d      	add	sp, #116	@ 0x74
 80082aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ae:	89ab      	ldrh	r3, [r5, #12]
 80082b0:	0598      	lsls	r0, r3, #22
 80082b2:	d4f7      	bmi.n	80082a4 <_vfiprintf_r+0x44>
 80082b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082b6:	f7fc fef7 	bl	80050a8 <__retarget_lock_release_recursive>
 80082ba:	e7f3      	b.n	80082a4 <_vfiprintf_r+0x44>
 80082bc:	2300      	movs	r3, #0
 80082be:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c0:	2320      	movs	r3, #32
 80082c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082c6:	2330      	movs	r3, #48	@ 0x30
 80082c8:	f04f 0901 	mov.w	r9, #1
 80082cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800847c <_vfiprintf_r+0x21c>
 80082d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082d8:	4623      	mov	r3, r4
 80082da:	469a      	mov	sl, r3
 80082dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e0:	b10a      	cbz	r2, 80082e6 <_vfiprintf_r+0x86>
 80082e2:	2a25      	cmp	r2, #37	@ 0x25
 80082e4:	d1f9      	bne.n	80082da <_vfiprintf_r+0x7a>
 80082e6:	ebba 0b04 	subs.w	fp, sl, r4
 80082ea:	d00b      	beq.n	8008304 <_vfiprintf_r+0xa4>
 80082ec:	465b      	mov	r3, fp
 80082ee:	4622      	mov	r2, r4
 80082f0:	4629      	mov	r1, r5
 80082f2:	4630      	mov	r0, r6
 80082f4:	f7ff ffa2 	bl	800823c <__sfputs_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	f000 80a7 	beq.w	800844c <_vfiprintf_r+0x1ec>
 80082fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008300:	445a      	add	r2, fp
 8008302:	9209      	str	r2, [sp, #36]	@ 0x24
 8008304:	f89a 3000 	ldrb.w	r3, [sl]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 809f 	beq.w	800844c <_vfiprintf_r+0x1ec>
 800830e:	2300      	movs	r3, #0
 8008310:	f04f 32ff 	mov.w	r2, #4294967295
 8008314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008318:	f10a 0a01 	add.w	sl, sl, #1
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	9307      	str	r3, [sp, #28]
 8008320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008324:	931a      	str	r3, [sp, #104]	@ 0x68
 8008326:	4654      	mov	r4, sl
 8008328:	2205      	movs	r2, #5
 800832a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800832e:	4853      	ldr	r0, [pc, #332]	@ (800847c <_vfiprintf_r+0x21c>)
 8008330:	f7fc febb 	bl	80050aa <memchr>
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	b9d8      	cbnz	r0, 8008370 <_vfiprintf_r+0x110>
 8008338:	06d1      	lsls	r1, r2, #27
 800833a:	bf44      	itt	mi
 800833c:	2320      	movmi	r3, #32
 800833e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008342:	0713      	lsls	r3, r2, #28
 8008344:	bf44      	itt	mi
 8008346:	232b      	movmi	r3, #43	@ 0x2b
 8008348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800834c:	f89a 3000 	ldrb.w	r3, [sl]
 8008350:	2b2a      	cmp	r3, #42	@ 0x2a
 8008352:	d015      	beq.n	8008380 <_vfiprintf_r+0x120>
 8008354:	4654      	mov	r4, sl
 8008356:	2000      	movs	r0, #0
 8008358:	f04f 0c0a 	mov.w	ip, #10
 800835c:	9a07      	ldr	r2, [sp, #28]
 800835e:	4621      	mov	r1, r4
 8008360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008364:	3b30      	subs	r3, #48	@ 0x30
 8008366:	2b09      	cmp	r3, #9
 8008368:	d94b      	bls.n	8008402 <_vfiprintf_r+0x1a2>
 800836a:	b1b0      	cbz	r0, 800839a <_vfiprintf_r+0x13a>
 800836c:	9207      	str	r2, [sp, #28]
 800836e:	e014      	b.n	800839a <_vfiprintf_r+0x13a>
 8008370:	eba0 0308 	sub.w	r3, r0, r8
 8008374:	fa09 f303 	lsl.w	r3, r9, r3
 8008378:	4313      	orrs	r3, r2
 800837a:	46a2      	mov	sl, r4
 800837c:	9304      	str	r3, [sp, #16]
 800837e:	e7d2      	b.n	8008326 <_vfiprintf_r+0xc6>
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	1d19      	adds	r1, r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	9103      	str	r1, [sp, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	bfbb      	ittet	lt
 800838c:	425b      	neglt	r3, r3
 800838e:	f042 0202 	orrlt.w	r2, r2, #2
 8008392:	9307      	strge	r3, [sp, #28]
 8008394:	9307      	strlt	r3, [sp, #28]
 8008396:	bfb8      	it	lt
 8008398:	9204      	strlt	r2, [sp, #16]
 800839a:	7823      	ldrb	r3, [r4, #0]
 800839c:	2b2e      	cmp	r3, #46	@ 0x2e
 800839e:	d10a      	bne.n	80083b6 <_vfiprintf_r+0x156>
 80083a0:	7863      	ldrb	r3, [r4, #1]
 80083a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083a4:	d132      	bne.n	800840c <_vfiprintf_r+0x1ac>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	3402      	adds	r4, #2
 80083aa:	1d1a      	adds	r2, r3, #4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	9203      	str	r2, [sp, #12]
 80083b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008480 <_vfiprintf_r+0x220>
 80083ba:	2203      	movs	r2, #3
 80083bc:	4650      	mov	r0, sl
 80083be:	7821      	ldrb	r1, [r4, #0]
 80083c0:	f7fc fe73 	bl	80050aa <memchr>
 80083c4:	b138      	cbz	r0, 80083d6 <_vfiprintf_r+0x176>
 80083c6:	2240      	movs	r2, #64	@ 0x40
 80083c8:	9b04      	ldr	r3, [sp, #16]
 80083ca:	eba0 000a 	sub.w	r0, r0, sl
 80083ce:	4082      	lsls	r2, r0
 80083d0:	4313      	orrs	r3, r2
 80083d2:	3401      	adds	r4, #1
 80083d4:	9304      	str	r3, [sp, #16]
 80083d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083da:	2206      	movs	r2, #6
 80083dc:	4829      	ldr	r0, [pc, #164]	@ (8008484 <_vfiprintf_r+0x224>)
 80083de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083e2:	f7fc fe62 	bl	80050aa <memchr>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d03f      	beq.n	800846a <_vfiprintf_r+0x20a>
 80083ea:	4b27      	ldr	r3, [pc, #156]	@ (8008488 <_vfiprintf_r+0x228>)
 80083ec:	bb1b      	cbnz	r3, 8008436 <_vfiprintf_r+0x1d6>
 80083ee:	9b03      	ldr	r3, [sp, #12]
 80083f0:	3307      	adds	r3, #7
 80083f2:	f023 0307 	bic.w	r3, r3, #7
 80083f6:	3308      	adds	r3, #8
 80083f8:	9303      	str	r3, [sp, #12]
 80083fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fc:	443b      	add	r3, r7
 80083fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008400:	e76a      	b.n	80082d8 <_vfiprintf_r+0x78>
 8008402:	460c      	mov	r4, r1
 8008404:	2001      	movs	r0, #1
 8008406:	fb0c 3202 	mla	r2, ip, r2, r3
 800840a:	e7a8      	b.n	800835e <_vfiprintf_r+0xfe>
 800840c:	2300      	movs	r3, #0
 800840e:	f04f 0c0a 	mov.w	ip, #10
 8008412:	4619      	mov	r1, r3
 8008414:	3401      	adds	r4, #1
 8008416:	9305      	str	r3, [sp, #20]
 8008418:	4620      	mov	r0, r4
 800841a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800841e:	3a30      	subs	r2, #48	@ 0x30
 8008420:	2a09      	cmp	r2, #9
 8008422:	d903      	bls.n	800842c <_vfiprintf_r+0x1cc>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0c6      	beq.n	80083b6 <_vfiprintf_r+0x156>
 8008428:	9105      	str	r1, [sp, #20]
 800842a:	e7c4      	b.n	80083b6 <_vfiprintf_r+0x156>
 800842c:	4604      	mov	r4, r0
 800842e:	2301      	movs	r3, #1
 8008430:	fb0c 2101 	mla	r1, ip, r1, r2
 8008434:	e7f0      	b.n	8008418 <_vfiprintf_r+0x1b8>
 8008436:	ab03      	add	r3, sp, #12
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	462a      	mov	r2, r5
 800843c:	4630      	mov	r0, r6
 800843e:	4b13      	ldr	r3, [pc, #76]	@ (800848c <_vfiprintf_r+0x22c>)
 8008440:	a904      	add	r1, sp, #16
 8008442:	f7fb fec5 	bl	80041d0 <_printf_float>
 8008446:	4607      	mov	r7, r0
 8008448:	1c78      	adds	r0, r7, #1
 800844a:	d1d6      	bne.n	80083fa <_vfiprintf_r+0x19a>
 800844c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x1fe>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x1fe>
 8008458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845a:	f7fc fe25 	bl	80050a8 <__retarget_lock_release_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	065b      	lsls	r3, r3, #25
 8008462:	f53f af1f 	bmi.w	80082a4 <_vfiprintf_r+0x44>
 8008466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008468:	e71e      	b.n	80082a8 <_vfiprintf_r+0x48>
 800846a:	ab03      	add	r3, sp, #12
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	462a      	mov	r2, r5
 8008470:	4630      	mov	r0, r6
 8008472:	4b06      	ldr	r3, [pc, #24]	@ (800848c <_vfiprintf_r+0x22c>)
 8008474:	a904      	add	r1, sp, #16
 8008476:	f7fc f949 	bl	800470c <_printf_i>
 800847a:	e7e4      	b.n	8008446 <_vfiprintf_r+0x1e6>
 800847c:	08008eab 	.word	0x08008eab
 8008480:	08008eb1 	.word	0x08008eb1
 8008484:	08008eb5 	.word	0x08008eb5
 8008488:	080041d1 	.word	0x080041d1
 800848c:	0800823d 	.word	0x0800823d

08008490 <__swbuf_r>:
 8008490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008492:	460e      	mov	r6, r1
 8008494:	4614      	mov	r4, r2
 8008496:	4605      	mov	r5, r0
 8008498:	b118      	cbz	r0, 80084a2 <__swbuf_r+0x12>
 800849a:	6a03      	ldr	r3, [r0, #32]
 800849c:	b90b      	cbnz	r3, 80084a2 <__swbuf_r+0x12>
 800849e:	f7fc fce9 	bl	8004e74 <__sinit>
 80084a2:	69a3      	ldr	r3, [r4, #24]
 80084a4:	60a3      	str	r3, [r4, #8]
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	071a      	lsls	r2, r3, #28
 80084aa:	d501      	bpl.n	80084b0 <__swbuf_r+0x20>
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	b943      	cbnz	r3, 80084c2 <__swbuf_r+0x32>
 80084b0:	4621      	mov	r1, r4
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 f82a 	bl	800850c <__swsetup_r>
 80084b8:	b118      	cbz	r0, 80084c2 <__swbuf_r+0x32>
 80084ba:	f04f 37ff 	mov.w	r7, #4294967295
 80084be:	4638      	mov	r0, r7
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	6922      	ldr	r2, [r4, #16]
 80084c6:	b2f6      	uxtb	r6, r6
 80084c8:	1a98      	subs	r0, r3, r2
 80084ca:	6963      	ldr	r3, [r4, #20]
 80084cc:	4637      	mov	r7, r6
 80084ce:	4283      	cmp	r3, r0
 80084d0:	dc05      	bgt.n	80084de <__swbuf_r+0x4e>
 80084d2:	4621      	mov	r1, r4
 80084d4:	4628      	mov	r0, r5
 80084d6:	f7ff fa59 	bl	800798c <_fflush_r>
 80084da:	2800      	cmp	r0, #0
 80084dc:	d1ed      	bne.n	80084ba <__swbuf_r+0x2a>
 80084de:	68a3      	ldr	r3, [r4, #8]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	60a3      	str	r3, [r4, #8]
 80084e4:	6823      	ldr	r3, [r4, #0]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	701e      	strb	r6, [r3, #0]
 80084ec:	6962      	ldr	r2, [r4, #20]
 80084ee:	1c43      	adds	r3, r0, #1
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d004      	beq.n	80084fe <__swbuf_r+0x6e>
 80084f4:	89a3      	ldrh	r3, [r4, #12]
 80084f6:	07db      	lsls	r3, r3, #31
 80084f8:	d5e1      	bpl.n	80084be <__swbuf_r+0x2e>
 80084fa:	2e0a      	cmp	r6, #10
 80084fc:	d1df      	bne.n	80084be <__swbuf_r+0x2e>
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	f7ff fa43 	bl	800798c <_fflush_r>
 8008506:	2800      	cmp	r0, #0
 8008508:	d0d9      	beq.n	80084be <__swbuf_r+0x2e>
 800850a:	e7d6      	b.n	80084ba <__swbuf_r+0x2a>

0800850c <__swsetup_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4b29      	ldr	r3, [pc, #164]	@ (80085b4 <__swsetup_r+0xa8>)
 8008510:	4605      	mov	r5, r0
 8008512:	6818      	ldr	r0, [r3, #0]
 8008514:	460c      	mov	r4, r1
 8008516:	b118      	cbz	r0, 8008520 <__swsetup_r+0x14>
 8008518:	6a03      	ldr	r3, [r0, #32]
 800851a:	b90b      	cbnz	r3, 8008520 <__swsetup_r+0x14>
 800851c:	f7fc fcaa 	bl	8004e74 <__sinit>
 8008520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008524:	0719      	lsls	r1, r3, #28
 8008526:	d422      	bmi.n	800856e <__swsetup_r+0x62>
 8008528:	06da      	lsls	r2, r3, #27
 800852a:	d407      	bmi.n	800853c <__swsetup_r+0x30>
 800852c:	2209      	movs	r2, #9
 800852e:	602a      	str	r2, [r5, #0]
 8008530:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	e033      	b.n	80085a4 <__swsetup_r+0x98>
 800853c:	0758      	lsls	r0, r3, #29
 800853e:	d512      	bpl.n	8008566 <__swsetup_r+0x5a>
 8008540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008542:	b141      	cbz	r1, 8008556 <__swsetup_r+0x4a>
 8008544:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008548:	4299      	cmp	r1, r3
 800854a:	d002      	beq.n	8008552 <__swsetup_r+0x46>
 800854c:	4628      	mov	r0, r5
 800854e:	f7fd fc2b 	bl	8005da8 <_free_r>
 8008552:	2300      	movs	r3, #0
 8008554:	6363      	str	r3, [r4, #52]	@ 0x34
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800855c:	81a3      	strh	r3, [r4, #12]
 800855e:	2300      	movs	r3, #0
 8008560:	6063      	str	r3, [r4, #4]
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	f043 0308 	orr.w	r3, r3, #8
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	b94b      	cbnz	r3, 8008586 <__swsetup_r+0x7a>
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800857c:	d003      	beq.n	8008586 <__swsetup_r+0x7a>
 800857e:	4621      	mov	r1, r4
 8008580:	4628      	mov	r0, r5
 8008582:	f000 f882 	bl	800868a <__smakebuf_r>
 8008586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858a:	f013 0201 	ands.w	r2, r3, #1
 800858e:	d00a      	beq.n	80085a6 <__swsetup_r+0x9a>
 8008590:	2200      	movs	r2, #0
 8008592:	60a2      	str	r2, [r4, #8]
 8008594:	6962      	ldr	r2, [r4, #20]
 8008596:	4252      	negs	r2, r2
 8008598:	61a2      	str	r2, [r4, #24]
 800859a:	6922      	ldr	r2, [r4, #16]
 800859c:	b942      	cbnz	r2, 80085b0 <__swsetup_r+0xa4>
 800859e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085a2:	d1c5      	bne.n	8008530 <__swsetup_r+0x24>
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
 80085a6:	0799      	lsls	r1, r3, #30
 80085a8:	bf58      	it	pl
 80085aa:	6962      	ldrpl	r2, [r4, #20]
 80085ac:	60a2      	str	r2, [r4, #8]
 80085ae:	e7f4      	b.n	800859a <__swsetup_r+0x8e>
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7f7      	b.n	80085a4 <__swsetup_r+0x98>
 80085b4:	20000018 	.word	0x20000018

080085b8 <_raise_r>:
 80085b8:	291f      	cmp	r1, #31
 80085ba:	b538      	push	{r3, r4, r5, lr}
 80085bc:	4605      	mov	r5, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	d904      	bls.n	80085cc <_raise_r+0x14>
 80085c2:	2316      	movs	r3, #22
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80085ce:	b112      	cbz	r2, 80085d6 <_raise_r+0x1e>
 80085d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085d4:	b94b      	cbnz	r3, 80085ea <_raise_r+0x32>
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 f830 	bl	800863c <_getpid_r>
 80085dc:	4622      	mov	r2, r4
 80085de:	4601      	mov	r1, r0
 80085e0:	4628      	mov	r0, r5
 80085e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085e6:	f000 b817 	b.w	8008618 <_kill_r>
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d00a      	beq.n	8008604 <_raise_r+0x4c>
 80085ee:	1c59      	adds	r1, r3, #1
 80085f0:	d103      	bne.n	80085fa <_raise_r+0x42>
 80085f2:	2316      	movs	r3, #22
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	2001      	movs	r0, #1
 80085f8:	e7e7      	b.n	80085ca <_raise_r+0x12>
 80085fa:	2100      	movs	r1, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008602:	4798      	blx	r3
 8008604:	2000      	movs	r0, #0
 8008606:	e7e0      	b.n	80085ca <_raise_r+0x12>

08008608 <raise>:
 8008608:	4b02      	ldr	r3, [pc, #8]	@ (8008614 <raise+0xc>)
 800860a:	4601      	mov	r1, r0
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	f7ff bfd3 	b.w	80085b8 <_raise_r>
 8008612:	bf00      	nop
 8008614:	20000018 	.word	0x20000018

08008618 <_kill_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	2300      	movs	r3, #0
 800861c:	4d06      	ldr	r5, [pc, #24]	@ (8008638 <_kill_r+0x20>)
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	4611      	mov	r1, r2
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	f7f8 ff9c 	bl	8001562 <_kill>
 800862a:	1c43      	adds	r3, r0, #1
 800862c:	d102      	bne.n	8008634 <_kill_r+0x1c>
 800862e:	682b      	ldr	r3, [r5, #0]
 8008630:	b103      	cbz	r3, 8008634 <_kill_r+0x1c>
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	bd38      	pop	{r3, r4, r5, pc}
 8008636:	bf00      	nop
 8008638:	20000864 	.word	0x20000864

0800863c <_getpid_r>:
 800863c:	f7f8 bf8a 	b.w	8001554 <_getpid>

08008640 <__swhatbuf_r>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008648:	4615      	mov	r5, r2
 800864a:	2900      	cmp	r1, #0
 800864c:	461e      	mov	r6, r3
 800864e:	b096      	sub	sp, #88	@ 0x58
 8008650:	da0c      	bge.n	800866c <__swhatbuf_r+0x2c>
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	2100      	movs	r1, #0
 8008656:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800865a:	bf14      	ite	ne
 800865c:	2340      	movne	r3, #64	@ 0x40
 800865e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008662:	2000      	movs	r0, #0
 8008664:	6031      	str	r1, [r6, #0]
 8008666:	602b      	str	r3, [r5, #0]
 8008668:	b016      	add	sp, #88	@ 0x58
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	466a      	mov	r2, sp
 800866e:	f000 f849 	bl	8008704 <_fstat_r>
 8008672:	2800      	cmp	r0, #0
 8008674:	dbed      	blt.n	8008652 <__swhatbuf_r+0x12>
 8008676:	9901      	ldr	r1, [sp, #4]
 8008678:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800867c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008680:	4259      	negs	r1, r3
 8008682:	4159      	adcs	r1, r3
 8008684:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008688:	e7eb      	b.n	8008662 <__swhatbuf_r+0x22>

0800868a <__smakebuf_r>:
 800868a:	898b      	ldrh	r3, [r1, #12]
 800868c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800868e:	079d      	lsls	r5, r3, #30
 8008690:	4606      	mov	r6, r0
 8008692:	460c      	mov	r4, r1
 8008694:	d507      	bpl.n	80086a6 <__smakebuf_r+0x1c>
 8008696:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800869a:	6023      	str	r3, [r4, #0]
 800869c:	6123      	str	r3, [r4, #16]
 800869e:	2301      	movs	r3, #1
 80086a0:	6163      	str	r3, [r4, #20]
 80086a2:	b003      	add	sp, #12
 80086a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a6:	466a      	mov	r2, sp
 80086a8:	ab01      	add	r3, sp, #4
 80086aa:	f7ff ffc9 	bl	8008640 <__swhatbuf_r>
 80086ae:	9f00      	ldr	r7, [sp, #0]
 80086b0:	4605      	mov	r5, r0
 80086b2:	4639      	mov	r1, r7
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7fd fbe9 	bl	8005e8c <_malloc_r>
 80086ba:	b948      	cbnz	r0, 80086d0 <__smakebuf_r+0x46>
 80086bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086c0:	059a      	lsls	r2, r3, #22
 80086c2:	d4ee      	bmi.n	80086a2 <__smakebuf_r+0x18>
 80086c4:	f023 0303 	bic.w	r3, r3, #3
 80086c8:	f043 0302 	orr.w	r3, r3, #2
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	e7e2      	b.n	8008696 <__smakebuf_r+0xc>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80086d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	9b01      	ldr	r3, [sp, #4]
 80086de:	6020      	str	r0, [r4, #0]
 80086e0:	b15b      	cbz	r3, 80086fa <__smakebuf_r+0x70>
 80086e2:	4630      	mov	r0, r6
 80086e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e8:	f000 f81e 	bl	8008728 <_isatty_r>
 80086ec:	b128      	cbz	r0, 80086fa <__smakebuf_r+0x70>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	f043 0301 	orr.w	r3, r3, #1
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	89a3      	ldrh	r3, [r4, #12]
 80086fc:	431d      	orrs	r5, r3
 80086fe:	81a5      	strh	r5, [r4, #12]
 8008700:	e7cf      	b.n	80086a2 <__smakebuf_r+0x18>
	...

08008704 <_fstat_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	2300      	movs	r3, #0
 8008708:	4d06      	ldr	r5, [pc, #24]	@ (8008724 <_fstat_r+0x20>)
 800870a:	4604      	mov	r4, r0
 800870c:	4608      	mov	r0, r1
 800870e:	4611      	mov	r1, r2
 8008710:	602b      	str	r3, [r5, #0]
 8008712:	f7f8 ff85 	bl	8001620 <_fstat>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d102      	bne.n	8008720 <_fstat_r+0x1c>
 800871a:	682b      	ldr	r3, [r5, #0]
 800871c:	b103      	cbz	r3, 8008720 <_fstat_r+0x1c>
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	bd38      	pop	{r3, r4, r5, pc}
 8008722:	bf00      	nop
 8008724:	20000864 	.word	0x20000864

08008728 <_isatty_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	2300      	movs	r3, #0
 800872c:	4d05      	ldr	r5, [pc, #20]	@ (8008744 <_isatty_r+0x1c>)
 800872e:	4604      	mov	r4, r0
 8008730:	4608      	mov	r0, r1
 8008732:	602b      	str	r3, [r5, #0]
 8008734:	f7f8 ff83 	bl	800163e <_isatty>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d102      	bne.n	8008742 <_isatty_r+0x1a>
 800873c:	682b      	ldr	r3, [r5, #0]
 800873e:	b103      	cbz	r3, 8008742 <_isatty_r+0x1a>
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	20000864 	.word	0x20000864

08008748 <_init>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr

08008754 <_fini>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr
