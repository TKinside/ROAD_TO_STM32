
STM32_TIM_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f7c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08004088  08004088  00005088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080046f8  080046f8  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080046f8  080046f8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004700  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  2000005c  0800475c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000738  0800475c  00006738  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c671  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221e  00000000  00000000  000126f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00014918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac2  00000000  00000000  000156f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ff  00000000  00000000  000161b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011075  00000000  00000000  0002e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b483  00000000  00000000  0003f926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cada9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e54  00000000  00000000  000cadec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000cec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004070 	.word	0x08004070

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004070 	.word	0x08004070

0800014c <__SetIn1PWM>:
/**
 * @brief 设置IN1引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn1PWM(uint8_t duty)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN1_TIM, IN1_CH, duty);
 8000156:	4b04      	ldr	r3, [pc, #16]	@ (8000168 <__SetIn1PWM+0x1c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	79fa      	ldrb	r2, [r7, #7]
 800015c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200005a4 	.word	0x200005a4

0800016c <__SetIn2PWM>:
/**
 * @brief 设置IN2引脚的PWM占空比
 * @param duty 占空比值
 */
static inline void __SetIn2PWM(uint8_t duty)
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(IN2_TIM, IN2_CH, duty);
 8000176:	4b04      	ldr	r3, [pc, #16]	@ (8000188 <__SetIn2PWM+0x1c>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	79fa      	ldrb	r2, [r7, #7]
 800017c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800017e:	bf00      	nop
 8000180:	370c      	adds	r7, #12
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	200005a4 	.word	0x200005a4

0800018c <DRV8833_Init>:

/**
 * @brief 初始化DRV8833
 */
void DRV8833_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(IN1_TIM, IN1_CH);
 8000190:	2100      	movs	r1, #0
 8000192:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <DRV8833_Init+0x18>)
 8000194:	f002 fc52 	bl	8002a3c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(IN2_TIM, IN2_CH);
 8000198:	2104      	movs	r1, #4
 800019a:	4802      	ldr	r0, [pc, #8]	@ (80001a4 <DRV8833_Init+0x18>)
 800019c:	f002 fc4e 	bl	8002a3c <HAL_TIM_PWM_Start>
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	200005a4 	.word	0x200005a4

080001a8 <DRV8833_Forward>:
/**
 * @brief 控制电机前进
 * @param speed 速度值（0-100）
 */
void DRV8833_Forward(uint8_t speed)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	2b64      	cmp	r3, #100	@ 0x64
 80001b6:	d901      	bls.n	80001bc <DRV8833_Forward+0x14>
        speed = MAX_SPEED;
 80001b8:	2364      	movs	r3, #100	@ 0x64
 80001ba:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 80001bc:	4b0c      	ldr	r3, [pc, #48]	@ (80001f0 <DRV8833_Forward+0x48>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d107      	bne.n	80001d4 <DRV8833_Forward+0x2c>
        __SetIn1PWM(speed);
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4618      	mov	r0, r3
 80001c8:	f7ff ffc0 	bl	800014c <__SetIn1PWM>
        __SetIn2PWM(0);
 80001cc:	2000      	movs	r0, #0
 80001ce:	f7ff ffcd 	bl	800016c <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED);
        __SetIn2PWM(MAX_SPEED - speed);
    }
}
 80001d2:	e009      	b.n	80001e8 <DRV8833_Forward+0x40>
        __SetIn1PWM(MAX_SPEED);
 80001d4:	2064      	movs	r0, #100	@ 0x64
 80001d6:	f7ff ffb9 	bl	800014c <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED - speed);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	4618      	mov	r0, r3
 80001e4:	f7ff ffc2 	bl	800016c <__SetIn2PWM>
}
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000078 	.word	0x20000078

080001f4 <DRV8833_Backward>:
/**
 * @brief 控制电机后退
 * @param speed 速度值（0-100）
 */
void DRV8833_Backward(uint8_t speed)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	4603      	mov	r3, r0
 80001fc:	71fb      	strb	r3, [r7, #7]
    if (speed > MAX_SPEED)
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	2b64      	cmp	r3, #100	@ 0x64
 8000202:	d901      	bls.n	8000208 <DRV8833_Backward+0x14>
        speed = MAX_SPEED;
 8000204:	2364      	movs	r3, #100	@ 0x64
 8000206:	71fb      	strb	r3, [r7, #7]
    
    if (currentDecayMode == FAST_DECAY) {
 8000208:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <DRV8833_Backward+0x48>)
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d107      	bne.n	8000220 <DRV8833_Backward+0x2c>
        __SetIn1PWM(0);
 8000210:	2000      	movs	r0, #0
 8000212:	f7ff ff9b 	bl	800014c <__SetIn1PWM>
        __SetIn2PWM(speed);
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4618      	mov	r0, r3
 800021a:	f7ff ffa7 	bl	800016c <__SetIn2PWM>
    } else {
        __SetIn1PWM(MAX_SPEED - speed);
        __SetIn2PWM(MAX_SPEED);
    }
}
 800021e:	e009      	b.n	8000234 <DRV8833_Backward+0x40>
        __SetIn1PWM(MAX_SPEED - speed);
 8000220:	79fb      	ldrb	r3, [r7, #7]
 8000222:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4618      	mov	r0, r3
 800022a:	f7ff ff8f 	bl	800014c <__SetIn1PWM>
        __SetIn2PWM(MAX_SPEED);
 800022e:	2064      	movs	r0, #100	@ 0x64
 8000230:	f7ff ff9c 	bl	800016c <__SetIn2PWM>
}
 8000234:	bf00      	nop
 8000236:	3708      	adds	r7, #8
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000078 	.word	0x20000078

08000240 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000254:	4b1a      	ldr	r3, [pc, #104]	@ (80002c0 <MX_GPIO_Init+0x80>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a19      	ldr	r2, [pc, #100]	@ (80002c0 <MX_GPIO_Init+0x80>)
 800025a:	f043 0320 	orr.w	r3, r3, #32
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b17      	ldr	r3, [pc, #92]	@ (80002c0 <MX_GPIO_Init+0x80>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0320 	and.w	r3, r3, #32
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <MX_GPIO_Init+0x80>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a13      	ldr	r2, [pc, #76]	@ (80002c0 <MX_GPIO_Init+0x80>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <MX_GPIO_Init+0x80>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <MX_GPIO_Init+0x80>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <MX_GPIO_Init+0x80>)
 800028a:	f043 0308 	orr.w	r3, r3, #8
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <MX_GPIO_Init+0x80>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0308 	and.w	r3, r3, #8
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SWITCH_MOTOR_Pin */
  GPIO_InitStruct.Pin = SWITCH_MOTOR_Pin;
 800029c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002a6:	2301      	movs	r3, #1
 80002a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	4619      	mov	r1, r3
 80002b0:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <MX_GPIO_Init+0x84>)
 80002b2:	f001 f8e7 	bl	8001484 <HAL_GPIO_Init>

}
 80002b6:	bf00      	nop
 80002b8:	3720      	adds	r7, #32
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40010c00 	.word	0x40010c00

080002c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b12      	ldr	r3, [pc, #72]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ce:	4a13      	ldr	r2, [pc, #76]	@ (800031c <MX_I2C1_Init+0x54>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80002d2:	4b11      	ldr	r3, [pc, #68]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002d4:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <MX_I2C1_Init+0x58>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002de:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80002f2:	4b09      	ldr	r3, [pc, #36]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <MX_I2C1_Init+0x50>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_I2C1_Init+0x50>)
 8000306:	f001 fa59 	bl	80017bc <HAL_I2C_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f91f 	bl	8000552 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000007c 	.word	0x2000007c
 800031c:	40005400 	.word	0x40005400
 8000320:	00061a80 	.word	0x00061a80

08000324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	2200      	movs	r2, #0
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	605a      	str	r2, [r3, #4]
 8000336:	609a      	str	r2, [r3, #8]
 8000338:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a15      	ldr	r2, [pc, #84]	@ (8000394 <HAL_I2C_MspInit+0x70>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d123      	bne.n	800038c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000344:	4b14      	ldr	r3, [pc, #80]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 800034a:	f043 0308 	orr.w	r3, r3, #8
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0308 	and.w	r3, r3, #8
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800035c:	23c0      	movs	r3, #192	@ 0xc0
 800035e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000360:	2312      	movs	r3, #18
 8000362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000364:	2303      	movs	r3, #3
 8000366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000368:	f107 0310 	add.w	r3, r7, #16
 800036c:	4619      	mov	r1, r3
 800036e:	480b      	ldr	r0, [pc, #44]	@ (800039c <HAL_I2C_MspInit+0x78>)
 8000370:	f001 f888 	bl	8001484 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000374:	4b08      	ldr	r3, [pc, #32]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 800037a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800037e:	61d3      	str	r3, [r2, #28]
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <HAL_I2C_MspInit+0x74>)
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000388:	60bb      	str	r3, [r7, #8]
 800038a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800038c:	bf00      	nop
 800038e:	3720      	adds	r7, #32
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40005400 	.word	0x40005400
 8000398:	40021000 	.word	0x40021000
 800039c:	40010c00 	.word	0x40010c00

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b094      	sub	sp, #80	@ 0x50
 80003a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a6:	f000 ff03 	bl	80011b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003aa:	f000 f88d 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ae:	f7ff ff47 	bl	8000240 <MX_GPIO_Init>
  MX_TIM2_Init();
 80003b2:	f000 fdcb 	bl	8000f4c <MX_TIM2_Init>
  MX_TIM1_Init();
 80003b6:	f000 fd73 	bl	8000ea0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80003ba:	f7ff ff85 	bl	80002c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    HAL_Delay(20);
 80003be:	2014      	movs	r0, #20
 80003c0:	f000 ff58 	bl	8001274 <HAL_Delay>
    OLED_Init();
 80003c4:	f000 f8f4 	bl	80005b0 <OLED_Init>
    OLED_Startup();
 80003c8:	f000 fca7 	bl	8000d1a <OLED_Startup>

    HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80003cc:	213c      	movs	r1, #60	@ 0x3c
 80003ce:	4839      	ldr	r0, [pc, #228]	@ (80004b4 <main+0x114>)
 80003d0:	f002 fc78 	bl	8002cc4 <HAL_TIM_Encoder_Start>
    __HAL_TIM_SET_COUNTER(&htim1,COUNT_MID);;
 80003d4:	4b37      	ldr	r3, [pc, #220]	@ (80004b4 <main+0x114>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	2214      	movs	r2, #20
 80003da:	625a      	str	r2, [r3, #36]	@ 0x24
    //HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
    ///HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
    DRV8833_Init();
 80003dc:	f7ff fed6 	bl	800018c <DRV8833_Init>

    int count=0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	643b      	str	r3, [r7, #64]	@ 0x40
    int speed=0;//0-100
 80003e4:	2300      	movs	r3, #0
 80003e6:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GPIO_ReadPin(SWITCH_MOTOR_GPIO_Port,SWITCH_MOTOR_Pin)==GPIO_PIN_RESET)
 80003e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003ec:	4832      	ldr	r0, [pc, #200]	@ (80004b8 <main+0x118>)
 80003ee:	f001 f9cd 	bl	800178c <HAL_GPIO_ReadPin>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d117      	bne.n	8000428 <main+0x88>
      {
          HAL_Delay(10);
 80003f8:	200a      	movs	r0, #10
 80003fa:	f000 ff3b 	bl	8001274 <HAL_Delay>
          if (HAL_GPIO_ReadPin(SWITCH_MOTOR_GPIO_Port,SWITCH_MOTOR_Pin)==GPIO_PIN_RESET)
 80003fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000402:	482d      	ldr	r0, [pc, #180]	@ (80004b8 <main+0x118>)
 8000404:	f001 f9c2 	bl	800178c <HAL_GPIO_ReadPin>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d10c      	bne.n	8000428 <main+0x88>
          {
              __HAL_TIM_SET_COUNTER(&htim1,20);
 800040e:	4b29      	ldr	r3, [pc, #164]	@ (80004b4 <main+0x114>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2214      	movs	r2, #20
 8000414:	625a      	str	r2, [r3, #36]	@ 0x24
              while (HAL_GPIO_ReadPin(SWITCH_MOTOR_GPIO_Port,SWITCH_MOTOR_Pin)==GPIO_PIN_RESET);
 8000416:	bf00      	nop
 8000418:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800041c:	4826      	ldr	r0, [pc, #152]	@ (80004b8 <main+0x118>)
 800041e:	f001 f9b5 	bl	800178c <HAL_GPIO_ReadPin>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d0f7      	beq.n	8000418 <main+0x78>
          }

      }

      count= __HAL_TIM_GET_COUNTER(&htim1);
 8000428:	4b22      	ldr	r3, [pc, #136]	@ (80004b4 <main+0x114>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800042e:	643b      	str	r3, [r7, #64]	@ 0x40

      OLED_NewFrame();;
 8000430:	f000 f914 	bl	800065c <OLED_NewFrame>
      sprintf(message1,"Count:%d",count);
 8000434:	f107 0320 	add.w	r3, r7, #32
 8000438:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800043a:	4920      	ldr	r1, [pc, #128]	@ (80004bc <main+0x11c>)
 800043c:	4618      	mov	r0, r3
 800043e:	f003 f967 	bl	8003710 <siprintf>
      OLED_PrintASCIIString(0,0,message1,&afont16x8,OLED_COLOR_NORMAL);
 8000442:	f107 0220 	add.w	r2, r7, #32
 8000446:	2300      	movs	r3, #0
 8000448:	9300      	str	r3, [sp, #0]
 800044a:	4b1d      	ldr	r3, [pc, #116]	@ (80004c0 <main+0x120>)
 800044c:	2100      	movs	r1, #0
 800044e:	2000      	movs	r0, #0
 8000450:	f000 fc3c 	bl	8000ccc <OLED_PrintASCIIString>

      if (count<COUNT_MID)
 8000454:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000456:	2b13      	cmp	r3, #19
 8000458:	dc0c      	bgt.n	8000474 <main+0xd4>
      {
        speed=(COUNT_MID-count)*100/COUNT_MID;
 800045a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800045c:	f1c3 0214 	rsb	r2, r3, #20
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	647b      	str	r3, [r7, #68]	@ 0x44
          DRV8833_Backward(speed);
 8000468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800046a:	b2db      	uxtb	r3, r3
 800046c:	4618      	mov	r0, r3
 800046e:	f7ff fec1 	bl	80001f4 <DRV8833_Backward>
 8000472:	e00b      	b.n	800048c <main+0xec>
      } else
      {
          speed=(count-COUNT_MID)*100/COUNT_MID;
 8000474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000476:	f1a3 0214 	sub.w	r2, r3, #20
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	647b      	str	r3, [r7, #68]	@ 0x44
          DRV8833_Forward(speed);
 8000482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fe8e 	bl	80001a8 <DRV8833_Forward>
      }

      sprintf(message2,"Speed:%d",speed);
 800048c:	463b      	mov	r3, r7
 800048e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000490:	490c      	ldr	r1, [pc, #48]	@ (80004c4 <main+0x124>)
 8000492:	4618      	mov	r0, r3
 8000494:	f003 f93c 	bl	8003710 <siprintf>
      OLED_PrintASCIIString(0,17,message2,&afont16x8,OLED_COLOR_NORMAL);
 8000498:	463a      	mov	r2, r7
 800049a:	2300      	movs	r3, #0
 800049c:	9300      	str	r3, [sp, #0]
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <main+0x120>)
 80004a0:	2111      	movs	r1, #17
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fc12 	bl	8000ccc <OLED_PrintASCIIString>
      OLED_ShowFrame();
 80004a8:	f000 f8e4 	bl	8000674 <OLED_ShowFrame>

      HAL_Delay(20);
 80004ac:	2014      	movs	r0, #20
 80004ae:	f000 fee1 	bl	8001274 <HAL_Delay>
      if (HAL_GPIO_ReadPin(SWITCH_MOTOR_GPIO_Port,SWITCH_MOTOR_Pin)==GPIO_PIN_RESET)
 80004b2:	e799      	b.n	80003e8 <main+0x48>
 80004b4:	2000055c 	.word	0x2000055c
 80004b8:	40010c00 	.word	0x40010c00
 80004bc:	08004088 	.word	0x08004088
 80004c0:	08004690 	.word	0x08004690
 80004c4:	08004094 	.word	0x08004094

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b090      	sub	sp, #64	@ 0x40
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	2228      	movs	r2, #40	@ 0x28
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f93c 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ea:	2301      	movs	r3, #1
 80004ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	2302      	movs	r3, #2
 80004fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000504:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000506:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800050a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050c:	f107 0318 	add.w	r3, r7, #24
 8000510:	4618      	mov	r0, r3
 8000512:	f001 fdef 	bl	80020f4 <HAL_RCC_OscConfig>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800051c:	f000 f819 	bl	8000552 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000520:	230f      	movs	r3, #15
 8000522:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000524:	2302      	movs	r3, #2
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800052c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2102      	movs	r1, #2
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f85c 	bl	80025f8 <HAL_RCC_ClockConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000546:	f000 f804 	bl	8000552 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3740      	adds	r7, #64	@ 0x40
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000556:	b672      	cpsid	i
}
 8000558:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055a:	bf00      	nop
 800055c:	e7fd      	b.n	800055a <Error_Handler+0x8>
	...

08000560 <OLED_Send>:
 * @param data 要发送的数据
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	b29b      	uxth	r3, r3
 8000570:	f04f 32ff 	mov.w	r2, #4294967295
 8000574:	9200      	str	r2, [sp, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	217a      	movs	r1, #122	@ 0x7a
 800057a:	4803      	ldr	r0, [pc, #12]	@ (8000588 <OLED_Send+0x28>)
 800057c:	f001 fa62 	bl	8001a44 <HAL_I2C_Master_Transmit>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000007c 	.word	0x2000007c

0800058c <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000596:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <OLED_SendCmd+0x20>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 800059c:	2102      	movs	r1, #2
 800059e:	4803      	ldr	r0, [pc, #12]	@ (80005ac <OLED_SendCmd+0x20>)
 80005a0:	f7ff ffde 	bl	8000560 <OLED_Send>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	200004d0 	.word	0x200004d0

080005b0 <OLED_Init>:

/**
 * @brief 初始化OLED
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80005b4:	20ae      	movs	r0, #174	@ 0xae
 80005b6:	f7ff ffe9 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0x02); /*设置列起始地址 set lower column address*/
 80005ba:	2002      	movs	r0, #2
 80005bc:	f7ff ffe6 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x10); /*设置列结束地址 set higher column address*/
 80005c0:	2010      	movs	r0, #16
 80005c2:	f7ff ffe3 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0x40); /*设置起始行 set display start line*/
 80005c6:	2040      	movs	r0, #64	@ 0x40
 80005c8:	f7ff ffe0 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xB0); /*设置页地址 set page address*/
 80005cc:	20b0      	movs	r0, #176	@ 0xb0
 80005ce:	f7ff ffdd 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0x81); /*设置对比度 contract control*/
 80005d2:	2081      	movs	r0, #129	@ 0x81
 80005d4:	f7ff ffda 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0xCF); /*128*/
 80005d8:	20cf      	movs	r0, #207	@ 0xcf
 80005da:	f7ff ffd7 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xA1); /*设置分段重映射 从右到左 set segment remap*/
 80005de:	20a1      	movs	r0, #161	@ 0xa1
 80005e0:	f7ff ffd4 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xA6); /*正向显示 normal / reverse*/
 80005e4:	20a6      	movs	r0, #166	@ 0xa6
 80005e6:	f7ff ffd1 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xA8); /*多路复用率 multiplex ratio*/
 80005ea:	20a8      	movs	r0, #168	@ 0xa8
 80005ec:	f7ff ffce 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x3F); /*duty = 1/64*/
 80005f0:	203f      	movs	r0, #63	@ 0x3f
 80005f2:	f7ff ffcb 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xAD); /*设置启动电荷泵 set charge pump enable*/
 80005f6:	20ad      	movs	r0, #173	@ 0xad
 80005f8:	f7ff ffc8 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x8B); /*启动DC-DC */
 80005fc:	208b      	movs	r0, #139	@ 0x8b
 80005fe:	f7ff ffc5 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0x33); /*设置泵电压 set VPP 10V */
 8000602:	2033      	movs	r0, #51	@ 0x33
 8000604:	f7ff ffc2 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xC8); /*设置输出扫描方向 COM[N-1]到COM[0] Com scan direction*/
 8000608:	20c8      	movs	r0, #200	@ 0xc8
 800060a:	f7ff ffbf 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xD3); /*设置显示偏移 set display offset*/
 800060e:	20d3      	movs	r0, #211	@ 0xd3
 8000610:	f7ff ffbc 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x00); /* 0x00 */
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff ffb9 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xD5); /*设置内部时钟频率 set osc frequency*/
 800061a:	20d5      	movs	r0, #213	@ 0xd5
 800061c:	f7ff ffb6 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0xC0);
 8000620:	20c0      	movs	r0, #192	@ 0xc0
 8000622:	f7ff ffb3 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xD9); /*设置放电/预充电时间 set pre-charge period*/
 8000626:	20d9      	movs	r0, #217	@ 0xd9
 8000628:	f7ff ffb0 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x1F); /*0x22*/
 800062c:	201f      	movs	r0, #31
 800062e:	f7ff ffad 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xDA); /*设置引脚布局 set COM pins*/
 8000632:	20da      	movs	r0, #218	@ 0xda
 8000634:	f7ff ffaa 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000638:	2012      	movs	r0, #18
 800063a:	f7ff ffa7 	bl	800058c <OLED_SendCmd>

  OLED_SendCmd(0xDB); /*设置电平 set vcomh*/
 800063e:	20db      	movs	r0, #219	@ 0xdb
 8000640:	f7ff ffa4 	bl	800058c <OLED_SendCmd>
  OLED_SendCmd(0x40);
 8000644:	2040      	movs	r0, #64	@ 0x40
 8000646:	f7ff ffa1 	bl	800058c <OLED_SendCmd>

  OLED_NewFrame();
 800064a:	f000 f807 	bl	800065c <OLED_NewFrame>
  OLED_ShowFrame();
 800064e:	f000 f811 	bl	8000674 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000652:	20af      	movs	r0, #175	@ 0xaf
 8000654:	f7ff ff9a 	bl	800058c <OLED_SendCmd>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}

0800065c <OLED_NewFrame>:
// ========================== 显存操作函数 ==========================

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame() {
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000660:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000664:	2100      	movs	r1, #0
 8000666:	4802      	ldr	r0, [pc, #8]	@ (8000670 <OLED_NewFrame+0x14>)
 8000668:	f003 f874 	bl	8003754 <memset>
  
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000d0 	.word	0x200000d0

08000674 <OLED_ShowFrame>:

/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <OLED_ShowFrame+0x5c>)
 800067c:	2240      	movs	r2, #64	@ 0x40
 800067e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	e01b      	b.n	80006be <OLED_ShowFrame+0x4a>
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	3b50      	subs	r3, #80	@ 0x50
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff7d 	bl	800058c <OLED_SendCmd>
    OLED_SendCmd(0x02);     // 设置列地址低4位
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff ff7a 	bl	800058c <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000698:	2010      	movs	r0, #16
 800069a:	f7ff ff77 	bl	800058c <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800069e:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <OLED_ShowFrame+0x60>)
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	01db      	lsls	r3, r3, #7
 80006a4:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <OLED_ShowFrame+0x64>)
 80006a6:	4413      	add	r3, r2
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	4619      	mov	r1, r3
 80006ac:	f003 f886 	bl	80037bc <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 80006b0:	2181      	movs	r1, #129	@ 0x81
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <OLED_ShowFrame+0x5c>)
 80006b4:	f7ff ff54 	bl	8000560 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++) {
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3301      	adds	r3, #1
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	d9e0      	bls.n	8000686 <OLED_ShowFrame+0x12>
  }
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	200004d4 	.word	0x200004d4
 80006d4:	200004d5 	.word	0x200004d5
 80006d8:	200000d0 	.word	0x200000d0

080006dc <OLED_Clean>:

//清屏
void OLED_Clean()
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    OLED_NewFrame();
 80006e0:	f7ff ffbc 	bl	800065c <OLED_NewFrame>
    OLED_ShowFrame();
 80006e4:	f7ff ffc6 	bl	8000674 <OLED_ShowFrame>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <OLED_SetPixel>:
 * @brief 设置一个像素点
 * @param x 横坐标
 * @param y 纵坐标
 * @param color 颜色
 */
void OLED_SetPixel(uint8_t x, uint8_t y, OLED_ColorMode color) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 80006fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000702:	2b00      	cmp	r3, #0
 8000704:	db43      	blt.n	800078e <OLED_SetPixel+0xa2>
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	2b3f      	cmp	r3, #63	@ 0x3f
 800070a:	d840      	bhi.n	800078e <OLED_SetPixel+0xa2>
  if (!color) {
 800070c:	797b      	ldrb	r3, [r7, #5]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d11d      	bne.n	800074e <OLED_SetPixel+0x62>
    OLED_GRAM[y / 8][x] |= 1 << (y % 8);
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b2d8      	uxtb	r0, r3
 8000718:	4602      	mov	r2, r0
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	491e      	ldr	r1, [pc, #120]	@ (8000798 <OLED_SetPixel+0xac>)
 800071e:	01d2      	lsls	r2, r2, #7
 8000720:	440a      	add	r2, r1
 8000722:	4413      	add	r3, r2
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	b25a      	sxtb	r2, r3
 8000728:	79bb      	ldrb	r3, [r7, #6]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f303 	lsl.w	r3, r1, r3
 8000734:	b25b      	sxtb	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b259      	sxtb	r1, r3
 800073a:	4602      	mov	r2, r0
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	b2c8      	uxtb	r0, r1
 8000740:	4915      	ldr	r1, [pc, #84]	@ (8000798 <OLED_SetPixel+0xac>)
 8000742:	01d2      	lsls	r2, r2, #7
 8000744:	440a      	add	r2, r1
 8000746:	4413      	add	r3, r2
 8000748:	4602      	mov	r2, r0
 800074a:	701a      	strb	r2, [r3, #0]
 800074c:	e020      	b.n	8000790 <OLED_SetPixel+0xa4>
  } else {
    OLED_GRAM[y / 8][x] &= ~(1 << (y % 8));
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	08db      	lsrs	r3, r3, #3
 8000752:	b2d8      	uxtb	r0, r3
 8000754:	4602      	mov	r2, r0
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	490f      	ldr	r1, [pc, #60]	@ (8000798 <OLED_SetPixel+0xac>)
 800075a:	01d2      	lsls	r2, r2, #7
 800075c:	440a      	add	r2, r1
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	79bb      	ldrb	r3, [r7, #6]
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	2101      	movs	r1, #1
 800076c:	fa01 f303 	lsl.w	r3, r1, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	43db      	mvns	r3, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	4013      	ands	r3, r2
 8000778:	b259      	sxtb	r1, r3
 800077a:	4602      	mov	r2, r0
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	b2c8      	uxtb	r0, r1
 8000780:	4905      	ldr	r1, [pc, #20]	@ (8000798 <OLED_SetPixel+0xac>)
 8000782:	01d2      	lsls	r2, r2, #7
 8000784:	440a      	add	r2, r1
 8000786:	4413      	add	r3, r2
 8000788:	4602      	mov	r2, r0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	e000      	b.n	8000790 <OLED_SetPixel+0xa4>
  if (x >= OLED_COLUMN || y >= OLED_ROW) return;
 800078e:	bf00      	nop
  }
}
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	200000d0 	.word	0x200000d0

0800079c <OLED_SetByte_Fine>:
 * @param color 颜色
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color) {
 800079c:	b490      	push	{r4, r7}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4604      	mov	r4, r0
 80007a4:	4608      	mov	r0, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	461a      	mov	r2, r3
 80007aa:	4623      	mov	r3, r4
 80007ac:	71fb      	strb	r3, [r7, #7]
 80007ae:	4603      	mov	r3, r0
 80007b0:	71bb      	strb	r3, [r7, #6]
 80007b2:	460b      	mov	r3, r1
 80007b4:	717b      	strb	r3, [r7, #5]
 80007b6:	4613      	mov	r3, r2
 80007b8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d85f      	bhi.n	8000880 <OLED_SetByte_Fine+0xe4>
 80007c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db5b      	blt.n	8000880 <OLED_SetByte_Fine+0xe4>
  if (color) data = ~data;
 80007c8:	7d3b      	ldrb	r3, [r7, #20]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d002      	beq.n	80007d4 <OLED_SetByte_Fine+0x38>
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	43db      	mvns	r3, r3
 80007d2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80007d4:	7c3b      	ldrb	r3, [r7, #16]
 80007d6:	3301      	adds	r3, #1
 80007d8:	22ff      	movs	r2, #255	@ 0xff
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	b25a      	sxtb	r2, r3
 80007e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	b25a      	sxtb	r2, r3
 80007e8:	793b      	ldrb	r3, [r7, #4]
 80007ea:	f1c3 0308 	rsb	r3, r3, #8
 80007ee:	21ff      	movs	r1, #255	@ 0xff
 80007f0:	fa41 f303 	asr.w	r3, r1, r3
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b25b      	sxtb	r3, r3
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	4b23      	ldr	r3, [pc, #140]	@ (800088c <OLED_SetByte_Fine+0xf0>)
 80007fe:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	79bb      	ldrb	r3, [r7, #6]
 8000804:	4922      	ldr	r1, [pc, #136]	@ (8000890 <OLED_SetByte_Fine+0xf4>)
 8000806:	01d2      	lsls	r2, r2, #7
 8000808:	440a      	add	r2, r1
 800080a:	4413      	add	r3, r2
 800080c:	7818      	ldrb	r0, [r3, #0]
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <OLED_SetByte_Fine+0xf0>)
 8000810:	7819      	ldrb	r1, [r3, #0]
 8000812:	79fa      	ldrb	r2, [r7, #7]
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	4001      	ands	r1, r0
 8000818:	b2c8      	uxtb	r0, r1
 800081a:	491d      	ldr	r1, [pc, #116]	@ (8000890 <OLED_SetByte_Fine+0xf4>)
 800081c:	01d2      	lsls	r2, r2, #7
 800081e:	440a      	add	r2, r1
 8000820:	4413      	add	r3, r2
 8000822:	4602      	mov	r2, r0
 8000824:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000826:	7c3b      	ldrb	r3, [r7, #16]
 8000828:	3301      	adds	r3, #1
 800082a:	22ff      	movs	r2, #255	@ 0xff
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	b25b      	sxtb	r3, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	b25a      	sxtb	r2, r3
 8000836:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800083a:	4013      	ands	r3, r2
 800083c:	b25a      	sxtb	r2, r3
 800083e:	793b      	ldrb	r3, [r7, #4]
 8000840:	f1c3 0308 	rsb	r3, r3, #8
 8000844:	f06f 01ff 	mvn.w	r1, #255	@ 0xff
 8000848:	fa41 f303 	asr.w	r3, r1, r3
 800084c:	b25b      	sxtb	r3, r3
 800084e:	4013      	ands	r3, r2
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <OLED_SetByte_Fine+0xf0>)
 8000856:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	490c      	ldr	r1, [pc, #48]	@ (8000890 <OLED_SetByte_Fine+0xf4>)
 800085e:	01d2      	lsls	r2, r2, #7
 8000860:	440a      	add	r2, r1
 8000862:	4413      	add	r3, r2
 8000864:	7818      	ldrb	r0, [r3, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <OLED_SetByte_Fine+0xf0>)
 8000868:	7819      	ldrb	r1, [r3, #0]
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	4301      	orrs	r1, r0
 8000870:	b2c8      	uxtb	r0, r1
 8000872:	4907      	ldr	r1, [pc, #28]	@ (8000890 <OLED_SetByte_Fine+0xf4>)
 8000874:	01d2      	lsls	r2, r2, #7
 8000876:	440a      	add	r2, r1
 8000878:	4413      	add	r3, r2
 800087a:	4602      	mov	r2, r0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e000      	b.n	8000882 <OLED_SetByte_Fine+0xe6>
  if (page >= OLED_PAGE || column >= OLED_COLUMN) return;
 8000880:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bc90      	pop	{r4, r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000555 	.word	0x20000555
 8000890:	200000d0 	.word	0x200000d0

08000894 <OLED_SetBits_Fine>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color) {
 8000894:	b5b0      	push	{r4, r5, r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af02      	add	r7, sp, #8
 800089a:	4604      	mov	r4, r0
 800089c:	4608      	mov	r0, r1
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	4623      	mov	r3, r4
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4603      	mov	r3, r0
 80008a8:	71bb      	strb	r3, [r7, #6]
 80008aa:	460b      	mov	r3, r1
 80008ac:	717b      	strb	r3, [r7, #5]
 80008ae:	4613      	mov	r3, r2
 80008b0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8) {
 80008c0:	7bba      	ldrb	r2, [r7, #14]
 80008c2:	793b      	ldrb	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	2b08      	cmp	r3, #8
 80008c8:	dd29      	ble.n	800091e <OLED_SetBits_Fine+0x8a>
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80008ca:	797a      	ldrb	r2, [r7, #5]
 80008cc:	7bbb      	ldrb	r3, [r7, #14]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	7bbc      	ldrb	r4, [r7, #14]
 80008d6:	79f9      	ldrb	r1, [r7, #7]
 80008d8:	7bf8      	ldrb	r0, [r7, #15]
 80008da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	2307      	movs	r3, #7
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	4623      	mov	r3, r4
 80008e6:	f7ff ff59 	bl	800079c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80008ea:	7bfb      	ldrb	r3, [r7, #15]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2d8      	uxtb	r0, r3
 80008f0:	797a      	ldrb	r2, [r7, #5]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	f1c3 0308 	rsb	r3, r3, #8
 80008f8:	fa42 f303 	asr.w	r3, r2, r3
 80008fc:	b2dc      	uxtb	r4, r3
 80008fe:	793a      	ldrb	r2, [r7, #4]
 8000900:	7bbb      	ldrb	r3, [r7, #14]
 8000902:	4413      	add	r3, r2
 8000904:	b2db      	uxtb	r3, r3
 8000906:	3b09      	subs	r3, #9
 8000908:	b2db      	uxtb	r3, r3
 800090a:	79f9      	ldrb	r1, [r7, #7]
 800090c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	2300      	movs	r3, #0
 8000916:	4622      	mov	r2, r4
 8000918:	f7ff ff40 	bl	800079c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800091c:	e015      	b.n	800094a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800091e:	797a      	ldrb	r2, [r7, #5]
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	b2dc      	uxtb	r4, r3
 8000928:	7bba      	ldrb	r2, [r7, #14]
 800092a:	793b      	ldrb	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	b2db      	uxtb	r3, r3
 8000930:	3b01      	subs	r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	7bbd      	ldrb	r5, [r7, #14]
 8000936:	79f9      	ldrb	r1, [r7, #7]
 8000938:	7bf8      	ldrb	r0, [r7, #15]
 800093a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800093e:	9201      	str	r2, [sp, #4]
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	462b      	mov	r3, r5
 8000944:	4622      	mov	r2, r4
 8000946:	f7ff ff29 	bl	800079c <OLED_SetByte_Fine>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bdb0      	pop	{r4, r5, r7, pc}

08000952 <OLED_SetBits>:
 * @param data 数据
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color) {
 8000952:	b590      	push	{r4, r7, lr}
 8000954:	b087      	sub	sp, #28
 8000956:	af02      	add	r7, sp, #8
 8000958:	4604      	mov	r4, r0
 800095a:	4608      	mov	r0, r1
 800095c:	4611      	mov	r1, r2
 800095e:	461a      	mov	r2, r3
 8000960:	4623      	mov	r3, r4
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4603      	mov	r3, r0
 8000966:	71bb      	strb	r3, [r7, #6]
 8000968:	460b      	mov	r3, r1
 800096a:	717b      	strb	r3, [r7, #5]
 800096c:	4613      	mov	r3, r2
 800096e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000970:	79bb      	ldrb	r3, [r7, #6]
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800097e:	797a      	ldrb	r2, [r7, #5]
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	b2da      	uxtb	r2, r3
 8000988:	7bbc      	ldrb	r4, [r7, #14]
 800098a:	79f9      	ldrb	r1, [r7, #7]
 800098c:	7bf8      	ldrb	r0, [r7, #15]
 800098e:	793b      	ldrb	r3, [r7, #4]
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2307      	movs	r3, #7
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	4623      	mov	r3, r4
 8000998:	f7ff ff00 	bl	800079c <OLED_SetByte_Fine>
  if (bit) {
 800099c:	7bbb      	ldrb	r3, [r7, #14]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d014      	beq.n	80009cc <OLED_SetBits+0x7a>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2d8      	uxtb	r0, r3
 80009a8:	797a      	ldrb	r2, [r7, #5]
 80009aa:	7bbb      	ldrb	r3, [r7, #14]
 80009ac:	f1c3 0308 	rsb	r3, r3, #8
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2dc      	uxtb	r4, r3
 80009b6:	7bbb      	ldrb	r3, [r7, #14]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	79f9      	ldrb	r1, [r7, #7]
 80009be:	793a      	ldrb	r2, [r7, #4]
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2300      	movs	r3, #0
 80009c6:	4622      	mov	r2, r4
 80009c8:	f7ff fee8 	bl	800079c <OLED_SetByte_Fine>
  }
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd90      	pop	{r4, r7, pc}

080009d4 <OLED_SetBlock>:
 * @param h 高度
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af02      	add	r7, sp, #8
 80009da:	603a      	str	r2, [r7, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	460b      	mov	r3, r1
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	4613      	mov	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80009ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80009f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	e025      	b.n	8000a4e <OLED_SetBlock+0x7a>
    for (uint8_t j = 0; j < fullRow; j++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	73bb      	strb	r3, [r7, #14]
 8000a06:	e01b      	b.n	8000a40 <OLED_SetBlock+0x6c>
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b2d8      	uxtb	r0, r3
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	4413      	add	r3, r2
 8000a1a:	b2dc      	uxtb	r4, r3
 8000a1c:	7bfa      	ldrb	r2, [r7, #15]
 8000a1e:	7bbb      	ldrb	r3, [r7, #14]
 8000a20:	7979      	ldrb	r1, [r7, #5]
 8000a22:	fb01 f303 	mul.w	r3, r1, r3
 8000a26:	4413      	add	r3, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a34:	4621      	mov	r1, r4
 8000a36:	f7ff ff8c 	bl	8000952 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++) {
 8000a3a:	7bbb      	ldrb	r3, [r7, #14]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73bb      	strb	r3, [r7, #14]
 8000a40:	7bba      	ldrb	r2, [r7, #14]
 8000a42:	7b3b      	ldrb	r3, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d3df      	bcc.n	8000a08 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++) {
 8000a48:	7bfb      	ldrb	r3, [r7, #15]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	73fb      	strb	r3, [r7, #15]
 8000a4e:	7bfa      	ldrb	r2, [r7, #15]
 8000a50:	797b      	ldrb	r3, [r7, #5]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3d5      	bcc.n	8000a02 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit) {
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d028      	beq.n	8000aae <OLED_SetBlock+0xda>
    uint16_t fullNum = w * fullRow; // 完整的字节数
 8000a5c:	797b      	ldrb	r3, [r7, #5]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	7b3a      	ldrb	r2, [r7, #12]
 8000a62:	b292      	uxth	r2, r2
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	737b      	strb	r3, [r7, #13]
 8000a6e:	e01a      	b.n	8000aa6 <OLED_SetBlock+0xd2>
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	4413      	add	r3, r2
 8000a76:	b2d8      	uxtb	r0, r3
 8000a78:	7b3b      	ldrb	r3, [r7, #12]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	4413      	add	r3, r2
 8000a82:	b2d9      	uxtb	r1, r3
 8000a84:	893a      	ldrh	r2, [r7, #8]
 8000a86:	7b7b      	ldrb	r3, [r7, #13]
 8000a88:	4413      	add	r3, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	781a      	ldrb	r2, [r3, #0]
 8000a92:	7afc      	ldrb	r4, [r7, #11]
 8000a94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	f7ff fefa 	bl	8000894 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++) {
 8000aa0:	7b7b      	ldrb	r3, [r7, #13]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	737b      	strb	r3, [r7, #13]
 8000aa6:	7b7a      	ldrb	r2, [r7, #13]
 8000aa8:	797b      	ldrb	r3, [r7, #5]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d3e0      	bcc.n	8000a70 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}

08000ab6 <OLED_DrawCircle>:
 * @param y 圆心纵坐标
 * @param r 圆半径
 * @param color 颜色
 * @note 此函数使用Bresenham算法绘制圆
 */
void OLED_DrawCircle(uint8_t x, uint8_t y, uint8_t r, OLED_ColorMode color) {
 8000ab6:	b590      	push	{r4, r7, lr}
 8000ab8:	b085      	sub	sp, #20
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4604      	mov	r4, r0
 8000abe:	4608      	mov	r0, r1
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	71fb      	strb	r3, [r7, #7]
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71bb      	strb	r3, [r7, #6]
 8000acc:	460b      	mov	r3, r1
 8000ace:	717b      	strb	r3, [r7, #5]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	713b      	strb	r3, [r7, #4]
  int16_t a = 0, b = r, di = 3 - (r << 1);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	81fb      	strh	r3, [r7, #14]
 8000ad8:	797b      	ldrb	r3, [r7, #5]
 8000ada:	81bb      	strh	r3, [r7, #12]
 8000adc:	797b      	ldrb	r3, [r7, #5]
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	f1c3 0303 	rsb	r3, r3, #3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	817b      	strh	r3, [r7, #10]
  while (a <= b) {
 8000aec:	e0b3      	b.n	8000c56 <OLED_DrawCircle+0x1a0>
    OLED_SetPixel(x - b, y - a, color);
 8000aee:	89bb      	ldrh	r3, [r7, #12]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	b2d8      	uxtb	r0, r3
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	79ba      	ldrb	r2, [r7, #6]
 8000afe:	1ad3      	subs	r3, r2, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	793a      	ldrb	r2, [r7, #4]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f7ff fdf1 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x + b, y - a, color);
 8000b0a:	89bb      	ldrh	r3, [r7, #12]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4413      	add	r3, r2
 8000b12:	b2d8      	uxtb	r0, r3
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	79ba      	ldrb	r2, [r7, #6]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	793a      	ldrb	r2, [r7, #4]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f7ff fde3 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x - a, y + b, color);
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	b2d8      	uxtb	r0, r3
 8000b30:	89bb      	ldrh	r3, [r7, #12]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	4413      	add	r3, r2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	793a      	ldrb	r2, [r7, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff fdd5 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x - b, y - a, color);
 8000b42:	89bb      	ldrh	r3, [r7, #12]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	b2d8      	uxtb	r0, r3
 8000b4c:	89fb      	ldrh	r3, [r7, #14]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	79ba      	ldrb	r2, [r7, #6]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	793a      	ldrb	r2, [r7, #4]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f7ff fdc7 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x - a, y - b, color);
 8000b5e:	89fb      	ldrh	r3, [r7, #14]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	79fa      	ldrb	r2, [r7, #7]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b2d8      	uxtb	r0, r3
 8000b68:	89bb      	ldrh	r3, [r7, #12]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	79ba      	ldrb	r2, [r7, #6]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	793a      	ldrb	r2, [r7, #4]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f7ff fdb9 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x + b, y + a, color);
 8000b7a:	89bb      	ldrh	r3, [r7, #12]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4413      	add	r3, r2
 8000b82:	b2d8      	uxtb	r0, r3
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	79bb      	ldrb	r3, [r7, #6]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	793a      	ldrb	r2, [r7, #4]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f7ff fdab 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x + a, y - b, color);
 8000b96:	89fb      	ldrh	r3, [r7, #14]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b2d8      	uxtb	r0, r3
 8000ba0:	89bb      	ldrh	r3, [r7, #12]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	79ba      	ldrb	r2, [r7, #6]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	793a      	ldrb	r2, [r7, #4]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f7ff fd9d 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x + a, y + b, color);
 8000bb2:	89fb      	ldrh	r3, [r7, #14]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2d8      	uxtb	r0, r3
 8000bbc:	89bb      	ldrh	r3, [r7, #12]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	793a      	ldrb	r2, [r7, #4]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f7ff fd8f 	bl	80006ec <OLED_SetPixel>
    OLED_SetPixel(x - b, y + a, color);
 8000bce:	89bb      	ldrh	r3, [r7, #12]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	79fa      	ldrb	r2, [r7, #7]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	b2d8      	uxtb	r0, r3
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	79bb      	ldrb	r3, [r7, #6]
 8000bde:	4413      	add	r3, r2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	793a      	ldrb	r2, [r7, #4]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f7ff fd81 	bl	80006ec <OLED_SetPixel>
    a++;
 8000bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	81fb      	strh	r3, [r7, #14]
    if (di < 0) {
 8000bf6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	da09      	bge.n	8000c12 <OLED_DrawCircle+0x15c>
      di += 4 * a + 6;
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	4413      	add	r3, r2
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	3306      	adds	r3, #6
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	817b      	strh	r3, [r7, #10]
 8000c10:	e013      	b.n	8000c3a <OLED_DrawCircle+0x184>
    } else {
      di += 10 + 4 * (a - b);
 8000c12:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	897b      	ldrh	r3, [r7, #10]
 8000c24:	4413      	add	r3, r2
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	330a      	adds	r3, #10
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	817b      	strh	r3, [r7, #10]
      b--;
 8000c2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	81bb      	strh	r3, [r7, #12]
    }
    OLED_SetPixel(x + a, y + b, color);
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4413      	add	r3, r2
 8000c42:	b2d8      	uxtb	r0, r3
 8000c44:	89bb      	ldrh	r3, [r7, #12]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	79bb      	ldrb	r3, [r7, #6]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	793a      	ldrb	r2, [r7, #4]
 8000c50:	4619      	mov	r1, r3
 8000c52:	f7ff fd4b 	bl	80006ec <OLED_SetPixel>
  while (a <= b) {
 8000c56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	f77f af45 	ble.w	8000aee <OLED_DrawCircle+0x38>
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd90      	pop	{r4, r7, pc}

08000c6e <OLED_PrintASCIIChar>:
 * @param y 起始点纵坐标
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color) {
 8000c6e:	b5b0      	push	{r4, r5, r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af02      	add	r7, sp, #8
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	797b      	ldrb	r3, [r7, #5]
 8000c88:	f1a3 0120 	sub.w	r1, r3, #32
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	3307      	adds	r3, #7
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	da00      	bge.n	8000c98 <OLED_PrintASCIIChar+0x2a>
 8000c96:	3307      	adds	r3, #7
 8000c98:	10db      	asrs	r3, r3, #3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	fb00 f303 	mul.w	r3, r0, r3
 8000ca4:	fb01 f303 	mul.w	r3, r1, r3
 8000ca8:	18d4      	adds	r4, r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	785d      	ldrb	r5, [r3, #1]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	79b9      	ldrb	r1, [r7, #6]
 8000cb4:	79f8      	ldrb	r0, [r7, #7]
 8000cb6:	7e3a      	ldrb	r2, [r7, #24]
 8000cb8:	9201      	str	r2, [sp, #4]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	462b      	mov	r3, r5
 8000cbe:	4622      	mov	r2, r4
 8000cc0:	f7ff fe88 	bl	80009d4 <OLED_SetBlock>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bdb0      	pop	{r4, r5, r7, pc}

08000ccc <OLED_PrintASCIIString>:
 * @param y 起始点纵坐标
 * @param str 字符串
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIString(uint8_t x, uint8_t y, char *str, const ASCIIFont *font, OLED_ColorMode color) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	60ba      	str	r2, [r7, #8]
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	73bb      	strb	r3, [r7, #14]
  uint8_t x0 = x;
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	75fb      	strb	r3, [r7, #23]
  while (*str) {
 8000ce2:	e011      	b.n	8000d08 <OLED_PrintASCIIString+0x3c>
    OLED_PrintASCIIChar(x0, y, *str, font, color);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	7bb9      	ldrb	r1, [r7, #14]
 8000cea:	7df8      	ldrb	r0, [r7, #23]
 8000cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f7ff ffbb 	bl	8000c6e <OLED_PrintASCIIChar>
    x0 += font->w;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	785a      	ldrb	r2, [r3, #1]
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	4413      	add	r3, r2
 8000d00:	75fb      	strb	r3, [r7, #23]
    str++;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
  while (*str) {
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d1e9      	bne.n	8000ce4 <OLED_PrintASCIIString+0x18>
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <OLED_Startup>:
    }
  }
}

void OLED_Startup()
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
    for (int i = 0; i < 32; ++i) {
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	e01a      	b.n	8000d5c <OLED_Startup+0x42>

        OLED_Clean();
 8000d26:	f7ff fcd9 	bl	80006dc <OLED_Clean>
        OLED_DrawCircle(64,32,4*i,OLED_COLOR_NORMAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	2300      	movs	r3, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	2040      	movs	r0, #64	@ 0x40
 8000d38:	f7ff febd 	bl	8000ab6 <OLED_DrawCircle>
        OLED_DrawCircle(64,32,2*i,OLED_COLOR_NORMAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	2120      	movs	r1, #32
 8000d48:	2040      	movs	r0, #64	@ 0x40
 8000d4a:	f7ff feb4 	bl	8000ab6 <OLED_DrawCircle>
        OLED_ShowFrame();
 8000d4e:	f7ff fc91 	bl	8000674 <OLED_ShowFrame>
        //HAL_Delay(10);
        OLED_Clean();
 8000d52:	f7ff fcc3 	bl	80006dc <OLED_Clean>
    for (int i = 0; i < 32; ++i) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b1f      	cmp	r3, #31
 8000d60:	dde1      	ble.n	8000d26 <OLED_Startup+0xc>
    }
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a14      	ldr	r2, [pc, #80]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d94:	61d3      	str	r3, [r2, #28]
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <HAL_MspInit+0x5c>)
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_MspInit+0x60>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_MspInit+0x60>)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <MemManage_Handler+0x4>

08000de8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr

08000e10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 fa0c 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f002 fc84 	bl	8003764 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	@ (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	@ (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20005000 	.word	0x20005000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000558 	.word	0x20000558
 8000e90:	20000738 	.word	0x20000738

08000e94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2224      	movs	r2, #36	@ 0x24
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 fc50 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000ebe:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <MX_TIM1_Init+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000ed0:	2228      	movs	r2, #40	@ 0x28
 8000ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000f12:	f001 fe35 	bl	8002b80 <HAL_TIM_Encoder_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8000f1c:	f7ff fb19 	bl	8000552 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_TIM1_Init+0xa4>)
 8000f2e:	f002 fb91 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000f38:	f7ff fb0b 	bl	8000552 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3730      	adds	r7, #48	@ 0x30
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000055c 	.word	0x2000055c
 8000f48:	40012c00 	.word	0x40012c00

08000f4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	@ 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f7c:	4b32      	ldr	r3, [pc, #200]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f86:	2247      	movs	r2, #71	@ 0x47
 8000f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f92:	2263      	movs	r2, #99	@ 0x63
 8000f94:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f96:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa2:	4829      	ldr	r0, [pc, #164]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000fa4:	f001 fca2 	bl	80028ec <HAL_TIM_Base_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000fae:	f7ff fad0 	bl	8000552 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4822      	ldr	r0, [pc, #136]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000fc0:	f001 ffd0 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fca:	f7ff fac2 	bl	8000552 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fce:	481e      	ldr	r0, [pc, #120]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000fd0:	f001 fcdb 	bl	800298a <HAL_TIM_PWM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000fda:	f7ff faba 	bl	8000552 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	4619      	mov	r1, r3
 8000fec:	4816      	ldr	r0, [pc, #88]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8000fee:	f002 fb31 	bl	8003654 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ff8:	f7ff faab 	bl	8000552 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffc:	2360      	movs	r3, #96	@ 0x60
 8000ffe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <MX_TIM2_Init+0xfc>)
 8001014:	f001 fee4 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800101e:	f7ff fa98 	bl	8000552 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2204      	movs	r2, #4
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_TIM2_Init+0xfc>)
 800102a:	f001 fed9 	bl	8002de0 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001034:	f7ff fa8d 	bl	8000552 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001038:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_TIM2_Init+0xfc>)
 800103a:	f000 f863 	bl	8001104 <HAL_TIM_MspPostInit>

}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	@ 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200005a4 	.word	0x200005a4

0800104c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a16      	ldr	r2, [pc, #88]	@ (80010c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d124      	bne.n	80010b6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001072:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_TIM_Encoder_MspInit+0x78>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80010b2:	f000 f9e7 	bl	8001484 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010dc:	d10b      	bne.n	80010f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a07      	ldr	r2, [pc, #28]	@ (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <HAL_TIM_Base_MspInit+0x34>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001122:	d117      	bne.n	8001154 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_TIM_MspPostInit+0x58>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <HAL_TIM_MspPostInit+0x58>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_TIM_MspPostInit+0x58>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800113c:	2303      	movs	r3, #3
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2302      	movs	r3, #2
 8001146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	@ (8001160 <HAL_TIM_MspPostInit+0x5c>)
 8001150:	f000 f998 	bl	8001484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001154:	bf00      	nop
 8001156:	3720      	adds	r7, #32
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800

08001164 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001164:	f7ff fe96 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480b      	ldr	r0, [pc, #44]	@ (8001198 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800116a:	490c      	ldr	r1, [pc, #48]	@ (800119c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001180:	4c09      	ldr	r4, [pc, #36]	@ (80011a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800118e:	f002 faef 	bl	8003770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff f905 	bl	80003a0 <main>
  bx lr
 8001196:	4770      	bx	lr
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011a0:	08004700 	.word	0x08004700
  ldr r2, =_sbss
 80011a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011a8:	20000738 	.word	0x20000738

080011ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC1_2_IRQHandler>
	...

080011b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <HAL_Init+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <HAL_Init+0x28>)
 80011ba:	f043 0310 	orr.w	r3, r3, #16
 80011be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c0:	2003      	movs	r0, #3
 80011c2:	f000 f92b 	bl	800141c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f808 	bl	80011dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011cc:	f7ff fdce 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40022000 	.word	0x40022000

080011dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <HAL_InitTick+0x54>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x58>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f935 	bl	800146a <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e00e      	b.n	8001228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	d80a      	bhi.n	8001226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001210:	2200      	movs	r2, #0
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	f000 f90b 	bl	8001432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4a06      	ldr	r2, [pc, #24]	@ (8001238 <HAL_InitTick+0x5c>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <HAL_IncTick+0x1c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	461a      	mov	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	@ (800125c <HAL_IncTick+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4413      	add	r3, r2
 800124c:	4a03      	ldr	r2, [pc, #12]	@ (800125c <HAL_IncTick+0x20>)
 800124e:	6013      	str	r3, [r2, #0]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	20000008 	.word	0x20000008
 800125c:	200005ec 	.word	0x200005ec

08001260 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b02      	ldr	r3, [pc, #8]	@ (8001270 <HAL_GetTick+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	200005ec 	.word	0x200005ec

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fff0 	bl	8001260 <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffe0 	bl	8001260 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e8:	d301      	bcc.n	80013ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00f      	b.n	800140e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <SysTick_Config+0x40>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f6:	210f      	movs	r1, #15
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f7ff ff90 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <SysTick_Config+0x40>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <SysTick_Config+0x40>)
 8001408:	2207      	movs	r2, #7
 800140a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	e000e010 	.word	0xe000e010

0800141c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff49 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001444:	f7ff ff5e 	bl	8001304 <__NVIC_GetPriorityGrouping>
 8001448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	6978      	ldr	r0, [r7, #20]
 8001450:	f7ff ff90 	bl	8001374 <NVIC_EncodePriority>
 8001454:	4602      	mov	r2, r0
 8001456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff5f 	bl	8001320 <__NVIC_SetPriority>
}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffb0 	bl	80013d8 <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	@ 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e169      	b.n	800176c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8158 	bne.w	8001766 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4a9a      	ldr	r2, [pc, #616]	@ (8001724 <HAL_GPIO_Init+0x2a0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4a98      	ldr	r2, [pc, #608]	@ (8001724 <HAL_GPIO_Init+0x2a0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4a98      	ldr	r2, [pc, #608]	@ (8001728 <HAL_GPIO_Init+0x2a4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a96      	ldr	r2, [pc, #600]	@ (8001728 <HAL_GPIO_Init+0x2a4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a96      	ldr	r2, [pc, #600]	@ (800172c <HAL_GPIO_Init+0x2a8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a94      	ldr	r2, [pc, #592]	@ (800172c <HAL_GPIO_Init+0x2a8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a94      	ldr	r2, [pc, #592]	@ (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a92      	ldr	r2, [pc, #584]	@ (8001730 <HAL_GPIO_Init+0x2ac>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a92      	ldr	r2, [pc, #584]	@ (8001734 <HAL_GPIO_Init+0x2b0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a90      	ldr	r2, [pc, #576]	@ (8001734 <HAL_GPIO_Init+0x2b0>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a79      	ldr	r2, [pc, #484]	@ (8001738 <HAL_GPIO_Init+0x2b4>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	@ 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	@ 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80b1 	beq.w	8001766 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b4d      	ldr	r3, [pc, #308]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a4c      	ldr	r2, [pc, #304]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b4a      	ldr	r3, [pc, #296]	@ (800173c <HAL_GPIO_Init+0x2b8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a48      	ldr	r2, [pc, #288]	@ (8001740 <HAL_GPIO_Init+0x2bc>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a40      	ldr	r2, [pc, #256]	@ (8001744 <HAL_GPIO_Init+0x2c0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d013      	beq.n	8001670 <HAL_GPIO_Init+0x1ec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3f      	ldr	r2, [pc, #252]	@ (8001748 <HAL_GPIO_Init+0x2c4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00d      	beq.n	800166c <HAL_GPIO_Init+0x1e8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3e      	ldr	r2, [pc, #248]	@ (800174c <HAL_GPIO_Init+0x2c8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <HAL_GPIO_Init+0x1e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a3d      	ldr	r2, [pc, #244]	@ (8001750 <HAL_GPIO_Init+0x2cc>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d101      	bne.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001660:	2303      	movs	r3, #3
 8001662:	e006      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001664:	2304      	movs	r3, #4
 8001666:	e004      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001668:	2302      	movs	r3, #2
 800166a:	e002      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <HAL_GPIO_Init+0x1ee>
 8001670:	2300      	movs	r3, #0
 8001672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001674:	f002 0203 	and.w	r2, r2, #3
 8001678:	0092      	lsls	r2, r2, #2
 800167a:	4093      	lsls	r3, r2
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001682:	492f      	ldr	r1, [pc, #188]	@ (8001740 <HAL_GPIO_Init+0x2bc>)
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	089b      	lsrs	r3, r3, #2
 8001688:	3302      	adds	r3, #2
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169c:	4b2d      	ldr	r3, [pc, #180]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	492c      	ldr	r1, [pc, #176]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	608b      	str	r3, [r1, #8]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4928      	ldr	r1, [pc, #160]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c4:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	4922      	ldr	r1, [pc, #136]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	491e      	ldr	r1, [pc, #120]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4918      	ldr	r1, [pc, #96]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016fa:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4914      	ldr	r1, [pc, #80]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 8001704:	4013      	ands	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d021      	beq.n	8001758 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	490e      	ldr	r1, [pc, #56]	@ (8001754 <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e021      	b.n	8001766 <HAL_GPIO_Init+0x2e2>
 8001722:	bf00      	nop
 8001724:	10320000 	.word	0x10320000
 8001728:	10310000 	.word	0x10310000
 800172c:	10220000 	.word	0x10220000
 8001730:	10210000 	.word	0x10210000
 8001734:	10120000 	.word	0x10120000
 8001738:	10110000 	.word	0x10110000
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	40010800 	.word	0x40010800
 8001748:	40010c00 	.word	0x40010c00
 800174c:	40011000 	.word	0x40011000
 8001750:	40011400 	.word	0x40011400
 8001754:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_GPIO_Init+0x304>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	43db      	mvns	r3, r3
 8001760:	4909      	ldr	r1, [pc, #36]	@ (8001788 <HAL_GPIO_Init+0x304>)
 8001762:	4013      	ands	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	3301      	adds	r3, #1
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	fa22 f303 	lsr.w	r3, r2, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	f47f ae8e 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	372c      	adds	r7, #44	@ 0x2c
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	40010400 	.word	0x40010400

0800178c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	887b      	ldrh	r3, [r7, #2]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
 80017a8:	e001      	b.n	80017ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e12b      	b.n	8001a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7fe fd9e 	bl	8000324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2224      	movs	r2, #36	@ 0x24
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800180e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800181e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001820:	f001 f832 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8001824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4a81      	ldr	r2, [pc, #516]	@ (8001a30 <HAL_I2C_Init+0x274>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d807      	bhi.n	8001840 <HAL_I2C_Init+0x84>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a80      	ldr	r2, [pc, #512]	@ (8001a34 <HAL_I2C_Init+0x278>)
 8001834:	4293      	cmp	r3, r2
 8001836:	bf94      	ite	ls
 8001838:	2301      	movls	r3, #1
 800183a:	2300      	movhi	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	e006      	b.n	800184e <HAL_I2C_Init+0x92>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a7d      	ldr	r2, [pc, #500]	@ (8001a38 <HAL_I2C_Init+0x27c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	bf94      	ite	ls
 8001848:	2301      	movls	r3, #1
 800184a:	2300      	movhi	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e0e7      	b.n	8001a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a78      	ldr	r2, [pc, #480]	@ (8001a3c <HAL_I2C_Init+0x280>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	4a6a      	ldr	r2, [pc, #424]	@ (8001a30 <HAL_I2C_Init+0x274>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d802      	bhi.n	8001890 <HAL_I2C_Init+0xd4>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3301      	adds	r3, #1
 800188e:	e009      	b.n	80018a4 <HAL_I2C_Init+0xe8>
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001896:	fb02 f303 	mul.w	r3, r2, r3
 800189a:	4a69      	ldr	r2, [pc, #420]	@ (8001a40 <HAL_I2C_Init+0x284>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	430b      	orrs	r3, r1
 80018aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	495c      	ldr	r1, [pc, #368]	@ (8001a30 <HAL_I2C_Init+0x274>)
 80018c0:	428b      	cmp	r3, r1
 80018c2:	d819      	bhi.n	80018f8 <HAL_I2C_Init+0x13c>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	1e59      	subs	r1, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d2:	1c59      	adds	r1, r3, #1
 80018d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018d8:	400b      	ands	r3, r1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00a      	beq.n	80018f4 <HAL_I2C_Init+0x138>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e59      	subs	r1, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018f2:	e051      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 80018f4:	2304      	movs	r3, #4
 80018f6:	e04f      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d111      	bne.n	8001924 <HAL_I2C_Init+0x168>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e58      	subs	r0, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	440b      	add	r3, r1
 800190e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001912:	3301      	adds	r3, #1
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e012      	b.n	800194a <HAL_I2C_Init+0x18e>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	0099      	lsls	r1, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_I2C_Init+0x196>
 800194e:	2301      	movs	r3, #1
 8001950:	e022      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10e      	bne.n	8001978 <HAL_I2C_Init+0x1bc>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1e58      	subs	r0, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	fbb0 f3f3 	udiv	r3, r0, r3
 800196c:	3301      	adds	r3, #1
 800196e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001976:	e00f      	b.n	8001998 <HAL_I2C_Init+0x1dc>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	0099      	lsls	r1, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	fbb0 f3f3 	udiv	r3, r0, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	6809      	ldr	r1, [r1, #0]
 800199c:	4313      	orrs	r3, r2
 800199e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69da      	ldr	r2, [r3, #28]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6911      	ldr	r1, [r2, #16]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68d2      	ldr	r2, [r2, #12]
 80019d2:	4311      	orrs	r1, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	430b      	orrs	r3, r1
 80019da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	000186a0 	.word	0x000186a0
 8001a34:	001e847f 	.word	0x001e847f
 8001a38:	003d08ff 	.word	0x003d08ff
 8001a3c:	431bde83 	.word	0x431bde83
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	460b      	mov	r3, r1
 8001a52:	817b      	strh	r3, [r7, #10]
 8001a54:	4613      	mov	r3, r2
 8001a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff fc02 	bl	8001260 <HAL_GetTick>
 8001a5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	f040 80e0 	bne.w	8001c2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2319      	movs	r3, #25
 8001a72:	2201      	movs	r2, #1
 8001a74:	4970      	ldr	r1, [pc, #448]	@ (8001c38 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f964 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
 8001a84:	e0d3      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_I2C_Master_Transmit+0x50>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e0cc      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d007      	beq.n	8001aba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2221      	movs	r2, #33	@ 0x21
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	893a      	ldrh	r2, [r7, #8]
 8001aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a50      	ldr	r2, [pc, #320]	@ (8001c3c <HAL_I2C_Master_Transmit+0x1f8>)
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f89c 	bl	8001c40 <I2C_MasterRequestWrite>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e08d      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b28:	e066      	b.n	8001bf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	6a39      	ldr	r1, [r7, #32]
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f000 fa22 	bl	8001f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00d      	beq.n	8001b56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d107      	bne.n	8001b52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d11b      	bne.n	8001bcc <HAL_I2C_Master_Transmit+0x188>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d017      	beq.n	8001bcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6a39      	ldr	r1, [r7, #32]
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 fa19 	bl	8002008 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d107      	bne.n	8001bf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e01a      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d194      	bne.n	8001b2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	00100002 	.word	0x00100002
 8001c3c:	ffff0000 	.word	0xffff0000

08001c40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	603b      	str	r3, [r7, #0]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d006      	beq.n	8001c6a <I2C_MasterRequestWrite+0x2a>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d003      	beq.n	8001c6a <I2C_MasterRequestWrite+0x2a>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c68:	d108      	bne.n	8001c7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e00b      	b.n	8001c94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	2b12      	cmp	r3, #18
 8001c82:	d107      	bne.n	8001c94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f000 f84f 	bl	8001d44 <I2C_WaitOnFlagUntilTimeout>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00d      	beq.n	8001cc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cba:	d103      	bne.n	8001cc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e035      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001cd0:	d108      	bne.n	8001ce4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cd2:	897b      	ldrh	r3, [r7, #10]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ce0:	611a      	str	r2, [r3, #16]
 8001ce2:	e01b      	b.n	8001d1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	11db      	asrs	r3, r3, #7
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	f003 0306 	and.w	r3, r3, #6
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f063 030f 	orn	r3, r3, #15
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	490e      	ldr	r1, [pc, #56]	@ (8001d3c <I2C_MasterRequestWrite+0xfc>)
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f898 	bl	8001e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e010      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d12:	897b      	ldrh	r3, [r7, #10]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <I2C_MasterRequestWrite+0x100>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f888 	bl	8001e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	00010008 	.word	0x00010008
 8001d40:	00010002 	.word	0x00010002

08001d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	4613      	mov	r3, r2
 8001d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d54:	e048      	b.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d044      	beq.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5e:	f7ff fa7f 	bl	8001260 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d302      	bcc.n	8001d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d139      	bne.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d10d      	bne.n	8001d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	43da      	mvns	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	e00c      	b.n	8001db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	43da      	mvns	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	4013      	ands	r3, r2
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d116      	bne.n	8001de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0220 	orr.w	r2, r3, #32
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e023      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	0c1b      	lsrs	r3, r3, #16
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10d      	bne.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	e00c      	b.n	8001e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d093      	beq.n	8001d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e46:	e071      	b.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e56:	d123      	bne.n	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e067      	b.n	8001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d041      	beq.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea8:	f7ff f9da 	bl	8001260 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d302      	bcc.n	8001ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d136      	bne.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d10c      	bne.n	8001ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	e00b      	b.n	8001efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4013      	ands	r3, r2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d016      	beq.n	8001f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2220      	movs	r2, #32
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e021      	b.n	8001f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	0c1b      	lsrs	r3, r3, #16
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d10c      	bne.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4013      	ands	r3, r2
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf14      	ite	ne
 8001f48:	2301      	movne	r3, #1
 8001f4a:	2300      	moveq	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e00b      	b.n	8001f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f af6d 	bne.w	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f84:	e034      	b.n	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f886 	bl	8002098 <I2C_IsAcknowledgeFailed>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e034      	b.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d028      	beq.n	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7ff f95f 	bl	8001260 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d11d      	bne.n	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	2b80      	cmp	r3, #128	@ 0x80
 8001fc0:	d016      	beq.n	8001ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e007      	b.n	8002000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ffa:	2b80      	cmp	r3, #128	@ 0x80
 8001ffc:	d1c3      	bne.n	8001f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002014:	e034      	b.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f83e 	bl	8002098 <I2C_IsAcknowledgeFailed>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e034      	b.n	8002090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d028      	beq.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7ff f917 	bl	8001260 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11d      	bne.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d016      	beq.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e007      	b.n	8002090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d1c3      	bne.n	8002016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ae:	d11b      	bne.n	80020e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2220      	movs	r2, #32
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f043 0204 	orr.w	r2, r3, #4
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e272      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8087 	beq.w	8002222 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002114:	4b92      	ldr	r3, [pc, #584]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b04      	cmp	r3, #4
 800211e:	d00c      	beq.n	800213a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002120:	4b8f      	ldr	r3, [pc, #572]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d112      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
 800212c:	4b8c      	ldr	r3, [pc, #560]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002138:	d10b      	bne.n	8002152 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213a:	4b89      	ldr	r3, [pc, #548]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d06c      	beq.n	8002220 <HAL_RCC_OscConfig+0x12c>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d168      	bne.n	8002220 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e24c      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x76>
 800215c:	4b80      	ldr	r3, [pc, #512]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a7f      	ldr	r2, [pc, #508]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e02e      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x98>
 8002172:	4b7b      	ldr	r3, [pc, #492]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a7a      	ldr	r2, [pc, #488]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b78      	ldr	r3, [pc, #480]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a77      	ldr	r2, [pc, #476]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002184:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e01d      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0xbc>
 8002196:	4b72      	ldr	r3, [pc, #456]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a71      	ldr	r2, [pc, #452]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e00b      	b.n	80021c8 <HAL_RCC_OscConfig+0xd4>
 80021b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b68      	ldr	r3, [pc, #416]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a67      	ldr	r2, [pc, #412]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d013      	beq.n	80021f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d0:	f7ff f846 	bl	8001260 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff f842 	bl	8001260 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	@ 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e200      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0xe4>
 80021f6:	e014      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff f832 	bl	8001260 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002200:	f7ff f82e 	bl	8001260 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	@ 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e1ec      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	4b53      	ldr	r3, [pc, #332]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x10c>
 800221e:	e000      	b.n	8002222 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800222e:	4b4c      	ldr	r3, [pc, #304]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800223a:	4b49      	ldr	r3, [pc, #292]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d11c      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
 8002246:	4b46      	ldr	r3, [pc, #280]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d116      	bne.n	8002280 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002252:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e1c0      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226a:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4939      	ldr	r1, [pc, #228]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	e03a      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d020      	beq.n	80022ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002288:	4b36      	ldr	r3, [pc, #216]	@ (8002364 <HAL_RCC_OscConfig+0x270>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe ffe7 	bl	8001260 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe ffe3 	bl	8001260 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1a1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4927      	ldr	r1, [pc, #156]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]
 80022c8:	e015      	b.n	80022f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b26      	ldr	r3, [pc, #152]	@ (8002364 <HAL_RCC_OscConfig+0x270>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe ffc6 	bl	8001260 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d8:	f7fe ffc2 	bl	8001260 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e180      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d03a      	beq.n	8002378 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d019      	beq.n	800233e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230a:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <HAL_RCC_OscConfig+0x274>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ffa6 	bl	8001260 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe ffa2 	bl	8001260 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e160      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <HAL_RCC_OscConfig+0x26c>)
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002336:	2001      	movs	r0, #1
 8002338:	f000 faba 	bl	80028b0 <RCC_Delay>
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_RCC_OscConfig+0x274>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe ff8c 	bl	8001260 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234a:	e00f      	b.n	800236c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234c:	f7fe ff88 	bl	8001260 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d908      	bls.n	800236c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e146      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	42420000 	.word	0x42420000
 8002368:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b92      	ldr	r3, [pc, #584]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e9      	bne.n	800234c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a6 	beq.w	80024d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b8b      	ldr	r3, [pc, #556]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	4b88      	ldr	r3, [pc, #544]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4a87      	ldr	r2, [pc, #540]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	61d3      	str	r3, [r2, #28]
 80023a2:	4b85      	ldr	r3, [pc, #532]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ae:	2301      	movs	r3, #1
 80023b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b2:	4b82      	ldr	r3, [pc, #520]	@ (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d118      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4b7f      	ldr	r3, [pc, #508]	@ (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7e      	ldr	r2, [pc, #504]	@ (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ca:	f7fe ff49 	bl	8001260 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d2:	f7fe ff45 	bl	8001260 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b64      	cmp	r3, #100	@ 0x64
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e103      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	4b75      	ldr	r3, [pc, #468]	@ (80025bc <HAL_RCC_OscConfig+0x4c8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b6f      	ldr	r3, [pc, #444]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4a6e      	ldr	r2, [pc, #440]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	6213      	str	r3, [r2, #32]
 8002404:	e02d      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0x334>
 800240e:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a69      	ldr	r2, [pc, #420]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	4b67      	ldr	r3, [pc, #412]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a66      	ldr	r2, [pc, #408]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	e01c      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d10c      	bne.n	800244a <HAL_RCC_OscConfig+0x356>
 8002430:	4b61      	ldr	r3, [pc, #388]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a60      	ldr	r2, [pc, #384]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0304 	orr.w	r3, r3, #4
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	4b5e      	ldr	r3, [pc, #376]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	4a5d      	ldr	r2, [pc, #372]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6213      	str	r3, [r2, #32]
 8002448:	e00b      	b.n	8002462 <HAL_RCC_OscConfig+0x36e>
 800244a:	4b5b      	ldr	r3, [pc, #364]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4a5a      	ldr	r2, [pc, #360]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	6213      	str	r3, [r2, #32]
 8002456:	4b58      	ldr	r3, [pc, #352]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a57      	ldr	r2, [pc, #348]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d015      	beq.n	8002496 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246a:	f7fe fef9 	bl	8001260 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fef5 	bl	8001260 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e0b1      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	4b4b      	ldr	r3, [pc, #300]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0ee      	beq.n	8002472 <HAL_RCC_OscConfig+0x37e>
 8002494:	e014      	b.n	80024c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe fee3 	bl	8001260 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fedf 	bl	8001260 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e09b      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b4:	4b40      	ldr	r3, [pc, #256]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1ee      	bne.n	800249e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c6:	4b3c      	ldr	r3, [pc, #240]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a3b      	ldr	r2, [pc, #236]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4b36      	ldr	r3, [pc, #216]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d061      	beq.n	80025ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d146      	bne.n	800257e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe feb3 	bl	8001260 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe feaf 	bl	8001260 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e06d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f0      	bne.n	80024fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002524:	d108      	bne.n	8002538 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002526:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	4921      	ldr	r1, [pc, #132]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002538:	4b1f      	ldr	r3, [pc, #124]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a19      	ldr	r1, [r3, #32]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	430b      	orrs	r3, r1
 800254a:	491b      	ldr	r1, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b1b      	ldr	r3, [pc, #108]	@ (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002556:	f7fe fe83 	bl	8001260 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fe7f 	bl	8001260 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e03d      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x46a>
 800257c:	e035      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <HAL_RCC_OscConfig+0x4cc>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fe6c 	bl	8001260 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe68 	bl	8001260 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e026      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x498>
 80025aa:	e01e      	b.n	80025ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e019      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_RCC_OscConfig+0x500>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d106      	bne.n	80025e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0d0      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800260c:	4b6a      	ldr	r3, [pc, #424]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d910      	bls.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261a:	4b67      	ldr	r3, [pc, #412]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 0207 	bic.w	r2, r3, #7
 8002622:	4965      	ldr	r1, [pc, #404]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	4b63      	ldr	r3, [pc, #396]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	429a      	cmp	r2, r3
 8002636:	d001      	beq.n	800263c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0b8      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d020      	beq.n	800268a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002654:	4b59      	ldr	r3, [pc, #356]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a58      	ldr	r2, [pc, #352]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800265e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800266c:	4b53      	ldr	r3, [pc, #332]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a52      	ldr	r2, [pc, #328]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002676:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b50      	ldr	r3, [pc, #320]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	494d      	ldr	r1, [pc, #308]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	4313      	orrs	r3, r2
 8002688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d040      	beq.n	8002718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b47      	ldr	r3, [pc, #284]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e07f      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e073      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e06b      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026d6:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f023 0203 	bic.w	r2, r3, #3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4936      	ldr	r1, [pc, #216]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fdba 	bl	8001260 <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fdb6 	bl	8001260 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e053      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002706:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 020c 	and.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	429a      	cmp	r2, r3
 8002716:	d1eb      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002718:	4b27      	ldr	r3, [pc, #156]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d210      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4922      	ldr	r1, [pc, #136]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b20      	ldr	r3, [pc, #128]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e032      	b.n	80027ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4916      	ldr	r1, [pc, #88]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002772:	4b12      	ldr	r3, [pc, #72]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490e      	ldr	r1, [pc, #56]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002786:	f000 f821 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0b      	ldr	r3, [pc, #44]	@ (80027bc <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490a      	ldr	r1, [pc, #40]	@ (80027c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	fa22 f303 	lsr.w	r3, r2, r3
 800279e:	4a09      	ldr	r2, [pc, #36]	@ (80027c4 <HAL_RCC_ClockConfig+0x1cc>)
 80027a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027a2:	4b09      	ldr	r3, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x1d0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fd18 	bl	80011dc <HAL_InitTick>

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08004698 	.word	0x08004698
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x36>
 80027fa:	e027      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fe:	613b      	str	r3, [r7, #16]
      break;
 8002800:	e027      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	0c9b      	lsrs	r3, r3, #18
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x9c>)
 800280c:	5cd3      	ldrb	r3, [r2, r3]
 800280e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800281a:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x94>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0c5b      	lsrs	r3, r3, #17
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	4a11      	ldr	r2, [pc, #68]	@ (800286c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a0d      	ldr	r2, [pc, #52]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800282e:	fb03 f202 	mul.w	r2, r3, r2
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e004      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002840:	fb02 f303 	mul.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	613b      	str	r3, [r7, #16]
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x98>)
 800284e:	613b      	str	r3, [r7, #16]
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	693b      	ldr	r3, [r7, #16]
}
 8002854:	4618      	mov	r0, r3
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	007a1200 	.word	0x007a1200
 8002868:	080046b0 	.word	0x080046b0
 800286c:	080046c0 	.word	0x080046c0
 8002870:	003d0900 	.word	0x003d0900

08002874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b02      	ldr	r3, [pc, #8]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x10>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	20000000 	.word	0x20000000

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff2 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	080046a8 	.word	0x080046a8

080028b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028b8:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <RCC_Delay+0x34>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <RCC_Delay+0x38>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a5b      	lsrs	r3, r3, #9
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028cc:	bf00      	nop
  }
  while (Delay --);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f9      	bne.n	80028cc <RCC_Delay+0x1c>
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fbda 	bl	80010cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fbe2 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e041      	b.n	8002a20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d106      	bne.n	80029b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 f839 	bl	8002a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3304      	adds	r3, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f000 fb93 	bl	80030f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
	...

08002a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_TIM_PWM_Start+0x24>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	e022      	b.n	8002aa6 <HAL_TIM_PWM_Start+0x6a>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d109      	bne.n	8002a7a <HAL_TIM_PWM_Start+0x3e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	bf14      	ite	ne
 8002a72:	2301      	movne	r3, #1
 8002a74:	2300      	moveq	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	e015      	b.n	8002aa6 <HAL_TIM_PWM_Start+0x6a>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d109      	bne.n	8002a94 <HAL_TIM_PWM_Start+0x58>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	e008      	b.n	8002aa6 <HAL_TIM_PWM_Start+0x6a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e05e      	b.n	8002b6c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <HAL_TIM_PWM_Start+0x82>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002abc:	e013      	b.n	8002ae6 <HAL_TIM_PWM_Start+0xaa>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0x92>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002acc:	e00b      	b.n	8002ae6 <HAL_TIM_PWM_Start+0xaa>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Start+0xa2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002adc:	e003      	b.n	8002ae6 <HAL_TIM_PWM_Start+0xaa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	6839      	ldr	r1, [r7, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fd8c 	bl	800360c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_TIM_PWM_Start+0x138>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <HAL_TIM_PWM_Start+0x138>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00e      	beq.n	8002b36 <HAL_TIM_PWM_Start+0xfa>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b20:	d009      	beq.n	8002b36 <HAL_TIM_PWM_Start+0xfa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <HAL_TIM_PWM_Start+0x13c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_TIM_PWM_Start+0xfa>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <HAL_TIM_PWM_Start+0x140>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d111      	bne.n	8002b5a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b06      	cmp	r3, #6
 8002b46:	d010      	beq.n	8002b6a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b58:	e007      	b.n	8002b6a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400
 8002b7c:	40000800 	.word	0x40000800

08002b80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e093      	b.n	8002cbc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7fe fa4f 	bl	800104c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
 8002bc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f000 fa8d 	bl	80030f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4313      	orrs	r3, r2
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c20:	f023 030c 	bic.w	r3, r3, #12
 8002c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	011a      	lsls	r2, r3, #4
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	031b      	lsls	r3, r3, #12
 8002c50:	4313      	orrs	r3, r2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d110      	bne.n	8002d16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cfa:	7b7b      	ldrb	r3, [r7, #13]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d001      	beq.n	8002d04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e069      	b.n	8002dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d14:	e031      	b.n	8002d7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d110      	bne.n	8002d3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d1c:	7bbb      	ldrb	r3, [r7, #14]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d22:	7b3b      	ldrb	r3, [r7, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e055      	b.n	8002dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d3c:	e01d      	b.n	8002d7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d50:	7b3b      	ldrb	r3, [r7, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e03e      	b.n	8002dd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_TIM_Encoder_Start+0xc4>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d008      	beq.n	8002d98 <HAL_TIM_Encoder_Start+0xd4>
 8002d86:	e00f      	b.n	8002da8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fc3b 	bl	800360c <TIM_CCxChannelCmd>
      break;
 8002d96:	e016      	b.n	8002dc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2104      	movs	r1, #4
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fc33 	bl	800360c <TIM_CCxChannelCmd>
      break;
 8002da6:	e00e      	b.n	8002dc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fc2b 	bl	800360c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	2104      	movs	r1, #4
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fc24 	bl	800360c <TIM_CCxChannelCmd>
      break;
 8002dc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 0201 	orr.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e0ae      	b.n	8002f5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	f200 809f 	bhi.w	8002f4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002e49 	.word	0x08002e49
 8002e18:	08002f4d 	.word	0x08002f4d
 8002e1c:	08002f4d 	.word	0x08002f4d
 8002e20:	08002f4d 	.word	0x08002f4d
 8002e24:	08002e89 	.word	0x08002e89
 8002e28:	08002f4d 	.word	0x08002f4d
 8002e2c:	08002f4d 	.word	0x08002f4d
 8002e30:	08002f4d 	.word	0x08002f4d
 8002e34:	08002ecb 	.word	0x08002ecb
 8002e38:	08002f4d 	.word	0x08002f4d
 8002e3c:	08002f4d 	.word	0x08002f4d
 8002e40:	08002f4d 	.word	0x08002f4d
 8002e44:	08002f0b 	.word	0x08002f0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68b9      	ldr	r1, [r7, #8]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f9be 	bl	80031d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	619a      	str	r2, [r3, #24]
      break;
 8002e86:	e064      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fa04 	bl	800329c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	021a      	lsls	r2, r3, #8
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	619a      	str	r2, [r3, #24]
      break;
 8002ec8:	e043      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fa4d 	bl	8003370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0208 	orr.w	r2, r2, #8
 8002ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69d9      	ldr	r1, [r3, #28]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]
      break;
 8002f08:	e023      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 fa97 	bl	8003444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	021a      	lsls	r2, r3, #8
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	61da      	str	r2, [r3, #28]
      break;
 8002f4a:	e002      	b.n	8002f52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b4      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x186>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb8:	d03e      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0xd4>
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	f200 8087 	bhi.w	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	f000 8086 	beq.w	80030d6 <HAL_TIM_ConfigClockSource+0x172>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d87f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b70      	cmp	r3, #112	@ 0x70
 8002fd2:	d01a      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xa6>
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d87b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b60      	cmp	r3, #96	@ 0x60
 8002fda:	d050      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x11a>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d877      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b50      	cmp	r3, #80	@ 0x50
 8002fe2:	d03c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xfa>
 8002fe4:	2b50      	cmp	r3, #80	@ 0x50
 8002fe6:	d873      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d058      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x13a>
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d86f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b30      	cmp	r3, #48	@ 0x30
 8002ff2:	d064      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d86b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d867      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d05a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	e062      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301a:	f000 fad8 	bl	80035ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800302c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
      break;
 8003036:	e04f      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003048:	f000 fac1 	bl	80035ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305a:	609a      	str	r2, [r3, #8]
      break;
 800305c:	e03c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	461a      	mov	r2, r3
 800306c:	f000 fa38 	bl	80034e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2150      	movs	r1, #80	@ 0x50
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fa8f 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800307c:	e02c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308a:	461a      	mov	r2, r3
 800308c:	f000 fa56 	bl	800353c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2160      	movs	r1, #96	@ 0x60
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa7f 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 800309c:	e01c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 fa18 	bl	80034e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	@ 0x40
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fa6f 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fa66 	bl	800359a <TIM_ITRx_SetConfig>
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <TIM_Base_SetConfig+0xd0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00b      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003112:	d007      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a2c      	ldr	r2, [pc, #176]	@ (80031c8 <TIM_Base_SetConfig+0xd4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <TIM_Base_SetConfig+0x30>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a2b      	ldr	r2, [pc, #172]	@ (80031cc <TIM_Base_SetConfig+0xd8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d108      	bne.n	8003136 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800312a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a22      	ldr	r2, [pc, #136]	@ (80031c4 <TIM_Base_SetConfig+0xd0>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1f      	ldr	r2, [pc, #124]	@ (80031c8 <TIM_Base_SetConfig+0xd4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a1e      	ldr	r2, [pc, #120]	@ (80031cc <TIM_Base_SetConfig+0xd8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0d      	ldr	r2, [pc, #52]	@ (80031c4 <TIM_Base_SetConfig+0xd0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d103      	bne.n	800319c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f023 0201 	bic.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	611a      	str	r2, [r3, #16]
  }
}
 80031ba:	bf00      	nop
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	40012c00 	.word	0x40012c00
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800

080031d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f023 0201 	bic.w	r2, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0303 	bic.w	r3, r3, #3
 8003206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f023 0302 	bic.w	r3, r3, #2
 8003218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <TIM_OC1_SetConfig+0xc8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10c      	bne.n	8003246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0308 	bic.w	r3, r3, #8
 8003232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a13      	ldr	r2, [pc, #76]	@ (8003298 <TIM_OC1_SetConfig+0xc8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d111      	bne.n	8003272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800325c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	621a      	str	r2, [r3, #32]
}
 800328c:	bf00      	nop
 800328e:	371c      	adds	r7, #28
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40012c00 	.word	0x40012c00

0800329c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f023 0210 	bic.w	r2, r3, #16
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f023 0320 	bic.w	r3, r3, #32
 80032e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <TIM_OC2_SetConfig+0xd0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d10d      	bne.n	8003318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a14      	ldr	r2, [pc, #80]	@ (800336c <TIM_OC2_SetConfig+0xd0>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d113      	bne.n	8003348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800332e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40012c00 	.word	0x40012c00

08003370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <TIM_OC3_SetConfig+0xd0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10d      	bne.n	80033ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <TIM_OC3_SetConfig+0xd0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d113      	bne.n	800341a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	621a      	str	r2, [r3, #32]
}
 8003434:	bf00      	nop
 8003436:	371c      	adds	r7, #28
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012c00 	.word	0x40012c00

08003444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800347a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	021b      	lsls	r3, r3, #8
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800348e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	031b      	lsls	r3, r3, #12
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0f      	ldr	r2, [pc, #60]	@ (80034dc <TIM_OC4_SetConfig+0x98>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d109      	bne.n	80034b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00

080034e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f023 0201 	bic.w	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800350a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f023 030a 	bic.w	r3, r3, #10
 800351c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0210 	bic.w	r2, r3, #16
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	031b      	lsls	r3, r3, #12
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003578:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	f043 0307 	orr.w	r3, r3, #7
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr

080035ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b087      	sub	sp, #28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	021a      	lsls	r2, r3, #8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	609a      	str	r2, [r3, #8]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2201      	movs	r2, #1
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
}
 800364a:	bf00      	nop
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003668:	2302      	movs	r3, #2
 800366a:	e046      	b.n	80036fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b8:	d009      	beq.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a12      	ldr	r2, [pc, #72]	@ (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a10      	ldr	r2, [pc, #64]	@ (800370c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d10c      	bne.n	80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800

08003710 <siprintf>:
 8003710:	b40e      	push	{r1, r2, r3}
 8003712:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003716:	b510      	push	{r4, lr}
 8003718:	2400      	movs	r4, #0
 800371a:	b09d      	sub	sp, #116	@ 0x74
 800371c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800371e:	9002      	str	r0, [sp, #8]
 8003720:	9006      	str	r0, [sp, #24]
 8003722:	9107      	str	r1, [sp, #28]
 8003724:	9104      	str	r1, [sp, #16]
 8003726:	4809      	ldr	r0, [pc, #36]	@ (800374c <siprintf+0x3c>)
 8003728:	4909      	ldr	r1, [pc, #36]	@ (8003750 <siprintf+0x40>)
 800372a:	f853 2b04 	ldr.w	r2, [r3], #4
 800372e:	9105      	str	r1, [sp, #20]
 8003730:	6800      	ldr	r0, [r0, #0]
 8003732:	a902      	add	r1, sp, #8
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003738:	f000 f9a0 	bl	8003a7c <_svfiprintf_r>
 800373c:	9b02      	ldr	r3, [sp, #8]
 800373e:	701c      	strb	r4, [r3, #0]
 8003740:	b01d      	add	sp, #116	@ 0x74
 8003742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003746:	b003      	add	sp, #12
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	2000000c 	.word	0x2000000c
 8003750:	ffff0208 	.word	0xffff0208

08003754 <memset>:
 8003754:	4603      	mov	r3, r0
 8003756:	4402      	add	r2, r0
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	f803 1b01 	strb.w	r1, [r3], #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__errno>:
 8003764:	4b01      	ldr	r3, [pc, #4]	@ (800376c <__errno+0x8>)
 8003766:	6818      	ldr	r0, [r3, #0]
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	2000000c 	.word	0x2000000c

08003770 <__libc_init_array>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	2600      	movs	r6, #0
 8003774:	4d0c      	ldr	r5, [pc, #48]	@ (80037a8 <__libc_init_array+0x38>)
 8003776:	4c0d      	ldr	r4, [pc, #52]	@ (80037ac <__libc_init_array+0x3c>)
 8003778:	1b64      	subs	r4, r4, r5
 800377a:	10a4      	asrs	r4, r4, #2
 800377c:	42a6      	cmp	r6, r4
 800377e:	d109      	bne.n	8003794 <__libc_init_array+0x24>
 8003780:	f000 fc76 	bl	8004070 <_init>
 8003784:	2600      	movs	r6, #0
 8003786:	4d0a      	ldr	r5, [pc, #40]	@ (80037b0 <__libc_init_array+0x40>)
 8003788:	4c0a      	ldr	r4, [pc, #40]	@ (80037b4 <__libc_init_array+0x44>)
 800378a:	1b64      	subs	r4, r4, r5
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	42a6      	cmp	r6, r4
 8003790:	d105      	bne.n	800379e <__libc_init_array+0x2e>
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	f855 3b04 	ldr.w	r3, [r5], #4
 8003798:	4798      	blx	r3
 800379a:	3601      	adds	r6, #1
 800379c:	e7ee      	b.n	800377c <__libc_init_array+0xc>
 800379e:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a2:	4798      	blx	r3
 80037a4:	3601      	adds	r6, #1
 80037a6:	e7f2      	b.n	800378e <__libc_init_array+0x1e>
 80037a8:	080046f8 	.word	0x080046f8
 80037ac:	080046f8 	.word	0x080046f8
 80037b0:	080046f8 	.word	0x080046f8
 80037b4:	080046fc 	.word	0x080046fc

080037b8 <__retarget_lock_acquire_recursive>:
 80037b8:	4770      	bx	lr

080037ba <__retarget_lock_release_recursive>:
 80037ba:	4770      	bx	lr

080037bc <memcpy>:
 80037bc:	440a      	add	r2, r1
 80037be:	4291      	cmp	r1, r2
 80037c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c4:	d100      	bne.n	80037c8 <memcpy+0xc>
 80037c6:	4770      	bx	lr
 80037c8:	b510      	push	{r4, lr}
 80037ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d4:	d1f9      	bne.n	80037ca <memcpy+0xe>
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <_free_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4605      	mov	r5, r0
 80037dc:	2900      	cmp	r1, #0
 80037de:	d040      	beq.n	8003862 <_free_r+0x8a>
 80037e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e4:	1f0c      	subs	r4, r1, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfb8      	it	lt
 80037ea:	18e4      	addlt	r4, r4, r3
 80037ec:	f000 f8de 	bl	80039ac <__malloc_lock>
 80037f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <_free_r+0x8c>)
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	b933      	cbnz	r3, 8003804 <_free_r+0x2c>
 80037f6:	6063      	str	r3, [r4, #4]
 80037f8:	6014      	str	r4, [r2, #0]
 80037fa:	4628      	mov	r0, r5
 80037fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003800:	f000 b8da 	b.w	80039b8 <__malloc_unlock>
 8003804:	42a3      	cmp	r3, r4
 8003806:	d908      	bls.n	800381a <_free_r+0x42>
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	1821      	adds	r1, r4, r0
 800380c:	428b      	cmp	r3, r1
 800380e:	bf01      	itttt	eq
 8003810:	6819      	ldreq	r1, [r3, #0]
 8003812:	685b      	ldreq	r3, [r3, #4]
 8003814:	1809      	addeq	r1, r1, r0
 8003816:	6021      	streq	r1, [r4, #0]
 8003818:	e7ed      	b.n	80037f6 <_free_r+0x1e>
 800381a:	461a      	mov	r2, r3
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b10b      	cbz	r3, 8003824 <_free_r+0x4c>
 8003820:	42a3      	cmp	r3, r4
 8003822:	d9fa      	bls.n	800381a <_free_r+0x42>
 8003824:	6811      	ldr	r1, [r2, #0]
 8003826:	1850      	adds	r0, r2, r1
 8003828:	42a0      	cmp	r0, r4
 800382a:	d10b      	bne.n	8003844 <_free_r+0x6c>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	4401      	add	r1, r0
 8003830:	1850      	adds	r0, r2, r1
 8003832:	4283      	cmp	r3, r0
 8003834:	6011      	str	r1, [r2, #0]
 8003836:	d1e0      	bne.n	80037fa <_free_r+0x22>
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4408      	add	r0, r1
 800383e:	6010      	str	r0, [r2, #0]
 8003840:	6053      	str	r3, [r2, #4]
 8003842:	e7da      	b.n	80037fa <_free_r+0x22>
 8003844:	d902      	bls.n	800384c <_free_r+0x74>
 8003846:	230c      	movs	r3, #12
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	e7d6      	b.n	80037fa <_free_r+0x22>
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	1821      	adds	r1, r4, r0
 8003850:	428b      	cmp	r3, r1
 8003852:	bf01      	itttt	eq
 8003854:	6819      	ldreq	r1, [r3, #0]
 8003856:	685b      	ldreq	r3, [r3, #4]
 8003858:	1809      	addeq	r1, r1, r0
 800385a:	6021      	streq	r1, [r4, #0]
 800385c:	6063      	str	r3, [r4, #4]
 800385e:	6054      	str	r4, [r2, #4]
 8003860:	e7cb      	b.n	80037fa <_free_r+0x22>
 8003862:	bd38      	pop	{r3, r4, r5, pc}
 8003864:	20000734 	.word	0x20000734

08003868 <sbrk_aligned>:
 8003868:	b570      	push	{r4, r5, r6, lr}
 800386a:	4e0f      	ldr	r6, [pc, #60]	@ (80038a8 <sbrk_aligned+0x40>)
 800386c:	460c      	mov	r4, r1
 800386e:	6831      	ldr	r1, [r6, #0]
 8003870:	4605      	mov	r5, r0
 8003872:	b911      	cbnz	r1, 800387a <sbrk_aligned+0x12>
 8003874:	f000 fba8 	bl	8003fc8 <_sbrk_r>
 8003878:	6030      	str	r0, [r6, #0]
 800387a:	4621      	mov	r1, r4
 800387c:	4628      	mov	r0, r5
 800387e:	f000 fba3 	bl	8003fc8 <_sbrk_r>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	d103      	bne.n	800388e <sbrk_aligned+0x26>
 8003886:	f04f 34ff 	mov.w	r4, #4294967295
 800388a:	4620      	mov	r0, r4
 800388c:	bd70      	pop	{r4, r5, r6, pc}
 800388e:	1cc4      	adds	r4, r0, #3
 8003890:	f024 0403 	bic.w	r4, r4, #3
 8003894:	42a0      	cmp	r0, r4
 8003896:	d0f8      	beq.n	800388a <sbrk_aligned+0x22>
 8003898:	1a21      	subs	r1, r4, r0
 800389a:	4628      	mov	r0, r5
 800389c:	f000 fb94 	bl	8003fc8 <_sbrk_r>
 80038a0:	3001      	adds	r0, #1
 80038a2:	d1f2      	bne.n	800388a <sbrk_aligned+0x22>
 80038a4:	e7ef      	b.n	8003886 <sbrk_aligned+0x1e>
 80038a6:	bf00      	nop
 80038a8:	20000730 	.word	0x20000730

080038ac <_malloc_r>:
 80038ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b0:	1ccd      	adds	r5, r1, #3
 80038b2:	f025 0503 	bic.w	r5, r5, #3
 80038b6:	3508      	adds	r5, #8
 80038b8:	2d0c      	cmp	r5, #12
 80038ba:	bf38      	it	cc
 80038bc:	250c      	movcc	r5, #12
 80038be:	2d00      	cmp	r5, #0
 80038c0:	4606      	mov	r6, r0
 80038c2:	db01      	blt.n	80038c8 <_malloc_r+0x1c>
 80038c4:	42a9      	cmp	r1, r5
 80038c6:	d904      	bls.n	80038d2 <_malloc_r+0x26>
 80038c8:	230c      	movs	r3, #12
 80038ca:	6033      	str	r3, [r6, #0]
 80038cc:	2000      	movs	r0, #0
 80038ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039a8 <_malloc_r+0xfc>
 80038d6:	f000 f869 	bl	80039ac <__malloc_lock>
 80038da:	f8d8 3000 	ldr.w	r3, [r8]
 80038de:	461c      	mov	r4, r3
 80038e0:	bb44      	cbnz	r4, 8003934 <_malloc_r+0x88>
 80038e2:	4629      	mov	r1, r5
 80038e4:	4630      	mov	r0, r6
 80038e6:	f7ff ffbf 	bl	8003868 <sbrk_aligned>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	4604      	mov	r4, r0
 80038ee:	d158      	bne.n	80039a2 <_malloc_r+0xf6>
 80038f0:	f8d8 4000 	ldr.w	r4, [r8]
 80038f4:	4627      	mov	r7, r4
 80038f6:	2f00      	cmp	r7, #0
 80038f8:	d143      	bne.n	8003982 <_malloc_r+0xd6>
 80038fa:	2c00      	cmp	r4, #0
 80038fc:	d04b      	beq.n	8003996 <_malloc_r+0xea>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	4639      	mov	r1, r7
 8003902:	4630      	mov	r0, r6
 8003904:	eb04 0903 	add.w	r9, r4, r3
 8003908:	f000 fb5e 	bl	8003fc8 <_sbrk_r>
 800390c:	4581      	cmp	r9, r0
 800390e:	d142      	bne.n	8003996 <_malloc_r+0xea>
 8003910:	6821      	ldr	r1, [r4, #0]
 8003912:	4630      	mov	r0, r6
 8003914:	1a6d      	subs	r5, r5, r1
 8003916:	4629      	mov	r1, r5
 8003918:	f7ff ffa6 	bl	8003868 <sbrk_aligned>
 800391c:	3001      	adds	r0, #1
 800391e:	d03a      	beq.n	8003996 <_malloc_r+0xea>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	442b      	add	r3, r5
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	f8d8 3000 	ldr.w	r3, [r8]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	bb62      	cbnz	r2, 8003988 <_malloc_r+0xdc>
 800392e:	f8c8 7000 	str.w	r7, [r8]
 8003932:	e00f      	b.n	8003954 <_malloc_r+0xa8>
 8003934:	6822      	ldr	r2, [r4, #0]
 8003936:	1b52      	subs	r2, r2, r5
 8003938:	d420      	bmi.n	800397c <_malloc_r+0xd0>
 800393a:	2a0b      	cmp	r2, #11
 800393c:	d917      	bls.n	800396e <_malloc_r+0xc2>
 800393e:	1961      	adds	r1, r4, r5
 8003940:	42a3      	cmp	r3, r4
 8003942:	6025      	str	r5, [r4, #0]
 8003944:	bf18      	it	ne
 8003946:	6059      	strne	r1, [r3, #4]
 8003948:	6863      	ldr	r3, [r4, #4]
 800394a:	bf08      	it	eq
 800394c:	f8c8 1000 	streq.w	r1, [r8]
 8003950:	5162      	str	r2, [r4, r5]
 8003952:	604b      	str	r3, [r1, #4]
 8003954:	4630      	mov	r0, r6
 8003956:	f000 f82f 	bl	80039b8 <__malloc_unlock>
 800395a:	f104 000b 	add.w	r0, r4, #11
 800395e:	1d23      	adds	r3, r4, #4
 8003960:	f020 0007 	bic.w	r0, r0, #7
 8003964:	1ac2      	subs	r2, r0, r3
 8003966:	bf1c      	itt	ne
 8003968:	1a1b      	subne	r3, r3, r0
 800396a:	50a3      	strne	r3, [r4, r2]
 800396c:	e7af      	b.n	80038ce <_malloc_r+0x22>
 800396e:	6862      	ldr	r2, [r4, #4]
 8003970:	42a3      	cmp	r3, r4
 8003972:	bf0c      	ite	eq
 8003974:	f8c8 2000 	streq.w	r2, [r8]
 8003978:	605a      	strne	r2, [r3, #4]
 800397a:	e7eb      	b.n	8003954 <_malloc_r+0xa8>
 800397c:	4623      	mov	r3, r4
 800397e:	6864      	ldr	r4, [r4, #4]
 8003980:	e7ae      	b.n	80038e0 <_malloc_r+0x34>
 8003982:	463c      	mov	r4, r7
 8003984:	687f      	ldr	r7, [r7, #4]
 8003986:	e7b6      	b.n	80038f6 <_malloc_r+0x4a>
 8003988:	461a      	mov	r2, r3
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	42a3      	cmp	r3, r4
 800398e:	d1fb      	bne.n	8003988 <_malloc_r+0xdc>
 8003990:	2300      	movs	r3, #0
 8003992:	6053      	str	r3, [r2, #4]
 8003994:	e7de      	b.n	8003954 <_malloc_r+0xa8>
 8003996:	230c      	movs	r3, #12
 8003998:	4630      	mov	r0, r6
 800399a:	6033      	str	r3, [r6, #0]
 800399c:	f000 f80c 	bl	80039b8 <__malloc_unlock>
 80039a0:	e794      	b.n	80038cc <_malloc_r+0x20>
 80039a2:	6005      	str	r5, [r0, #0]
 80039a4:	e7d6      	b.n	8003954 <_malloc_r+0xa8>
 80039a6:	bf00      	nop
 80039a8:	20000734 	.word	0x20000734

080039ac <__malloc_lock>:
 80039ac:	4801      	ldr	r0, [pc, #4]	@ (80039b4 <__malloc_lock+0x8>)
 80039ae:	f7ff bf03 	b.w	80037b8 <__retarget_lock_acquire_recursive>
 80039b2:	bf00      	nop
 80039b4:	2000072c 	.word	0x2000072c

080039b8 <__malloc_unlock>:
 80039b8:	4801      	ldr	r0, [pc, #4]	@ (80039c0 <__malloc_unlock+0x8>)
 80039ba:	f7ff befe 	b.w	80037ba <__retarget_lock_release_recursive>
 80039be:	bf00      	nop
 80039c0:	2000072c 	.word	0x2000072c

080039c4 <__ssputs_r>:
 80039c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c8:	461f      	mov	r7, r3
 80039ca:	688e      	ldr	r6, [r1, #8]
 80039cc:	4682      	mov	sl, r0
 80039ce:	42be      	cmp	r6, r7
 80039d0:	460c      	mov	r4, r1
 80039d2:	4690      	mov	r8, r2
 80039d4:	680b      	ldr	r3, [r1, #0]
 80039d6:	d82d      	bhi.n	8003a34 <__ssputs_r+0x70>
 80039d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039e0:	d026      	beq.n	8003a30 <__ssputs_r+0x6c>
 80039e2:	6965      	ldr	r5, [r4, #20]
 80039e4:	6909      	ldr	r1, [r1, #16]
 80039e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039ea:	eba3 0901 	sub.w	r9, r3, r1
 80039ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039f2:	1c7b      	adds	r3, r7, #1
 80039f4:	444b      	add	r3, r9
 80039f6:	106d      	asrs	r5, r5, #1
 80039f8:	429d      	cmp	r5, r3
 80039fa:	bf38      	it	cc
 80039fc:	461d      	movcc	r5, r3
 80039fe:	0553      	lsls	r3, r2, #21
 8003a00:	d527      	bpl.n	8003a52 <__ssputs_r+0x8e>
 8003a02:	4629      	mov	r1, r5
 8003a04:	f7ff ff52 	bl	80038ac <_malloc_r>
 8003a08:	4606      	mov	r6, r0
 8003a0a:	b360      	cbz	r0, 8003a66 <__ssputs_r+0xa2>
 8003a0c:	464a      	mov	r2, r9
 8003a0e:	6921      	ldr	r1, [r4, #16]
 8003a10:	f7ff fed4 	bl	80037bc <memcpy>
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	6126      	str	r6, [r4, #16]
 8003a22:	444e      	add	r6, r9
 8003a24:	6026      	str	r6, [r4, #0]
 8003a26:	463e      	mov	r6, r7
 8003a28:	6165      	str	r5, [r4, #20]
 8003a2a:	eba5 0509 	sub.w	r5, r5, r9
 8003a2e:	60a5      	str	r5, [r4, #8]
 8003a30:	42be      	cmp	r6, r7
 8003a32:	d900      	bls.n	8003a36 <__ssputs_r+0x72>
 8003a34:	463e      	mov	r6, r7
 8003a36:	4632      	mov	r2, r6
 8003a38:	4641      	mov	r1, r8
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	f000 faaa 	bl	8003f94 <memmove>
 8003a40:	2000      	movs	r0, #0
 8003a42:	68a3      	ldr	r3, [r4, #8]
 8003a44:	1b9b      	subs	r3, r3, r6
 8003a46:	60a3      	str	r3, [r4, #8]
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	4433      	add	r3, r6
 8003a4c:	6023      	str	r3, [r4, #0]
 8003a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a52:	462a      	mov	r2, r5
 8003a54:	f000 fad6 	bl	8004004 <_realloc_r>
 8003a58:	4606      	mov	r6, r0
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d1e0      	bne.n	8003a20 <__ssputs_r+0x5c>
 8003a5e:	4650      	mov	r0, sl
 8003a60:	6921      	ldr	r1, [r4, #16]
 8003a62:	f7ff feb9 	bl	80037d8 <_free_r>
 8003a66:	230c      	movs	r3, #12
 8003a68:	f8ca 3000 	str.w	r3, [sl]
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	e7e9      	b.n	8003a4e <__ssputs_r+0x8a>
	...

08003a7c <_svfiprintf_r>:
 8003a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a80:	4698      	mov	r8, r3
 8003a82:	898b      	ldrh	r3, [r1, #12]
 8003a84:	4607      	mov	r7, r0
 8003a86:	061b      	lsls	r3, r3, #24
 8003a88:	460d      	mov	r5, r1
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	b09d      	sub	sp, #116	@ 0x74
 8003a8e:	d510      	bpl.n	8003ab2 <_svfiprintf_r+0x36>
 8003a90:	690b      	ldr	r3, [r1, #16]
 8003a92:	b973      	cbnz	r3, 8003ab2 <_svfiprintf_r+0x36>
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	f7ff ff09 	bl	80038ac <_malloc_r>
 8003a9a:	6028      	str	r0, [r5, #0]
 8003a9c:	6128      	str	r0, [r5, #16]
 8003a9e:	b930      	cbnz	r0, 8003aae <_svfiprintf_r+0x32>
 8003aa0:	230c      	movs	r3, #12
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa8:	b01d      	add	sp, #116	@ 0x74
 8003aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aae:	2340      	movs	r3, #64	@ 0x40
 8003ab0:	616b      	str	r3, [r5, #20]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ab6:	2320      	movs	r3, #32
 8003ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003abc:	2330      	movs	r3, #48	@ 0x30
 8003abe:	f04f 0901 	mov.w	r9, #1
 8003ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ac6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c60 <_svfiprintf_r+0x1e4>
 8003aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ace:	4623      	mov	r3, r4
 8003ad0:	469a      	mov	sl, r3
 8003ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ad6:	b10a      	cbz	r2, 8003adc <_svfiprintf_r+0x60>
 8003ad8:	2a25      	cmp	r2, #37	@ 0x25
 8003ada:	d1f9      	bne.n	8003ad0 <_svfiprintf_r+0x54>
 8003adc:	ebba 0b04 	subs.w	fp, sl, r4
 8003ae0:	d00b      	beq.n	8003afa <_svfiprintf_r+0x7e>
 8003ae2:	465b      	mov	r3, fp
 8003ae4:	4622      	mov	r2, r4
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	4638      	mov	r0, r7
 8003aea:	f7ff ff6b 	bl	80039c4 <__ssputs_r>
 8003aee:	3001      	adds	r0, #1
 8003af0:	f000 80a7 	beq.w	8003c42 <_svfiprintf_r+0x1c6>
 8003af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003af6:	445a      	add	r2, fp
 8003af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003afa:	f89a 3000 	ldrb.w	r3, [sl]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 809f 	beq.w	8003c42 <_svfiprintf_r+0x1c6>
 8003b04:	2300      	movs	r3, #0
 8003b06:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b0e:	f10a 0a01 	add.w	sl, sl, #1
 8003b12:	9304      	str	r3, [sp, #16]
 8003b14:	9307      	str	r3, [sp, #28]
 8003b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b1c:	4654      	mov	r4, sl
 8003b1e:	2205      	movs	r2, #5
 8003b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b24:	484e      	ldr	r0, [pc, #312]	@ (8003c60 <_svfiprintf_r+0x1e4>)
 8003b26:	f000 fa5f 	bl	8003fe8 <memchr>
 8003b2a:	9a04      	ldr	r2, [sp, #16]
 8003b2c:	b9d8      	cbnz	r0, 8003b66 <_svfiprintf_r+0xea>
 8003b2e:	06d0      	lsls	r0, r2, #27
 8003b30:	bf44      	itt	mi
 8003b32:	2320      	movmi	r3, #32
 8003b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b38:	0711      	lsls	r1, r2, #28
 8003b3a:	bf44      	itt	mi
 8003b3c:	232b      	movmi	r3, #43	@ 0x2b
 8003b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b42:	f89a 3000 	ldrb.w	r3, [sl]
 8003b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b48:	d015      	beq.n	8003b76 <_svfiprintf_r+0xfa>
 8003b4a:	4654      	mov	r4, sl
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f04f 0c0a 	mov.w	ip, #10
 8003b52:	9a07      	ldr	r2, [sp, #28]
 8003b54:	4621      	mov	r1, r4
 8003b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b5a:	3b30      	subs	r3, #48	@ 0x30
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d94b      	bls.n	8003bf8 <_svfiprintf_r+0x17c>
 8003b60:	b1b0      	cbz	r0, 8003b90 <_svfiprintf_r+0x114>
 8003b62:	9207      	str	r2, [sp, #28]
 8003b64:	e014      	b.n	8003b90 <_svfiprintf_r+0x114>
 8003b66:	eba0 0308 	sub.w	r3, r0, r8
 8003b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	46a2      	mov	sl, r4
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	e7d2      	b.n	8003b1c <_svfiprintf_r+0xa0>
 8003b76:	9b03      	ldr	r3, [sp, #12]
 8003b78:	1d19      	adds	r1, r3, #4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	9103      	str	r1, [sp, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bfbb      	ittet	lt
 8003b82:	425b      	neglt	r3, r3
 8003b84:	f042 0202 	orrlt.w	r2, r2, #2
 8003b88:	9307      	strge	r3, [sp, #28]
 8003b8a:	9307      	strlt	r3, [sp, #28]
 8003b8c:	bfb8      	it	lt
 8003b8e:	9204      	strlt	r2, [sp, #16]
 8003b90:	7823      	ldrb	r3, [r4, #0]
 8003b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b94:	d10a      	bne.n	8003bac <_svfiprintf_r+0x130>
 8003b96:	7863      	ldrb	r3, [r4, #1]
 8003b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b9a:	d132      	bne.n	8003c02 <_svfiprintf_r+0x186>
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	3402      	adds	r4, #2
 8003ba0:	1d1a      	adds	r2, r3, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	9203      	str	r2, [sp, #12]
 8003ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003baa:	9305      	str	r3, [sp, #20]
 8003bac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c64 <_svfiprintf_r+0x1e8>
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4650      	mov	r0, sl
 8003bb4:	7821      	ldrb	r1, [r4, #0]
 8003bb6:	f000 fa17 	bl	8003fe8 <memchr>
 8003bba:	b138      	cbz	r0, 8003bcc <_svfiprintf_r+0x150>
 8003bbc:	2240      	movs	r2, #64	@ 0x40
 8003bbe:	9b04      	ldr	r3, [sp, #16]
 8003bc0:	eba0 000a 	sub.w	r0, r0, sl
 8003bc4:	4082      	lsls	r2, r0
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	3401      	adds	r4, #1
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd0:	2206      	movs	r2, #6
 8003bd2:	4825      	ldr	r0, [pc, #148]	@ (8003c68 <_svfiprintf_r+0x1ec>)
 8003bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bd8:	f000 fa06 	bl	8003fe8 <memchr>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	d036      	beq.n	8003c4e <_svfiprintf_r+0x1d2>
 8003be0:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <_svfiprintf_r+0x1f0>)
 8003be2:	bb1b      	cbnz	r3, 8003c2c <_svfiprintf_r+0x1b0>
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	3307      	adds	r3, #7
 8003be8:	f023 0307 	bic.w	r3, r3, #7
 8003bec:	3308      	adds	r3, #8
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bf2:	4433      	add	r3, r6
 8003bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bf6:	e76a      	b.n	8003ace <_svfiprintf_r+0x52>
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c00:	e7a8      	b.n	8003b54 <_svfiprintf_r+0xd8>
 8003c02:	2300      	movs	r3, #0
 8003c04:	f04f 0c0a 	mov.w	ip, #10
 8003c08:	4619      	mov	r1, r3
 8003c0a:	3401      	adds	r4, #1
 8003c0c:	9305      	str	r3, [sp, #20]
 8003c0e:	4620      	mov	r0, r4
 8003c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c14:	3a30      	subs	r2, #48	@ 0x30
 8003c16:	2a09      	cmp	r2, #9
 8003c18:	d903      	bls.n	8003c22 <_svfiprintf_r+0x1a6>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0c6      	beq.n	8003bac <_svfiprintf_r+0x130>
 8003c1e:	9105      	str	r1, [sp, #20]
 8003c20:	e7c4      	b.n	8003bac <_svfiprintf_r+0x130>
 8003c22:	4604      	mov	r4, r0
 8003c24:	2301      	movs	r3, #1
 8003c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c2a:	e7f0      	b.n	8003c0e <_svfiprintf_r+0x192>
 8003c2c:	ab03      	add	r3, sp, #12
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	462a      	mov	r2, r5
 8003c32:	4638      	mov	r0, r7
 8003c34:	4b0e      	ldr	r3, [pc, #56]	@ (8003c70 <_svfiprintf_r+0x1f4>)
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	f3af 8000 	nop.w
 8003c3c:	1c42      	adds	r2, r0, #1
 8003c3e:	4606      	mov	r6, r0
 8003c40:	d1d6      	bne.n	8003bf0 <_svfiprintf_r+0x174>
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	065b      	lsls	r3, r3, #25
 8003c46:	f53f af2d 	bmi.w	8003aa4 <_svfiprintf_r+0x28>
 8003c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c4c:	e72c      	b.n	8003aa8 <_svfiprintf_r+0x2c>
 8003c4e:	ab03      	add	r3, sp, #12
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	462a      	mov	r2, r5
 8003c54:	4638      	mov	r0, r7
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <_svfiprintf_r+0x1f4>)
 8003c58:	a904      	add	r1, sp, #16
 8003c5a:	f000 f87d 	bl	8003d58 <_printf_i>
 8003c5e:	e7ed      	b.n	8003c3c <_svfiprintf_r+0x1c0>
 8003c60:	080046c2 	.word	0x080046c2
 8003c64:	080046c8 	.word	0x080046c8
 8003c68:	080046cc 	.word	0x080046cc
 8003c6c:	00000000 	.word	0x00000000
 8003c70:	080039c5 	.word	0x080039c5

08003c74 <_printf_common>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	4616      	mov	r6, r2
 8003c7a:	4698      	mov	r8, r3
 8003c7c:	688a      	ldr	r2, [r1, #8]
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	4607      	mov	r7, r0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	bfb8      	it	lt
 8003c86:	4613      	movlt	r3, r2
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c8e:	460c      	mov	r4, r1
 8003c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c94:	b10a      	cbz	r2, 8003c9a <_printf_common+0x26>
 8003c96:	3301      	adds	r3, #1
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	0699      	lsls	r1, r3, #26
 8003c9e:	bf42      	ittt	mi
 8003ca0:	6833      	ldrmi	r3, [r6, #0]
 8003ca2:	3302      	addmi	r3, #2
 8003ca4:	6033      	strmi	r3, [r6, #0]
 8003ca6:	6825      	ldr	r5, [r4, #0]
 8003ca8:	f015 0506 	ands.w	r5, r5, #6
 8003cac:	d106      	bne.n	8003cbc <_printf_common+0x48>
 8003cae:	f104 0a19 	add.w	sl, r4, #25
 8003cb2:	68e3      	ldr	r3, [r4, #12]
 8003cb4:	6832      	ldr	r2, [r6, #0]
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	42ab      	cmp	r3, r5
 8003cba:	dc2b      	bgt.n	8003d14 <_printf_common+0xa0>
 8003cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cc0:	6822      	ldr	r2, [r4, #0]
 8003cc2:	3b00      	subs	r3, #0
 8003cc4:	bf18      	it	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	0692      	lsls	r2, r2, #26
 8003cca:	d430      	bmi.n	8003d2e <_printf_common+0xba>
 8003ccc:	4641      	mov	r1, r8
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cd4:	47c8      	blx	r9
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d023      	beq.n	8003d22 <_printf_common+0xae>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	6922      	ldr	r2, [r4, #16]
 8003cde:	f003 0306 	and.w	r3, r3, #6
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf14      	ite	ne
 8003ce6:	2500      	movne	r5, #0
 8003ce8:	6833      	ldreq	r3, [r6, #0]
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	bf08      	it	eq
 8003cf0:	68e5      	ldreq	r5, [r4, #12]
 8003cf2:	f104 041a 	add.w	r4, r4, #26
 8003cf6:	bf08      	it	eq
 8003cf8:	1aed      	subeq	r5, r5, r3
 8003cfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cfe:	bf08      	it	eq
 8003d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d04:	4293      	cmp	r3, r2
 8003d06:	bfc4      	itt	gt
 8003d08:	1a9b      	subgt	r3, r3, r2
 8003d0a:	18ed      	addgt	r5, r5, r3
 8003d0c:	42b5      	cmp	r5, r6
 8003d0e:	d11a      	bne.n	8003d46 <_printf_common+0xd2>
 8003d10:	2000      	movs	r0, #0
 8003d12:	e008      	b.n	8003d26 <_printf_common+0xb2>
 8003d14:	2301      	movs	r3, #1
 8003d16:	4652      	mov	r2, sl
 8003d18:	4641      	mov	r1, r8
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	47c8      	blx	r9
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d103      	bne.n	8003d2a <_printf_common+0xb6>
 8003d22:	f04f 30ff 	mov.w	r0, #4294967295
 8003d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2a:	3501      	adds	r5, #1
 8003d2c:	e7c1      	b.n	8003cb2 <_printf_common+0x3e>
 8003d2e:	2030      	movs	r0, #48	@ 0x30
 8003d30:	18e1      	adds	r1, r4, r3
 8003d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d3c:	4422      	add	r2, r4
 8003d3e:	3302      	adds	r3, #2
 8003d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d44:	e7c2      	b.n	8003ccc <_printf_common+0x58>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	47c8      	blx	r9
 8003d50:	3001      	adds	r0, #1
 8003d52:	d0e6      	beq.n	8003d22 <_printf_common+0xae>
 8003d54:	3601      	adds	r6, #1
 8003d56:	e7d9      	b.n	8003d0c <_printf_common+0x98>

08003d58 <_printf_i>:
 8003d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d5c:	7e0f      	ldrb	r7, [r1, #24]
 8003d5e:	4691      	mov	r9, r2
 8003d60:	2f78      	cmp	r7, #120	@ 0x78
 8003d62:	4680      	mov	r8, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	469a      	mov	sl, r3
 8003d68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d6e:	d807      	bhi.n	8003d80 <_printf_i+0x28>
 8003d70:	2f62      	cmp	r7, #98	@ 0x62
 8003d72:	d80a      	bhi.n	8003d8a <_printf_i+0x32>
 8003d74:	2f00      	cmp	r7, #0
 8003d76:	f000 80d1 	beq.w	8003f1c <_printf_i+0x1c4>
 8003d7a:	2f58      	cmp	r7, #88	@ 0x58
 8003d7c:	f000 80b8 	beq.w	8003ef0 <_printf_i+0x198>
 8003d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d88:	e03a      	b.n	8003e00 <_printf_i+0xa8>
 8003d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d8e:	2b15      	cmp	r3, #21
 8003d90:	d8f6      	bhi.n	8003d80 <_printf_i+0x28>
 8003d92:	a101      	add	r1, pc, #4	@ (adr r1, 8003d98 <_printf_i+0x40>)
 8003d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003d81 	.word	0x08003d81
 8003da4:	08003d81 	.word	0x08003d81
 8003da8:	08003d81 	.word	0x08003d81
 8003dac:	08003d81 	.word	0x08003d81
 8003db0:	08003e05 	.word	0x08003e05
 8003db4:	08003d81 	.word	0x08003d81
 8003db8:	08003d81 	.word	0x08003d81
 8003dbc:	08003d81 	.word	0x08003d81
 8003dc0:	08003d81 	.word	0x08003d81
 8003dc4:	08003f03 	.word	0x08003f03
 8003dc8:	08003e2f 	.word	0x08003e2f
 8003dcc:	08003ebd 	.word	0x08003ebd
 8003dd0:	08003d81 	.word	0x08003d81
 8003dd4:	08003d81 	.word	0x08003d81
 8003dd8:	08003f25 	.word	0x08003f25
 8003ddc:	08003d81 	.word	0x08003d81
 8003de0:	08003e2f 	.word	0x08003e2f
 8003de4:	08003d81 	.word	0x08003d81
 8003de8:	08003d81 	.word	0x08003d81
 8003dec:	08003ec5 	.word	0x08003ec5
 8003df0:	6833      	ldr	r3, [r6, #0]
 8003df2:	1d1a      	adds	r2, r3, #4
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6032      	str	r2, [r6, #0]
 8003df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e00:	2301      	movs	r3, #1
 8003e02:	e09c      	b.n	8003f3e <_printf_i+0x1e6>
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	6820      	ldr	r0, [r4, #0]
 8003e08:	1d19      	adds	r1, r3, #4
 8003e0a:	6031      	str	r1, [r6, #0]
 8003e0c:	0606      	lsls	r6, r0, #24
 8003e0e:	d501      	bpl.n	8003e14 <_printf_i+0xbc>
 8003e10:	681d      	ldr	r5, [r3, #0]
 8003e12:	e003      	b.n	8003e1c <_printf_i+0xc4>
 8003e14:	0645      	lsls	r5, r0, #25
 8003e16:	d5fb      	bpl.n	8003e10 <_printf_i+0xb8>
 8003e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e1c:	2d00      	cmp	r5, #0
 8003e1e:	da03      	bge.n	8003e28 <_printf_i+0xd0>
 8003e20:	232d      	movs	r3, #45	@ 0x2d
 8003e22:	426d      	negs	r5, r5
 8003e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e28:	230a      	movs	r3, #10
 8003e2a:	4858      	ldr	r0, [pc, #352]	@ (8003f8c <_printf_i+0x234>)
 8003e2c:	e011      	b.n	8003e52 <_printf_i+0xfa>
 8003e2e:	6821      	ldr	r1, [r4, #0]
 8003e30:	6833      	ldr	r3, [r6, #0]
 8003e32:	0608      	lsls	r0, r1, #24
 8003e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e38:	d402      	bmi.n	8003e40 <_printf_i+0xe8>
 8003e3a:	0649      	lsls	r1, r1, #25
 8003e3c:	bf48      	it	mi
 8003e3e:	b2ad      	uxthmi	r5, r5
 8003e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	bf14      	ite	ne
 8003e46:	230a      	movne	r3, #10
 8003e48:	2308      	moveq	r3, #8
 8003e4a:	4850      	ldr	r0, [pc, #320]	@ (8003f8c <_printf_i+0x234>)
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e52:	6866      	ldr	r6, [r4, #4]
 8003e54:	2e00      	cmp	r6, #0
 8003e56:	60a6      	str	r6, [r4, #8]
 8003e58:	db05      	blt.n	8003e66 <_printf_i+0x10e>
 8003e5a:	6821      	ldr	r1, [r4, #0]
 8003e5c:	432e      	orrs	r6, r5
 8003e5e:	f021 0104 	bic.w	r1, r1, #4
 8003e62:	6021      	str	r1, [r4, #0]
 8003e64:	d04b      	beq.n	8003efe <_printf_i+0x1a6>
 8003e66:	4616      	mov	r6, r2
 8003e68:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e6c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e70:	5dc7      	ldrb	r7, [r0, r7]
 8003e72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e76:	462f      	mov	r7, r5
 8003e78:	42bb      	cmp	r3, r7
 8003e7a:	460d      	mov	r5, r1
 8003e7c:	d9f4      	bls.n	8003e68 <_printf_i+0x110>
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d10b      	bne.n	8003e9a <_printf_i+0x142>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	07df      	lsls	r7, r3, #31
 8003e86:	d508      	bpl.n	8003e9a <_printf_i+0x142>
 8003e88:	6923      	ldr	r3, [r4, #16]
 8003e8a:	6861      	ldr	r1, [r4, #4]
 8003e8c:	4299      	cmp	r1, r3
 8003e8e:	bfde      	ittt	le
 8003e90:	2330      	movle	r3, #48	@ 0x30
 8003e92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e9a:	1b92      	subs	r2, r2, r6
 8003e9c:	6122      	str	r2, [r4, #16]
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	f8cd a000 	str.w	sl, [sp]
 8003ea8:	aa03      	add	r2, sp, #12
 8003eaa:	f7ff fee3 	bl	8003c74 <_printf_common>
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d14a      	bne.n	8003f48 <_printf_i+0x1f0>
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	b004      	add	sp, #16
 8003eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f043 0320 	orr.w	r3, r3, #32
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	2778      	movs	r7, #120	@ 0x78
 8003ec6:	4832      	ldr	r0, [pc, #200]	@ (8003f90 <_printf_i+0x238>)
 8003ec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	6831      	ldr	r1, [r6, #0]
 8003ed0:	061f      	lsls	r7, r3, #24
 8003ed2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ed6:	d402      	bmi.n	8003ede <_printf_i+0x186>
 8003ed8:	065f      	lsls	r7, r3, #25
 8003eda:	bf48      	it	mi
 8003edc:	b2ad      	uxthmi	r5, r5
 8003ede:	6031      	str	r1, [r6, #0]
 8003ee0:	07d9      	lsls	r1, r3, #31
 8003ee2:	bf44      	itt	mi
 8003ee4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ee8:	6023      	strmi	r3, [r4, #0]
 8003eea:	b11d      	cbz	r5, 8003ef4 <_printf_i+0x19c>
 8003eec:	2310      	movs	r3, #16
 8003eee:	e7ad      	b.n	8003e4c <_printf_i+0xf4>
 8003ef0:	4826      	ldr	r0, [pc, #152]	@ (8003f8c <_printf_i+0x234>)
 8003ef2:	e7e9      	b.n	8003ec8 <_printf_i+0x170>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	f023 0320 	bic.w	r3, r3, #32
 8003efa:	6023      	str	r3, [r4, #0]
 8003efc:	e7f6      	b.n	8003eec <_printf_i+0x194>
 8003efe:	4616      	mov	r6, r2
 8003f00:	e7bd      	b.n	8003e7e <_printf_i+0x126>
 8003f02:	6833      	ldr	r3, [r6, #0]
 8003f04:	6825      	ldr	r5, [r4, #0]
 8003f06:	1d18      	adds	r0, r3, #4
 8003f08:	6961      	ldr	r1, [r4, #20]
 8003f0a:	6030      	str	r0, [r6, #0]
 8003f0c:	062e      	lsls	r6, r5, #24
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	d501      	bpl.n	8003f16 <_printf_i+0x1be>
 8003f12:	6019      	str	r1, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <_printf_i+0x1c4>
 8003f16:	0668      	lsls	r0, r5, #25
 8003f18:	d5fb      	bpl.n	8003f12 <_printf_i+0x1ba>
 8003f1a:	8019      	strh	r1, [r3, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	4616      	mov	r6, r2
 8003f20:	6123      	str	r3, [r4, #16]
 8003f22:	e7bc      	b.n	8003e9e <_printf_i+0x146>
 8003f24:	6833      	ldr	r3, [r6, #0]
 8003f26:	2100      	movs	r1, #0
 8003f28:	1d1a      	adds	r2, r3, #4
 8003f2a:	6032      	str	r2, [r6, #0]
 8003f2c:	681e      	ldr	r6, [r3, #0]
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	4630      	mov	r0, r6
 8003f32:	f000 f859 	bl	8003fe8 <memchr>
 8003f36:	b108      	cbz	r0, 8003f3c <_printf_i+0x1e4>
 8003f38:	1b80      	subs	r0, r0, r6
 8003f3a:	6060      	str	r0, [r4, #4]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	6123      	str	r3, [r4, #16]
 8003f40:	2300      	movs	r3, #0
 8003f42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f46:	e7aa      	b.n	8003e9e <_printf_i+0x146>
 8003f48:	4632      	mov	r2, r6
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	47d0      	blx	sl
 8003f52:	3001      	adds	r0, #1
 8003f54:	d0ad      	beq.n	8003eb2 <_printf_i+0x15a>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	079b      	lsls	r3, r3, #30
 8003f5a:	d413      	bmi.n	8003f84 <_printf_i+0x22c>
 8003f5c:	68e0      	ldr	r0, [r4, #12]
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	4298      	cmp	r0, r3
 8003f62:	bfb8      	it	lt
 8003f64:	4618      	movlt	r0, r3
 8003f66:	e7a6      	b.n	8003eb6 <_printf_i+0x15e>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	4632      	mov	r2, r6
 8003f6c:	4649      	mov	r1, r9
 8003f6e:	4640      	mov	r0, r8
 8003f70:	47d0      	blx	sl
 8003f72:	3001      	adds	r0, #1
 8003f74:	d09d      	beq.n	8003eb2 <_printf_i+0x15a>
 8003f76:	3501      	adds	r5, #1
 8003f78:	68e3      	ldr	r3, [r4, #12]
 8003f7a:	9903      	ldr	r1, [sp, #12]
 8003f7c:	1a5b      	subs	r3, r3, r1
 8003f7e:	42ab      	cmp	r3, r5
 8003f80:	dcf2      	bgt.n	8003f68 <_printf_i+0x210>
 8003f82:	e7eb      	b.n	8003f5c <_printf_i+0x204>
 8003f84:	2500      	movs	r5, #0
 8003f86:	f104 0619 	add.w	r6, r4, #25
 8003f8a:	e7f5      	b.n	8003f78 <_printf_i+0x220>
 8003f8c:	080046d3 	.word	0x080046d3
 8003f90:	080046e4 	.word	0x080046e4

08003f94 <memmove>:
 8003f94:	4288      	cmp	r0, r1
 8003f96:	b510      	push	{r4, lr}
 8003f98:	eb01 0402 	add.w	r4, r1, r2
 8003f9c:	d902      	bls.n	8003fa4 <memmove+0x10>
 8003f9e:	4284      	cmp	r4, r0
 8003fa0:	4623      	mov	r3, r4
 8003fa2:	d807      	bhi.n	8003fb4 <memmove+0x20>
 8003fa4:	1e43      	subs	r3, r0, #1
 8003fa6:	42a1      	cmp	r1, r4
 8003fa8:	d008      	beq.n	8003fbc <memmove+0x28>
 8003faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fb2:	e7f8      	b.n	8003fa6 <memmove+0x12>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4402      	add	r2, r0
 8003fb8:	428a      	cmp	r2, r1
 8003fba:	d100      	bne.n	8003fbe <memmove+0x2a>
 8003fbc:	bd10      	pop	{r4, pc}
 8003fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fc6:	e7f7      	b.n	8003fb8 <memmove+0x24>

08003fc8 <_sbrk_r>:
 8003fc8:	b538      	push	{r3, r4, r5, lr}
 8003fca:	2300      	movs	r3, #0
 8003fcc:	4d05      	ldr	r5, [pc, #20]	@ (8003fe4 <_sbrk_r+0x1c>)
 8003fce:	4604      	mov	r4, r0
 8003fd0:	4608      	mov	r0, r1
 8003fd2:	602b      	str	r3, [r5, #0]
 8003fd4:	f7fc ff28 	bl	8000e28 <_sbrk>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_sbrk_r+0x1a>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_sbrk_r+0x1a>
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	20000728 	.word	0x20000728

08003fe8 <memchr>:
 8003fe8:	4603      	mov	r3, r0
 8003fea:	b510      	push	{r4, lr}
 8003fec:	b2c9      	uxtb	r1, r1
 8003fee:	4402      	add	r2, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	d101      	bne.n	8003ffa <memchr+0x12>
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	e003      	b.n	8004002 <memchr+0x1a>
 8003ffa:	7804      	ldrb	r4, [r0, #0]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	428c      	cmp	r4, r1
 8004000:	d1f6      	bne.n	8003ff0 <memchr+0x8>
 8004002:	bd10      	pop	{r4, pc}

08004004 <_realloc_r>:
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004008:	4607      	mov	r7, r0
 800400a:	4614      	mov	r4, r2
 800400c:	460d      	mov	r5, r1
 800400e:	b921      	cbnz	r1, 800401a <_realloc_r+0x16>
 8004010:	4611      	mov	r1, r2
 8004012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004016:	f7ff bc49 	b.w	80038ac <_malloc_r>
 800401a:	b92a      	cbnz	r2, 8004028 <_realloc_r+0x24>
 800401c:	f7ff fbdc 	bl	80037d8 <_free_r>
 8004020:	4625      	mov	r5, r4
 8004022:	4628      	mov	r0, r5
 8004024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004028:	f000 f81a 	bl	8004060 <_malloc_usable_size_r>
 800402c:	4284      	cmp	r4, r0
 800402e:	4606      	mov	r6, r0
 8004030:	d802      	bhi.n	8004038 <_realloc_r+0x34>
 8004032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004036:	d8f4      	bhi.n	8004022 <_realloc_r+0x1e>
 8004038:	4621      	mov	r1, r4
 800403a:	4638      	mov	r0, r7
 800403c:	f7ff fc36 	bl	80038ac <_malloc_r>
 8004040:	4680      	mov	r8, r0
 8004042:	b908      	cbnz	r0, 8004048 <_realloc_r+0x44>
 8004044:	4645      	mov	r5, r8
 8004046:	e7ec      	b.n	8004022 <_realloc_r+0x1e>
 8004048:	42b4      	cmp	r4, r6
 800404a:	4622      	mov	r2, r4
 800404c:	4629      	mov	r1, r5
 800404e:	bf28      	it	cs
 8004050:	4632      	movcs	r2, r6
 8004052:	f7ff fbb3 	bl	80037bc <memcpy>
 8004056:	4629      	mov	r1, r5
 8004058:	4638      	mov	r0, r7
 800405a:	f7ff fbbd 	bl	80037d8 <_free_r>
 800405e:	e7f1      	b.n	8004044 <_realloc_r+0x40>

08004060 <_malloc_usable_size_r>:
 8004060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004064:	1f18      	subs	r0, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	bfbc      	itt	lt
 800406a:	580b      	ldrlt	r3, [r1, r0]
 800406c:	18c0      	addlt	r0, r0, r3
 800406e:	4770      	bx	lr

08004070 <_init>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	bf00      	nop
 8004074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004076:	bc08      	pop	{r3}
 8004078:	469e      	mov	lr, r3
 800407a:	4770      	bx	lr

0800407c <_fini>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr
